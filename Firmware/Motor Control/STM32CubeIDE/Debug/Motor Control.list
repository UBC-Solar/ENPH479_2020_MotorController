
Motor Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c374  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c8  0800c7c8  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7d0  0800c7d0  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7d0  0800c7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7d4  0800c7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800c7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000760  0800cf38  00020760  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  0800cf38  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001ec9a  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00034390  00000000  00000000  0003f42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000514f  00000000  00000000  000737ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a90  00000000  00000000  00078910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ebc1c  00000000  00000000  0007a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001828  00000000  00000000  00165fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00029f13  00000000  00000000  001677e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  001916fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  001917f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000760 	.word	0x20000760
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800c520 	.word	0x0800c520

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000764 	.word	0x20000764
 8000200:	0800c520 	.word	0x0800c520

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800050a:	e003      	b.n	8000514 <LoopCopyDataInit>

0800050c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000512:	3104      	adds	r1, #4

08000514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800051c:	d3f6      	bcc.n	800050c <CopyDataInit>
  ldr  r2, =_sbss
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000520:	e002      	b.n	8000528 <LoopFillZerobss>

08000522 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000522:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000524:	f842 3b04 	str.w	r3, [r2], #4

08000528 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800052c:	d3f9      	bcc.n	8000522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052e:	f004 fce3 	bl	8004ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f00b ffc9 	bl	800c4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f000 f80e 	bl	8000556 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000540:	0800c7d8 	.word	0x0800c7d8
  ldr  r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000548:	20000760 	.word	0x20000760
  ldr  r2, =_sbss
 800054c:	20000760 	.word	0x20000760
  ldr  r3, = _ebss
 8000550:	20000adc 	.word	0x20000adc

08000554 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <BusFault_Handler>

08000556 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f004 fce3 	bl	8004f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f811 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fb13 	bl	8000b8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000566:	f000 f8ab 	bl	80006c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800056a:	f000 f935 	bl	80007d8 <MX_ADC2_Init>
  MX_TIM1_Init();
 800056e:	f000 f9ad 	bl	80008cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000572:	f000 fa7b 	bl	8000a6c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000576:	f000 fadf 	bl	8000b38 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 800057a:	f002 fc01 	bl	8002d80 <MX_MotorControl_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800057e:	f000 f873 	bl	8000668 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0x2c>

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2234      	movs	r2, #52	; 0x34
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00b ffbc 	bl	800c510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <SystemClock_Config+0xdc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <SystemClock_Config+0xdc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <SystemClock_Config+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a25      	ldr	r2, [pc, #148]	; (8000664 <SystemClock_Config+0xe0>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xe0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f8:	23b4      	movs	r3, #180	; 0xb4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4618      	mov	r0, r3
 800060e:	f005 febd 	bl	800638c <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000618:	f000 fafc 	bl	8000c14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800061c:	f005 fbac 	bl	8005d78 <HAL_PWREx_EnableOverDrive>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000626:	f000 faf5 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f005 fbe5 	bl	8005e18 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000654:	f000 fade 	bl	8000c14 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2102      	movs	r1, #2
 8000670:	2012      	movs	r0, #18
 8000672:	f005 f9ac 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000676:	2012      	movs	r0, #18
 8000678:	f005 f9c5 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2019      	movs	r0, #25
 8000682:	f005 f9a4 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000686:	2019      	movs	r0, #25
 8000688:	f005 f9bd 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	2104      	movs	r1, #4
 8000690:	2018      	movs	r0, #24
 8000692:	f005 f99c 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000696:	2018      	movs	r0, #24
 8000698:	f005 f9b5 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2103      	movs	r1, #3
 80006a0:	201c      	movs	r0, #28
 80006a2:	f005 f994 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006a6:	201c      	movs	r0, #28
 80006a8:	f005 f9ad 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2103      	movs	r1, #3
 80006b0:	2026      	movs	r0, #38	; 0x26
 80006b2:	f005 f98c 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006b6:	2026      	movs	r0, #38	; 0x26
 80006b8:	f005 f9a5 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2220      	movs	r2, #32
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00b ff1e 	bl	800c510 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e0:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <MX_ADC1_Init+0x10c>)
 80006e2:	4a3b      	ldr	r2, [pc, #236]	; (80007d0 <MX_ADC1_Init+0x110>)
 80006e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <MX_ADC1_Init+0x10c>)
 80006e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <MX_ADC1_Init+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006f4:	4b35      	ldr	r3, [pc, #212]	; (80007cc <MX_ADC1_Init+0x10c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <MX_ADC1_Init+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b30      	ldr	r3, [pc, #192]	; (80007cc <MX_ADC1_Init+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000710:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <MX_ADC1_Init+0x114>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_ADC1_Init+0x10c>)
 800071e:	2202      	movs	r2, #2
 8000720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_ADC1_Init+0x10c>)
 800072c:	2201      	movs	r2, #1
 800072e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000730:	4826      	ldr	r0, [pc, #152]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000732:	f004 fc69 	bl	8005008 <HAL_ADC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800073c:	f000 fa6a 	bl	8000c14 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000740:	2305      	movs	r3, #5
 8000742:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedRank = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedOffset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4816      	ldr	r0, [pc, #88]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000772:	f004 febb 	bl	80054ec <HAL_ADCEx_InjectedConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800077c:	f000 fa4a 	bl	8000c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000780:	230f      	movs	r3, #15
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000788:	2302      	movs	r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
  sConfig.Offset = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000796:	f004 fc7b 	bl	8005090 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007a0:	f000 fa38 	bl	8000c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007a4:	230e      	movs	r3, #14
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x10c>)
 80007b6:	f004 fc6b 	bl	8005090 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80007c0:	f000 fa28 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200007f4 	.word	0x200007f4
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00b fe92 	bl	800c510 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007f8:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_ADC2_Init+0xe8>)
 80007fa:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <MX_ADC2_Init+0xec>)
 80007fc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000800:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000804:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_ADC2_Init+0xe8>)
 800080e:	2201      	movs	r2, #1
 8000810:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_ADC2_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000828:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <MX_ADC2_Init+0xf0>)
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_ADC2_Init+0xe8>)
 800082e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000832:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_ADC2_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_ADC2_Init+0xe8>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <MX_ADC2_Init+0xe8>)
 800084a:	f004 fbdd 	bl	8005008 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000854:	f000 f9de 	bl	8000c14 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000858:	2306      	movs	r3, #6
 800085a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedRank = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000868:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedOffset = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_ADC2_Init+0xe8>)
 800088a:	f004 fe2f 	bl	80054ec <HAL_ADCEx_InjectedConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC2_Init+0xc0>
  {
    Error_Handler();
 8000894:	f000 f9be 	bl	8000c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000898:	2306      	movs	r3, #6
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_ADC2_Init+0xe8>)
 80008aa:	f004 fbf1 	bl	8005090 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC2_Init+0xe0>
  {
    Error_Handler();
 80008b4:	f000 f9ae 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3730      	adds	r7, #48	; 0x30
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200007ac 	.word	0x200007ac
 80008c4:	40012100 	.word	0x40012100
 80008c8:	0f000001 	.word	0x0f000001

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00b fe02 	bl	800c510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090c:	4b55      	ldr	r3, [pc, #340]	; (8000a64 <MX_TIM1_Init+0x198>)
 800090e:	4a56      	ldr	r2, [pc, #344]	; (8000a68 <MX_TIM1_Init+0x19c>)
 8000910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000912:	4b54      	ldr	r3, [pc, #336]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000918:	4b52      	ldr	r3, [pc, #328]	; (8000a64 <MX_TIM1_Init+0x198>)
 800091a:	2220      	movs	r2, #32
 800091c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800091e:	4b51      	ldr	r3, [pc, #324]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000920:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800092e:	4b4d      	ldr	r3, [pc, #308]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000930:	2201      	movs	r2, #1
 8000932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093a:	484a      	ldr	r0, [pc, #296]	; (8000a64 <MX_TIM1_Init+0x198>)
 800093c:	f005 ff80 	bl	8006840 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000946:	f000 f965 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800094a:	4846      	ldr	r0, [pc, #280]	; (8000a64 <MX_TIM1_Init+0x198>)
 800094c:	f005 ffa3 	bl	8006896 <HAL_TIM_PWM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000956:	f000 f95d 	bl	8000c14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800095a:	2306      	movs	r3, #6
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800095e:	2310      	movs	r3, #16
 8000960:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000962:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000966:	4619      	mov	r1, r3
 8000968:	483e      	ldr	r0, [pc, #248]	; (8000a64 <MX_TIM1_Init+0x198>)
 800096a:	f006 f946 	bl	8006bfa <HAL_TIM_SlaveConfigSynchro>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000974:	f000 f94e 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000978:	2320      	movs	r3, #32
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000984:	4619      	mov	r1, r3
 8000986:	4837      	ldr	r0, [pc, #220]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000988:	f006 fdfe 	bl	8007588 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000992:	f000 f93f 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000996:	2360      	movs	r3, #96	; 0x60
 8000998:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	482a      	ldr	r0, [pc, #168]	; (8000a64 <MX_TIM1_Init+0x198>)
 80009bc:	f005 ffa0 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009c6:	f000 f925 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2204      	movs	r2, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4824      	ldr	r0, [pc, #144]	; (8000a64 <MX_TIM1_Init+0x198>)
 80009d4:	f005 ff94 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80009de:	f000 f919 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2208      	movs	r2, #8
 80009e8:	4619      	mov	r1, r3
 80009ea:	481e      	ldr	r0, [pc, #120]	; (8000a64 <MX_TIM1_Init+0x198>)
 80009ec:	f005 ff88 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80009f6:	f000 f90d 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009fa:	2370      	movs	r3, #112	; 0x70
 80009fc:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009fe:	f241 53f8 	movw	r3, #5624	; 0x15f8
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	220c      	movs	r2, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000a0e:	f005 ff77 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000a18:	f000 f8fc 	bl	8000c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a20:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a2e:	2316      	movs	r3, #22
 8000a30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000a46:	f006 fe1b 	bl	8007680 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000a50:	f000 f8e0 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM1_Init+0x198>)
 8000a56:	f002 fd41 	bl	80034dc <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3758      	adds	r7, #88	; 0x58
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000083c 	.word	0x2000083c
 8000a68:	40010000 	.word	0x40010000

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000ac0:	f005 febe 	bl	8006840 <HAL_TIM_Base_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000aca:	f000 f8a3 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4816      	ldr	r0, [pc, #88]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000adc:	f005 ffd6 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ae6:	f000 f895 	bl	8000c14 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000af2:	230c      	movs	r3, #12
 8000af4:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000b02:	f006 fca1 	bl	8007448 <HAL_TIMEx_HallSensor_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000b0c:	f000 f882 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000b10:	2350      	movs	r3, #80	; 0x50
 8000b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM2_Init+0xc8>)
 8000b1e:	f006 fd33 	bl	8007588 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000b28:	f000 f874 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000087c 	.word	0x2000087c

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f006 fdd8 	bl	8007724 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f84b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200008bc 	.word	0x200008bc
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_GPIO_Init+0x84>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <Error_Handler+0x6>

08000c1c <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2200      	movs	r2, #0
 8000c52:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	761a      	strb	r2, [r3, #24]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	807b      	strh	r3, [r7, #2]
 8000c72:	4613      	mov	r3, r2
 8000c74:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	883a      	ldrh	r2, [r7, #0]
 8000c86:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	765a      	strb	r2, [r3, #25]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
 8000cac:	4613      	mov	r3, r2
 8000cae:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	887a      	ldrh	r2, [r7, #2]
 8000cba:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	883a      	ldrh	r2, [r7, #0]
 8000cc0:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	765a      	strb	r2, [r3, #25]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000cea:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 8000cf2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	765a      	strb	r2, [r3, #25]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2103      	movs	r1, #3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00a f9cb 	bl	800b0bc <STM_NextState>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f00a f9b4 	bl	800b0bc <STM_NextState>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00a fb52 	bl	800b414 <STM_FaultAcknowledged>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00a f997 	bl	800b0bc <STM_NextState>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d057      	beq.n	8000e56 <MCI_ExecBufferedCommands+0xbe>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7e1b      	ldrb	r3, [r3, #24]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d153      	bne.n	8000e56 <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7b1b      	ldrb	r3, [r3, #12]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d01c      	beq.n	8000df4 <MCI_ExecBufferedCommands+0x5c>
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d032      	beq.n	8000e24 <MCI_ExecBufferedCommands+0x8c>
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d000      	beq.n	8000dc4 <MCI_ExecBufferedCommands+0x2c>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 8000dc2:	e03e      	b.n	8000e42 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f009 ffe5 	bl	800ada4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6858      	ldr	r0, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	8adb      	ldrh	r3, [r3, #22]
 8000de8:	461a      	mov	r2, r3
 8000dea:	f009 ffed 	bl	800adc8 <STC_ExecRamp>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]
        break;
 8000df2:	e026      	b.n	8000e42 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f009 ffcd 	bl	800ada4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6858      	ldr	r0, [r3, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	8adb      	ldrh	r3, [r3, #22]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f009 ffd5 	bl	800adc8 <STC_ExecRamp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]
        break;
 8000e22:	e00e      	b.n	8000e42 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	3310      	adds	r3, #16
 8000e36:	3212      	adds	r2, #18
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8000e40:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000e4e:	e002      	b.n	8000e56 <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	761a      	strb	r2, [r3, #24]
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a fac6 	bl	800b3fc <STM_GetState>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7e5b      	ldrb	r3, [r3, #25]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	81fb      	strh	r3, [r7, #14]

  switch ( pHandle->lastCommand )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7b1b      	ldrb	r3, [r3, #12]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d00d      	beq.n	8000ec2 <MCI_GetImposedMotorDirection+0x30>
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d014      	beq.n	8000ed4 <MCI_GetImposedMotorDirection+0x42>
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d000      	beq.n	8000eb0 <MCI_GetImposedMotorDirection+0x1e>
      {
        retVal = -1;
      }
      break;
    default:
      break;
 8000eae:	e01f      	b.n	8000ef0 <MCI_GetImposedMotorDirection+0x5e>
      if ( pHandle->hFinalSpeed < 0 )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	da15      	bge.n	8000ee6 <MCI_GetImposedMotorDirection+0x54>
        retVal = -1;
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	81fb      	strh	r3, [r7, #14]
      break;
 8000ec0:	e011      	b.n	8000ee6 <MCI_GetImposedMotorDirection+0x54>
      if ( pHandle->hFinalTorque < 0 )
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da0e      	bge.n	8000eea <MCI_GetImposedMotorDirection+0x58>
        retVal = -1;
 8000ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed0:	81fb      	strh	r3, [r7, #14]
      break;
 8000ed2:	e00a      	b.n	8000eea <MCI_GetImposedMotorDirection+0x58>
      if ( pHandle->Iqdref.q < 0 )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da07      	bge.n	8000eee <MCI_GetImposedMotorDirection+0x5c>
        retVal = -1;
 8000ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee2:	81fb      	strh	r3, [r7, #14]
      break;
 8000ee4:	e003      	b.n	8000eee <MCI_GetImposedMotorDirection+0x5c>
      break;
 8000ee6:	bf00      	nop
 8000ee8:	e002      	b.n	8000ef0 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8000eee:	bf00      	nop
  }
  return retVal;
 8000ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d102      	bne.n	8000f1a <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	89db      	ldrh	r3, [r3, #14]
 8000f18:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 8000f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 ffe2 	bl	800af00 <STC_StopRamp>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 fee3 	bl	800ad1c <STC_GetSpeedSensor>
 8000f56:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f009 fe03 	bl	800ab64 <SPD_GetAvrgMecSpeedUnit>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f009 feef 	bl	800ad58 <STC_GetMecSpeedRefUnit>
 8000f7a:	4603      	mov	r3, r0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	6810      	ldr	r0, [r2, #0]
 8000f96:	6018      	str	r0, [r3, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	89ba      	ldrh	r2, [r7, #12]
 8000f9c:	f362 030f 	bfi	r3, r2, #0, #16
 8000fa0:	89fa      	ldrh	r2, [r7, #14]
 8000fa2:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	3204      	adds	r2, #4
 8000fc4:	6810      	ldr	r0, [r2, #0]
 8000fc6:	6018      	str	r0, [r3, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	89ba      	ldrh	r2, [r7, #12]
 8000fcc:	f362 030f 	bfi	r3, r2, #0, #16
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	320c      	adds	r2, #12
 8000ff4:	6810      	ldr	r0, [r2, #0]
 8000ff6:	6018      	str	r0, [r3, #0]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	89ba      	ldrh	r2, [r7, #12]
 8000ffc:	f362 030f 	bfi	r3, r2, #0, #16
 8001000:	89fa      	ldrh	r2, [r7, #14]
 8001002:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	3210      	adds	r2, #16
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	6018      	str	r0, [r3, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	89ba      	ldrh	r2, [r7, #12]
 800102c:	f362 030f 	bfi	r3, r2, #0, #16
 8001030:	89fa      	ldrh	r2, [r7, #14]
 8001032:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	3216      	adds	r2, #22
 8001054:	6810      	ldr	r0, [r2, #0]
 8001056:	6018      	str	r0, [r3, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	89ba      	ldrh	r2, [r7, #12]
 800105c:	f362 030f 	bfi	r3, r2, #0, #16
 8001060:	89fa      	ldrh	r2, [r7, #14]
 8001062:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	321a      	adds	r2, #26
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	89ba      	ldrh	r2, [r7, #12]
 800108c:	f362 030f 	bfi	r3, r2, #0, #16
 8001090:	89fa      	ldrh	r2, [r7, #14]
 8001092:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	829a      	strh	r2, [r3, #20]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80010e6:	b590      	push	{r4, r7, lr}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689c      	ldr	r4, [r3, #8]
 80010f6:	4610      	mov	r0, r2
 80010f8:	f009 ffa0 	bl	800b03c <STC_GetDefaultIqdref>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	8222      	strh	r2, [r4, #16]
 8001102:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001106:	8263      	strh	r3, [r4, #18]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 8001118:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800111c:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800111e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001122:	461a      	mov	r2, r3
 8001124:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001128:	fb03 f302 	mul.w	r3, r3, r2
 800112c:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	461a      	mov	r2, r3
 8001134:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001138:	fb03 f302 	mul.w	r3, r3, r2
 800113c:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	425a      	negs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	13db      	asrs	r3, r3, #15
 800114c:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001154:	db03      	blt.n	800115e <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 8001156:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800115a:	83fb      	strh	r3, [r7, #30]
 800115c:	e009      	b.n	8001172 <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001164:	da03      	bge.n	800116e <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 8001166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116a:	83fb      	strh	r3, [r7, #30]
 800116c:	e001      	b.n	8001172 <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 8001172:	8bfb      	ldrh	r3, [r7, #30]
 8001174:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 8001176:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800117a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800117e:	d102      	bne.n	8001186 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 8001180:	f248 0301 	movw	r3, #32769	; 0x8001
 8001184:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	2300      	movs	r3, #0
 800118c:	89ba      	ldrh	r2, [r7, #12]
 800118e:	f362 030f 	bfi	r3, r2, #0, #16
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001198:	4618      	mov	r0, r3
 800119a:	3724      	adds	r7, #36	; 0x24
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80011b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f8af 	bl	8001318 <MCM_Trig_Functions>
 80011ba:	4603      	mov	r3, r0
 80011bc:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 80011be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 80011cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 80011da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	13db      	asrs	r3, r3, #15
 80011e2:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ea:	db03      	blt.n	80011f4 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 80011ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80011f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80011f2:	e009      	b.n	8001208 <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80011fa:	da03      	bge.n	8001204 <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 80011fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001200:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001202:	e001      	b.n	8001208 <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8001208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800120a:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 800120c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001210:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001214:	d102      	bne.n	800121c <MCM_Park+0x78>
  {
    Output.q = -32767;
 8001216:	f248 0301 	movw	r3, #32769	; 0x8001
 800121a:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 800121c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001220:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4413      	add	r3, r2
 800123e:	13db      	asrs	r3, r3, #15
 8001240:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001248:	db03      	blt.n	8001252 <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 800124a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800124e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001250:	e009      	b.n	8001266 <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001258:	da03      	bge.n	8001262 <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 800125a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001260:	e001      	b.n	8001266 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 8001266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001268:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 800126a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800126e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001272:	d102      	bne.n	800127a <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8001274:	f248 0301 	movw	r3, #32769	; 0x8001
 8001278:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	2300      	movs	r3, #0
 8001280:	8aba      	ldrh	r2, [r7, #20]
 8001282:	f362 030f 	bfi	r3, r2, #0, #16
 8001286:	8afa      	ldrh	r2, [r7, #22]
 8001288:	f362 431f 	bfi	r3, r2, #16, #16
}
 800128c:	4618      	mov	r0, r3
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80012a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f837 	bl	8001318 <MCM_Trig_Functions>
 80012aa:	4603      	mov	r3, r0
 80012ac:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 80012ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80012bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80012ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	4413      	add	r3, r2
 80012d0:	13db      	asrs	r3, r3, #15
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 80012d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80012e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	13db      	asrs	r3, r3, #15
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	2300      	movs	r3, #0
 8001304:	8aba      	ldrh	r2, [r7, #20]
 8001306:	f362 030f 	bfi	r3, r2, #0, #16
 800130a:	8afa      	ldrh	r2, [r7, #22]
 800130c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001310:	4618      	mov	r0, r3
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800132a:	617b      	str	r3, [r7, #20]
  uhindex = ( uint16_t )shindex;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	827b      	strh	r3, [r7, #18]
  uhindex /= ( uint16_t )64;
 8001330:	8a7b      	ldrh	r3, [r7, #18]
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	827b      	strh	r3, [r7, #18]

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001336:	8a7b      	ldrh	r3, [r7, #18]
 8001338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800133c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001340:	d04b      	beq.n	80013da <MCM_Trig_Functions+0xc2>
 8001342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001346:	d802      	bhi.n	800134e <MCM_Trig_Functions+0x36>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d02d      	beq.n	80013a8 <MCM_Trig_Functions+0x90>
    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
 800134c:	e05a      	b.n	8001404 <MCM_Trig_Functions+0xec>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800134e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001352:	d003      	beq.n	800135c <MCM_Trig_Functions+0x44>
 8001354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001358:	d011      	beq.n	800137e <MCM_Trig_Functions+0x66>
      break;
 800135a:	e053      	b.n	8001404 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800135c:	8a7b      	ldrh	r3, [r7, #18]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <MCM_Trig_Functions+0x10c>)
 8001364:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001368:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800136a:	8a7b      	ldrh	r3, [r7, #18]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MCM_Trig_Functions+0x10c>)
 8001376:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800137a:	813b      	strh	r3, [r7, #8]
      break;
 800137c:	e042      	b.n	8001404 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800137e:	8a7b      	ldrh	r3, [r7, #18]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MCM_Trig_Functions+0x10c>)
 800138a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800138e:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001390:	8a7b      	ldrh	r3, [r7, #18]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MCM_Trig_Functions+0x10c>)
 8001398:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800139c:	b29b      	uxth	r3, r3
 800139e:	425b      	negs	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	813b      	strh	r3, [r7, #8]
      break;
 80013a6:	e02d      	b.n	8001404 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013a8:	8a7b      	ldrh	r3, [r7, #18]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MCM_Trig_Functions+0x10c>)
 80013b0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	425b      	negs	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013be:	8a7b      	ldrh	r3, [r7, #18]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MCM_Trig_Functions+0x10c>)
 80013ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	425b      	negs	r3, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	813b      	strh	r3, [r7, #8]
      break;
 80013d8:	e014      	b.n	8001404 <MCM_Trig_Functions+0xec>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013da:	8a7b      	ldrh	r3, [r7, #18]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MCM_Trig_Functions+0x10c>)
 80013e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	425b      	negs	r3, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80013f4:	8a7b      	ldrh	r3, [r7, #18]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MCM_Trig_Functions+0x10c>)
 80013fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001400:	813b      	strh	r3, [r7, #8]
      break;
 8001402:	bf00      	nop
  }
  return ( Local_Components );
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	2300      	movs	r3, #0
 800140a:	89ba      	ldrh	r2, [r7, #12]
 800140c:	f362 030f 	bfi	r3, r2, #0, #16
 8001410:	89fa      	ldrh	r2, [r7, #14]
 8001412:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001416:	4618      	mov	r0, r3
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	0800c538 	.word	0x0800c538

08001428 <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	60fb      	str	r3, [r7, #12]
  (void) temp;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b087      	sub	sp, #28
 8001464:	af02      	add	r7, sp, #8
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 800146a:	4878      	ldr	r0, [pc, #480]	; (800164c <MCboot+0x1ec>)
 800146c:	f009 fe12 	bl	800b094 <STM_Init>

  bMCBootCompleted = 0;
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <MCboot+0x1f0>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <MCboot+0x1f4>)
 8001478:	4a77      	ldr	r2, [pc, #476]	; (8001658 <MCboot+0x1f8>)
 800147a:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800147c:	4b77      	ldr	r3, [pc, #476]	; (800165c <MCboot+0x1fc>)
 800147e:	4a78      	ldr	r2, [pc, #480]	; (8001660 <MCboot+0x200>)
 8001480:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8001482:	4877      	ldr	r0, [pc, #476]	; (8001660 <MCboot+0x200>)
 8001484:	f007 ff8a 	bl	800939c <ICS_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();
 8001488:	f008 fe9c 	bl	800a1c4 <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 800148c:	4875      	ldr	r0, [pc, #468]	; (8001664 <MCboot+0x204>)
 800148e:	f008 fc6f 	bl	8009d70 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001492:	4b75      	ldr	r3, [pc, #468]	; (8001668 <MCboot+0x208>)
 8001494:	4a73      	ldr	r2, [pc, #460]	; (8001664 <MCboot+0x204>)
 8001496:	601a      	str	r2, [r3, #0]

  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001498:	4b74      	ldr	r3, [pc, #464]	; (800166c <MCboot+0x20c>)
 800149a:	4a75      	ldr	r2, [pc, #468]	; (8001670 <MCboot+0x210>)
 800149c:	601a      	str	r2, [r3, #0]
  STO_PLL_Init (&STO_PLL_M1);
 800149e:	4875      	ldr	r0, [pc, #468]	; (8001674 <MCboot+0x214>)
 80014a0:	f00a ff18 	bl	800c2d4 <STO_PLL_Init>

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 80014a4:	4b71      	ldr	r3, [pc, #452]	; (800166c <MCboot+0x20c>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <MCboot+0x208>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a71      	ldr	r2, [pc, #452]	; (8001674 <MCboot+0x214>)
 80014ae:	4619      	mov	r1, r3
 80014b0:	f009 fbfa 	bl	800aca8 <STC_Init>

  /******************************************************/
  /*   Auxiliary speed sensor component initialization  */
  /******************************************************/
  HALL_Init (&HALL_M1);
 80014b4:	4870      	ldr	r0, [pc, #448]	; (8001678 <MCboot+0x218>)
 80014b6:	f006 ff17 	bl	80082e8 <HALL_Init>

  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/
  VSS_Init (&VirtualSpeedSensorM1);
 80014ba:	4870      	ldr	r0, [pc, #448]	; (800167c <MCboot+0x21c>)
 80014bc:	f00a f9c4 	bl	800b848 <VSS_Init>

  /**************************************/
  /*   Rev-up component initialization  */
  /**************************************/
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <MCboot+0x20c>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	4b65      	ldr	r3, [pc, #404]	; (800165c <MCboot+0x1fc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <MCboot+0x220>)
 80014cc:	4a6b      	ldr	r2, [pc, #428]	; (800167c <MCboot+0x21c>)
 80014ce:	486d      	ldr	r0, [pc, #436]	; (8001684 <MCboot+0x224>)
 80014d0:	f00a fc28 	bl	800bd24 <RUC_Init>

  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 80014d4:	486c      	ldr	r0, [pc, #432]	; (8001688 <MCboot+0x228>)
 80014d6:	f008 fc4b 	bl	8009d70 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80014da:	486c      	ldr	r0, [pc, #432]	; (800168c <MCboot+0x22c>)
 80014dc:	f008 fc48 	bl	8009d70 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <MCboot+0x230>)
 80014e2:	4a69      	ldr	r2, [pc, #420]	; (8001688 <MCboot+0x228>)
 80014e4:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <MCboot+0x234>)
 80014e8:	4a68      	ldr	r2, [pc, #416]	; (800168c <MCboot+0x22c>)
 80014ea:	601a      	str	r2, [r3, #0]

  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <MCboot+0x238>)
 80014ee:	4a6b      	ldr	r2, [pc, #428]	; (800169c <MCboot+0x23c>)
 80014f0:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 80014f2:	4b69      	ldr	r3, [pc, #420]	; (8001698 <MCboot+0x238>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 f946 	bl	800a788 <RVBS_Init>

  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <MCboot+0x240>)
 80014fe:	4a69      	ldr	r2, [pc, #420]	; (80016a4 <MCboot+0x244>)
 8001500:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001502:	4b65      	ldr	r3, [pc, #404]	; (8001698 <MCboot+0x238>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b66      	ldr	r3, [pc, #408]	; (80016a0 <MCboot+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800150e:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <MCboot+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <MCboot+0x248>)
 8001514:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);
 8001518:	4864      	ldr	r0, [pc, #400]	; (80016ac <MCboot+0x24c>)
 800151a:	f008 fb8a 	bl	8009c32 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800151e:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <MCboot+0x250>)
 8001520:	4a62      	ldr	r2, [pc, #392]	; (80016ac <MCboot+0x24c>)
 8001522:	601a      	str	r2, [r3, #0]

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001524:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <MCboot+0x254>)
 8001526:	4a64      	ldr	r2, [pc, #400]	; (80016b8 <MCboot+0x258>)
 8001528:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <MCboot+0x254>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f009 f9ef 	bl	800a912 <REMNG_Init>

  FOC_Clear(M1);
 8001534:	2000      	movs	r0, #0
 8001536:	f000 fae7 	bl	8001b08 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800153a:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <MCboot+0x248>)
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <MCboot+0x20c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4c58      	ldr	r4, [pc, #352]	; (80016a8 <MCboot+0x248>)
 8001548:	4618      	mov	r0, r3
 800154a:	f009 fd77 	bl	800b03c <STC_GetDefaultIqdref>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	8222      	strh	r2, [r4, #16]
 8001554:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001558:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <MCboot+0x20c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f009 fd6c 	bl	800b03c <STC_GetDefaultIqdref>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800156c:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <MCboot+0x248>)
 800156e:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <MCboot+0x25c>)
 8001572:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <MCboot+0x260>)
 8001574:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001576:	4b51      	ldr	r3, [pc, #324]	; (80016bc <MCboot+0x25c>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <MCboot+0x20c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <MCboot+0x248>)
 8001580:	4932      	ldr	r1, [pc, #200]	; (800164c <MCboot+0x1ec>)
 8001582:	f7ff fb4b 	bl	8000c1c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001586:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <MCboot+0x25c>)
 8001588:	681c      	ldr	r4, [r3, #0]
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <MCboot+0x20c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f009 fd2e 	bl	800aff0 <STC_GetMecSpeedRefUnitDefault>
 8001594:	4603      	mov	r3, r0
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fb63 	bl	8000c66 <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <MCboot+0x25c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <MCboot+0x208>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <MCboot+0x264>)
 80015ae:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MCboot+0x230>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a43      	ldr	r2, [pc, #268]	; (80016c4 <MCboot+0x264>)
 80015b6:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 80015b8:	4b36      	ldr	r3, [pc, #216]	; (8001694 <MCboot+0x234>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a41      	ldr	r2, [pc, #260]	; (80016c4 <MCboot+0x264>)
 80015be:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80015c0:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <MCboot+0x264>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <MCboot+0x1fc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a3e      	ldr	r2, [pc, #248]	; (80016c4 <MCboot+0x264>)
 80015cc:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <MCboot+0x264>)
 80015d0:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <MCboot+0x224>)
 80015d2:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80015d4:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <MCboot+0x264>)
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <MCboot+0x214>)
 80015d8:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <MCboot+0x264>)
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <MCboot+0x218>)
 80015de:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <MCboot+0x264>)
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <MCboot+0x21c>)
 80015e4:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <MCboot+0x20c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a36      	ldr	r2, [pc, #216]	; (80016c4 <MCboot+0x264>)
 80015ec:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 80015ee:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <MCboot+0x264>)
 80015f0:	4a16      	ldr	r2, [pc, #88]	; (800164c <MCboot+0x1ec>)
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <MCboot+0x250>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <MCboot+0x264>)
 80015fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MCboot+0x238>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <MCboot+0x264>)
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <MCboot+0x264>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <MCboot+0x264>)
 800160e:	2200      	movs	r2, #0
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MCboot+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <MCboot+0x264>)
 8001618:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <MCboot+0x264>)
 800161c:	2200      	movs	r2, #0
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <MCboot+0x264>)
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <MCboot+0x264>)
 8001628:	2200      	movs	r2, #0
 800162a:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <MCboot+0x264>)
 800162e:	2200      	movs	r2, #0
 8001630:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <MCboot+0x264>)
 8001634:	2200      	movs	r2, #0
 8001636:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <MCboot+0x264>)
 800163c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <MCboot+0x1f0>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	200009cc 	.word	0x200009cc
 8001650:	2000079a 	.word	0x2000079a
 8001654:	200009a8 	.word	0x200009a8
 8001658:	2000055c 	.word	0x2000055c
 800165c:	20000918 	.word	0x20000918
 8001660:	20000244 	.word	0x20000244
 8001664:	20000114 	.word	0x20000114
 8001668:	2000091c 	.word	0x2000091c
 800166c:	200009e0 	.word	0x200009e0
 8001670:	20000198 	.word	0x20000198
 8001674:	200002f0 	.word	0x200002f0
 8001678:	2000042c 	.word	0x2000042c
 800167c:	200002b8 	.word	0x200002b8
 8001680:	20000418 	.word	0x20000418
 8001684:	200001cc 	.word	0x200001cc
 8001688:	20000140 	.word	0x20000140
 800168c:	2000016c 	.word	0x2000016c
 8001690:	20000920 	.word	0x20000920
 8001694:	200009dc 	.word	0x200009dc
 8001698:	200009ac 	.word	0x200009ac
 800169c:	2000051c 	.word	0x2000051c
 80016a0:	200009d8 	.word	0x200009d8
 80016a4:	20000000 	.word	0x20000000
 80016a8:	2000092c 	.word	0x2000092c
 80016ac:	200004f4 	.word	0x200004f4
 80016b0:	20000914 	.word	0x20000914
 80016b4:	200009d4 	.word	0x200009d4
 80016b8:	20000544 	.word	0x20000544
 80016bc:	20000924 	.word	0x20000924
 80016c0:	200009b0 	.word	0x200009b0
 80016c4:	20000954 	.word	0x20000954

080016c8 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task.
 */
__weak void MC_RunMotorControlTasks(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <MC_RunMotorControlTasks+0x1c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 80016d4:	f000 f808 	bl	80016e8 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 80016d8:	f000 fc5e 	bl	8001f98 <TSK_SafetyTask>

    /* ** User Interface Task ** */
    UI_Scheduler();
 80016dc:	f002 f9d0 	bl	8003a80 <UI_Scheduler>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000079a 	.word	0x2000079a

080016e8 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance.
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MC_Scheduler+0x64>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d129      	bne.n	8001748 <MC_Scheduler+0x60>
  {
    if(hMFTaskCounterM1 > 0u)
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MC_Scheduler+0x68>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MC_Scheduler+0x68>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MC_Scheduler+0x68>)
 800170a:	801a      	strh	r2, [r3, #0]
 800170c:	e004      	b.n	8001718 <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 800170e:	f000 f825 	bl	800175c <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MC_Scheduler+0x68>)
 8001714:	2201      	movs	r2, #1
 8001716:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MC_Scheduler+0x6c>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MC_Scheduler+0x6c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MC_Scheduler+0x6c>)
 800172e:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MC_Scheduler+0x70>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <MC_Scheduler+0x70>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <MC_Scheduler+0x70>)
 8001746:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000079a 	.word	0x2000079a
 8001750:	20000794 	.word	0x20000794
 8001754:	20000796 	.word	0x20000796
 8001758:	20000798 	.word	0x20000798

0800175c <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic
  * execution at a medium frequency rate (such as the speed controller for instance)
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	827b      	strh	r3, [r7, #18]

  (void) HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001766:	f107 0312 	add.w	r3, r7, #18
 800176a:	4619      	mov	r1, r3
 800176c:	48c6      	ldr	r0, [pc, #792]	; (8001a88 <TSK_MediumFrequencyTaskM1+0x32c>)
 800176e:	f006 ff2a 	bl	80085c6 <HALL_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001772:	f107 0312 	add.w	r3, r7, #18
 8001776:	4619      	mov	r1, r3
 8001778:	48c4      	ldr	r0, [pc, #784]	; (8001a8c <TSK_MediumFrequencyTaskM1+0x330>)
 800177a:	f00a fcb3 	bl	800c0e4 <STO_PLL_CalcAvrgMecSpeedUnit>
 800177e:	4603      	mov	r3, r0
 8001780:	75bb      	strb	r3, [r7, #22]
  PQD_CalcElMotorPower( pMPM[M1] );
 8001782:	4bc3      	ldr	r3, [pc, #780]	; (8001a90 <TSK_MediumFrequencyTaskM1+0x334>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f008 fc1e 	bl	8009fc8 <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 800178c:	48c1      	ldr	r0, [pc, #772]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 800178e:	f009 fe35 	bl	800b3fc <STM_GetState>
 8001792:	4603      	mov	r3, r0
 8001794:	757b      	strb	r3, [r7, #21]

  switch ( StateM1 )
 8001796:	7d7b      	ldrb	r3, [r7, #21]
 8001798:	3b03      	subs	r3, #3
 800179a:	2b10      	cmp	r3, #16
 800179c:	f200 819a 	bhi.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x378>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <TSK_MediumFrequencyTaskM1+0x4c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017ed 	.word	0x080017ed
 80017ac:	0800189d 	.word	0x0800189d
 80017b0:	080019eb 	.word	0x080019eb
 80017b4:	08001a21 	.word	0x08001a21
 80017b8:	08001a49 	.word	0x08001a49
 80017bc:	08001a75 	.word	0x08001a75
 80017c0:	08001ab9 	.word	0x08001ab9
 80017c4:	08001ad5 	.word	0x08001ad5
 80017c8:	08001ad5 	.word	0x08001ad5
 80017cc:	08001ad5 	.word	0x08001ad5
 80017d0:	08001ad5 	.word	0x08001ad5
 80017d4:	08001ad5 	.word	0x08001ad5
 80017d8:	08001ad5 	.word	0x08001ad5
 80017dc:	0800181b 	.word	0x0800181b
 80017e0:	0800183d 	.word	0x0800183d
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	0800196f 	.word	0x0800196f
  {
  case IDLE_START:
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80017ec:	4baa      	ldr	r3, [pc, #680]	; (8001a98 <TSK_MediumFrequencyTaskM1+0x33c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fb4e 	bl	8000e92 <MCI_GetImposedMotorDirection>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4619      	mov	r1, r3
 80017fa:	48a8      	ldr	r0, [pc, #672]	; (8001a9c <TSK_MediumFrequencyTaskM1+0x340>)
 80017fc:	f00a fad0 	bl	800bda0 <RUC_Clear>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <TSK_MediumFrequencyTaskM1+0x344>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f007 ff7b 	bl	8009700 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800180a:	2014      	movs	r0, #20
 800180c:	f000 fa5a 	bl	8001cc4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001810:	2110      	movs	r1, #16
 8001812:	48a0      	ldr	r0, [pc, #640]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001814:	f009 fc52 	bl	800b0bc <STM_NextState>
    break;
 8001818:	e16b      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800181a:	f000 fa63 	bl	8001ce4 <TSK_ChargeBootCapDelayHasElapsedM1>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8159 	beq.w	8001ad8 <TSK_MediumFrequencyTaskM1+0x37c>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001826:	4b9e      	ldr	r3, [pc, #632]	; (8001aa0 <TSK_MediumFrequencyTaskM1+0x344>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f008 ff5b 	bl	800a6e8 <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001832:	2111      	movs	r1, #17
 8001834:	4897      	ldr	r0, [pc, #604]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001836:	f009 fc41 	bl	800b0bc <STM_NextState>
    }
    break;
 800183a:	e14d      	b.n	8001ad8 <TSK_MediumFrequencyTaskM1+0x37c>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800183c:	4b98      	ldr	r3, [pc, #608]	; (8001aa0 <TSK_MediumFrequencyTaskM1+0x344>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	4618      	mov	r0, r3
 8001844:	f008 ff50 	bl	800a6e8 <PWMC_CurrentReadingCalibr>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8146 	beq.w	8001adc <TSK_MediumFrequencyTaskM1+0x380>
    {
      STM_NextState( &STM[M1], CLEAR );
 8001850:	2112      	movs	r1, #18
 8001852:	4890      	ldr	r0, [pc, #576]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001854:	f009 fc32 	bl	800b0bc <STM_NextState>
    }
    break;
 8001858:	e140      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x380>

  case CLEAR:
    /* In a sensorless configuration. Initiate the Revup procedure */
    FOCVars[M1].bDriveInput = EXTERNAL;
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <TSK_MediumFrequencyTaskM1+0x348>)
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001862:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4991      	ldr	r1, [pc, #580]	; (8001aac <TSK_MediumFrequencyTaskM1+0x350>)
 8001868:	4618      	mov	r0, r3
 800186a:	f009 fa49 	bl	800ad00 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 800186e:	4887      	ldr	r0, [pc, #540]	; (8001a8c <TSK_MediumFrequencyTaskM1+0x330>)
 8001870:	f00a fd02 	bl	800c278 <STO_PLL_Clear>
    HALL_Clear( &HALL_M1 );
 8001874:	4884      	ldr	r0, [pc, #528]	; (8001a88 <TSK_MediumFrequencyTaskM1+0x32c>)
 8001876:	f006 fe11 	bl	800849c <HALL_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 800187a:	2104      	movs	r1, #4
 800187c:	4885      	ldr	r0, [pc, #532]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 800187e:	f009 fc1d 	bl	800b0bc <STM_NextState>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 812b 	beq.w	8001ae0 <TSK_MediumFrequencyTaskM1+0x384>
    {
      FOC_Clear( M1 );
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f93c 	bl	8001b08 <FOC_Clear>

      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8001890:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <TSK_MediumFrequencyTaskM1+0x344>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f007 ff81 	bl	800979c <ICS_SwitchOnPWM>
    }
    break;
 800189a:	e121      	b.n	8001ae0 <TSK_MediumFrequencyTaskM1+0x384>
    {

      /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
      int16_t hForcedMecSpeedUnit;
      qd_t IqdRef;
      bool ObserverConverged = false;
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]

      /* Execute the Rev Up procedure */
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80018a0:	487e      	ldr	r0, [pc, #504]	; (8001a9c <TSK_MediumFrequencyTaskM1+0x340>)
 80018a2:	f00a fac5 	bl	800be30 <RUC_Exec>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f083 0301 	eor.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <TSK_MediumFrequencyTaskM1+0x162>
      {
        /* The time allowed for the startup sequence has expired */
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80018b2:	2200      	movs	r2, #0
 80018b4:	2110      	movs	r1, #16
 80018b6:	4877      	ldr	r0, [pc, #476]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 80018b8:	f009 fd62 	bl	800b380 <STM_FaultProcessing>
 80018bc:	e010      	b.n	80018e0 <TSK_MediumFrequencyTaskM1+0x184>
      }
      else
      {
        /* Execute the torque open loop current start-up ramp:
         * Compute the Iq reference current as configured in the Rev Up sequence */
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <TSK_MediumFrequencyTaskM1+0x34c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f009 fb2c 	bl	800af20 <STC_CalcTorqueReference>
 80018c8:	4603      	mov	r3, r0
 80018ca:	81bb      	strh	r3, [r7, #12]
        IqdRef.d = FOCVars[M1].UserIdref;
 80018cc:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <TSK_MediumFrequencyTaskM1+0x348>)
 80018ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018d2:	81fb      	strh	r3, [r7, #14]
        /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
        FOCVars[M1].Iqdref = IqdRef;
 80018d4:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <TSK_MediumFrequencyTaskM1+0x348>)
 80018d6:	3310      	adds	r3, #16
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	6810      	ldr	r0, [r2, #0]
 80018de:	6018      	str	r0, [r3, #0]
      }

      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4871      	ldr	r0, [pc, #452]	; (8001aac <TSK_MediumFrequencyTaskM1+0x350>)
 80018e8:	f00a f8af 	bl	800ba4a <VSS_CalcAvrgMecSpeedUnit>

      /* check that startup stage where the observer has to be used has been reached */
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80018ec:	486b      	ldr	r0, [pc, #428]	; (8001a9c <TSK_MediumFrequencyTaskM1+0x340>)
 80018ee:	f00a fad9 	bl	800bea4 <RUC_FirstAccelerationStageReached>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00c      	beq.n	8001912 <TSK_MediumFrequencyTaskM1+0x1b6>
      {
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80018f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4863      	ldr	r0, [pc, #396]	; (8001a8c <TSK_MediumFrequencyTaskM1+0x330>)
 8001900:	f00a fd22 	bl	800c348 <STO_PLL_IsObserverConverged>
 8001904:	4603      	mov	r3, r0
 8001906:	75fb      	strb	r3, [r7, #23]
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	4619      	mov	r1, r3
 800190c:	4867      	ldr	r0, [pc, #412]	; (8001aac <TSK_MediumFrequencyTaskM1+0x350>)
 800190e:	f00a f9d7 	bl	800bcc0 <VSS_SetStartTransition>
      }

      if ( ObserverConverged )
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80e5 	beq.w	8001ae4 <TSK_MediumFrequencyTaskM1+0x388>
      {
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800191a:	485c      	ldr	r0, [pc, #368]	; (8001a8c <TSK_MediumFrequencyTaskM1+0x330>)
 800191c:	f009 f915 	bl	800ab4a <SPD_GetElAngle>
 8001920:	4603      	mov	r3, r0
 8001922:	4619      	mov	r1, r3
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <TSK_MediumFrequencyTaskM1+0x348>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	461a      	mov	r2, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fc39 	bl	80011a4 <MCM_Park>
 8001932:	4603      	mov	r3, r0
 8001934:	60bb      	str	r3, [r7, #8]

        /* Start switch over ramp. This ramp will transition from the revup to the closed loop FOC. */
        REMNG_Init( pREMNG[M1] );
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <TSK_MediumFrequencyTaskM1+0x354>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f008 ffe9 	bl	800a912 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <TSK_MediumFrequencyTaskM1+0x354>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <TSK_MediumFrequencyTaskM1+0x348>)
 8001946:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	f009 f82f 	bl	800a9b0 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <TSK_MediumFrequencyTaskM1+0x354>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800195a:	4611      	mov	r1, r2
 800195c:	2200      	movs	r2, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f009 f826 	bl	800a9b0 <REMNG_ExecRamp>

        STM_NextState( &STM[M1], SWITCH_OVER );
 8001964:	2113      	movs	r1, #19
 8001966:	484b      	ldr	r0, [pc, #300]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001968:	f009 fba8 	bl	800b0bc <STM_NextState>
      }
    }
    break;
 800196c:	e0ba      	b.n	8001ae4 <TSK_MediumFrequencyTaskM1+0x388>
  case SWITCH_OVER:
    {
      bool LoopClosed;
      int16_t hForcedMecSpeedUnit;

      if( ! RUC_Exec( &RevUpControlM1 ) )
 800196e:	484b      	ldr	r0, [pc, #300]	; (8001a9c <TSK_MediumFrequencyTaskM1+0x340>)
 8001970:	f00a fa5e 	bl	800be30 <RUC_Exec>
 8001974:	4603      	mov	r3, r0
 8001976:	f083 0301 	eor.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <TSK_MediumFrequencyTaskM1+0x230>
      {
          /* The time allowed for the startup sequence has expired */
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001980:	2200      	movs	r2, #0
 8001982:	2110      	movs	r1, #16
 8001984:	4843      	ldr	r0, [pc, #268]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001986:	f009 fcfb 	bl	800b380 <STM_FaultProcessing>
          STM_NextState( &STM[M1], START_RUN );
        }
      }
    }

    break;
 800198a:	e0ad      	b.n	8001ae8 <TSK_MediumFrequencyTaskM1+0x38c>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 800198c:	1dbb      	adds	r3, r7, #6
 800198e:	4619      	mov	r1, r3
 8001990:	4846      	ldr	r0, [pc, #280]	; (8001aac <TSK_MediumFrequencyTaskM1+0x350>)
 8001992:	f00a f85a 	bl	800ba4a <VSS_CalcAvrgMecSpeedUnit>
 8001996:	4603      	mov	r3, r0
 8001998:	753b      	strb	r3, [r7, #20]
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 800199a:	4844      	ldr	r0, [pc, #272]	; (8001aac <TSK_MediumFrequencyTaskM1+0x350>)
 800199c:	f00a f9b4 	bl	800bd08 <VSS_TransitionEnded>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	7d3b      	ldrb	r3, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	753b      	strb	r3, [r7, #20]
        if ( LoopClosed == true )
 80019b4:	7d3b      	ldrb	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8096 	beq.w	8001ae8 <TSK_MediumFrequencyTaskM1+0x38c>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80019bc:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <TSK_MediumFrequencyTaskM1+0x358>)
 80019be:	681c      	ldr	r4, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <TSK_MediumFrequencyTaskM1+0x348>)
 80019c2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019c6:	461d      	mov	r5, r3
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <TSK_MediumFrequencyTaskM1+0x358>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f008 fa40 	bl	8009e52 <PID_GetKIDivisor>
 80019d2:	4603      	mov	r3, r0
 80019d4:	fb03 f305 	mul.w	r3, r3, r5
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80019d8:	4619      	mov	r1, r3
 80019da:	4620      	mov	r0, r4
 80019dc:	f008 fa1f 	bl	8009e1e <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80019e0:	2105      	movs	r1, #5
 80019e2:	482c      	ldr	r0, [pc, #176]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 80019e4:	f009 fb6a 	bl	800b0bc <STM_NextState>
    break;
 80019e8:	e07e      	b.n	8001ae8 <TSK_MediumFrequencyTaskM1+0x38c>

  case START_RUN:
 /* only for sensor-less control */
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <TSK_MediumFrequencyTaskM1+0x34c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4927      	ldr	r1, [pc, #156]	; (8001a8c <TSK_MediumFrequencyTaskM1+0x330>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f009 f985 	bl	800ad00 <STC_SetSpeedSensor>
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */
	  FOC_InitAdditionalMethods(M1);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f91c 	bl	8001c34 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 f925 	bl	8001c4c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001a02:	2106      	movs	r1, #6
 8001a04:	4823      	ldr	r0, [pc, #140]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001a06:	f009 fb59 	bl	800b0bc <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f009 fb2f 	bl	800b072 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <TSK_MediumFrequencyTaskM1+0x33c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9bd 	bl	8000d98 <MCI_ExecBufferedCommands>

    break;
 8001a1e:	e068      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <TSK_MediumFrequencyTaskM1+0x33c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f9b7 	bl	8000d98 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f90e 	bl	8001c4c <FOC_CalcCurrRef>

    if( !IsSpeedReliable )
 8001a30:	7dbb      	ldrb	r3, [r7, #22]
 8001a32:	f083 0301 	eor.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d057      	beq.n	8001aec <TSK_MediumFrequencyTaskM1+0x390>
    {
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2120      	movs	r1, #32
 8001a40:	4814      	ldr	r0, [pc, #80]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001a42:	f009 fc9d 	bl	800b380 <STM_FaultProcessing>
    }

    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 8001a46:	e051      	b.n	8001aec <TSK_MediumFrequencyTaskM1+0x390>

  case ANY_STOP:
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <TSK_MediumFrequencyTaskM1+0x344>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f007 ff3a 	bl	80098c6 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f858 	bl	8001b08 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <TSK_MediumFrequencyTaskM1+0x334>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f008 f850 	bl	8009b02 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001a62:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a66:	f000 f953 	bl	8001d10 <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4809      	ldr	r0, [pc, #36]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001a6e:	f009 fb25 	bl	800b0bc <STM_NextState>
    break;
 8001a72:	e03e      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001a74:	f000 f95c 	bl	8001d30 <TSK_StopPermanencyTimeHasElapsedM1>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <TSK_MediumFrequencyTaskM1+0x394>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 8001a7e:	2109      	movs	r1, #9
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <TSK_MediumFrequencyTaskM1+0x338>)
 8001a82:	f009 fb1b 	bl	800b0bc <STM_NextState>
    }
    break;
 8001a86:	e033      	b.n	8001af0 <TSK_MediumFrequencyTaskM1+0x394>
 8001a88:	2000042c 	.word	0x2000042c
 8001a8c:	200002f0 	.word	0x200002f0
 8001a90:	200009d8 	.word	0x200009d8
 8001a94:	200009cc 	.word	0x200009cc
 8001a98:	20000924 	.word	0x20000924
 8001a9c:	200001cc 	.word	0x200001cc
 8001aa0:	20000918 	.word	0x20000918
 8001aa4:	2000092c 	.word	0x2000092c
 8001aa8:	200009e0 	.word	0x200009e0
 8001aac:	200002b8 	.word	0x200002b8
 8001ab0:	200009d4 	.word	0x200009d4
 8001ab4:	2000091c 	.word	0x2000091c

  case STOP_IDLE:
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <TSK_MediumFrequencyTaskM1+0x3a0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4910      	ldr	r1, [pc, #64]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x3a4>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f009 f91e 	bl	800ad00 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <TSK_MediumFrequencyTaskM1+0x3a4>)
 8001ac6:	f009 feca 	bl	800b85e <VSS_Clear>

    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 8001aca:	2100      	movs	r1, #0
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <TSK_MediumFrequencyTaskM1+0x3a8>)
 8001ace:	f009 faf5 	bl	800b0bc <STM_NextState>
    break;
 8001ad2:	e00e      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>

  default:
    break;
 8001ad4:	bf00      	nop
 8001ad6:	e00c      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001ad8:	bf00      	nop
 8001ada:	e00a      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001adc:	bf00      	nop
 8001ade:	e008      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001ae0:	bf00      	nop
 8001ae2:	e006      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001ae4:	bf00      	nop
 8001ae6:	e004      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001ae8:	bf00      	nop
 8001aea:	e002      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <TSK_MediumFrequencyTaskM1+0x396>
    break;
 8001af0:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200009e0 	.word	0x200009e0
 8001b00:	200002b8 	.word	0x200002b8
 8001b04:	200009cc 	.word	0x200009cc

08001b08 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 8001b12:	2300      	movs	r3, #0
 8001b14:	82bb      	strh	r3, [r7, #20]
 8001b16:	2300      	movs	r3, #0
 8001b18:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	823b      	strh	r3, [r7, #16]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 8001b22:	2300      	movs	r3, #0
 8001b24:	81bb      	strh	r3, [r7, #12]
 8001b26:	2300      	movs	r3, #0
 8001b28:	81fb      	strh	r3, [r7, #14]

  FOCVars[bMotor].Iab = NULL_ab;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	4a3c      	ldr	r2, [pc, #240]	; (8001c20 <FOC_Clear+0x118>)
 8001b2e:	2126      	movs	r1, #38	; 0x26
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4a37      	ldr	r2, [pc, #220]	; (8001c20 <FOC_Clear+0x118>)
 8001b44:	2126      	movs	r1, #38	; 0x26
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <FOC_Clear+0x118>)
 8001b5c:	2126      	movs	r1, #38	; 0x26
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	330c      	adds	r3, #12
 8001b66:	461a      	mov	r2, r3
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <FOC_Clear+0x118>)
 8001b74:	2126      	movs	r1, #38	; 0x26
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3310      	adds	r3, #16
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <FOC_Clear+0x118>)
 8001b8c:	2126      	movs	r1, #38	; 0x26
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	331e      	adds	r3, #30
 8001b96:	2200      	movs	r2, #0
 8001b98:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <FOC_Clear+0x118>)
 8001b9e:	2126      	movs	r1, #38	; 0x26
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	3306      	adds	r3, #6
 8001baa:	f107 0210 	add.w	r2, r7, #16
 8001bae:	6810      	ldr	r0, [r2, #0]
 8001bb0:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <FOC_Clear+0x118>)
 8001bb6:	2126      	movs	r1, #38	; 0x26
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	6810      	ldr	r0, [r2, #0]
 8001bc8:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <FOC_Clear+0x118>)
 8001bce:	2126      	movs	r1, #38	; 0x26
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3320      	adds	r3, #32
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <FOC_Clear+0x11c>)
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 f919 	bl	8009e1e <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <FOC_Clear+0x120>)
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f008 f911 	bl	8009e1e <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <FOC_Clear+0x124>)
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f009 f895 	bl	800ad34 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <FOC_Clear+0x128>)
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 fd5c 	bl	800a6d0 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000092c 	.word	0x2000092c
 8001c24:	20000920 	.word	0x20000920
 8001c28:	200009dc 	.word	0x200009dc
 8001c2c:	200009e0 	.word	0x200009e0
 8001c30:	20000918 	.word	0x20000918

08001c34 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <FOC_CalcCurrRef+0x70>)
 8001c5a:	2126      	movs	r1, #38	; 0x26
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3324      	adds	r3, #36	; 0x24
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d123      	bne.n	8001cb2 <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <FOC_CalcCurrRef+0x74>)
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	79fc      	ldrb	r4, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f009 f953 	bl	800af20 <STC_CalcTorqueReference>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <FOC_CalcCurrRef+0x70>)
 8001c80:	2326      	movs	r3, #38	; 0x26
 8001c82:	fb03 f304 	mul.w	r3, r3, r4
 8001c86:	4413      	add	r3, r2
 8001c88:	331e      	adds	r3, #30
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001c8e:	79fa      	ldrb	r2, [r7, #7]
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <FOC_CalcCurrRef+0x70>)
 8001c94:	2026      	movs	r0, #38	; 0x26
 8001c96:	fb00 f202 	mul.w	r2, r0, r2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	321e      	adds	r2, #30
 8001c9e:	f9b2 0000 	ldrsh.w	r0, [r2]
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <FOC_CalcCurrRef+0x70>)
 8001ca4:	2126      	movs	r1, #38	; 0x26
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3310      	adds	r3, #16
 8001cae:	4602      	mov	r2, r0
 8001cb0:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000092c 	.word	0x2000092c
 8001cc0:	200009e0 	.word	0x200009e0

08001cc4 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <TSK_SetChargeBootCapDelayM1+0x1c>)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	8013      	strh	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	20000796 	.word	0x20000796

08001ce4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  bool retVal = false;
 8001cea:	2300      	movs	r3, #0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000796 	.word	0x20000796

08001d10 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <TSK_SetStopPermanencyTimeM1+0x1c>)
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	8013      	strh	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	20000798 	.word	0x20000798

08001d30 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
  bool retVal = false;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8001d44:	2301      	movs	r3, #1
 8001d46:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8001d48:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000798 	.word	0x20000798

08001d5c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
  uint16_t hFOCreturn;

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  HALL_CalcElAngle (&HALL_M1);
 8001d66:	4836      	ldr	r0, [pc, #216]	; (8001e40 <TSK_HighFrequencyTask+0xe4>)
 8001d68:	f006 fbe4 	bl	8008534 <HALL_CalcElAngle>

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001d6c:	4a35      	ldr	r2, [pc, #212]	; (8001e44 <TSK_HighFrequencyTask+0xe8>)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	321a      	adds	r2, #26
 8001d72:	6810      	ldr	r0, [r2, #0]
 8001d74:	6018      	str	r0, [r3, #0]
  if ( STM[M1].bState == SWITCH_OVER )
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <TSK_HighFrequencyTask+0xec>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b13      	cmp	r3, #19
 8001d7c:	d113      	bne.n	8001da6 <TSK_HighFrequencyTask+0x4a>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <TSK_HighFrequencyTask+0xf0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f008 fe9e 	bl	800aac4 <REMNG_RampCompleted>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <TSK_HighFrequencyTask+0x4a>
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <TSK_HighFrequencyTask+0xf0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f008 fdd3 	bl	800a944 <REMNG_Calc>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <TSK_HighFrequencyTask+0xe8>)
 8001da4:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8001da6:	f000 f85b 	bl	8001e60 <FOC_CurrControllerM1>
 8001daa:	4603      	mov	r3, r0
 8001dac:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8001dae:	8abb      	ldrh	r3, [r7, #20]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <TSK_HighFrequencyTask+0x64>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2101      	movs	r1, #1
 8001db8:	4823      	ldr	r0, [pc, #140]	; (8001e48 <TSK_HighFrequencyTask+0xec>)
 8001dba:	f009 fae1 	bl	800b380 <STM_FaultProcessing>
 8001dbe:	e03a      	b.n	8001e36 <TSK_HighFrequencyTask+0xda>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001dc0:	4823      	ldr	r0, [pc, #140]	; (8001e50 <TSK_HighFrequencyTask+0xf4>)
 8001dc2:	f00a f86f 	bl	800bea4 <RUC_FirstAccelerationStageReached>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <TSK_HighFrequencyTask+0xe8>)
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	3204      	adds	r2, #4
 8001dd2:	6810      	ldr	r0, [r2, #0]
 8001dd4:	6018      	str	r0, [r3, #0]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <TSK_HighFrequencyTask+0xf8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f006 f86c 	bl	8007eb8 <VBS_GetAvBusVoltage_d>
 8001de0:	4603      	mov	r3, r0
 8001de2:	81bb      	strh	r3, [r7, #12]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	481b      	ldr	r0, [pc, #108]	; (8001e58 <TSK_HighFrequencyTask+0xfc>)
 8001dea:	f00a f891 	bl	800bf10 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001dee:	481a      	ldr	r0, [pc, #104]	; (8001e58 <TSK_HighFrequencyTask+0xfc>)
 8001df0:	f00a fa18 	bl	800c224 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <TSK_HighFrequencyTask+0xaa>
    {
      STO_ResetPLL(&STO_PLL_M1);
 8001e00:	4815      	ldr	r0, [pc, #84]	; (8001e58 <TSK_HighFrequencyTask+0xfc>)
 8001e02:	f00a fb45 	bl	800c490 <STO_ResetPLL>
    }
    hState = STM_GetState(&STM[M1]);
 8001e06:	4810      	ldr	r0, [pc, #64]	; (8001e48 <TSK_HighFrequencyTask+0xec>)
 8001e08:	f009 faf8 	bl	800b3fc <STM_GetState>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	823b      	strh	r3, [r7, #16]
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001e10:	8a3b      	ldrh	r3, [r7, #16]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d005      	beq.n	8001e22 <TSK_HighFrequencyTask+0xc6>
 8001e16:	8a3b      	ldrh	r3, [r7, #16]
 8001e18:	2b13      	cmp	r3, #19
 8001e1a:	d002      	beq.n	8001e22 <TSK_HighFrequencyTask+0xc6>
 8001e1c:	8a3b      	ldrh	r3, [r7, #16]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d109      	bne.n	8001e36 <TSK_HighFrequencyTask+0xda>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <TSK_HighFrequencyTask+0xfc>)
 8001e24:	f008 fe91 	bl	800ab4a <SPD_GetElAngle>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	807b      	strh	r3, [r7, #2]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001e2c:	1cbb      	adds	r3, r7, #2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <TSK_HighFrequencyTask+0x100>)
 8001e32:	f009 fd54 	bl	800b8de <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000042c 	.word	0x2000042c
 8001e44:	2000092c 	.word	0x2000092c
 8001e48:	200009cc 	.word	0x200009cc
 8001e4c:	200009d4 	.word	0x200009d4
 8001e50:	200001cc 	.word	0x200001cc
 8001e54:	200009ac 	.word	0x200009ac
 8001e58:	200002f0 	.word	0x200002f0
 8001e5c:	200002b8 	.word	0x200002b8

08001e60 <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <FOC_CurrControllerM1+0x120>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f008 ff56 	bl	800ad1c <STC_GetSpeedSensor>
 8001e70:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 8001e72:	69f8      	ldr	r0, [r7, #28]
 8001e74:	f008 fe69 	bl	800ab4a <SPD_GetElAngle>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001e7c:	69f8      	ldr	r0, [r7, #28]
 8001e7e:	f008 fe7e 	bl	800ab7e <SPD_GetInstElSpeedDpp>
 8001e82:	2300      	movs	r3, #0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	8b7b      	ldrh	r3, [r7, #26]
 8001e88:	4413      	add	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <FOC_CurrControllerM1+0x124>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f107 020c 	add.w	r2, r7, #12
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f008 fa02 	bl	800a2a2 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff f936 	bl	8001110 <MCM_Clarke>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001ea8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001eac:	4619      	mov	r1, r3
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f7ff f978 	bl	80011a4 <MCM_Park>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001eb8:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <FOC_CurrControllerM1+0x128>)
 8001eba:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ebc:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001ebe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001ec8:	1acb      	subs	r3, r1, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f007 ffe9 	bl	8009ea4 <PI_Controller>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <FOC_CurrControllerM1+0x130>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001edc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001ee6:	1acb      	subs	r3, r1, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f007 ffda 	bl	8009ea4 <PI_Controller>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	827b      	strh	r3, [r7, #18]

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <FOC_CurrControllerM1+0x134>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6939      	ldr	r1, [r7, #16]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 f801 	bl	8007f02 <Circle_Limitation>
 8001f00:	4603      	mov	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001f04:	69f8      	ldr	r0, [r7, #28]
 8001f06:	f008 fe3a 	bl	800ab7e <SPD_GetInstElSpeedDpp>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	8b7b      	ldrh	r3, [r7, #26]
 8001f10:	4413      	add	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001f16:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6938      	ldr	r0, [r7, #16]
 8001f1e:	f7ff f9b9 	bl	8001294 <MCM_Rev_Park>
 8001f22:	4603      	mov	r3, r0
 8001f24:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <FOC_CurrControllerM1+0x124>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f008 f9c6 	bl	800a2be <PWMC_SetPhaseVoltage>
 8001f32:	4603      	mov	r3, r0
 8001f34:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001f38:	3316      	adds	r3, #22
 8001f3a:	f107 0210 	add.w	r2, r7, #16
 8001f3e:	6810      	ldr	r0, [r2, #0]
 8001f40:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001f44:	461a      	mov	r2, r3
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001f50:	3304      	adds	r3, #4
 8001f52:	f107 0208 	add.w	r2, r7, #8
 8001f56:	6810      	ldr	r0, [r2, #0]
 8001f58:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	f107 0214 	add.w	r2, r7, #20
 8001f62:	6810      	ldr	r0, [r2, #0]
 8001f64:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001f68:	331a      	adds	r3, #26
 8001f6a:	1d3a      	adds	r2, r7, #4
 8001f6c:	6810      	ldr	r0, [r2, #0]
 8001f6e:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <FOC_CurrControllerM1+0x12c>)
 8001f72:	8b7b      	ldrh	r3, [r7, #26]
 8001f74:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 8001f76:	8b3b      	ldrh	r3, [r7, #24]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200009e0 	.word	0x200009e0
 8001f84:	20000918 	.word	0x20000918
 8001f88:	20000920 	.word	0x20000920
 8001f8c:	2000092c 	.word	0x2000092c
 8001f90:	200009dc 	.word	0x200009dc
 8001f94:	200009a8 	.word	0x200009a8

08001f98 <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <TSK_SafetyTask+0x1c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d104      	bne.n	8001fae <TSK_SafetyTask+0x16>
  {
    TSK_SafetyTask_PWMOFF(M1);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 f807 	bl	8001fb8 <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 8001faa:	f001 f927 	bl	80031fc <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000079a 	.word	0x2000079a

08001fb8 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 8001fc6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001fca:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	f107 0210 	add.w	r2, r7, #16
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <TSK_SafetyTask_PWMOFF+0x104>)
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 fe53 	bl	8009c8e <NTC_CalcAvTemp>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4023      	ands	r3, r4
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <TSK_SafetyTask_PWMOFF+0x108>)
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	4618      	mov	r0, r3
 8002004:	f008 fbb3 	bl	800a76e <PWMC_CheckOverCurrent>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	4313      	orrs	r3, r2
 8002010:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d114      	bne.n	8002042 <TSK_SafetyTask_PWMOFF+0x8a>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	f107 0210 	add.w	r2, r7, #16
 8002020:	4413      	add	r3, r2
 8002022:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <TSK_SafetyTask_PWMOFF+0x10c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fbef 	bl	800a80e <RVBS_CalcAvVbus>
 8002030:	4603      	mov	r3, r0
 8002032:	4023      	ands	r3, r4
 8002034:	b29b      	uxth	r3, r3
 8002036:	b21a      	sxth	r2, r3
 8002038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800203c:	4313      	orrs	r3, r2
 800203e:	b21b      	sxth	r3, r3
 8002040:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <TSK_SafetyTask_PWMOFF+0x110>)
 800204e:	1898      	adds	r0, r3, r2
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	43db      	mvns	r3, r3
 8002054:	b29a      	uxth	r2, r3
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	4619      	mov	r1, r3
 800205a:	f009 f991 	bl	800b380 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <TSK_SafetyTask_PWMOFF+0x110>)
 800206a:	4413      	add	r3, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f009 f9c5 	bl	800b3fc <STM_GetState>
 8002072:	4603      	mov	r3, r0
 8002074:	2b0a      	cmp	r3, #10
 8002076:	d002      	beq.n	800207e <TSK_SafetyTask_PWMOFF+0xc6>
 8002078:	2b0b      	cmp	r3, #11
 800207a:	d013      	beq.n	80020a4 <TSK_SafetyTask_PWMOFF+0xec>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 800207c:	e01a      	b.n	80020b4 <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <TSK_SafetyTask_PWMOFF+0x108>)
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	4618      	mov	r0, r3
 8002088:	f008 fb22 	bl	800a6d0 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fd3a 	bl	8001b08 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <TSK_SafetyTask_PWMOFF+0x114>)
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	4618      	mov	r0, r3
 800209e:	f007 fd30 	bl	8009b02 <MPM_Clear>
    break;
 80020a2:	e007      	b.n	80020b4 <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <TSK_SafetyTask_PWMOFF+0x108>)
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f008 fb0f 	bl	800a6d0 <PWMC_SwitchOffPWM>
    break;
 80020b2:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	20000914 	.word	0x20000914
 80020c0:	20000918 	.word	0x20000918
 80020c4:	200009ac 	.word	0x200009ac
 80020c8:	200009cc 	.word	0x200009cc
 80020cc:	200009d8 	.word	0x200009d8

080020d0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <TSK_HardwareFaultTask+0x1c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f007 fbf4 	bl	80098c6 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <TSK_HardwareFaultTask+0x20>)
 80020e4:	f009 f94c 	bl	800b380 <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000918 	.word	0x20000918
 80020f0:	200009cc 	.word	0x200009cc

080020f4 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 80020f8:	2140      	movs	r1, #64	; 0x40
 80020fa:	481e      	ldr	r0, [pc, #120]	; (8002174 <mc_lock_pins+0x80>)
 80020fc:	f7ff f994 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H2_GPIO_Port, M1_HALL_H2_Pin);
 8002100:	2108      	movs	r1, #8
 8002102:	481d      	ldr	r0, [pc, #116]	; (8002178 <mc_lock_pins+0x84>)
 8002104:	f7ff f990 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H3_GPIO_Port, M1_HALL_H3_Pin);
 8002108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210c:	481a      	ldr	r0, [pc, #104]	; (8002178 <mc_lock_pins+0x84>)
 800210e:	f7ff f98b 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_HALL_H1_GPIO_Port, M1_HALL_H1_Pin);
 8002112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002116:	4817      	ldr	r0, [pc, #92]	; (8002174 <mc_lock_pins+0x80>)
 8002118:	f7ff f986 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 800211c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002120:	4814      	ldr	r0, [pc, #80]	; (8002174 <mc_lock_pins+0x80>)
 8002122:	f7ff f981 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 8002126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212a:	4812      	ldr	r0, [pc, #72]	; (8002174 <mc_lock_pins+0x80>)
 800212c:	f7ff f97c 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 8002130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002134:	4810      	ldr	r0, [pc, #64]	; (8002178 <mc_lock_pins+0x84>)
 8002136:	f7ff f977 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 800213a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <mc_lock_pins+0x80>)
 8002140:	f7ff f972 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 8002144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002148:	480b      	ldr	r0, [pc, #44]	; (8002178 <mc_lock_pins+0x84>)
 800214a:	f7ff f96d 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 800214e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002152:	4809      	ldr	r0, [pc, #36]	; (8002178 <mc_lock_pins+0x84>)
 8002154:	f7ff f968 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8002158:	2120      	movs	r1, #32
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <mc_lock_pins+0x88>)
 800215c:	f7ff f964 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8002160:	2120      	movs	r1, #32
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <mc_lock_pins+0x80>)
 8002164:	f7ff f960 	bl	8001428 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 8002168:	2110      	movs	r1, #16
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <mc_lock_pins+0x88>)
 800216c:	f7ff f95c 	bl	8001428 <LL_GPIO_LockPin>
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800

08002180 <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend,
               FCP_ReceiveFct_t fFcpReceive,
               FCP_AbortReceiveFct_t fFcpAbortReceive,
               const char* s_fwVer )
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	619a      	str	r2, [r3, #24]
  pHandle->s_fwVer = s_fwVer;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <MCP_Init+0x4c>)
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MCP_Init+0x50>)
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <MCP_Init+0x54>)
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	68b8      	ldr	r0, [r7, #8]
 80021a8:	f005 ff3f 	bl	800802a <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	61da      	str	r2, [r3, #28]
  pHandle->fFcpReceive = fFcpReceive;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	621a      	str	r2, [r3, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

  MCP_WaitNextFrame(pHandle);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f815 	bl	80021ee <MCP_WaitNextFrame>
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	080021d9 	.word	0x080021d9
 80021d0:	08002241 	.word	0x08002241
 80021d4:	0800221f 	.word	0x0800221f

080021d8 <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f804 	bl	80021ee <MCP_WaitNextFrame>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6992      	ldr	r2, [r2, #24]
 80021fe:	4610      	mov	r0, r2
 8002200:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6992      	ldr	r2, [r2, #24]
 8002212:	4610      	mov	r0, r2
 8002214:	4798      	blx	r3
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	461a      	mov	r2, r3
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
 800222e:	4613      	mov	r3, r2
 8002230:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ffdb 	bl	80021ee <MCP_WaitNextFrame>
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b0a9      	sub	sp, #164	; 0xa4
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	72fb      	strb	r3, [r7, #11]
 8002250:	4613      	mov	r3, r2
 8002252:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 800225a:	2300      	movs	r3, #0
 800225c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 8002268:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800226c:	2b00      	cmp	r3, #0
 800226e:	d014      	beq.n	800229a <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002276:	3b01      	subs	r3, #1
 8002278:	461a      	mov	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	f001 fc8e 	bl	8003b9c <UI_SetReg>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	72fb      	strb	r3, [r7, #11]
 800228e:	e004      	b.n	800229a <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8002290:	2300      	movs	r3, #0
 8002292:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002294:	230b      	movs	r3, #11
 8002296:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	2b12      	cmp	r3, #18
 800229e:	f200 8543 	bhi.w	8002d28 <MCP_ReceivedFrame+0xae8>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <MCP_ReceivedFrame+0x68>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002d31 	.word	0x08002d31
 80022ac:	080022f5 	.word	0x080022f5
 80022b0:	080025f5 	.word	0x080025f5
 80022b4:	0800292d 	.word	0x0800292d
 80022b8:	08002d29 	.word	0x08002d29
 80022bc:	08002d29 	.word	0x08002d29
 80022c0:	08002951 	.word	0x08002951
 80022c4:	08002a15 	.word	0x08002a15
 80022c8:	08002ac7 	.word	0x08002ac7
 80022cc:	08002b67 	.word	0x08002b67
 80022d0:	08002c0f 	.word	0x08002c0f
 80022d4:	08002c5d 	.word	0x08002c5d
 80022d8:	08002ca3 	.word	0x08002ca3
 80022dc:	08002a6b 	.word	0x08002a6b
 80022e0:	08002d29 	.word	0x08002d29
 80022e4:	08002d29 	.word	0x08002d29
 80022e8:	08002d29 	.word	0x08002d29
 80022ec:	08002d29 	.word	0x08002d29
 80022f0:	08002d31 	.word	0x08002d31
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 80022fc:	2305      	movs	r3, #5
 80022fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 8002302:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002306:	2b88      	cmp	r3, #136	; 0x88
 8002308:	f200 816f 	bhi.w	80025ea <MCP_ReceivedFrame+0x3aa>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <MCP_ReceivedFrame+0xd4>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002539 	.word	0x08002539
 8002318:	080025eb 	.word	0x080025eb
 800231c:	080025eb 	.word	0x080025eb
 8002320:	08002557 	.word	0x08002557
 8002324:	080025eb 	.word	0x080025eb
 8002328:	08002583 	.word	0x08002583
 800232c:	08002583 	.word	0x08002583
 8002330:	08002583 	.word	0x08002583
 8002334:	08002583 	.word	0x08002583
 8002338:	08002583 	.word	0x08002583
 800233c:	08002583 	.word	0x08002583
 8002340:	08002583 	.word	0x08002583
 8002344:	08002583 	.word	0x08002583
 8002348:	08002583 	.word	0x08002583
 800234c:	08002583 	.word	0x08002583
 8002350:	08002583 	.word	0x08002583
 8002354:	080025ad 	.word	0x080025ad
 8002358:	080025ad 	.word	0x080025ad
 800235c:	080025eb 	.word	0x080025eb
 8002360:	080025eb 	.word	0x080025eb
 8002364:	08002583 	.word	0x08002583
 8002368:	08002583 	.word	0x08002583
 800236c:	08002583 	.word	0x08002583
 8002370:	08002583 	.word	0x08002583
 8002374:	08002583 	.word	0x08002583
 8002378:	080025eb 	.word	0x080025eb
 800237c:	080025eb 	.word	0x080025eb
 8002380:	080025eb 	.word	0x080025eb
 8002384:	08002573 	.word	0x08002573
 8002388:	0800257b 	.word	0x0800257b
 800238c:	080025eb 	.word	0x080025eb
 8002390:	080025eb 	.word	0x080025eb
 8002394:	080025eb 	.word	0x080025eb
 8002398:	080025eb 	.word	0x080025eb
 800239c:	080025eb 	.word	0x080025eb
 80023a0:	080025eb 	.word	0x080025eb
 80023a4:	080025eb 	.word	0x080025eb
 80023a8:	080025eb 	.word	0x080025eb
 80023ac:	080025eb 	.word	0x080025eb
 80023b0:	080025eb 	.word	0x080025eb
 80023b4:	080025eb 	.word	0x080025eb
 80023b8:	080025eb 	.word	0x080025eb
 80023bc:	080025eb 	.word	0x080025eb
 80023c0:	080025eb 	.word	0x080025eb
 80023c4:	080025eb 	.word	0x080025eb
 80023c8:	080025eb 	.word	0x080025eb
 80023cc:	080025eb 	.word	0x080025eb
 80023d0:	080025eb 	.word	0x080025eb
 80023d4:	080025eb 	.word	0x080025eb
 80023d8:	080025eb 	.word	0x080025eb
 80023dc:	080025eb 	.word	0x080025eb
 80023e0:	080025eb 	.word	0x080025eb
 80023e4:	080025eb 	.word	0x080025eb
 80023e8:	080025eb 	.word	0x080025eb
 80023ec:	080025eb 	.word	0x080025eb
 80023f0:	080025eb 	.word	0x080025eb
 80023f4:	080025eb 	.word	0x080025eb
 80023f8:	080025eb 	.word	0x080025eb
 80023fc:	080025eb 	.word	0x080025eb
 8002400:	080025eb 	.word	0x080025eb
 8002404:	080025eb 	.word	0x080025eb
 8002408:	080025eb 	.word	0x080025eb
 800240c:	080025eb 	.word	0x080025eb
 8002410:	080025eb 	.word	0x080025eb
 8002414:	080025eb 	.word	0x080025eb
 8002418:	08002583 	.word	0x08002583
 800241c:	080025eb 	.word	0x080025eb
 8002420:	080025eb 	.word	0x080025eb
 8002424:	080025eb 	.word	0x080025eb
 8002428:	080025eb 	.word	0x080025eb
 800242c:	080025ad 	.word	0x080025ad
 8002430:	080025ad 	.word	0x080025ad
 8002434:	080025ad 	.word	0x080025ad
 8002438:	080025eb 	.word	0x080025eb
 800243c:	080025eb 	.word	0x080025eb
 8002440:	080025eb 	.word	0x080025eb
 8002444:	080025eb 	.word	0x080025eb
 8002448:	080025eb 	.word	0x080025eb
 800244c:	080025eb 	.word	0x080025eb
 8002450:	08002583 	.word	0x08002583
 8002454:	080025eb 	.word	0x080025eb
 8002458:	080025eb 	.word	0x080025eb
 800245c:	080025eb 	.word	0x080025eb
 8002460:	08002583 	.word	0x08002583
 8002464:	08002583 	.word	0x08002583
 8002468:	08002583 	.word	0x08002583
 800246c:	08002583 	.word	0x08002583
 8002470:	08002583 	.word	0x08002583
 8002474:	08002583 	.word	0x08002583
 8002478:	08002583 	.word	0x08002583
 800247c:	080025eb 	.word	0x080025eb
 8002480:	080025ad 	.word	0x080025ad
 8002484:	080025eb 	.word	0x080025eb
 8002488:	080025eb 	.word	0x080025eb
 800248c:	080025eb 	.word	0x080025eb
 8002490:	080025eb 	.word	0x080025eb
 8002494:	080025eb 	.word	0x080025eb
 8002498:	08002583 	.word	0x08002583
 800249c:	080025eb 	.word	0x080025eb
 80024a0:	080025eb 	.word	0x080025eb
 80024a4:	08002583 	.word	0x08002583
 80024a8:	08002583 	.word	0x08002583
 80024ac:	080025eb 	.word	0x080025eb
 80024b0:	080025eb 	.word	0x080025eb
 80024b4:	080025eb 	.word	0x080025eb
 80024b8:	080025eb 	.word	0x080025eb
 80024bc:	080025eb 	.word	0x080025eb
 80024c0:	080025eb 	.word	0x080025eb
 80024c4:	080025eb 	.word	0x080025eb
 80024c8:	080025eb 	.word	0x080025eb
 80024cc:	080025eb 	.word	0x080025eb
 80024d0:	080025eb 	.word	0x080025eb
 80024d4:	080025eb 	.word	0x080025eb
 80024d8:	080025eb 	.word	0x080025eb
 80024dc:	080025eb 	.word	0x080025eb
 80024e0:	080025eb 	.word	0x080025eb
 80024e4:	08002557 	.word	0x08002557
 80024e8:	080025ad 	.word	0x080025ad
 80024ec:	080025ad 	.word	0x080025ad
 80024f0:	080025ad 	.word	0x080025ad
 80024f4:	080025ad 	.word	0x080025ad
 80024f8:	080025ad 	.word	0x080025ad
 80024fc:	080025eb 	.word	0x080025eb
 8002500:	080025eb 	.word	0x080025eb
 8002504:	080025eb 	.word	0x080025eb
 8002508:	080025ad 	.word	0x080025ad
 800250c:	080025ad 	.word	0x080025ad
 8002510:	080025eb 	.word	0x080025eb
 8002514:	080025eb 	.word	0x080025eb
 8002518:	080025eb 	.word	0x080025eb
 800251c:	080025eb 	.word	0x080025eb
 8002520:	080025eb 	.word	0x080025eb
 8002524:	080025eb 	.word	0x080025eb
 8002528:	080025eb 	.word	0x080025eb
 800252c:	08002583 	.word	0x08002583
 8002530:	08002583 	.word	0x08002583
 8002534:	08002583 	.word	0x08002583
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	663b      	str	r3, [r7, #96]	; 0x60

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002548:	4618      	mov	r0, r3
 800254a:	f001 fb27 	bl	8003b9c <UI_SetReg>
 800254e:	4603      	mov	r3, r0
 8002550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002554:	e04d      	b.n	80025f2 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3301      	adds	r3, #1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002564:	4619      	mov	r1, r3
 8002566:	f001 fb19 	bl	8003b9c <UI_SetReg>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002570:	e03f      	b.n	80025f2 <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 8002572:	2301      	movs	r3, #1
 8002574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002578:	e03b      	b.n	80025f2 <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 800257a:	2301      	movs	r3, #1
 800257c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002580:	e037      	b.n	80025f2 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3301      	adds	r3, #1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3302      	adds	r3, #2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4413      	add	r3, r2
 8002594:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800259c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fafc 	bl	8003b9c <UI_SetReg>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80025aa:	e022      	b.n	80025f2 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3302      	adds	r3, #2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3303      	adds	r3, #3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	441a      	add	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	4413      	add	r3, r2
 80025d2:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80025da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fadd 	bl	8003b9c <UI_SetReg>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80025e8:	e003      	b.n	80025f2 <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 80025f0:	bf00      	nop
      }
    }
    break;
 80025f2:	e3a0      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 8002602:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002606:	2b88      	cmp	r3, #136	; 0x88
 8002608:	f200 8182 	bhi.w	8002910 <MCP_ReceivedFrame+0x6d0>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <MCP_ReceivedFrame+0x3d4>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002839 	.word	0x08002839
 8002618:	080028a5 	.word	0x080028a5
 800261c:	08002839 	.word	0x08002839
 8002620:	08002839 	.word	0x08002839
 8002624:	080028a5 	.word	0x080028a5
 8002628:	0800286f 	.word	0x0800286f
 800262c:	0800286f 	.word	0x0800286f
 8002630:	0800286f 	.word	0x0800286f
 8002634:	0800286f 	.word	0x0800286f
 8002638:	0800286f 	.word	0x0800286f
 800263c:	0800286f 	.word	0x0800286f
 8002640:	0800286f 	.word	0x0800286f
 8002644:	0800286f 	.word	0x0800286f
 8002648:	0800286f 	.word	0x0800286f
 800264c:	0800286f 	.word	0x0800286f
 8002650:	0800286f 	.word	0x0800286f
 8002654:	0800286f 	.word	0x0800286f
 8002658:	0800286f 	.word	0x0800286f
 800265c:	0800286f 	.word	0x0800286f
 8002660:	0800286f 	.word	0x0800286f
 8002664:	0800286f 	.word	0x0800286f
 8002668:	0800286f 	.word	0x0800286f
 800266c:	0800286f 	.word	0x0800286f
 8002670:	0800286f 	.word	0x0800286f
 8002674:	0800286f 	.word	0x0800286f
 8002678:	0800286f 	.word	0x0800286f
 800267c:	0800286f 	.word	0x0800286f
 8002680:	0800286f 	.word	0x0800286f
 8002684:	08002919 	.word	0x08002919
 8002688:	08002919 	.word	0x08002919
 800268c:	080028a5 	.word	0x080028a5
 8002690:	0800286f 	.word	0x0800286f
 8002694:	0800286f 	.word	0x0800286f
 8002698:	0800286f 	.word	0x0800286f
 800269c:	08002839 	.word	0x08002839
 80026a0:	08002911 	.word	0x08002911
 80026a4:	08002911 	.word	0x08002911
 80026a8:	08002911 	.word	0x08002911
 80026ac:	08002911 	.word	0x08002911
 80026b0:	08002911 	.word	0x08002911
 80026b4:	08002911 	.word	0x08002911
 80026b8:	08002911 	.word	0x08002911
 80026bc:	08002911 	.word	0x08002911
 80026c0:	08002911 	.word	0x08002911
 80026c4:	08002911 	.word	0x08002911
 80026c8:	08002911 	.word	0x08002911
 80026cc:	08002911 	.word	0x08002911
 80026d0:	08002911 	.word	0x08002911
 80026d4:	08002911 	.word	0x08002911
 80026d8:	08002911 	.word	0x08002911
 80026dc:	08002911 	.word	0x08002911
 80026e0:	08002911 	.word	0x08002911
 80026e4:	08002911 	.word	0x08002911
 80026e8:	08002911 	.word	0x08002911
 80026ec:	08002911 	.word	0x08002911
 80026f0:	08002911 	.word	0x08002911
 80026f4:	08002911 	.word	0x08002911
 80026f8:	08002911 	.word	0x08002911
 80026fc:	08002911 	.word	0x08002911
 8002700:	08002911 	.word	0x08002911
 8002704:	08002911 	.word	0x08002911
 8002708:	08002911 	.word	0x08002911
 800270c:	08002911 	.word	0x08002911
 8002710:	08002911 	.word	0x08002911
 8002714:	08002911 	.word	0x08002911
 8002718:	0800286f 	.word	0x0800286f
 800271c:	08002911 	.word	0x08002911
 8002720:	08002911 	.word	0x08002911
 8002724:	08002911 	.word	0x08002911
 8002728:	08002911 	.word	0x08002911
 800272c:	080028a5 	.word	0x080028a5
 8002730:	080028a5 	.word	0x080028a5
 8002734:	080028a5 	.word	0x080028a5
 8002738:	0800286f 	.word	0x0800286f
 800273c:	0800286f 	.word	0x0800286f
 8002740:	0800286f 	.word	0x0800286f
 8002744:	0800286f 	.word	0x0800286f
 8002748:	08002839 	.word	0x08002839
 800274c:	080028a5 	.word	0x080028a5
 8002750:	0800286f 	.word	0x0800286f
 8002754:	0800286f 	.word	0x0800286f
 8002758:	0800286f 	.word	0x0800286f
 800275c:	0800286f 	.word	0x0800286f
 8002760:	0800286f 	.word	0x0800286f
 8002764:	0800286f 	.word	0x0800286f
 8002768:	0800286f 	.word	0x0800286f
 800276c:	0800286f 	.word	0x0800286f
 8002770:	0800286f 	.word	0x0800286f
 8002774:	0800286f 	.word	0x0800286f
 8002778:	0800286f 	.word	0x0800286f
 800277c:	08002839 	.word	0x08002839
 8002780:	080028a5 	.word	0x080028a5
 8002784:	08002911 	.word	0x08002911
 8002788:	0800286f 	.word	0x0800286f
 800278c:	0800286f 	.word	0x0800286f
 8002790:	0800286f 	.word	0x0800286f
 8002794:	0800286f 	.word	0x0800286f
 8002798:	0800286f 	.word	0x0800286f
 800279c:	08002911 	.word	0x08002911
 80027a0:	08002911 	.word	0x08002911
 80027a4:	0800286f 	.word	0x0800286f
 80027a8:	0800286f 	.word	0x0800286f
 80027ac:	08002839 	.word	0x08002839
 80027b0:	08002839 	.word	0x08002839
 80027b4:	080028a5 	.word	0x080028a5
 80027b8:	080028a5 	.word	0x080028a5
 80027bc:	080028a5 	.word	0x080028a5
 80027c0:	080028a5 	.word	0x080028a5
 80027c4:	080028a5 	.word	0x080028a5
 80027c8:	08002839 	.word	0x08002839
 80027cc:	0800286f 	.word	0x0800286f
 80027d0:	0800286f 	.word	0x0800286f
 80027d4:	080028a5 	.word	0x080028a5
 80027d8:	08002911 	.word	0x08002911
 80027dc:	0800286f 	.word	0x0800286f
 80027e0:	0800286f 	.word	0x0800286f
 80027e4:	08002839 	.word	0x08002839
 80027e8:	080028a5 	.word	0x080028a5
 80027ec:	080028a5 	.word	0x080028a5
 80027f0:	080028a5 	.word	0x080028a5
 80027f4:	080028a5 	.word	0x080028a5
 80027f8:	080028a5 	.word	0x080028a5
 80027fc:	080028a5 	.word	0x080028a5
 8002800:	080028a5 	.word	0x080028a5
 8002804:	080028a5 	.word	0x080028a5
 8002808:	080028a5 	.word	0x080028a5
 800280c:	080028a5 	.word	0x080028a5
 8002810:	080028a5 	.word	0x080028a5
 8002814:	08002839 	.word	0x08002839
 8002818:	08002911 	.word	0x08002911
 800281c:	08002839 	.word	0x08002839
 8002820:	080028db 	.word	0x080028db
 8002824:	080028db 	.word	0x080028db
 8002828:	080028db 	.word	0x080028db
 800282c:	0800286f 	.word	0x0800286f
 8002830:	0800286f 	.word	0x0800286f
 8002834:	0800286f 	.word	0x0800286f
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800283e:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fbfe 	bl	8004044 <UI_GetReg>
 8002848:	4603      	mov	r3, r0
 800284a:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 800284c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002850:	2b00      	cmp	r3, #0
 8002852:	d063      	beq.n	800291c <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	69dc      	ldr	r4, [r3, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6998      	ldr	r0, [r3, #24]
 800285c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002860:	2301      	movs	r3, #1
 8002862:	21f0      	movs	r1, #240	; 0xf0
 8002864:	47a0      	blx	r4
            RequireAck = false;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800286c:	e056      	b.n	800291c <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002874:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fbe3 	bl	8004044 <UI_GetReg>
 800287e:	4603      	mov	r3, r0
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
          if ( bNoError == true )
 8002882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002886:	2b00      	cmp	r3, #0
 8002888:	d04a      	beq.n	8002920 <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	69dc      	ldr	r4, [r3, #28]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6998      	ldr	r0, [r3, #24]
 8002892:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002896:	2302      	movs	r3, #2
 8002898:	21f0      	movs	r1, #240	; 0xf0
 800289a:	47a0      	blx	r4
            RequireAck = false;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80028a2:	e03d      	b.n	8002920 <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80028aa:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 fbc8 	bl	8004044 <UI_GetReg>
 80028b4:	4603      	mov	r3, r0
 80028b6:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 80028b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d031      	beq.n	8002924 <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	69dc      	ldr	r4, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6998      	ldr	r0, [r3, #24]
 80028c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028cc:	2304      	movs	r3, #4
 80028ce:	21f0      	movs	r1, #240	; 0xf0
 80028d0:	47a0      	blx	r4
            RequireAck = false;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80028d8:	e024      	b.n	8002924 <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80028e0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 fbad 	bl	8004044 <UI_GetReg>
 80028ea:	4603      	mov	r3, r0
 80028ec:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 80028ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	69dc      	ldr	r4, [r3, #28]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002902:	2304      	movs	r3, #4
 8002904:	21f0      	movs	r1, #240	; 0xf0
 8002906:	47a0      	blx	r4
            RequireAck = false;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800290e:	e00b      	b.n	8002928 <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002910:	2303      	movs	r3, #3
 8002912:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 8002916:	e008      	b.n	800292a <MCP_ReceivedFrame+0x6ea>
        break;
 8002918:	bf00      	nop
 800291a:	e20c      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
        break;
 800291c:	bf00      	nop
 800291e:	e20a      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
        break;
 8002920:	bf00      	nop
 8002922:	e208      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
        break;
 8002924:	bf00      	nop
 8002926:	e206      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
        break;
 8002928:	bf00      	nop
      }
    }
    break;
 800292a:	e204      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002934:	2307      	movs	r3, #7
 8002936:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f002 f998 	bl	8004c78 <UI_ExecCmd>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800294e:	e1f2      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002956:	e00c      	b.n	8002972 <MCP_ReceivedFrame+0x732>
      {
        outBuff[i] = 0;
 8002958:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800295c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002960:	4413      	add	r3, r2
 8002962:	2200      	movs	r2, #0
 8002964:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; i < 32; i++)
 8002968:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800296c:	3301      	adds	r3, #1
 800296e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002972:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002976:	2b1f      	cmp	r3, #31
 8002978:	d9ee      	bls.n	8002958 <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002980:	e013      	b.n	80029aa <MCP_ReceivedFrame+0x76a>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002988:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800298c:	441a      	add	r2, r3
 800298e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002992:	3303      	adds	r3, #3
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800299a:	440b      	add	r3, r1
 800299c:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80029a0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029a4:	3301      	adds	r3, #1
 80029a6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80029aa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029ae:	2b1c      	cmp	r3, #28
 80029b0:	d808      	bhi.n	80029c4 <MCP_ReceivedFrame+0x784>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029b8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029bc:	4413      	add	r3, r2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	d1de      	bne.n	8002982 <MCP_ReceivedFrame+0x742>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029ca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029ce:	3305      	adds	r3, #5
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	753b      	strb	r3, [r7, #20]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029dc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029e0:	3307      	adds	r3, #7
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	757b      	strb	r3, [r7, #21]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029ee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029f2:	3309      	adds	r3, #9
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	75bb      	strb	r3, [r7, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	69dc      	ldr	r4, [r3, #28]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6998      	ldr	r0, [r3, #24]
 8002a02:	f107 0214 	add.w	r2, r7, #20
 8002a06:	2320      	movs	r3, #32
 8002a08:	21f0      	movs	r1, #240	; 0xf0
 8002a0a:	47a0      	blx	r4
      bNoError = true;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002a12:	e190      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3305      	adds	r3, #5
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3301      	adds	r3, #1
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3302      	adds	r3, #2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	441a      	add	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3303      	adds	r3, #3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	4413      	add	r3, r2
 8002a52:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002a5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 f977 	bl	8004d50 <UI_ExecSpeedRamp>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002a68:	e165      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3305      	adds	r3, #5
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3302      	adds	r3, #2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	441a      	add	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ab2:	b211      	sxth	r1, r2
 8002ab4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 f971 	bl	8004da0 <UI_ExecTorqueRamp>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002ac4:	e137      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7819      	ldrb	r1, [r3, #0]
 8002acc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002ad0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8002ad4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4623      	mov	r3, r4
 8002adc:	f002 f97c 	bl	8004dd8 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002ae0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4aa1      	ldr	r2, [pc, #644]	; (8002d74 <MCP_ReceivedFrame+0xb34>)
 8002af0:	fb82 1203 	smull	r1, r2, r2, r3
 8002af4:	1092      	asrs	r2, r2, #2
 8002af6:	17db      	asrs	r3, r3, #31
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 8002afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b06:	121b      	asrs	r3, r3, #8
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[2] = (uint8_t)(rpm >> 16);
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b10:	141b      	asrs	r3, r3, #16
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b1a:	161b      	asrs	r3, r3, #24
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      outBuff[4] = (uint8_t)(FinalTorque);
 8002b22:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002b2c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002b30:	121b      	asrs	r3, r3, #8
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      outBuff[6] = (uint8_t)(Durationms);
 8002b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	69dc      	ldr	r4, [r3, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6998      	ldr	r0, [r3, #24]
 8002b5a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002b5e:	2308      	movs	r3, #8
 8002b60:	21f0      	movs	r1, #240	; 0xf0
 8002b62:	47a0      	blx	r4
    }
    break;
 8002b64:	e0e7      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3307      	adds	r3, #7
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3302      	adds	r3, #2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3303      	adds	r3, #3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	441a      	add	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	4413      	add	r3, r2
 8002bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <MCP_ReceivedFrame+0xb38>)
 8002bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc4:	441a      	add	r2, r3
 8002bc6:	1152      	asrs	r2, r2, #5
 8002bc8:	17db      	asrs	r3, r3, #31
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3305      	adds	r3, #5
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3306      	adds	r3, #6
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 8002bf2:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002bf6:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8002bfa:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4623      	mov	r3, r4
 8002c02:	f002 f922 	bl	8004e4a <UI_SetRevupData>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002c0c:	e093      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3301      	adds	r3, #1
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3303      	adds	r3, #3
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8002c4a:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 f92a 	bl	8004ea8 <UI_SetCurrentReferences>
      bNoError = true;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002c5a:	e06c      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
      stepList.len = Size;
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002c66:	230c      	movs	r3, #12
 8002c68:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002c6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c70:	4942      	ldr	r1, [pc, #264]	; (8002d7c <MCP_ReceivedFrame+0xb3c>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 f934 	bl	8004ee0 <UI_GetMPInfo>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 8002c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d056      	beq.n	8002d34 <MCP_ReceivedFrame+0xaf4>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	69dc      	ldr	r4, [r3, #28]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <MCP_ReceivedFrame+0xb3c>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <MCP_ReceivedFrame+0xb3c>)
 8002c94:	791b      	ldrb	r3, [r3, #4]
 8002c96:	21f0      	movs	r1, #240	; 0xf0
 8002c98:	47a0      	blx	r4
        RequireAck = false;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 8002ca0:	e048      	b.n	8002d34 <MCP_ReceivedFrame+0xaf4>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002ca8:	e012      	b.n	8002cd0 <MCP_ReceivedFrame+0xa90>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002cb0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002cb4:	441a      	add	r2, r3
 8002cb6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002cc6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002cd0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002cd4:	2b1f      	cmp	r3, #31
 8002cd6:	d816      	bhi.n	8002d06 <MCP_ReceivedFrame+0xac6>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002cde:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1df      	bne.n	8002caa <MCP_ReceivedFrame+0xa6a>
      }

      for (; i < 32; i++)
 8002cea:	e00c      	b.n	8002d06 <MCP_ReceivedFrame+0xac6>
      {
        outBuff[i] = 0;
 8002cec:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002cf0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002cf4:	4413      	add	r3, r2
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (; i < 32; i++)
 8002cfc:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d00:	3301      	adds	r3, #1
 8002d02:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002d06:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d0a:	2b1f      	cmp	r3, #31
 8002d0c:	d9ee      	bls.n	8002cec <MCP_ReceivedFrame+0xaac>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	69dc      	ldr	r4, [r3, #28]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6998      	ldr	r0, [r3, #24]
 8002d16:	f107 0214 	add.w	r2, r7, #20
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	21f0      	movs	r1, #240	; 0xf0
 8002d1e:	47a0      	blx	r4
      bNoError = true;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002d26:	e006      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 8002d2e:	e002      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
    break;
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <MCP_ReceivedFrame+0xaf6>
    break;
 8002d34:	bf00      	nop
  }

  if (RequireAck)
 8002d36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <MCP_ReceivedFrame+0xb2a>
  {
    if (bNoError)
 8002d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <MCP_ReceivedFrame+0xb18>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	69dc      	ldr	r4, [r3, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6998      	ldr	r0, [r3, #24]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2200      	movs	r2, #0
 8002d52:	21f0      	movs	r1, #240	; 0xf0
 8002d54:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 8002d56:	e008      	b.n	8002d6a <MCP_ReceivedFrame+0xb2a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	69dc      	ldr	r4, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6998      	ldr	r0, [r3, #24]
 8002d60:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002d64:	2301      	movs	r3, #1
 8002d66:	21ff      	movs	r1, #255	; 0xff
 8002d68:	47a0      	blx	r4
}
 8002d6a:	bf00      	nop
 8002d6c:	379c      	adds	r7, #156	; 0x9c
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	66666667 	.word	0x66666667
 8002d78:	88888889 	.word	0x88888889
 8002d7c:	2000079c 	.word	0x2000079c

08002d80 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002d86:	f003 f92d 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <MX_MotorControl_Init+0x3c>)
 8002d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d92:	09db      	lsrs	r3, r3, #7
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 fe44 	bl	8005a22 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002d9a:	4909      	ldr	r1, [pc, #36]	; (8002dc0 <MX_MotorControl_Init+0x40>)
 8002d9c:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <MX_MotorControl_Init+0x44>)
 8002d9e:	f7fe fb5f 	bl	8001460 <MCboot>
  mc_lock_pins();
 8002da2:	f7ff f9a7 	bl	80020f4 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <MX_MotorControl_Init+0x48>)
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <MX_MotorControl_Init+0x40>)
 8002dac:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <MX_MotorControl_Init+0x44>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <MX_MotorControl_Init+0x4c>)
 8002db2:	f000 fe25 	bl	8003a00 <UI_TaskInit>
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	10624dd3 	.word	0x10624dd3
 8002dc0:	200009e8 	.word	0x200009e8
 8002dc4:	200009e4 	.word	0x200009e4
 8002dc8:	0800c768 	.word	0x0800c768
 8002dcc:	2000074c 	.word	0x2000074c

08002dd0 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002df6:	b490      	push	{r4, r7}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	332c      	adds	r3, #44	; 0x2c
 8002e06:	4619      	mov	r1, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e12:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	fa92 f2a2 	rbit	r2, r2
 8002e1a:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	40d3      	lsrs	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002e2c:	6822      	ldr	r2, [r4, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	211f      	movs	r1, #31
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f003 011f 	and.w	r1, r3, #31
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc90      	pop	{r4, r7}
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e5c:	b490      	push	{r4, r7}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	fa92 f2a2 	rbit	r2, r2
 8002e80:	613a      	str	r2, [r7, #16]
  return result;
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	fab2 f282 	clz	r2, r2
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	40d3      	lsrs	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002e9a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002e9e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	69f9      	ldr	r1, [r7, #28]
 8002ea2:	fa91 f1a1 	rbit	r1, r1
 8002ea6:	61b9      	str	r1, [r7, #24]
  return result;
 8002ea8:	69b9      	ldr	r1, [r7, #24]
 8002eaa:	fab1 f181 	clz	r1, r1
 8002eae:	b2c9      	uxtb	r1, r1
 8002eb0:	40cb      	lsrs	r3, r1
 8002eb2:	2107      	movs	r1, #7
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	401a      	ands	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002ec2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002ec6:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eca:	fa91 f1a1 	rbit	r1, r1
 8002ece:	6239      	str	r1, [r7, #32]
  return result;
 8002ed0:	6a39      	ldr	r1, [r7, #32]
 8002ed2:	fab1 f181 	clz	r1, r1
 8002ed6:	b2c9      	uxtb	r1, r1
 8002ed8:	40cb      	lsrs	r3, r1
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc90      	pop	{r4, r7}
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	b29b      	uxth	r3, r3
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f06f 0202 	mvn.w	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f06f 0204 	mvn.w	r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 0220 	bic.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 8002ff4:	23ff      	movs	r3, #255	; 0xff
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73bb      	strb	r3, [r7, #14]

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 8002ffc:	e029      	b.n	8003052 <RCM_RegisterRegConv+0x66>
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ffe:	7bbb      	ldrb	r3, [r7, #14]
 8003000:	4a44      	ldr	r2, [pc, #272]	; (8003114 <RCM_RegisterRegConv+0x128>)
 8003002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <RCM_RegisterRegConv+0x28>
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d901      	bls.n	8003014 <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 8003014:	7bbb      	ldrb	r3, [r7, #14]
 8003016:	4a3f      	ldr	r2, [pc, #252]	; (8003114 <RCM_RegisterRegConv+0x128>)
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d015      	beq.n	800304c <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	4a3c      	ldr	r2, [pc, #240]	; (8003114 <RCM_RegisterRegConv+0x128>)
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	791a      	ldrb	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	791b      	ldrb	r3, [r3, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d10c      	bne.n	800304c <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	4a37      	ldr	r2, [pc, #220]	; (8003114 <RCM_RegisterRegConv+0x128>)
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003040:	429a      	cmp	r2, r3
 8003042:	d103      	bne.n	800304c <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 8003044:	7bbb      	ldrb	r3, [r7, #14]
 8003046:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8003048:	2304      	movs	r3, #4
 800304a:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	3301      	adds	r3, #1
 8003050:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d9d2      	bls.n	8002ffe <RCM_RegisterRegConv+0x12>
    }
    if (handle < RCM_MAX_CONV )
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d855      	bhi.n	800310a <RCM_RegisterRegConv+0x11e>
    {
      RCM_handle_array [handle] = regConv;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	492c      	ldr	r1, [pc, #176]	; (8003114 <RCM_RegisterRegConv+0x128>)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <RCM_RegisterRegConv+0x12c>)
 800306c:	2100      	movs	r1, #0
 800306e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff49 	bl	8002f0e <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <RCM_RegisterRegConv+0xc8>
      {
       LL_ADC_DisableIT_EOCS(regConv->regADC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff90 	bl	8002fac <LL_ADC_DisableIT_EOCS>
       LL_ADC_ClearFlag_EOCS(regConv->regADC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff6f 	bl	8002f74 <LL_ADC_ClearFlag_EOCS>
       LL_ADC_DisableIT_JEOS(regConv->regADC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff96 	bl	8002fcc <LL_ADC_DisableIT_JEOS>
       LL_ADC_ClearFlag_JEOS(regConv->regADC);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff73 	bl	8002f90 <LL_ADC_ClearFlag_JEOS>

        LL_ADC_Enable( regConv->regADC );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff1d 	bl	8002eee <LL_ADC_Enable>
      }
      else
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe88 	bl	8002dd0 <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	2b09      	cmp	r3, #9
 80030ca:	d80d      	bhi.n	80030e8 <RCM_RegisterRegConv+0xfc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	791b      	ldrb	r3, [r3, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	051b      	lsls	r3, r3, #20
 80030e0:	430b      	orrs	r3, r1
 80030e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e6:	e00b      	b.n	8003100 <RCM_RegisterRegConv+0x114>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	791b      	ldrb	r3, [r3, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	461a      	mov	r2, r3
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	3b1e      	subs	r3, #30
 80030fc:	051b      	lsls	r3, r3, #20
 80030fe:	430b      	orrs	r3, r1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	4619      	mov	r1, r3
 8003106:	f7ff fea9 	bl	8002e5c <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000a14 	.word	0x20000a14
 8003118:	200009f0 	.word	0x200009f0

0800311c <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	4a33      	ldr	r2, [pc, #204]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 800312a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312e:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 8003134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003138:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800313a:	2b09      	cmp	r3, #9
 800313c:	d813      	bhi.n	8003166 <RCM_ExecRegularConv+0x4a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	791b      	ldrb	r3, [r3, #4]
 8003148:	4619      	mov	r1, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	791b      	ldrb	r3, [r3, #4]
 8003154:	461a      	mov	r2, r3
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	051b      	lsls	r3, r3, #20
 800315e:	430b      	orrs	r3, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003164:	e011      	b.n	800318a <RCM_ExecRegularConv+0x6e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 800316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	4619      	mov	r1, r3
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	791b      	ldrb	r3, [r3, #4]
 800317c:	461a      	mov	r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003188:	430b      	orrs	r3, r1
 800318a:	461a      	mov	r2, r3
 800318c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003190:	f7ff fe31 	bl	8002df6 <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fec8 	bl	8002f34 <LL_ADC_REG_ReadConversionData12>

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80031b4:	015b      	lsls	r3, r3, #5
 80031b6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80031ba:	3378      	adds	r3, #120	; 0x78
 80031bc:	461a      	mov	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	6013      	str	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80031c2:	bf00      	nop
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 80031c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff febd 	bl	8002f4e <LL_ADC_IsActiveFlag_EOCS>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f4      	beq.n	80031c4 <RCM_ExecRegularConv+0xa8>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <RCM_ExecRegularConv+0xdc>)
 80031de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fea5 	bl	8002f34 <LL_ADC_REG_ReadConversionData12>
 80031ea:	4603      	mov	r3, r0
 80031ec:	81fb      	strh	r3, [r7, #14]
return retVal;
 80031ee:	89fb      	ldrh	r3, [r7, #14]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000a14 	.word	0x20000a14

080031fc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80031fc:	b598      	push	{r3, r4, r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <RCM_ExecUserConv+0x64>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d128      	bne.n	800325a <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <RCM_ExecUserConv+0x68>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff85 	bl	800311c <RCM_ExecRegularConv>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <RCM_ExecUserConv+0x6c>)
 8003218:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <RCM_ExecUserConv+0x64>)
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <RCM_ExecUserConv+0x68>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <RCM_ExecUserConv+0x70>)
 8003228:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <RCM_ExecUserConv+0x64>)
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <RCM_ExecUserConv+0x68>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <RCM_ExecUserConv+0x70>)
 800323e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <RCM_ExecUserConv+0x68>)
 8003244:	7818      	ldrb	r0, [r3, #0]
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <RCM_ExecUserConv+0x6c>)
 8003248:	8819      	ldrh	r1, [r3, #0]
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <RCM_ExecUserConv+0x68>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <RCM_ExecUserConv+0x70>)
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	461a      	mov	r2, r3
 8003258:	47a0      	blx	r4
    }
  }
}
 800325a:	bf00      	nop
 800325c:	bd98      	pop	{r3, r4, r7, pc}
 800325e:	bf00      	nop
 8003260:	20000a10 	.word	0x20000a10
 8003264:	200009ec 	.word	0x200009ec
 8003268:	20000a24 	.word	0x20000a24
 800326c:	200009f0 	.word	0x200009f0

08003270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_MspInit+0x4c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_MspInit+0x4c>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_MspInit+0x4c>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_MspInit+0x4c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <HAL_MspInit+0x4c>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_MspInit+0x4c>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80032ae:	2004      	movs	r0, #4
 80032b0:	f002 fb82 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <HAL_ADC_MspInit+0x10c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d142      	bne.n	8003368 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a32      	ldr	r2, [pc, #200]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8003336:	2320      	movs	r3, #32
 8003338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800333a:	2303      	movs	r3, #3
 800333c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8003342:	f107 031c 	add.w	r3, r7, #28
 8003346:	4619      	mov	r1, r3
 8003348:	4822      	ldr	r0, [pc, #136]	; (80033d4 <HAL_ADC_MspInit+0x114>)
 800334a:	f002 fb83 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 800334e:	2330      	movs	r3, #48	; 0x30
 8003350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003352:	2303      	movs	r3, #3
 8003354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	4619      	mov	r1, r3
 8003360:	481d      	ldr	r0, [pc, #116]	; (80033d8 <HAL_ADC_MspInit+0x118>)
 8003362:	f002 fb77 	bl	8005a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003366:	e02c      	b.n	80033c2 <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_ADC_MspInit+0x11c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d127      	bne.n	80033c2 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 800337c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_ADC_MspInit+0x110>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ae:	2303      	movs	r3, #3
 80033b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80033b6:	f107 031c 	add.w	r3, r7, #28
 80033ba:	4619      	mov	r1, r3
 80033bc:	4805      	ldr	r0, [pc, #20]	; (80033d4 <HAL_ADC_MspInit+0x114>)
 80033be:	f002 fb49 	bl	8005a54 <HAL_GPIO_Init>
}
 80033c2:	bf00      	nop
 80033c4:	3730      	adds	r7, #48	; 0x30
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40012000 	.word	0x40012000
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020800 	.word	0x40020800
 80033dc:	40012100 	.word	0x40012100

080033e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a33      	ldr	r2, [pc, #204]	; (80034cc <HAL_TIM_Base_MspInit+0xec>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10e      	bne.n	8003420 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	4a31      	ldr	r2, [pc, #196]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6453      	str	r3, [r2, #68]	; 0x44
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800341e:	e050      	b.n	80034c2 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d14b      	bne.n	80034c2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 800347e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348c:	2302      	movs	r3, #2
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003490:	2301      	movs	r3, #1
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	480e      	ldr	r0, [pc, #56]	; (80034d4 <HAL_TIM_Base_MspInit+0xf4>)
 800349c:	f002 fada 	bl	8005a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 80034a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ae:	2302      	movs	r3, #2
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034b2:	2301      	movs	r3, #1
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 031c 	add.w	r3, r7, #28
 80034ba:	4619      	mov	r1, r3
 80034bc:	4806      	ldr	r0, [pc, #24]	; (80034d8 <HAL_TIM_Base_MspInit+0xf8>)
 80034be:	f002 fac9 	bl	8005a54 <HAL_GPIO_Init>
}
 80034c2:	bf00      	nop
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020400 	.word	0x40020400
 80034d8:	40020000 	.word	0x40020000

080034dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_TIM_MspPostInit+0xa8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d13d      	bne.n	800357a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_TIM_MspPostInit+0xac>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a20      	ldr	r2, [pc, #128]	; (8003588 <HAL_TIM_MspPostInit+0xac>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_TIM_MspPostInit+0xac>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_TIM_MspPostInit+0xac>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_TIM_MspPostInit+0xac>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_TIM_MspPostInit+0xac>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003536:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800353a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003540:	2302      	movs	r3, #2
 8003542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003544:	2302      	movs	r3, #2
 8003546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4619      	mov	r1, r3
 8003552:	480e      	ldr	r0, [pc, #56]	; (800358c <HAL_TIM_MspPostInit+0xb0>)
 8003554:	f002 fa7e 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003558:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003562:	2302      	movs	r3, #2
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003566:	2302      	movs	r3, #2
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800356a:	2301      	movs	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <HAL_TIM_MspPostInit+0xb4>)
 8003576:	f002 fa6d 	bl	8005a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800357a:	bf00      	nop
 800357c:	3728      	adds	r7, #40	; 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40023800 	.word	0x40023800
 800358c:	40020400 	.word	0x40020400
 8003590:	40020000 	.word	0x40020000

08003594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_UART_MspInit+0x84>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12b      	bne.n	800360e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_UART_MspInit+0x88>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_UART_MspInit+0x88>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_UART_MspInit+0x88>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_UART_MspInit+0x88>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_UART_MspInit+0x88>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_UART_MspInit+0x88>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80035ee:	230c      	movs	r3, #12
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035fe:	2307      	movs	r3, #7
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4805      	ldr	r0, [pc, #20]	; (8003620 <HAL_UART_MspInit+0x8c>)
 800360a:	f002 fa23 	bl	8005a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40004400 	.word	0x40004400
 800361c:	40023800 	.word	0x40023800
 8003620:	40020000 	.word	0x40020000

08003624 <LL_ADC_IsActiveFlag_JEOS>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b04      	cmp	r3, #4
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f06f 0201 	mvn.w	r2, #1
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f06f 0202 	mvn.w	r2, #2
 800369a:	611a      	str	r2, [r3, #16]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d101      	bne.n	80036c0 <LL_TIM_IsActiveFlag_CC1+0x18>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <LL_TIM_IsActiveFlag_CC1+0x1a>
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_TIM_ClearFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036dc:	611a      	str	r2, [r3, #16]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_TIM_IsActiveFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d101      	bne.n	8003702 <LL_TIM_IsActiveFlag_BRK+0x18>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <LL_TIM_IsActiveFlag_BRK+0x1a>
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	bf0c      	ite	eq
 800374a:	2301      	moveq	r3, #1
 800374c:	2300      	movne	r3, #0
 800374e:	b2db      	uxtb	r3, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003790:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b2db      	uxtb	r3, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80037c4:	480c      	ldr	r0, [pc, #48]	; (80037f8 <ADC_IRQHandler+0x38>)
 80037c6:	f7ff ff2d 	bl	8003624 <LL_ADC_IsActiveFlag_JEOS>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <ADC_IRQHandler+0x22>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <ADC_IRQHandler+0x38>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <ADC_IRQHandler+0x38>)
 80037d6:	f023 030c 	bic.w	r3, r3, #12
 80037da:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80037dc:	f7fe fabe 	bl	8001d5c <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037e0:	e007      	b.n	80037f2 <ADC_IRQHandler+0x32>
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <ADC_IRQHandler+0x3c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <ADC_IRQHandler+0x3c>)
 80037e8:	f023 030c 	bic.w	r3, r3, #12
 80037ec:	6013      	str	r3, [r2, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80037ee:	f7fe fab5 	bl	8001d5c <TSK_HighFrequencyTask>
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40012000 	.word	0x40012000
 80037fc:	40012200 	.word	0x40012200

08003800 <TIM1_UP_TIM10_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff1d 	bl	800364a <LL_TIM_ClearFlag_UPDATE>
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8003812:	f006 f8cf 	bl	80099b4 <ICS_TIMx_UP_IRQHandler>
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_M1_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000244 	.word	0x20000244

08003820 <TIM1_BRK_TIM9_IRQHandler>:
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  * @retval None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ff5d 	bl	80036ea <LL_TIM_IsActiveFlag_BRK>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <TIM1_BRK_TIM9_IRQHandler+0x28>
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff46 	bl	80036ce <LL_TIM_ClearFlag_BRK>
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8003842:	4803      	ldr	r0, [pc, #12]	; (8003850 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8003844:	f006 f912 	bl	8009a6c <ICS_BRK_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 8003848:	f7fd ff4e 	bl	80016e8 <MC_Scheduler>

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000244 	.word	0x20000244

08003854 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <TIM2_IRQHandler+0x48>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff02 	bl	8003666 <LL_TIM_IsActiveFlag_UPDATE>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <TIM2_IRQHandler+0x24>
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <TIM2_IRQHandler+0x48>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff feec 	bl	800364a <LL_TIM_ClearFlag_UPDATE>
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8003872:	480a      	ldr	r0, [pc, #40]	; (800389c <TIM2_IRQHandler+0x48>)
 8003874:	f005 fa1e 	bl	8008cb4 <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <TIM2_IRQHandler+0x48>)
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff13 	bl	80036a8 <LL_TIM_IsActiveFlag_CC1>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <TIM2_IRQHandler+0x44>
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <TIM2_IRQHandler+0x48>)
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fefd 	bl	800368c <LL_TIM_ClearFlag_CC1>
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8003892:	4802      	ldr	r0, [pc, #8]	; (800389c <TIM2_IRQHandler+0x48>)
 8003894:	f004 ff2c 	bl	80086f0 <HALL_TIMx_CC_IRQHandler>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000042c 	.word	0x2000042c

080038a0 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <USART2_IRQHandler+0x94>)
 80038a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff42 	bl	8003736 <LL_USART_IsActiveFlag_RXNE>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d018      	beq.n	80038ea <USART2_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <USART2_IRQHandler+0x94>)
 80038ba:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff71 	bl	80037a6 <LL_USART_ReceiveData8>
 80038c4:	4603      	mov	r3, r0
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4619      	mov	r1, r3
 80038ca:	481a      	ldr	r0, [pc, #104]	; (8003934 <USART2_IRQHandler+0x94>)
 80038cc:	f007 fe2a 	bl	800b524 <UFCP_RX_IRQ_Handler>
 80038d0:	4603      	mov	r3, r0
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <USART2_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 80038dc:	f000 f90e 	bl	8003afc <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d101      	bne.n	80038ea <USART2_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 80038e6:	f000 f8fd 	bl	8003ae4 <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <USART2_IRQHandler+0x94>)
 80038ec:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff33 	bl	800375c <LL_USART_IsActiveFlag_TXE>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <USART2_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 80038fc:	480d      	ldr	r0, [pc, #52]	; (8003934 <USART2_IRQHandler+0x94>)
 80038fe:	f007 feb5 	bl	800b66c <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <USART2_IRQHandler+0x94>)
 8003904:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff01 	bl	8003710 <LL_USART_IsActiveFlag_ORE>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <USART2_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003914:	4807      	ldr	r0, [pc, #28]	; (8003934 <USART2_IRQHandler+0x94>)
 8003916:	f007 ff09 	bl	800b72c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <USART2_IRQHandler+0x94>)
 800391c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff2e 	bl	8003782 <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 8003926:	f000 f8dd 	bl	8003ae4 <UI_SerialCommunicationTimeOutStop>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000610 	.word	0x20000610

08003938 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800393e:	f7fe fbc7 	bl	80020d0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HardFault_Handler+0x90>)
 8003944:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fee1 	bl	8003710 <LL_USART_IsActiveFlag_ORE>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003954:	481c      	ldr	r0, [pc, #112]	; (80039c8 <HardFault_Handler+0x90>)
 8003956:	f007 fee9 	bl	800b72c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HardFault_Handler+0x90>)
 800395c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff0e 	bl	8003782 <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 8003966:	f000 f8bd 	bl	8003ae4 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <HardFault_Handler+0x90>)
 800396c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fef3 	bl	800375c <LL_USART_IsActiveFlag_TXE>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HardFault_Handler+0x4a>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 800397c:	4812      	ldr	r0, [pc, #72]	; (80039c8 <HardFault_Handler+0x90>)
 800397e:	f007 fe75 	bl	800b66c <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HardFault_Handler+0x90>)
 8003984:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fed4 	bl	8003736 <LL_USART_IsActiveFlag_RXNE>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0d6      	beq.n	8003942 <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HardFault_Handler+0x90>)
 8003996:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff03 	bl	80037a6 <LL_USART_ReceiveData8>
 80039a0:	4603      	mov	r3, r0
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4619      	mov	r1, r3
 80039a6:	4808      	ldr	r0, [pc, #32]	; (80039c8 <HardFault_Handler+0x90>)
 80039a8:	f007 fdbc 	bl	800b524 <UFCP_RX_IRQ_Handler>
 80039ac:	4603      	mov	r3, r0
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 80039b8:	f000 f8a0 	bl	8003afc <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d1bf      	bne.n	8003942 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 80039c2:	f000 f88f 	bl	8003ae4 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80039c6:	e7bc      	b.n	8003942 <HardFault_Handler+0xa>
 80039c8:	20000610 	.word	0x20000610

080039cc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <SysTick_Handler+0x30>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d106      	bne.n	80039e6 <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 80039d8:	f001 faf6 	bl	8004fc8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80039dc:	f002 f82d 	bl	8005a3a <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <SysTick_Handler+0x30>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <SysTick_Handler+0x30>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4b03      	ldr	r3, [pc, #12]	; (80039fc <SysTick_Handler+0x30>)
 80039f0:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 80039f2:	f7fd fe69 	bl	80016c8 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000750 	.word	0x20000750

08003a00 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <UI_TaskInit+0x64>)
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <UI_TaskInit+0x68>)
 8003a14:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <UI_TaskInit+0x64>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <UI_TaskInit+0x6c>)
 8003a1c:	461c      	mov	r4, r3
 8003a1e:	4615      	mov	r5, r2
 8003a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a28:	e884 0003 	stmia.w	r4, {r0, r1}

    UFCP_Init( & pUSART );
 8003a2c:	4810      	ldr	r0, [pc, #64]	; (8003a70 <UI_TaskInit+0x70>)
 8003a2e:	f007 fd6d 	bl	800b50c <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <UI_TaskInit+0x64>)
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <UI_TaskInit+0x74>)
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <UI_TaskInit+0x78>)
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <UI_TaskInit+0x7c>)
 8003a42:	490b      	ldr	r1, [pc, #44]	; (8003a70 <UI_TaskInit+0x70>)
 8003a44:	f7fe fb9c 	bl	8002180 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <UI_TaskInit+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	7af9      	ldrb	r1, [r7, #11]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f000 f85c 	bl	8003b14 <UI_Init>

}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bdb0      	pop	{r4, r5, r7, pc}
 8003a64:	200007a4 	.word	0x200007a4
 8003a68:	20000a28 	.word	0x20000a28
 8003a6c:	2000077c 	.word	0x2000077c
 8003a70:	20000610 	.word	0x20000610
 8003a74:	0800b82d 	.word	0x0800b82d
 8003a78:	0800b753 	.word	0x0800b753
 8003a7c:	0800b799 	.word	0x0800b799

08003a80 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <UI_Scheduler+0x58>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <UI_Scheduler+0x58>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <UI_Scheduler+0x58>)
 8003a9a:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <UI_Scheduler+0x5c>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d906      	bls.n	8003ab4 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <UI_Scheduler+0x5c>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <UI_Scheduler+0x5c>)
 8003ab2:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <UI_Scheduler+0x60>)
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d906      	bls.n	8003acc <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <UI_Scheduler+0x60>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <UI_Scheduler+0x60>)
 8003aca:	801a      	strh	r2, [r3, #0]
  }
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	200007a8 	.word	0x200007a8
 8003adc:	200007aa 	.word	0x200007aa
 8003ae0:	20000752 	.word	0x20000752

08003ae4 <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <UI_SerialCommunicationTimeOutStop+0x14>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	801a      	strh	r2, [r3, #0]
}
 8003aee:	bf00      	nop
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	200007aa 	.word	0x200007aa

08003afc <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <UI_SerialCommunicationTimeOutStart+0x14>)
 8003b02:	224f      	movs	r2, #79	; 0x4f
 8003b04:	801a      	strh	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	200007aa 	.word	0x200007aa

08003b14 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	460b      	mov	r3, r1
 8003b22:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	7afa      	ldrb	r2, [r7, #11]
 8003b28:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
  pHandle->pMCT = pMCT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	60da      	str	r2, [r3, #12]
  pHandle->bSelectedDrive = 0u;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	751a      	strb	r2, [r3, #20]
  pHandle->pUICfg = pUICfg;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	611a      	str	r2, [r3, #16]
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <UI_SelectMC+0x20>
  {
    retVal = false;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e002      	b.n	8003b74 <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	751a      	strb	r2, [r3, #20]
  }
  return retVal;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7d1b      	ldrb	r3, [r3, #20]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b096      	sub	sp, #88	; 0x58
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	7d1b      	ldrb	r3, [r3, #20]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	643b      	str	r3, [r7, #64]	; 0x40
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	7d1b      	ldrb	r3, [r3, #20]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c

  bool retVal = true;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  switch (bRegID)
 8003bd0:	7afb      	ldrb	r3, [r7, #11]
 8003bd2:	2b5b      	cmp	r3, #91	; 0x5b
 8003bd4:	f200 8223 	bhi.w	800401e <UI_SetReg+0x482>
 8003bd8:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <UI_SetReg+0x44>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003d51 	.word	0x08003d51
 8003be4:	0800401f 	.word	0x0800401f
 8003be8:	0800401f 	.word	0x0800401f
 8003bec:	08003dc1 	.word	0x08003dc1
 8003bf0:	0800401f 	.word	0x0800401f
 8003bf4:	08003d8b 	.word	0x08003d8b
 8003bf8:	08003d9d 	.word	0x08003d9d
 8003bfc:	08003daf 	.word	0x08003daf
 8003c00:	08003df9 	.word	0x08003df9
 8003c04:	08003e13 	.word	0x08003e13
 8003c08:	08003e25 	.word	0x08003e25
 8003c0c:	08003e37 	.word	0x08003e37
 8003c10:	08003e49 	.word	0x08003e49
 8003c14:	08003e63 	.word	0x08003e63
 8003c18:	08003e75 	.word	0x08003e75
 8003c1c:	08003e87 	.word	0x08003e87
 8003c20:	08003e99 	.word	0x08003e99
 8003c24:	08003ef7 	.word	0x08003ef7
 8003c28:	0800401f 	.word	0x0800401f
 8003c2c:	0800401f 	.word	0x0800401f
 8003c30:	08003f53 	.word	0x08003f53
 8003c34:	08003faf 	.word	0x08003faf
 8003c38:	0800401f 	.word	0x0800401f
 8003c3c:	0800401f 	.word	0x0800401f
 8003c40:	0800401f 	.word	0x0800401f
 8003c44:	0800401f 	.word	0x0800401f
 8003c48:	0800401f 	.word	0x0800401f
 8003c4c:	0800401f 	.word	0x0800401f
 8003c50:	0800401f 	.word	0x0800401f
 8003c54:	0800401f 	.word	0x0800401f
 8003c58:	0800401f 	.word	0x0800401f
 8003c5c:	0800401f 	.word	0x0800401f
 8003c60:	0800401f 	.word	0x0800401f
 8003c64:	0800401f 	.word	0x0800401f
 8003c68:	0800401f 	.word	0x0800401f
 8003c6c:	0800401f 	.word	0x0800401f
 8003c70:	0800401f 	.word	0x0800401f
 8003c74:	0800401f 	.word	0x0800401f
 8003c78:	0800401f 	.word	0x0800401f
 8003c7c:	0800401f 	.word	0x0800401f
 8003c80:	0800401f 	.word	0x0800401f
 8003c84:	0800401f 	.word	0x0800401f
 8003c88:	0800401f 	.word	0x0800401f
 8003c8c:	0800401f 	.word	0x0800401f
 8003c90:	0800401f 	.word	0x0800401f
 8003c94:	0800401f 	.word	0x0800401f
 8003c98:	0800401f 	.word	0x0800401f
 8003c9c:	0800401f 	.word	0x0800401f
 8003ca0:	0800401f 	.word	0x0800401f
 8003ca4:	0800401f 	.word	0x0800401f
 8003ca8:	0800401f 	.word	0x0800401f
 8003cac:	0800401f 	.word	0x0800401f
 8003cb0:	0800401f 	.word	0x0800401f
 8003cb4:	0800401f 	.word	0x0800401f
 8003cb8:	0800401f 	.word	0x0800401f
 8003cbc:	0800401f 	.word	0x0800401f
 8003cc0:	0800401f 	.word	0x0800401f
 8003cc4:	0800401f 	.word	0x0800401f
 8003cc8:	0800401f 	.word	0x0800401f
 8003ccc:	0800401f 	.word	0x0800401f
 8003cd0:	0800401f 	.word	0x0800401f
 8003cd4:	0800401f 	.word	0x0800401f
 8003cd8:	0800401f 	.word	0x0800401f
 8003cdc:	0800401f 	.word	0x0800401f
 8003ce0:	0800401f 	.word	0x0800401f
 8003ce4:	08004011 	.word	0x08004011
 8003ce8:	0800401f 	.word	0x0800401f
 8003cec:	0800401f 	.word	0x0800401f
 8003cf0:	0800401f 	.word	0x0800401f
 8003cf4:	0800401f 	.word	0x0800401f
 8003cf8:	0800401f 	.word	0x0800401f
 8003cfc:	0800401f 	.word	0x0800401f
 8003d00:	0800401f 	.word	0x0800401f
 8003d04:	0800401f 	.word	0x0800401f
 8003d08:	0800401f 	.word	0x0800401f
 8003d0c:	0800401f 	.word	0x0800401f
 8003d10:	0800401f 	.word	0x0800401f
 8003d14:	0800401f 	.word	0x0800401f
 8003d18:	0800401f 	.word	0x0800401f
 8003d1c:	0800401f 	.word	0x0800401f
 8003d20:	0800401f 	.word	0x0800401f
 8003d24:	0800401f 	.word	0x0800401f
 8003d28:	0800401f 	.word	0x0800401f
 8003d2c:	0800401f 	.word	0x0800401f
 8003d30:	0800401f 	.word	0x0800401f
 8003d34:	0800401f 	.word	0x0800401f
 8003d38:	0800401f 	.word	0x0800401f
 8003d3c:	0800401f 	.word	0x0800401f
 8003d40:	0800401f 	.word	0x0800401f
 8003d44:	0800401f 	.word	0x0800401f
 8003d48:	0800401f 	.word	0x0800401f
 8003d4c:	08003d65 	.word	0x08003d65
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4619      	mov	r1, r3
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff fef9 	bl	8003b4e <UI_SelectMC>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    break;
 8003d62:	e169      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4aa7      	ldr	r2, [pc, #668]	; (800400c <UI_SetReg+0x470>)
 8003d70:	fb82 1203 	smull	r1, r2, r2, r3
 8003d74:	441a      	add	r2, r3
 8003d76:	1152      	asrs	r2, r2, #5
 8003d78:	17db      	asrs	r3, r3, #31
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b21b      	sxth	r3, r3
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4619      	mov	r1, r3
 8003d82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003d84:	f7fc ff6f 	bl	8000c66 <MCI_ExecSpeedRamp>
    }
    break;
 8003d88:	e156      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	b212      	sxth	r2, r2
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f006 f80a 	bl	8009dae <PID_SetKP>
    }
    break;
 8003d9a:	e14d      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	b212      	sxth	r2, r2
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f006 f810 	bl	8009dcc <PID_SetKI>
    }
    break;
 8003dac:	e144      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	b212      	sxth	r2, r2
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f006 f856 	bl	8009e6a <PID_SetKD>
    }
    break;
 8003dbe:	e13b      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d108      	bne.n	8003dda <UI_SetReg+0x23e>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003dc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dca:	f7fd f96a 	bl	80010a2 <MCI_GetTeref>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dd6:	f7fc ff63 	bl	8000ca0 <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f040 8121 	bne.w	8004026 <UI_SetReg+0x48a>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003de4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003de6:	f7fd f8bf 	bl	8000f68 <MCI_GetMecSpeedRefUnit>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2200      	movs	r2, #0
 8003dee:	4619      	mov	r1, r3
 8003df0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003df2:	f7fc ff38 	bl	8000c66 <MCI_ExecSpeedRamp>
      }
    }
    break;
 8003df6:	e116      	b.n	8004026 <UI_SetReg+0x48a>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8003df8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dfa:	f7fd f90a 	bl	8001012 <MCI_GetIqdref>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
      currComp.q = (int16_t)wValue;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	b21b      	sxth	r3, r3
 8003e06:	853b      	strh	r3, [r7, #40]	; 0x28
      MCI_SetCurrentReferences(pMCI,currComp);
 8003e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003e0c:	f7fc ff65 	bl	8000cda <MCI_SetCurrentReferences>
    }
    break;
 8003e10:	e112      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	b212      	sxth	r2, r2
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f005 ffc6 	bl	8009dae <PID_SetKP>
    }
    break;
 8003e22:	e109      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	b212      	sxth	r2, r2
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f005 ffcc 	bl	8009dcc <PID_SetKI>
    }
    break;
 8003e34:	e100      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	b212      	sxth	r2, r2
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f006 f812 	bl	8009e6a <PID_SetKD>
    }
    break;
 8003e46:	e0f7      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8003e48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003e4a:	f7fd f8e2 	bl	8001012 <MCI_GetIqdref>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
      currComp.d = (int16_t)wValue;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	b21b      	sxth	r3, r3
 8003e56:	84fb      	strh	r3, [r7, #38]	; 0x26
      MCI_SetCurrentReferences(pMCI,currComp);
 8003e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003e5c:	f7fc ff3d 	bl	8000cda <MCI_SetCurrentReferences>
    }
    break;
 8003e60:	e0ea      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	b212      	sxth	r2, r2
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f005 ff9e 	bl	8009dae <PID_SetKP>
    }
    break;
 8003e72:	e0e1      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	b212      	sxth	r2, r2
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 ffa4 	bl	8009dcc <PID_SetKI>
    }
    break;
 8003e84:	e0d8      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	b212      	sxth	r2, r2
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f005 ffea 	bl	8009e6a <PID_SetKD>
    }
    break;
 8003e96:	e0cf      	b.n	8004038 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	7d1b      	ldrb	r3, [r3, #20]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	653b      	str	r3, [r7, #80]	; 0x50
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	0f1b      	lsrs	r3, r3, #28
 8003eb0:	2b09      	cmp	r3, #9
 8003eb2:	d102      	bne.n	8003eba <UI_SetReg+0x31e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	d102      	bne.n	8003ecc <UI_SetReg+0x330>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (pSPD != MC_NULL)
 8003ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80ab 	beq.w	800402a <UI_SetReg+0x48e>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003ed4:	f107 0220 	add.w	r2, r7, #32
 8003ed8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8003edc:	4619      	mov	r1, r3
 8003ede:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003ee0:	f008 faa8 	bl	800c434 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003eec:	4619      	mov	r1, r3
 8003eee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003ef0:	f008 faa8 	bl	800c444 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8003ef4:	e099      	b.n	800402a <UI_SetReg+0x48e>

  case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	7d1b      	ldrb	r3, [r3, #20]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	0f1b      	lsrs	r3, r3, #28
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	d102      	bne.n	8003f18 <UI_SetReg+0x37c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	0e1b      	lsrs	r3, r3, #24
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d102      	bne.n	8003f2a <UI_SetReg+0x38e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (pSPD != MC_NULL)
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d07e      	beq.n	800402e <UI_SetReg+0x492>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003f30:	f107 021c 	add.w	r2, r7, #28
 8003f34:	f107 031e 	add.w	r3, r7, #30
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f3c:	f008 fa7a 	bl	800c434 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8003f40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	b212      	sxth	r2, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f4c:	f008 fa7a 	bl	800c444 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8003f50:	e06d      	b.n	800402e <UI_SetReg+0x492>

  case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	7d1b      	ldrb	r3, [r3, #20]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	64bb      	str	r3, [r7, #72]	; 0x48
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	0f1b      	lsrs	r3, r3, #28
 8003f6a:	2b09      	cmp	r3, #9
 8003f6c:	d102      	bne.n	8003f74 <UI_SetReg+0x3d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	0e1b      	lsrs	r3, r3, #24
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	d102      	bne.n	8003f86 <UI_SetReg+0x3ea>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (pSPD != MC_NULL)
 8003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d052      	beq.n	8004032 <UI_SetReg+0x496>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003f8c:	f107 0218 	add.w	r2, r7, #24
 8003f90:	f107 031a 	add.w	r3, r7, #26
 8003f94:	4619      	mov	r1, r3
 8003f96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f98:	f008 fa58 	bl	800c44c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8003f9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	b212      	sxth	r2, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003fa8:	f008 fa5e 	bl	800c468 <STO_SetPLLGains>
      }
    }
    break;
 8003fac:	e041      	b.n	8004032 <UI_SetReg+0x496>

  case MC_PROTOCOL_REG_PLL_KP:
	{
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	7d1b      	ldrb	r3, [r3, #20]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	647b      	str	r3, [r7, #68]	; 0x44
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	0f1b      	lsrs	r3, r3, #28
 8003fc6:	2b09      	cmp	r3, #9
 8003fc8:	d102      	bne.n	8003fd0 <UI_SetReg+0x434>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8003fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	0e1b      	lsrs	r3, r3, #24
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	d102      	bne.n	8003fe2 <UI_SetReg+0x446>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (pSPD != MC_NULL)
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d026      	beq.n	8004036 <UI_SetReg+0x49a>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003fe8:	f107 0214 	add.w	r2, r7, #20
 8003fec:	f107 0316 	add.w	r3, r7, #22
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003ff4:	f008 fa2a 	bl	800c44c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004000:	4619      	mov	r1, r3
 8004002:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004004:	f008 fa30 	bl	800c468 <STO_SetPLLGains>
      }
    }
    break;
 8004008:	e015      	b.n	8004036 <UI_SetReg+0x49a>
 800400a:	bf00      	nop
 800400c:	88888889 	.word	0x88888889

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	b21b      	sxth	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004018:	f7fd f851 	bl	80010be <MCI_SetIdref>
    }
    break;
 800401c:	e00c      	b.n	8004038 <UI_SetReg+0x49c>

  default:
    retVal = false;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    break;
 8004024:	e008      	b.n	8004038 <UI_SetReg+0x49c>
    break;
 8004026:	bf00      	nop
 8004028:	e006      	b.n	8004038 <UI_SetReg+0x49c>
    break;
 800402a:	bf00      	nop
 800402c:	e004      	b.n	8004038 <UI_SetReg+0x49c>
    break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <UI_SetReg+0x49c>
    break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <UI_SetReg+0x49c>
    break;
 8004036:	bf00      	nop
  }

  return retVal;
 8004038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800403c:	4618      	mov	r0, r3
 800403e:	3758      	adds	r7, #88	; 0x58
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b0ba      	sub	sp, #232	; 0xe8
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	460b      	mov	r3, r1
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	7d1b      	ldrb	r3, [r3, #20]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	7d1b      	ldrb	r3, [r3, #20]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  int32_t bRetVal = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if ( success != (bool *) 0 )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <UI_GetReg+0x44>
  {
    *success = true;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 8004088:	7afb      	ldrb	r3, [r7, #11]
 800408a:	2b81      	cmp	r3, #129	; 0x81
 800408c:	f200 85cf 	bhi.w	8004c2e <UI_GetReg+0xbea>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UI_GetReg+0x54>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080042a1 	.word	0x080042a1
 800409c:	080042b1 	.word	0x080042b1
 80040a0:	080042c7 	.word	0x080042c7
 80040a4:	080043f3 	.word	0x080043f3
 80040a8:	080042dd 	.word	0x080042dd
 80040ac:	08004305 	.word	0x08004305
 80040b0:	0800431b 	.word	0x0800431b
 80040b4:	08004331 	.word	0x08004331
 80040b8:	080043c3 	.word	0x080043c3
 80040bc:	0800448b 	.word	0x0800448b
 80040c0:	0800449f 	.word	0x0800449f
 80040c4:	080044b3 	.word	0x080044b3
 80040c8:	080043db 	.word	0x080043db
 80040cc:	080044dd 	.word	0x080044dd
 80040d0:	080044f1 	.word	0x080044f1
 80040d4:	08004505 	.word	0x08004505
 80040d8:	08004519 	.word	0x08004519
 80040dc:	0800457b 	.word	0x0800457b
 80040e0:	08004c2f 	.word	0x08004c2f
 80040e4:	08004c2f 	.word	0x08004c2f
 80040e8:	080046a7 	.word	0x080046a7
 80040ec:	08004645 	.word	0x08004645
 80040f0:	08004c2f 	.word	0x08004c2f
 80040f4:	08004c2f 	.word	0x08004c2f
 80040f8:	08004c2f 	.word	0x08004c2f
 80040fc:	08004347 	.word	0x08004347
 8004100:	0800435d 	.word	0x0800435d
 8004104:	080049b7 	.word	0x080049b7
 8004108:	08004c2f 	.word	0x08004c2f
 800410c:	08004c2f 	.word	0x08004c2f
 8004110:	08004373 	.word	0x08004373
 8004114:	08004b01 	.word	0x08004b01
 8004118:	08004b17 	.word	0x08004b17
 800411c:	08004c2f 	.word	0x08004c2f
 8004120:	08004b2d 	.word	0x08004b2d
 8004124:	08004b53 	.word	0x08004b53
 8004128:	08004b69 	.word	0x08004b69
 800412c:	08004b7f 	.word	0x08004b7f
 8004130:	08004b95 	.word	0x08004b95
 8004134:	08004b01 	.word	0x08004b01
 8004138:	08004b17 	.word	0x08004b17
 800413c:	08004bab 	.word	0x08004bab
 8004140:	08004bc1 	.word	0x08004bc1
 8004144:	08004bd7 	.word	0x08004bd7
 8004148:	08004bed 	.word	0x08004bed
 800414c:	08004c03 	.word	0x08004c03
 8004150:	08004c19 	.word	0x08004c19
 8004154:	080049cb 	.word	0x080049cb
 8004158:	08004a37 	.word	0x08004a37
 800415c:	080045dd 	.word	0x080045dd
 8004160:	08004709 	.word	0x08004709
 8004164:	08004767 	.word	0x08004767
 8004168:	080047cb 	.word	0x080047cb
 800416c:	0800482f 	.word	0x0800482f
 8004170:	08004893 	.word	0x08004893
 8004174:	08004c2f 	.word	0x08004c2f
 8004178:	08004c2f 	.word	0x08004c2f
 800417c:	08004c2f 	.word	0x08004c2f
 8004180:	08004c2f 	.word	0x08004c2f
 8004184:	08004c2f 	.word	0x08004c2f
 8004188:	08004c2f 	.word	0x08004c2f
 800418c:	08004c2f 	.word	0x08004c2f
 8004190:	08004c2f 	.word	0x08004c2f
 8004194:	08004aad 	.word	0x08004aad
 8004198:	08004ad7 	.word	0x08004ad7
 800419c:	080044c7 	.word	0x080044c7
 80041a0:	080048f7 	.word	0x080048f7
 80041a4:	08004957 	.word	0x08004957
 80041a8:	08004c2f 	.word	0x08004c2f
 80041ac:	08004c2f 	.word	0x08004c2f
 80041b0:	08004c2f 	.word	0x08004c2f
 80041b4:	08004c2f 	.word	0x08004c2f
 80041b8:	08004c2f 	.word	0x08004c2f
 80041bc:	08004c2f 	.word	0x08004c2f
 80041c0:	08004c2f 	.word	0x08004c2f
 80041c4:	08004c2f 	.word	0x08004c2f
 80041c8:	08004c2f 	.word	0x08004c2f
 80041cc:	08004c2f 	.word	0x08004c2f
 80041d0:	08004c2f 	.word	0x08004c2f
 80041d4:	08004c2f 	.word	0x08004c2f
 80041d8:	08004c2f 	.word	0x08004c2f
 80041dc:	08004c2f 	.word	0x08004c2f
 80041e0:	08004c2f 	.word	0x08004c2f
 80041e4:	08004c2f 	.word	0x08004c2f
 80041e8:	08004c2f 	.word	0x08004c2f
 80041ec:	08004c2f 	.word	0x08004c2f
 80041f0:	08004c2f 	.word	0x08004c2f
 80041f4:	08004c2f 	.word	0x08004c2f
 80041f8:	08004c2f 	.word	0x08004c2f
 80041fc:	08004c2f 	.word	0x08004c2f
 8004200:	08004c2f 	.word	0x08004c2f
 8004204:	08004405 	.word	0x08004405
 8004208:	08004c2f 	.word	0x08004c2f
 800420c:	08004c2f 	.word	0x08004c2f
 8004210:	08004c2f 	.word	0x08004c2f
 8004214:	08004c2f 	.word	0x08004c2f
 8004218:	08004c2f 	.word	0x08004c2f
 800421c:	08004c2f 	.word	0x08004c2f
 8004220:	08004c2f 	.word	0x08004c2f
 8004224:	08004c2f 	.word	0x08004c2f
 8004228:	08004c2f 	.word	0x08004c2f
 800422c:	08004c2f 	.word	0x08004c2f
 8004230:	08004c2f 	.word	0x08004c2f
 8004234:	08004c2f 	.word	0x08004c2f
 8004238:	08004c2f 	.word	0x08004c2f
 800423c:	08004c2f 	.word	0x08004c2f
 8004240:	08004c2f 	.word	0x08004c2f
 8004244:	08004c2f 	.word	0x08004c2f
 8004248:	08004c2f 	.word	0x08004c2f
 800424c:	08004c2f 	.word	0x08004c2f
 8004250:	08004463 	.word	0x08004463
 8004254:	08004477 	.word	0x08004477
 8004258:	0800439b 	.word	0x0800439b
 800425c:	08004c2f 	.word	0x08004c2f
 8004260:	080043a5 	.word	0x080043a5
 8004264:	080043af 	.word	0x080043af
 8004268:	08004c2f 	.word	0x08004c2f
 800426c:	08004c2f 	.word	0x08004c2f
 8004270:	08004c2f 	.word	0x08004c2f
 8004274:	08004c2f 	.word	0x08004c2f
 8004278:	08004c2f 	.word	0x08004c2f
 800427c:	08004c2f 	.word	0x08004c2f
 8004280:	08004c2f 	.word	0x08004c2f
 8004284:	08004c2f 	.word	0x08004c2f
 8004288:	08004c2f 	.word	0x08004c2f
 800428c:	08004c2f 	.word	0x08004c2f
 8004290:	08004c2f 	.word	0x08004c2f
 8004294:	08004c2f 	.word	0x08004c2f
 8004298:	08004c2f 	.word	0x08004c2f
 800429c:	080043b9 	.word	0x080043b9
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fc6e 	bl	8003b82 <UI_GetSelectedMC>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80042ac:	f000 bcdb 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80042b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	4618      	mov	r0, r3
 80042b8:	f007 f8c5 	bl	800b446 <STM_GetFaultState>
 80042bc:	4603      	mov	r3, r0
 80042be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
	break;
 80042c2:	f000 bcd0 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80042c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	4618      	mov	r0, r3
 80042ce:	f007 f895 	bl	800b3fc <STM_GetState>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
	break;
 80042d8:	f000 bcc5 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80042dc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80042e0:	f7fc fe42 	bl	8000f68 <MCI_GetMecSpeedRefUnit>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4ad2      	ldr	r2, [pc, #840]	; (800463c <UI_GetReg+0x5f8>)
 80042f2:	fb82 1203 	smull	r1, r2, r2, r3
 80042f6:	1092      	asrs	r2, r2, #2
 80042f8:	17db      	asrs	r3, r3, #31
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004300:	f000 bcb1 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8004304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fd6d 	bl	8009dea <PID_GetKP>
 8004310:	4603      	mov	r3, r0
 8004312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004316:	f000 bca6 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800431a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f005 fd6f 	bl	8009e04 <PID_GetKI>
 8004326:	4603      	mov	r3, r0
 8004328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 800432c:	f000 bc9b 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8004330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f005 fda6 	bl	8009e88 <PID_GetKD>
 800433c:	4603      	mov	r3, r0
 800433e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004342:	f000 bc90 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4618      	mov	r0, r3
 800434e:	f003 fdbf 	bl	8007ed0 <VBS_GetAvBusVoltage_V>
 8004352:	4603      	mov	r3, r0
 8004354:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004358:	f000 bc85 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 800435c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	4618      	mov	r0, r3
 8004364:	f005 fcd3 	bl	8009d0e <NTC_GetAvTemp_C>
 8004368:	4603      	mov	r3, r0
 800436a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 800436e:	f000 bc7a 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8004372:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004376:	f7fc fde5 	bl	8000f44 <MCI_GetAvrgMecSpeedUnit>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4aad      	ldr	r2, [pc, #692]	; (800463c <UI_GetReg+0x5f8>)
 8004388:	fb82 1203 	smull	r1, r2, r2, r3
 800438c:	1092      	asrs	r2, r2, #2
 800438e:	17db      	asrs	r3, r3, #31
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004396:	f000 bc66 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 800439a:	4ba9      	ldr	r3, [pc, #676]	; (8004640 <UI_GetReg+0x5fc>)
 800439c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80043a0:	f000 bc61 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 80043a4:	2311      	movs	r3, #17
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80043aa:	f000 bc5c 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80043b4:	f000 bc57 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80043be:	f000 bc52 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 80043c2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80043c6:	f7fc fe24 	bl	8001012 <MCI_GetIqdref>
 80043ca:	4603      	mov	r3, r0
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
      bRetVal = (int32_t)currComp.q;
 80043ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80043d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80043d6:	f000 bc46 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 80043da:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80043de:	f7fc fe18 	bl	8001012 <MCI_GetIqdref>
 80043e2:	4603      	mov	r3, r0
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
      bRetVal = (int32_t)currComp.d;
 80043e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80043ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80043ee:	f000 bc3a 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80043f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80043f6:	f7fc fd40 	bl	8000e7a <MCI_GetControlMode>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004400:	f000 bc31 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8004404:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004408:	f7fc fd37 	bl	8000e7a <MCI_GetControlMode>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d113      	bne.n	800443a <UI_GetReg+0x3f6>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8004412:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004416:	f7fc fd73 	bl	8000f00 <MCI_GetLastRampFinalSpeed>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a85      	ldr	r2, [pc, #532]	; (800463c <UI_GetReg+0x5f8>)
 8004428:	fb82 1203 	smull	r1, r2, r2, r3
 800442c:	1092      	asrs	r2, r2, #2
 800442e:	17db      	asrs	r3, r3, #31
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 8004436:	f000 bc16 	b.w	8004c66 <UI_GetReg+0xc22>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800443a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800443e:	f7fc fd93 	bl	8000f68 <MCI_GetMecSpeedRefUnit>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4a7b      	ldr	r2, [pc, #492]	; (800463c <UI_GetReg+0x5f8>)
 8004450:	fb82 1203 	smull	r1, r2, r2, r3
 8004454:	1092      	asrs	r2, r2, #2
 8004456:	17db      	asrs	r3, r3, #31
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    break;
 800445e:	f000 bc02 	b.w	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8004462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f005 fce6 	bl	8009e3a <PID_GetKPDivisor>
 800446e:	4603      	mov	r3, r0
 8004470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004474:	e3f7      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f005 fce8 	bl	8009e52 <PID_GetKIDivisor>
 8004482:	4603      	mov	r3, r0
 8004484:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004488:	e3ed      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800448a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4618      	mov	r0, r3
 8004492:	f005 fcaa 	bl	8009dea <PID_GetKP>
 8004496:	4603      	mov	r3, r0
 8004498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 800449c:	e3e3      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800449e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f005 fcad 	bl	8009e04 <PID_GetKI>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80044b0:	e3d9      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80044b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f005 fce5 	bl	8009e88 <PID_GetKD>
 80044be:	4603      	mov	r3, r0
 80044c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80044c4:	e3cf      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 80044c6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80044ca:	f7fc fda2 	bl	8001012 <MCI_GetIqdref>
 80044ce:	4603      	mov	r3, r0
 80044d0:	623b      	str	r3, [r7, #32]
      bRetVal = (int32_t)currComp.d;
 80044d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80044d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80044da:	e3c4      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80044dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f005 fc81 	bl	8009dea <PID_GetKP>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80044ee:	e3ba      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80044f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 fc84 	bl	8009e04 <PID_GetKI>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004502:	e3b0      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8004504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f005 fcbc 	bl	8009e88 <PID_GetKD>
 8004510:	4603      	mov	r3, r0
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004516:	e3a6      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	7d1b      	ldrb	r3, [r3, #20]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	66fb      	str	r3, [r7, #108]	; 0x6c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	0f1b      	lsrs	r3, r3, #28
 8004532:	2b09      	cmp	r3, #9
 8004534:	d104      	bne.n	8004540 <UI_GetReg+0x4fc>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	0e1b      	lsrs	r3, r3, #24
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	2b09      	cmp	r3, #9
 800454a:	d104      	bne.n	8004556 <UI_GetReg+0x512>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800454c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      }
      if (pSPD != MC_NULL)
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <UI_GetReg+0x52c>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800455e:	f107 021c 	add.w	r2, r7, #28
 8004562:	f107 031e 	add.w	r3, r7, #30
 8004566:	4619      	mov	r1, r3
 8004568:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800456c:	f007 ff62 	bl	800c434 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC1;
 8004570:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004574:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004578:	e375      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	7d1b      	ldrb	r3, [r3, #20]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	673b      	str	r3, [r7, #112]	; 0x70
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	2b09      	cmp	r3, #9
 8004596:	d104      	bne.n	80045a2 <UI_GetReg+0x55e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a4:	0e1b      	lsrs	r3, r3, #24
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	2b09      	cmp	r3, #9
 80045ac:	d104      	bne.n	80045b8 <UI_GetReg+0x574>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80045ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      }
      if (pSPD != MC_NULL)
 80045b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <UI_GetReg+0x58e>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80045c0:	f107 0218 	add.w	r2, r7, #24
 80045c4:	f107 031a 	add.w	r3, r7, #26
 80045c8:	4619      	mov	r1, r3
 80045ca:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80045ce:	f007 ff31 	bl	800c434 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC2;
 80045d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80045d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80045da:	e344      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_OBS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	7d1b      	ldrb	r3, [r3, #20]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80045f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f8:	0f1b      	lsrs	r3, r3, #28
 80045fa:	2b09      	cmp	r3, #9
 80045fc:	d104      	bne.n	8004608 <UI_GetReg+0x5c4>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80045fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800460c:	0e1b      	lsrs	r3, r3, #24
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	2b09      	cmp	r3, #9
 8004614:	d104      	bne.n	8004620 <UI_GetReg+0x5dc>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      if (pSPD != MC_NULL)
 8004620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8309 	beq.w	8004c3c <UI_GetReg+0xbf8>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 800462a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800462e:	f006 fa8c 	bl	800ab4a <SPD_GetElAngle>
 8004632:	4603      	mov	r3, r0
 8004634:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 8004638:	e300      	b.n	8004c3c <UI_GetReg+0xbf8>
 800463a:	bf00      	nop
 800463c:	66666667 	.word	0x66666667
 8004640:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_PLL_KP:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	7d1b      	ldrb	r3, [r3, #20]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	67bb      	str	r3, [r7, #120]	; 0x78
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800465a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800465c:	0f1b      	lsrs	r3, r3, #28
 800465e:	2b09      	cmp	r3, #9
 8004660:	d104      	bne.n	800466c <UI_GetReg+0x628>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800466c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800466e:	0e1b      	lsrs	r3, r3, #24
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	2b09      	cmp	r3, #9
 8004676:	d104      	bne.n	8004682 <UI_GetReg+0x63e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
      if (pSPD != MC_NULL)
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <UI_GetReg+0x658>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800468a:	f107 0214 	add.w	r2, r7, #20
 800468e:	f107 0316 	add.w	r3, r7, #22
 8004692:	4619      	mov	r1, r3
 8004694:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004698:	f007 fed8 	bl	800c44c <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hPgain;
 800469c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80046a4:	e2df      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	7d1b      	ldrb	r3, [r3, #20]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	677b      	str	r3, [r7, #116]	; 0x74
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80046bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046be:	0f1b      	lsrs	r3, r3, #28
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d104      	bne.n	80046ce <UI_GetReg+0x68a>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80046c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80046ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d0:	0e1b      	lsrs	r3, r3, #24
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d104      	bne.n	80046e4 <UI_GetReg+0x6a0>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80046da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (pSPD != MC_NULL)
 80046e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <UI_GetReg+0x6ba>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80046ec:	f107 0210 	add.w	r2, r7, #16
 80046f0:	f107 0312 	add.w	r3, r7, #18
 80046f4:	4619      	mov	r1, r3
 80046f6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80046fa:	f007 fea7 	bl	800c44c <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hIgain;
 80046fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004706:	e2ae      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_OBS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	7d1b      	ldrb	r3, [r3, #20]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004724:	0f1b      	lsrs	r3, r3, #28
 8004726:	2b09      	cmp	r3, #9
 8004728:	d104      	bne.n	8004734 <UI_GetReg+0x6f0>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800472a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004738:	0e1b      	lsrs	r3, r3, #24
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	2b09      	cmp	r3, #9
 8004740:	d104      	bne.n	800474c <UI_GetReg+0x708>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (pSPD != MC_NULL)
 800474c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8275 	beq.w	8004c40 <UI_GetReg+0xbfc>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 8004756:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800475a:	f006 fa88 	bl	800ac6e <SPD_GetS16Speed>
 800475e:	4603      	mov	r3, r0
 8004760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 8004764:	e26c      	b.n	8004c40 <UI_GetReg+0xbfc>

    case MC_PROTOCOL_REG_OBS_I_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	7d1b      	ldrb	r3, [r3, #20]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800477e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004782:	0f1b      	lsrs	r3, r3, #28
 8004784:	2b09      	cmp	r3, #9
 8004786:	d104      	bne.n	8004792 <UI_GetReg+0x74e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004796:	0e1b      	lsrs	r3, r3, #24
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	2b09      	cmp	r3, #9
 800479e:	d104      	bne.n	80047aa <UI_GetReg+0x766>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80047a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (pSPD != MC_NULL)
 80047aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8248 	beq.w	8004c44 <UI_GetReg+0xc00>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80047b4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80047b8:	f007 fe28 	bl	800c40c <STO_PLL_GetEstimatedCurrent>
 80047bc:	4603      	mov	r3, r0
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80047c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 80047c8:	e23c      	b.n	8004c44 <UI_GetReg+0xc00>

    case MC_PROTOCOL_REG_OBS_I_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	7d1b      	ldrb	r3, [r3, #20]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80047e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047e6:	0f1b      	lsrs	r3, r3, #28
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d104      	bne.n	80047f6 <UI_GetReg+0x7b2>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80047ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80047f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047fa:	0e1b      	lsrs	r3, r3, #24
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	2b09      	cmp	r3, #9
 8004802:	d104      	bne.n	800480e <UI_GetReg+0x7ca>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (pSPD != MC_NULL)
 800480e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8218 	beq.w	8004c48 <UI_GetReg+0xc04>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8004818:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800481c:	f007 fdf6 	bl	800c40c <STO_PLL_GetEstimatedCurrent>
 8004820:	4603      	mov	r3, r0
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
 8004824:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004828:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 800482c:	e20c      	b.n	8004c48 <UI_GetReg+0xc04>

    case MC_PROTOCOL_REG_OBS_BEMF_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	7d1b      	ldrb	r3, [r3, #20]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800484a:	0f1b      	lsrs	r3, r3, #28
 800484c:	2b09      	cmp	r3, #9
 800484e:	d104      	bne.n	800485a <UI_GetReg+0x816>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800485a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800485e:	0e1b      	lsrs	r3, r3, #24
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	2b09      	cmp	r3, #9
 8004866:	d104      	bne.n	8004872 <UI_GetReg+0x82e>
      {
        pSPD =  pMCT->pSpeedSensorAux;
 8004868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (pSPD != MC_NULL)
 8004872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 81e8 	beq.w	8004c4c <UI_GetReg+0xc08>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 800487c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004880:	f007 fdb8 	bl	800c3f4 <STO_PLL_GetEstimatedBemf>
 8004884:	4603      	mov	r3, r0
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
 8004888:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800488c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 8004890:	e1dc      	b.n	8004c4c <UI_GetReg+0xc08>

    case MC_PROTOCOL_REG_OBS_BEMF_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	7d1b      	ldrb	r3, [r3, #20]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80048aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048ae:	0f1b      	lsrs	r3, r3, #28
 80048b0:	2b09      	cmp	r3, #9
 80048b2:	d104      	bne.n	80048be <UI_GetReg+0x87a>
      {
       pSPD = pMCT->pSpeedSensorMain;
 80048b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80048be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c2:	0e1b      	lsrs	r3, r3, #24
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	d104      	bne.n	80048d6 <UI_GetReg+0x892>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80048cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (pSPD != MC_NULL)
 80048d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 81b8 	beq.w	8004c50 <UI_GetReg+0xc0c>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80048e0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80048e4:	f007 fd86 	bl	800c3f4 <STO_PLL_GetEstimatedBemf>
 80048e8:	4603      	mov	r3, r0
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ec:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80048f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 80048f4:	e1ac      	b.n	8004c50 <UI_GetReg+0xc0c>

    case MC_PROTOCOL_REG_EST_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	7d1b      	ldrb	r3, [r3, #20]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800490e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004912:	0f1b      	lsrs	r3, r3, #28
 8004914:	2b09      	cmp	r3, #9
 8004916:	d104      	bne.n	8004922 <UI_GetReg+0x8de>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004926:	0e1b      	lsrs	r3, r3, #24
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	2b09      	cmp	r3, #9
 800492e:	d104      	bne.n	800493a <UI_GetReg+0x8f6>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (pSPD != MC_NULL)
 800493a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8188 	beq.w	8004c54 <UI_GetReg+0xc10>
      {
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8004944:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004948:	f007 fda6 	bl	800c498 <STO_PLL_GetEstimatedBemfLevel>
 800494c:	4603      	mov	r3, r0
 800494e:	141b      	asrs	r3, r3, #16
 8004950:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 8004954:	e17e      	b.n	8004c54 <UI_GetReg+0xc10>

    case MC_PROTOCOL_REG_OBS_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	7d1b      	ldrb	r3, [r3, #20]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800496e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004972:	0f1b      	lsrs	r3, r3, #28
 8004974:	2b09      	cmp	r3, #9
 8004976:	d104      	bne.n	8004982 <UI_GetReg+0x93e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004986:	0e1b      	lsrs	r3, r3, #24
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2b09      	cmp	r3, #9
 800498e:	d104      	bne.n	800499a <UI_GetReg+0x956>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (pSPD != MC_NULL)
 800499a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 815a 	beq.w	8004c58 <UI_GetReg+0xc14>
      {
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80049a4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80049a8:	f007 fd7a 	bl	800c4a0 <STO_PLL_GetObservedBemfLevel>
 80049ac:	4603      	mov	r3, r0
 80049ae:	141b      	asrs	r3, r3, #16
 80049b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 80049b4:	e150      	b.n	8004c58 <UI_GetReg+0xc14>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80049b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	4618      	mov	r0, r3
 80049be:	f005 f90b 	bl	8009bd8 <MPM_GetAvrgElMotorPowerW>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 80049c8:	e14d      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_MEAS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	7d1b      	ldrb	r3, [r3, #20]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	67fb      	str	r3, [r7, #124]	; 0x7c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049e2:	0f1b      	lsrs	r3, r3, #28
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d003      	beq.n	80049f0 <UI_GetReg+0x9ac>
          (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 80049e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049ea:	0f1b      	lsrs	r3, r3, #28
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d104      	bne.n	80049fa <UI_GetReg+0x9b6>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80049f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049fc:	0e1b      	lsrs	r3, r3, #24
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d005      	beq.n	8004a12 <UI_GetReg+0x9ce>
          (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	f003 030f 	and.w	r3, r3, #15
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d104      	bne.n	8004a1c <UI_GetReg+0x9d8>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (pSPD != MC_NULL)
 8004a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 811b 	beq.w	8004c5c <UI_GetReg+0xc18>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 8004a26:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004a2a:	f006 f88e 	bl	800ab4a <SPD_GetElAngle>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 8004a34:	e112      	b.n	8004c5c <UI_GetReg+0xc18>

    case MC_PROTOCOL_REG_MEAS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	7d1b      	ldrb	r3, [r3, #20]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004a4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a52:	0f1b      	lsrs	r3, r3, #28
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d004      	beq.n	8004a62 <UI_GetReg+0xa1e>
          (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a5c:	0f1b      	lsrs	r3, r3, #28
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d104      	bne.n	8004a6c <UI_GetReg+0xa28>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a70:	0e1b      	lsrs	r3, r3, #24
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d006      	beq.n	8004a88 <UI_GetReg+0xa44>
          (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a7e:	0e1b      	lsrs	r3, r3, #24
 8004a80:	f003 030f 	and.w	r3, r3, #15
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d104      	bne.n	8004a92 <UI_GetReg+0xa4e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (pSPD != MC_NULL)
 8004a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80e2 	beq.w	8004c60 <UI_GetReg+0xc1c>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 8004a9c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004aa0:	f006 f8e5 	bl	800ac6e <SPD_GetS16Speed>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }
    }
    break;
 8004aaa:	e0d9      	b.n	8004c60 <UI_GetReg+0xc1c>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8004aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f006 faa9 	bl	800b00a <STC_GetMaxAppPositiveMecSpeedUnit>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	4613      	mov	r3, r2
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4a6b      	ldr	r2, [pc, #428]	; (8004c74 <UI_GetReg+0xc30>)
 8004ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8004aca:	1092      	asrs	r2, r2, #2
 8004acc:	17db      	asrs	r3, r3, #31
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004ad4:	e0c7      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8004ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f006 faa0 	bl	800b022 <STC_GetMinAppNegativeMecSpeedUnit>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4a61      	ldr	r2, [pc, #388]	; (8004c74 <UI_GetReg+0xc30>)
 8004af0:	fb82 1203 	smull	r1, r2, r2, r3
 8004af4:	1092      	asrs	r2, r2, #2
 8004af6:	17db      	asrs	r3, r3, #31
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004afe:	e0b2      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8004b00:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b04:	f7fc fa6d 	bl	8000fe2 <MCI_GetIqd>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8004b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004b14:	e0a7      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 8004b16:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b1a:	f7fc fa62 	bl	8000fe2 <MCI_GetIqd>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	643b      	str	r3, [r7, #64]	; 0x40
 8004b22:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8004b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004b2a:	e09c      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 8004b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <UI_GetReg+0xb06>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8004b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f007 f9e3 	bl	800bf08 <RUC_GetNumberOfPhases>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 8004b48:	e08d      	b.n	8004c66 <UI_GetReg+0xc22>
        bRetVal = (uint32_t) 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    break;
 8004b50:	e089      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 8004b52:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b56:	f7fc fa15 	bl	8000f84 <MCI_GetIab>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b5e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8004b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004b66:	e07e      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 8004b68:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b6c:	f7fc fa0a 	bl	8000f84 <MCI_GetIab>
 8004b70:	4603      	mov	r3, r0
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b74:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004b78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004b7c:	e073      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8004b7e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b82:	f7fc fa16 	bl	8000fb2 <MCI_GetIalphabeta>
 8004b86:	4603      	mov	r3, r0
 8004b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004b92:	e068      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8004b94:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b98:	f7fc fa0b 	bl	8000fb2 <MCI_GetIalphabeta>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004ba8:	e05d      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 8004baa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004bae:	f7fc fa30 	bl	8001012 <MCI_GetIqdref>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004bbe:	e052      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8004bc0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004bc4:	f7fc fa25 	bl	8001012 <MCI_GetIqdref>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bcc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8004bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004bd4:	e047      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 8004bd6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004bda:	f7fc fa32 	bl	8001042 <MCI_GetVqd>
 8004bde:	4603      	mov	r3, r0
 8004be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004be2:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8004be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004bea:	e03c      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 8004bec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004bf0:	f7fc fa27 	bl	8001042 <MCI_GetVqd>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8004bfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004c00:	e031      	b.n	8004c66 <UI_GetReg+0xc22>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8004c02:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004c06:	f7fc fa34 	bl	8001072 <MCI_GetValphabeta>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c0e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8004c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004c16:	e026      	b.n	8004c66 <UI_GetReg+0xc22>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8004c18:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004c1c:	f7fc fa29 	bl	8001072 <MCI_GetValphabeta>
 8004c20:	4603      	mov	r3, r0
 8004c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c24:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8004c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }
    break;
 8004c2c:	e01b      	b.n	8004c66 <UI_GetReg+0xc22>

    default:
	{
      if ( success != (bool *) 0 )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <UI_GetReg+0xc20>
      {
        *success = false;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8004c3a:	e013      	b.n	8004c64 <UI_GetReg+0xc20>
    break;
 8004c3c:	bf00      	nop
 8004c3e:	e012      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c40:	bf00      	nop
 8004c42:	e010      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c44:	bf00      	nop
 8004c46:	e00e      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c48:	bf00      	nop
 8004c4a:	e00c      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c4c:	bf00      	nop
 8004c4e:	e00a      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c50:	bf00      	nop
 8004c52:	e008      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c54:	bf00      	nop
 8004c56:	e006      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c58:	bf00      	nop
 8004c5a:	e004      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <UI_GetReg+0xc22>
    break;
 8004c64:	bf00      	nop
  }
  return bRetVal;
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	37e8      	adds	r7, #232	; 0xe8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	66666667 	.word	0x66666667

08004c78 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7d1b      	ldrb	r3, [r3, #20]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	2b0d      	cmp	r3, #13
 8004c9e:	d84b      	bhi.n	8004d38 <UI_ExecCmd+0xc0>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UI_ExecCmd+0x30>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ce1 	.word	0x08004ce1
 8004cac:	08004ce9 	.word	0x08004ce9
 8004cb0:	08004cf1 	.word	0x08004cf1
 8004cb4:	08004d3f 	.word	0x08004d3f
 8004cb8:	08004d3f 	.word	0x08004d3f
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004d21 	.word	0x08004d21
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004d39 	.word	0x08004d39
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004d39 	.word	0x08004d39
 8004cd8:	08004d39 	.word	0x08004d39
 8004cdc:	08004ce9 	.word	0x08004ce9
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 8004ce0:	68b8      	ldr	r0, [r7, #8]
 8004ce2:	f7fc f816 	bl	8000d12 <MCI_StartMotor>
    }
    break;
 8004ce6:	e02d      	b.n	8004d44 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 8004ce8:	68b8      	ldr	r0, [r7, #8]
 8004cea:	f7fc f829 	bl	8000d40 <MCI_StopMotor>
    }
    break;
 8004cee:	e029      	b.n	8004d44 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8004cf0:	68b8      	ldr	r0, [r7, #8]
 8004cf2:	f7fc f8b4 	bl	8000e5e <MCI_GetSTMState>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b06      	cmp	r3, #6
 8004cfa:	d122      	bne.n	8004d42 <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f7fc f914 	bl	8000f2a <MCI_StopRamp>
      }
    }
    break;
 8004d02:	e01e      	b.n	8004d42 <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8004d04:	68b8      	ldr	r0, [r7, #8]
 8004d06:	f7fc f8aa 	bl	8000e5e <MCI_GetSTMState>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 8004d10:	68b8      	ldr	r0, [r7, #8]
 8004d12:	f7fb fffe 	bl	8000d12 <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 8004d16:	e015      	b.n	8004d44 <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f7fc f811 	bl	8000d40 <MCI_StopMotor>
    break;
 8004d1e:	e011      	b.n	8004d44 <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 8004d20:	68b8      	ldr	r0, [r7, #8]
 8004d22:	f7fc f81c 	bl	8000d5e <MCI_FaultAcknowledged>
    }
    break;
 8004d26:	e00d      	b.n	8004d44 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8004d28:	68b8      	ldr	r0, [r7, #8]
 8004d2a:	f7fc f826 	bl	8000d7a <MCI_EncoderAlign>
    }
    break;
 8004d2e:	e009      	b.n	8004d44 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f7fc f9d8 	bl	80010e6 <MCI_Clear_Iqdref>
    }
    break;
 8004d36:	e005      	b.n	8004d44 <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8004d3c:	e002      	b.n	8004d44 <UI_ExecCmd+0xcc>
    break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <UI_ExecCmd+0xcc>
    break;
 8004d42:	bf00      	nop
  }
  return retVal;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop

08004d50 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	7d1b      	ldrb	r3, [r3, #20]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UI_ExecSpeedRamp+0x4c>)
 8004d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8004d7e:	441a      	add	r2, r3
 8004d80:	1152      	asrs	r2, r2, #5
 8004d82:	17db      	asrs	r3, r3, #31
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6978      	ldr	r0, [r7, #20]
 8004d8e:	f7fb ff6a 	bl	8000c66 <MCI_ExecSpeedRamp>
  return true;
 8004d92:	2301      	movs	r3, #1
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	88888889 	.word	0x88888889

08004da0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
 8004dac:	4613      	mov	r3, r2
 8004dae:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7d1b      	ldrb	r3, [r3, #20]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004dc0:	883a      	ldrh	r2, [r7, #0]
 8004dc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7fb ff69 	bl	8000ca0 <MCI_ExecTorqueRamp>
  return true;
 8004dce:	2301      	movs	r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	460b      	mov	r3, r1
 8004de6:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 8004de8:	2301      	movs	r3, #1
 8004dea:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	7d1b      	ldrb	r3, [r3, #20]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <UI_GetRevupData+0x64>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004e04:	7afb      	ldrb	r3, [r7, #11]
 8004e06:	4619      	mov	r1, r3
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f007 f867 	bl	800bedc <RUC_GetPhaseDurationms>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6938      	ldr	r0, [r7, #16]
 8004e1c:	f007 f864 	bl	800bee8 <RUC_GetPhaseFinalMecSpeedUnit>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004e28:	7afb      	ldrb	r3, [r7, #11]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6938      	ldr	r0, [r7, #16]
 8004e2e:	f007 f863 	bl	800bef8 <RUC_GetPhaseFinalTorque>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e001      	b.n	8004e40 <UI_GetRevupData+0x68>
  }
  else
  {
    hRetVal = false;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	4608      	mov	r0, r1
 8004e54:	4611      	mov	r1, r2
 8004e56:	461a      	mov	r2, r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	72fb      	strb	r3, [r7, #11]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	813b      	strh	r3, [r7, #8]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	7d1b      	ldrb	r3, [r3, #20]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8004e76:	893a      	ldrh	r2, [r7, #8]
 8004e78:	7afb      	ldrb	r3, [r7, #11]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6978      	ldr	r0, [r7, #20]
 8004e7e:	f007 f81b 	bl	800beb8 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8004e82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e86:	7afb      	ldrb	r3, [r7, #11]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f007 f81a 	bl	800bec4 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8004e90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e94:	7afb      	ldrb	r3, [r7, #11]
 8004e96:	4619      	mov	r1, r3
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	f007 f819 	bl	800bed0 <RUC_SetPhaseFinalTorque>
  return true;
 8004e9e:	2301      	movs	r3, #1
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7d1b      	ldrb	r3, [r3, #20]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 8004ec8:	887b      	ldrh	r3, [r7, #2]
 8004eca:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 8004ecc:	883b      	ldrh	r3, [r7, #0]
 8004ece:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7fb ff01 	bl	8000cda <MCI_SetCurrentReferences>
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
    return false;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <SystemInit+0x28>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <SystemInit+0x28>)
 8004f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <SystemInit+0x28>)
 8004f0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f12:	609a      	str	r2, [r3, #8]
#endif
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_Init+0x40>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0d      	ldr	r2, [pc, #52]	; (8004f64 <HAL_Init+0x40>)
 8004f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_Init+0x40>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <HAL_Init+0x40>)
 8004f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_Init+0x40>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_Init+0x40>)
 8004f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f000 fd33 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f52:	2004      	movs	r0, #4
 8004f54:	f000 f808 	bl	8004f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f58:	f7fe f98a 	bl	8003270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023c00 	.word	0x40023c00

08004f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_InitTick+0x54>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_InitTick+0x58>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fd4b 	bl	8005a22 <HAL_SYSTICK_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e00e      	b.n	8004fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b0f      	cmp	r3, #15
 8004f9a:	d80a      	bhi.n	8004fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	f000 fd13 	bl	80059ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fa8:	4a06      	ldr	r2, [pc, #24]	; (8004fc4 <HAL_InitTick+0x5c>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000754 	.word	0x20000754
 8004fc0:	2000075c 	.word	0x2000075c
 8004fc4:	20000758 	.word	0x20000758

08004fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_IncTick+0x20>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_IncTick+0x24>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <HAL_IncTick+0x24>)
 8004fda:	6013      	str	r3, [r2, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000075c 	.word	0x2000075c
 8004fec:	20000ad8 	.word	0x20000ad8

08004ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <HAL_GetTick+0x14>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000ad8 	.word	0x20000ad8

08005008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e033      	b.n	8005086 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fe f94a 	bl	80032c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d118      	bne.n	8005078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800504e:	f023 0302 	bic.w	r3, r3, #2
 8005052:	f043 0202 	orr.w	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f94a 	bl	80052f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
 8005076:	e001      	b.n	800507c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x1c>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e113      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x244>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d925      	bls.n	8005108 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68d9      	ldr	r1, [r3, #12]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	3b1e      	subs	r3, #30
 80050d2:	2207      	movs	r2, #7
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43da      	mvns	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	400a      	ands	r2, r1
 80050e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68d9      	ldr	r1, [r3, #12]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	4618      	mov	r0, r3
 80050f4:	4603      	mov	r3, r0
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	4403      	add	r3, r0
 80050fa:	3b1e      	subs	r3, #30
 80050fc:	409a      	lsls	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	e022      	b.n	800514e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6919      	ldr	r1, [r3, #16]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	2207      	movs	r2, #7
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43da      	mvns	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	400a      	ands	r2, r1
 800512a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6919      	ldr	r1, [r3, #16]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	4618      	mov	r0, r3
 800513e:	4603      	mov	r3, r0
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4403      	add	r3, r0
 8005144:	409a      	lsls	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d824      	bhi.n	80051a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	3b05      	subs	r3, #5
 8005168:	221f      	movs	r2, #31
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43da      	mvns	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	400a      	ands	r2, r1
 8005176:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	3b05      	subs	r3, #5
 8005192:	fa00 f203 	lsl.w	r2, r0, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	635a      	str	r2, [r3, #52]	; 0x34
 800519e:	e04c      	b.n	800523a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d824      	bhi.n	80051f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	3b23      	subs	r3, #35	; 0x23
 80051ba:	221f      	movs	r2, #31
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43da      	mvns	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	400a      	ands	r2, r1
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4618      	mov	r0, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	3b23      	subs	r3, #35	; 0x23
 80051e4:	fa00 f203 	lsl.w	r2, r0, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
 80051f0:	e023      	b.n	800523a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	3b41      	subs	r3, #65	; 0x41
 8005204:	221f      	movs	r2, #31
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	400a      	ands	r2, r1
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	4618      	mov	r0, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	3b41      	subs	r3, #65	; 0x41
 800522e:	fa00 f203 	lsl.w	r2, r0, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800523a:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <HAL_ADC_ConfigChannel+0x250>)
 800523c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <HAL_ADC_ConfigChannel+0x254>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10f      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x1d8>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b12      	cmp	r3, #18
 800524e:	d10b      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_ADC_ConfigChannel+0x254>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d12b      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x23a>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_ADC_ConfigChannel+0x258>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <HAL_ADC_ConfigChannel+0x1f4>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b11      	cmp	r3, #17
 8005282:	d122      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <HAL_ADC_ConfigChannel+0x258>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_ADC_ConfigChannel+0x25c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <HAL_ADC_ConfigChannel+0x260>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	0c9a      	lsrs	r2, r3, #18
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052bc:	e002      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f9      	bne.n	80052be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40012300 	.word	0x40012300
 80052e4:	40012000 	.word	0x40012000
 80052e8:	10000012 	.word	0x10000012
 80052ec:	20000754 	.word	0x20000754
 80052f0:	431bde83 	.word	0x431bde83

080052f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052fc:	4b79      	ldr	r3, [pc, #484]	; (80054e4 <ADC_Init+0x1f0>)
 80052fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6859      	ldr	r1, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	021a      	lsls	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800534c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800536e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	4a58      	ldr	r2, [pc, #352]	; (80054e8 <ADC_Init+0x1f4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800539a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6899      	ldr	r1, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e00f      	b.n	80053f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0202 	bic.w	r2, r2, #2
 8005400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7e1b      	ldrb	r3, [r3, #24]
 800540c:	005a      	lsls	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01b      	beq.n	8005458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800543e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	3b01      	subs	r3, #1
 800544c:	035a      	lsls	r2, r3, #13
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	e007      	b.n	8005468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005466:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	3b01      	subs	r3, #1
 8005484:	051a      	lsls	r2, r3, #20
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800549c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6899      	ldr	r1, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054aa:	025a      	lsls	r2, r3, #9
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	029a      	lsls	r2, r3, #10
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40012300 	.word	0x40012300
 80054e8:	0f000001 	.word	0x0f000001

080054ec <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8005500:	2302      	movs	r3, #2
 8005502:	e17b      	b.n	80057fc <HAL_ADCEx_InjectedConfigChannel+0x310>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b09      	cmp	r3, #9
 8005512:	d925      	bls.n	8005560 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68d9      	ldr	r1, [r3, #12]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	3b1e      	subs	r3, #30
 800552a:	2207      	movs	r2, #7
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43da      	mvns	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	400a      	ands	r2, r1
 8005538:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68d9      	ldr	r1, [r3, #12]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	4618      	mov	r0, r3
 800554c:	4603      	mov	r3, r0
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	4403      	add	r3, r0
 8005552:	3b1e      	subs	r3, #30
 8005554:	409a      	lsls	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e022      	b.n	80055a6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6919      	ldr	r1, [r3, #16]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	2207      	movs	r2, #7
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43da      	mvns	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	400a      	ands	r2, r1
 8005582:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6919      	ldr	r1, [r3, #16]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	4618      	mov	r0, r3
 8005596:	4603      	mov	r3, r0
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4403      	add	r3, r0
 800559c:	409a      	lsls	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	051a      	lsls	r2, r3, #20
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	3303      	adds	r3, #3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	221f      	movs	r2, #31
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43da      	mvns	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	400a      	ands	r2, r1
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	4618      	mov	r0, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	3303      	adds	r3, #3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	fa00 f203 	lsl.w	r2, r0, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4a73      	ldr	r2, [pc, #460]	; (8005808 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800564c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6899      	ldr	r1, [r3, #8]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800566e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	e00f      	b.n	80056a4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80056a2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	7d5b      	ldrb	r3, [r3, #21]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	e007      	b.n	80056ce <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056cc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	7d1b      	ldrb	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e007      	b.n	80056f8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056f6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d017      	beq.n	8005730 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8005700:	2b03      	cmp	r3, #3
 8005702:	d029      	beq.n	8005758 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8005704:	2b01      	cmp	r3, #1
 8005706:	d13b      	bne.n	8005780 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005716:	f023 030f 	bic.w	r3, r3, #15
 800571a:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6959      	ldr	r1, [r3, #20]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	615a      	str	r2, [r3, #20]
      break;
 800572e:	e03b      	b.n	80057a8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6999      	ldr	r1, [r3, #24]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
      break;
 8005756:	e027      	b.n	80057a8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005766:	f023 030f 	bic.w	r3, r3, #15
 800576a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69d9      	ldr	r1, [r3, #28]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	61da      	str	r2, [r3, #28]
      break;
 800577e:	e013      	b.n	80057a8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800578e:	f023 030f 	bic.w	r3, r3, #15
 8005792:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a19      	ldr	r1, [r3, #32]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	621a      	str	r2, [r3, #32]
      break;
 80057a6:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057a8:	4b18      	ldr	r3, [pc, #96]	; (800580c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80057aa:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a17      	ldr	r2, [pc, #92]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d109      	bne.n	80057ca <HAL_ADCEx_InjectedConfigChannel+0x2de>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b12      	cmp	r3, #18
 80057bc:	d105      	bne.n	80057ca <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10e      	bne.n	80057f2 <HAL_ADCEx_InjectedConfigChannel+0x306>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b11      	cmp	r3, #17
 80057e4:	d105      	bne.n	80057f2 <HAL_ADCEx_InjectedConfigChannel+0x306>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	000f0001 	.word	0x000f0001
 800580c:	40012300 	.word	0x40012300
 8005810:	40012000 	.word	0x40012000
 8005814:	10000012 	.word	0x10000012

08005818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00

08005860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <__NVIC_GetPriorityGrouping+0x18>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 0307 	and.w	r3, r3, #7
}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	2b00      	cmp	r3, #0
 800588c:	db0b      	blt.n	80058a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 021f 	and.w	r2, r3, #31
 8005894:	4907      	ldr	r1, [pc, #28]	; (80058b4 <__NVIC_EnableIRQ+0x38>)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2001      	movs	r0, #1
 800589e:	fa00 f202 	lsl.w	r2, r0, r2
 80058a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	e000e100 	.word	0xe000e100

080058b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db0a      	blt.n	80058e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <__NVIC_SetPriority+0x4c>)
 80058d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	440b      	add	r3, r1
 80058dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e0:	e00a      	b.n	80058f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <__NVIC_SetPriority+0x50>)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3b04      	subs	r3, #4
 80058f0:	0112      	lsls	r2, r2, #4
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	440b      	add	r3, r1
 80058f6:	761a      	strb	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000e100 	.word	0xe000e100
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f1c3 0307 	rsb	r3, r3, #7
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf28      	it	cs
 800592a:	2304      	movcs	r3, #4
 800592c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3304      	adds	r3, #4
 8005932:	2b06      	cmp	r3, #6
 8005934:	d902      	bls.n	800593c <NVIC_EncodePriority+0x30>
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3b03      	subs	r3, #3
 800593a:	e000      	b.n	800593e <NVIC_EncodePriority+0x32>
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	401a      	ands	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005954:	f04f 31ff 	mov.w	r1, #4294967295
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43d9      	mvns	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005964:	4313      	orrs	r3, r2
         );
}
 8005966:	4618      	mov	r0, r3
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005984:	d301      	bcc.n	800598a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005986:	2301      	movs	r3, #1
 8005988:	e00f      	b.n	80059aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <SysTick_Config+0x40>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005992:	210f      	movs	r1, #15
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	f7ff ff8e 	bl	80058b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <SysTick_Config+0x40>)
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SysTick_Config+0x40>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff29 	bl	8005818 <__NVIC_SetPriorityGrouping>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059e0:	f7ff ff3e 	bl	8005860 <__NVIC_GetPriorityGrouping>
 80059e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7ff ff8e 	bl	800590c <NVIC_EncodePriority>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff5d 	bl	80058b8 <__NVIC_SetPriority>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff31 	bl	800587c <__NVIC_EnableIRQ>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ffa2 	bl	8005974 <SysTick_Config>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005a3e:	f000 f802 	bl	8005a46 <HAL_SYSTICK_Callback>
}
 8005a42:	bf00      	nop
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e165      	b.n	8005d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a70:	2201      	movs	r2, #1
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4013      	ands	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	f040 8154 	bne.w	8005d36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d00b      	beq.n	8005aae <HAL_GPIO_Init+0x5a>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d007      	beq.n	8005aae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005aa2:	2b11      	cmp	r3, #17
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b12      	cmp	r3, #18
 8005aac:	d130      	bne.n	8005b10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	2203      	movs	r2, #3
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 0201 	and.w	r2, r3, #1
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4013      	ands	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0xfc>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b12      	cmp	r3, #18
 8005b4e:	d123      	bne.n	8005b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	08da      	lsrs	r2, r3, #3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3208      	adds	r2, #8
 8005b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	220f      	movs	r2, #15
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4013      	ands	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	08da      	lsrs	r2, r3, #3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3208      	adds	r2, #8
 8005b92:	69b9      	ldr	r1, [r7, #24]
 8005b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 0203 	and.w	r2, r3, #3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80ae 	beq.w	8005d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_GPIO_Init+0x2fc>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	4a5b      	ldr	r2, [pc, #364]	; (8005d50 <HAL_GPIO_Init+0x2fc>)
 8005be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bea:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <HAL_GPIO_Init+0x2fc>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bf6:	4a57      	ldr	r2, [pc, #348]	; (8005d54 <HAL_GPIO_Init+0x300>)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	220f      	movs	r2, #15
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a4e      	ldr	r2, [pc, #312]	; (8005d58 <HAL_GPIO_Init+0x304>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d025      	beq.n	8005c6e <HAL_GPIO_Init+0x21a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a4d      	ldr	r2, [pc, #308]	; (8005d5c <HAL_GPIO_Init+0x308>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <HAL_GPIO_Init+0x216>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a4c      	ldr	r2, [pc, #304]	; (8005d60 <HAL_GPIO_Init+0x30c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d019      	beq.n	8005c66 <HAL_GPIO_Init+0x212>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a4b      	ldr	r2, [pc, #300]	; (8005d64 <HAL_GPIO_Init+0x310>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_GPIO_Init+0x20e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <HAL_GPIO_Init+0x314>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00d      	beq.n	8005c5e <HAL_GPIO_Init+0x20a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a49      	ldr	r2, [pc, #292]	; (8005d6c <HAL_GPIO_Init+0x318>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <HAL_GPIO_Init+0x206>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a48      	ldr	r2, [pc, #288]	; (8005d70 <HAL_GPIO_Init+0x31c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_GPIO_Init+0x202>
 8005c52:	2306      	movs	r3, #6
 8005c54:	e00c      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c56:	2307      	movs	r3, #7
 8005c58:	e00a      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c5a:	2305      	movs	r3, #5
 8005c5c:	e008      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c5e:	2304      	movs	r3, #4
 8005c60:	e006      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c62:	2303      	movs	r3, #3
 8005c64:	e004      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e002      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_GPIO_Init+0x21c>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	f002 0203 	and.w	r2, r2, #3
 8005c76:	0092      	lsls	r2, r2, #2
 8005c78:	4093      	lsls	r3, r2
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c80:	4934      	ldr	r1, [pc, #208]	; (8005d54 <HAL_GPIO_Init+0x300>)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	3302      	adds	r3, #2
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c8e:	4b39      	ldr	r3, [pc, #228]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cb2:	4a30      	ldr	r2, [pc, #192]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cb8:	4b2e      	ldr	r3, [pc, #184]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ce2:	4b24      	ldr	r3, [pc, #144]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d06:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d30:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <HAL_GPIO_Init+0x320>)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b0f      	cmp	r3, #15
 8005d40:	f67f ae96 	bls.w	8005a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d44:	bf00      	nop
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40020000 	.word	0x40020000
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	40020800 	.word	0x40020800
 8005d64:	40020c00 	.word	0x40020c00
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40021400 	.word	0x40021400
 8005d70:	40021800 	.word	0x40021800
 8005d74:	40013c00 	.word	0x40013c00

08005d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6413      	str	r3, [r2, #64]	; 0x40
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <HAL_PWREx_EnableOverDrive+0x94>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005da4:	f7ff f924 	bl	8004ff0 <HAL_GetTick>
 8005da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005daa:	e009      	b.n	8005dc0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005dac:	f7ff f920 	bl	8004ff0 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dba:	d901      	bls.n	8005dc0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e01f      	b.n	8005e00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d1ee      	bne.n	8005dac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005dd4:	f7ff f90c 	bl	8004ff0 <HAL_GetTick>
 8005dd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005dda:	e009      	b.n	8005df0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ddc:	f7ff f908 	bl	8004ff0 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dea:	d901      	bls.n	8005df0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e007      	b.n	8005e00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dfc:	d1ee      	bne.n	8005ddc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	420e0040 	.word	0x420e0040
 8005e10:	40007000 	.word	0x40007000
 8005e14:	420e0044 	.word	0x420e0044

08005e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0cc      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b68      	ldr	r3, [pc, #416]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d90c      	bls.n	8005e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b65      	ldr	r3, [pc, #404]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b63      	ldr	r3, [pc, #396]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0b8      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e6c:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4a58      	ldr	r2, [pc, #352]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e84:	4b53      	ldr	r3, [pc, #332]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a52      	ldr	r2, [pc, #328]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e90:	4b50      	ldr	r3, [pc, #320]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	494d      	ldr	r1, [pc, #308]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d044      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb6:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d119      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e07f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed6:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e06f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e067      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef6:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 0203 	bic.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4934      	ldr	r1, [pc, #208]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f08:	f7ff f872 	bl	8004ff0 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f10:	f7ff f86e 	bl	8004ff0 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e04f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 020c 	and.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d1eb      	bne.n	8005f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d20c      	bcs.n	8005f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e032      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	4916      	ldr	r1, [pc, #88]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	490e      	ldr	r1, [pc, #56]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f9e:	f000 f855 	bl	800604c <HAL_RCC_GetSysClockFreq>
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb0:	5cd3      	ldrb	r3, [r2, r3]
 8005fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe ffd2 	bl	8004f68 <HAL_InitTick>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40023c00 	.word	0x40023c00
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	0800c788 	.word	0x0800c788
 8005fdc:	20000754 	.word	0x20000754
 8005fe0:	20000758 	.word	0x20000758

08005fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000754 	.word	0x20000754

08005ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006000:	f7ff fff0 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006004:	4601      	mov	r1, r0
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	0a9b      	lsrs	r3, r3, #10
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	4a03      	ldr	r2, [pc, #12]	; (8006020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006012:	5cd3      	ldrb	r3, [r2, r3]
 8006014:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40023800 	.word	0x40023800
 8006020:	0800c798 	.word	0x0800c798

08006024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006028:	f7ff ffdc 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 800602c:	4601      	mov	r1, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	0b5b      	lsrs	r3, r3, #13
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4a03      	ldr	r2, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800603a:	5cd3      	ldrb	r3, [r2, r3]
 800603c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	0800c798 	.word	0x0800c798

0800604c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006066:	4bc6      	ldr	r3, [pc, #792]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b0c      	cmp	r3, #12
 8006070:	f200 817e 	bhi.w	8006370 <HAL_RCC_GetSysClockFreq+0x324>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <HAL_RCC_GetSysClockFreq+0x30>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	08006371 	.word	0x08006371
 8006084:	08006371 	.word	0x08006371
 8006088:	08006371 	.word	0x08006371
 800608c:	080060b7 	.word	0x080060b7
 8006090:	08006371 	.word	0x08006371
 8006094:	08006371 	.word	0x08006371
 8006098:	08006371 	.word	0x08006371
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	08006371 	.word	0x08006371
 80060a4:	08006371 	.word	0x08006371
 80060a8:	08006371 	.word	0x08006371
 80060ac:	08006219 	.word	0x08006219
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b0:	4bb4      	ldr	r3, [pc, #720]	; (8006384 <HAL_RCC_GetSysClockFreq+0x338>)
 80060b2:	613b      	str	r3, [r7, #16]
       break;
 80060b4:	e15f      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060b6:	4bb4      	ldr	r3, [pc, #720]	; (8006388 <HAL_RCC_GetSysClockFreq+0x33c>)
 80060b8:	613b      	str	r3, [r7, #16]
      break;
 80060ba:	e15c      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060bc:	4bb0      	ldr	r3, [pc, #704]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060c6:	4bae      	ldr	r3, [pc, #696]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d04a      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d2:	4bab      	ldr	r3, [pc, #684]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	099b      	lsrs	r3, r3, #6
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	ea03 0501 	and.w	r5, r3, r1
 80060e8:	ea04 0602 	and.w	r6, r4, r2
 80060ec:	4629      	mov	r1, r5
 80060ee:	4632      	mov	r2, r6
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	0154      	lsls	r4, r2, #5
 80060fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060fe:	014b      	lsls	r3, r1, #5
 8006100:	4619      	mov	r1, r3
 8006102:	4622      	mov	r2, r4
 8006104:	1b49      	subs	r1, r1, r5
 8006106:	eb62 0206 	sbc.w	r2, r2, r6
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	0194      	lsls	r4, r2, #6
 8006114:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006118:	018b      	lsls	r3, r1, #6
 800611a:	1a5b      	subs	r3, r3, r1
 800611c:	eb64 0402 	sbc.w	r4, r4, r2
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	00e2      	lsls	r2, r4, #3
 800612a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800612e:	00d9      	lsls	r1, r3, #3
 8006130:	460b      	mov	r3, r1
 8006132:	4614      	mov	r4, r2
 8006134:	195b      	adds	r3, r3, r5
 8006136:	eb44 0406 	adc.w	r4, r4, r6
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	0262      	lsls	r2, r4, #9
 8006144:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006148:	0259      	lsls	r1, r3, #9
 800614a:	460b      	mov	r3, r1
 800614c:	4614      	mov	r4, r2
 800614e:	4618      	mov	r0, r3
 8006150:	4621      	mov	r1, r4
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f04f 0400 	mov.w	r4, #0
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	f7fa f852 	bl	8000204 <__aeabi_uldivmod>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	e049      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006168:	4b85      	ldr	r3, [pc, #532]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	099b      	lsrs	r3, r3, #6
 800616e:	f04f 0400 	mov.w	r4, #0
 8006172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	ea03 0501 	and.w	r5, r3, r1
 800617e:	ea04 0602 	and.w	r6, r4, r2
 8006182:	4629      	mov	r1, r5
 8006184:	4632      	mov	r2, r6
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	f04f 0400 	mov.w	r4, #0
 800618e:	0154      	lsls	r4, r2, #5
 8006190:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006194:	014b      	lsls	r3, r1, #5
 8006196:	4619      	mov	r1, r3
 8006198:	4622      	mov	r2, r4
 800619a:	1b49      	subs	r1, r1, r5
 800619c:	eb62 0206 	sbc.w	r2, r2, r6
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	f04f 0400 	mov.w	r4, #0
 80061a8:	0194      	lsls	r4, r2, #6
 80061aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061ae:	018b      	lsls	r3, r1, #6
 80061b0:	1a5b      	subs	r3, r3, r1
 80061b2:	eb64 0402 	sbc.w	r4, r4, r2
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	00e2      	lsls	r2, r4, #3
 80061c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061c4:	00d9      	lsls	r1, r3, #3
 80061c6:	460b      	mov	r3, r1
 80061c8:	4614      	mov	r4, r2
 80061ca:	195b      	adds	r3, r3, r5
 80061cc:	eb44 0406 	adc.w	r4, r4, r6
 80061d0:	f04f 0100 	mov.w	r1, #0
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	02a2      	lsls	r2, r4, #10
 80061da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80061de:	0299      	lsls	r1, r3, #10
 80061e0:	460b      	mov	r3, r1
 80061e2:	4614      	mov	r4, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	4621      	mov	r1, r4
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f04f 0400 	mov.w	r4, #0
 80061ee:	461a      	mov	r2, r3
 80061f0:	4623      	mov	r3, r4
 80061f2:	f7fa f807 	bl	8000204 <__aeabi_uldivmod>
 80061f6:	4603      	mov	r3, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061fc:	4b60      	ldr	r3, [pc, #384]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	3301      	adds	r3, #1
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	613b      	str	r3, [r7, #16]
      break;
 8006216:	e0ae      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006218:	4b59      	ldr	r3, [pc, #356]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006220:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006222:	4b57      	ldr	r3, [pc, #348]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d04a      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622e:	4b54      	ldr	r3, [pc, #336]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	099b      	lsrs	r3, r3, #6
 8006234:	f04f 0400 	mov.w	r4, #0
 8006238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	ea03 0501 	and.w	r5, r3, r1
 8006244:	ea04 0602 	and.w	r6, r4, r2
 8006248:	4629      	mov	r1, r5
 800624a:	4632      	mov	r2, r6
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	0154      	lsls	r4, r2, #5
 8006256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800625a:	014b      	lsls	r3, r1, #5
 800625c:	4619      	mov	r1, r3
 800625e:	4622      	mov	r2, r4
 8006260:	1b49      	subs	r1, r1, r5
 8006262:	eb62 0206 	sbc.w	r2, r2, r6
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	f04f 0400 	mov.w	r4, #0
 800626e:	0194      	lsls	r4, r2, #6
 8006270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006274:	018b      	lsls	r3, r1, #6
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	eb64 0402 	sbc.w	r4, r4, r2
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	00e2      	lsls	r2, r4, #3
 8006286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800628a:	00d9      	lsls	r1, r3, #3
 800628c:	460b      	mov	r3, r1
 800628e:	4614      	mov	r4, r2
 8006290:	195b      	adds	r3, r3, r5
 8006292:	eb44 0406 	adc.w	r4, r4, r6
 8006296:	f04f 0100 	mov.w	r1, #0
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	0262      	lsls	r2, r4, #9
 80062a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80062a4:	0259      	lsls	r1, r3, #9
 80062a6:	460b      	mov	r3, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	4621      	mov	r1, r4
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f04f 0400 	mov.w	r4, #0
 80062b4:	461a      	mov	r2, r3
 80062b6:	4623      	mov	r3, r4
 80062b8:	f7f9 ffa4 	bl	8000204 <__aeabi_uldivmod>
 80062bc:	4603      	mov	r3, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e049      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062c4:	4b2e      	ldr	r3, [pc, #184]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	099b      	lsrs	r3, r3, #6
 80062ca:	f04f 0400 	mov.w	r4, #0
 80062ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	ea03 0501 	and.w	r5, r3, r1
 80062da:	ea04 0602 	and.w	r6, r4, r2
 80062de:	4629      	mov	r1, r5
 80062e0:	4632      	mov	r2, r6
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	f04f 0400 	mov.w	r4, #0
 80062ea:	0154      	lsls	r4, r2, #5
 80062ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062f0:	014b      	lsls	r3, r1, #5
 80062f2:	4619      	mov	r1, r3
 80062f4:	4622      	mov	r2, r4
 80062f6:	1b49      	subs	r1, r1, r5
 80062f8:	eb62 0206 	sbc.w	r2, r2, r6
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	0194      	lsls	r4, r2, #6
 8006306:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800630a:	018b      	lsls	r3, r1, #6
 800630c:	1a5b      	subs	r3, r3, r1
 800630e:	eb64 0402 	sbc.w	r4, r4, r2
 8006312:	f04f 0100 	mov.w	r1, #0
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	00e2      	lsls	r2, r4, #3
 800631c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006320:	00d9      	lsls	r1, r3, #3
 8006322:	460b      	mov	r3, r1
 8006324:	4614      	mov	r4, r2
 8006326:	195b      	adds	r3, r3, r5
 8006328:	eb44 0406 	adc.w	r4, r4, r6
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	02a2      	lsls	r2, r4, #10
 8006336:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800633a:	0299      	lsls	r1, r3, #10
 800633c:	460b      	mov	r3, r1
 800633e:	4614      	mov	r4, r2
 8006340:	4618      	mov	r0, r3
 8006342:	4621      	mov	r1, r4
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f04f 0400 	mov.w	r4, #0
 800634a:	461a      	mov	r2, r3
 800634c:	4623      	mov	r3, r4
 800634e:	f7f9 ff59 	bl	8000204 <__aeabi_uldivmod>
 8006352:	4603      	mov	r3, r0
 8006354:	460c      	mov	r4, r1
 8006356:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_RCC_GetSysClockFreq+0x334>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	0f1b      	lsrs	r3, r3, #28
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	613b      	str	r3, [r7, #16]
      break;
 800636e:	e002      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <HAL_RCC_GetSysClockFreq+0x338>)
 8006372:	613b      	str	r3, [r7, #16]
      break;
 8006374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006376:	693b      	ldr	r3, [r7, #16]
}
 8006378:	4618      	mov	r0, r3
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	00f42400 	.word	0x00f42400
 8006388:	007a1200 	.word	0x007a1200

0800638c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8083 	beq.w	80064ac <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063a6:	4b95      	ldr	r3, [pc, #596]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 030c 	and.w	r3, r3, #12
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d019      	beq.n	80063e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063b2:	4b92      	ldr	r3, [pc, #584]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063be:	4b8f      	ldr	r3, [pc, #572]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ca:	d00c      	beq.n	80063e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063cc:	4b8b      	ldr	r3, [pc, #556]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d112      	bne.n	80063fe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e4:	d10b      	bne.n	80063fe <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e6:	4b85      	ldr	r3, [pc, #532]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d05b      	beq.n	80064aa <HAL_RCC_OscConfig+0x11e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d157      	bne.n	80064aa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e216      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006406:	d106      	bne.n	8006416 <HAL_RCC_OscConfig+0x8a>
 8006408:	4b7c      	ldr	r3, [pc, #496]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a7b      	ldr	r2, [pc, #492]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800640e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	e01d      	b.n	8006452 <HAL_RCC_OscConfig+0xc6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641e:	d10c      	bne.n	800643a <HAL_RCC_OscConfig+0xae>
 8006420:	4b76      	ldr	r3, [pc, #472]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a75      	ldr	r2, [pc, #468]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	4b73      	ldr	r3, [pc, #460]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a72      	ldr	r2, [pc, #456]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e00b      	b.n	8006452 <HAL_RCC_OscConfig+0xc6>
 800643a:	4b70      	ldr	r3, [pc, #448]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a6f      	ldr	r2, [pc, #444]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b6d      	ldr	r3, [pc, #436]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6c      	ldr	r2, [pc, #432]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800644c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006450:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d013      	beq.n	8006482 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645a:	f7fe fdc9 	bl	8004ff0 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006462:	f7fe fdc5 	bl	8004ff0 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b64      	cmp	r3, #100	; 0x64
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e1db      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006474:	4b61      	ldr	r3, [pc, #388]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0xd6>
 8006480:	e014      	b.n	80064ac <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006482:	f7fe fdb5 	bl	8004ff0 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800648a:	f7fe fdb1 	bl	8004ff0 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b64      	cmp	r3, #100	; 0x64
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e1c7      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649c:	4b57      	ldr	r3, [pc, #348]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f0      	bne.n	800648a <HAL_RCC_OscConfig+0xfe>
 80064a8:	e000      	b.n	80064ac <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d06f      	beq.n	8006598 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064b8:	4b50      	ldr	r3, [pc, #320]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d017      	beq.n	80064f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064c4:	4b4d      	ldr	r3, [pc, #308]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d105      	bne.n	80064dc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064d0:	4b4a      	ldr	r3, [pc, #296]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064dc:	4b47      	ldr	r3, [pc, #284]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d11c      	bne.n	8006522 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e8:	4b44      	ldr	r3, [pc, #272]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d116      	bne.n	8006522 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f4:	4b41      	ldr	r3, [pc, #260]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_RCC_OscConfig+0x180>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d001      	beq.n	800650c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e18f      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650c:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4938      	ldr	r1, [pc, #224]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006520:	e03a      	b.n	8006598 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800652a:	4b35      	ldr	r3, [pc, #212]	; (8006600 <HAL_RCC_OscConfig+0x274>)
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fe fd5e 	bl	8004ff0 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006538:	f7fe fd5a 	bl	8004ff0 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e170      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654a:	4b2c      	ldr	r3, [pc, #176]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006556:	4b29      	ldr	r3, [pc, #164]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4925      	ldr	r1, [pc, #148]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]
 800656a:	e015      	b.n	8006598 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800656c:	4b24      	ldr	r3, [pc, #144]	; (8006600 <HAL_RCC_OscConfig+0x274>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006572:	f7fe fd3d 	bl	8004ff0 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800657a:	f7fe fd39 	bl	8004ff0 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e14f      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f0      	bne.n	800657a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d037      	beq.n	8006614 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d016      	beq.n	80065da <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <HAL_RCC_OscConfig+0x278>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b2:	f7fe fd1d 	bl	8004ff0 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ba:	f7fe fd19 	bl	8004ff0 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e12f      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <HAL_RCC_OscConfig+0x270>)
 80065ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCC_OscConfig+0x22e>
 80065d8:	e01c      	b.n	8006614 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <HAL_RCC_OscConfig+0x278>)
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e0:	f7fe fd06 	bl	8004ff0 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e6:	e00f      	b.n	8006608 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e8:	f7fe fd02 	bl	8004ff0 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d908      	bls.n	8006608 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e118      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
 80065fa:	bf00      	nop
 80065fc:	40023800 	.word	0x40023800
 8006600:	42470000 	.word	0x42470000
 8006604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	4b8a      	ldr	r3, [pc, #552]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800660a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e9      	bne.n	80065e8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8097 	beq.w	8006750 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006626:	4b83      	ldr	r3, [pc, #524]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10f      	bne.n	8006652 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	4b7f      	ldr	r3, [pc, #508]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	4a7e      	ldr	r2, [pc, #504]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800663c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006640:	6413      	str	r3, [r2, #64]	; 0x40
 8006642:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006652:	4b79      	ldr	r3, [pc, #484]	; (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d118      	bne.n	8006690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665e:	4b76      	ldr	r3, [pc, #472]	; (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a75      	ldr	r2, [pc, #468]	; (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800666a:	f7fe fcc1 	bl	8004ff0 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006672:	f7fe fcbd 	bl	8004ff0 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e0d3      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	4b6c      	ldr	r3, [pc, #432]	; (8006838 <HAL_RCC_OscConfig+0x4ac>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <HAL_RCC_OscConfig+0x31a>
 8006698:	4b66      	ldr	r3, [pc, #408]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a65      	ldr	r2, [pc, #404]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	e01c      	b.n	80066e0 <HAL_RCC_OscConfig+0x354>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x33c>
 80066ae:	4b61      	ldr	r3, [pc, #388]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b2:	4a60      	ldr	r2, [pc, #384]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066b4:	f043 0304 	orr.w	r3, r3, #4
 80066b8:	6713      	str	r3, [r2, #112]	; 0x70
 80066ba:	4b5e      	ldr	r3, [pc, #376]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a5d      	ldr	r2, [pc, #372]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
 80066c6:	e00b      	b.n	80066e0 <HAL_RCC_OscConfig+0x354>
 80066c8:	4b5a      	ldr	r3, [pc, #360]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	4a59      	ldr	r2, [pc, #356]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	6713      	str	r3, [r2, #112]	; 0x70
 80066d4:	4b57      	ldr	r3, [pc, #348]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d8:	4a56      	ldr	r2, [pc, #344]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80066da:	f023 0304 	bic.w	r3, r3, #4
 80066de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d015      	beq.n	8006714 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e8:	f7fe fc82 	bl	8004ff0 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ee:	e00a      	b.n	8006706 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066f0:	f7fe fc7e 	bl	8004ff0 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e092      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006706:	4b4b      	ldr	r3, [pc, #300]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0ee      	beq.n	80066f0 <HAL_RCC_OscConfig+0x364>
 8006712:	e014      	b.n	800673e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fe fc6c 	bl	8004ff0 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671a:	e00a      	b.n	8006732 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800671c:	f7fe fc68 	bl	8004ff0 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	f241 3288 	movw	r2, #5000	; 0x1388
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e07c      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006732:	4b40      	ldr	r3, [pc, #256]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1ee      	bne.n	800671c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d105      	bne.n	8006750 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006744:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	4a3a      	ldr	r2, [pc, #232]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800674a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d068      	beq.n	800682a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006758:	4b36      	ldr	r3, [pc, #216]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b08      	cmp	r3, #8
 8006762:	d060      	beq.n	8006826 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d145      	bne.n	80067f8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676c:	4b33      	ldr	r3, [pc, #204]	; (800683c <HAL_RCC_OscConfig+0x4b0>)
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006772:	f7fe fc3d 	bl	8004ff0 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677a:	f7fe fc39 	bl	8004ff0 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e04f      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678c:	4b29      	ldr	r3, [pc, #164]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f0      	bne.n	800677a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	019b      	lsls	r3, r3, #6
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	3b01      	subs	r3, #1
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	071b      	lsls	r3, r3, #28
 80067c4:	491b      	ldr	r1, [pc, #108]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ca:	4b1c      	ldr	r3, [pc, #112]	; (800683c <HAL_RCC_OscConfig+0x4b0>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fe fc0e 	bl	8004ff0 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067d8:	f7fe fc0a 	bl	8004ff0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e020      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0x44c>
 80067f6:	e018      	b.n	800682a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f8:	4b10      	ldr	r3, [pc, #64]	; (800683c <HAL_RCC_OscConfig+0x4b0>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fe fbf7 	bl	8004ff0 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006806:	f7fe fbf3 	bl	8004ff0 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e009      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_RCC_OscConfig+0x4a8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f0      	bne.n	8006806 <HAL_RCC_OscConfig+0x47a>
 8006824:	e001      	b.n	800682a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40023800 	.word	0x40023800
 8006838:	40007000 	.word	0x40007000
 800683c:	42470060 	.word	0x42470060

08006840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e01d      	b.n	800688e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fc fdba 	bl	80033e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f000 f9fe 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e01d      	b.n	80068e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f815 	bl	80068ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 f9d3 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006916:	2302      	movs	r3, #2
 8006918:	e0b4      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x184>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b0c      	cmp	r3, #12
 800692e:	f200 809f 	bhi.w	8006a70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800696d 	.word	0x0800696d
 800693c:	08006a71 	.word	0x08006a71
 8006940:	08006a71 	.word	0x08006a71
 8006944:	08006a71 	.word	0x08006a71
 8006948:	080069ad 	.word	0x080069ad
 800694c:	08006a71 	.word	0x08006a71
 8006950:	08006a71 	.word	0x08006a71
 8006954:	08006a71 	.word	0x08006a71
 8006958:	080069ef 	.word	0x080069ef
 800695c:	08006a71 	.word	0x08006a71
 8006960:	08006a71 	.word	0x08006a71
 8006964:	08006a71 	.word	0x08006a71
 8006968:	08006a2f 	.word	0x08006a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fa24 	bl	8006dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0208 	orr.w	r2, r2, #8
 8006986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0204 	bic.w	r2, r2, #4
 8006996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6999      	ldr	r1, [r3, #24]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	619a      	str	r2, [r3, #24]
      break;
 80069aa:	e062      	b.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fa74 	bl	8006ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6999      	ldr	r1, [r3, #24]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	021a      	lsls	r2, r3, #8
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	619a      	str	r2, [r3, #24]
      break;
 80069ec:	e041      	b.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fac9 	bl	8006f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0208 	orr.w	r2, r2, #8
 8006a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0204 	bic.w	r2, r2, #4
 8006a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69d9      	ldr	r1, [r3, #28]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	61da      	str	r2, [r3, #28]
      break;
 8006a2c:	e021      	b.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fb1d 	bl	8007074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69d9      	ldr	r1, [r3, #28]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	021a      	lsls	r2, r3, #8
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	61da      	str	r2, [r3, #28]
      break;
 8006a6e:	e000      	b.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006a70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x18>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0a6      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x166>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d067      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x120>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d80b      	bhi.n	8006af8 <HAL_TIM_ConfigClockSource+0x6c>
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d073      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x140>
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d802      	bhi.n	8006aee <HAL_TIM_ConfigClockSource+0x62>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d06f      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006aec:	e078      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d06c      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x140>
 8006af2:	2b30      	cmp	r3, #48	; 0x30
 8006af4:	d06a      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006af6:	e073      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006af8:	2b70      	cmp	r3, #112	; 0x70
 8006afa:	d00d      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0x8c>
 8006afc:	2b70      	cmp	r3, #112	; 0x70
 8006afe:	d804      	bhi.n	8006b0a <HAL_TIM_ConfigClockSource+0x7e>
 8006b00:	2b50      	cmp	r3, #80	; 0x50
 8006b02:	d033      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0xe0>
 8006b04:	2b60      	cmp	r3, #96	; 0x60
 8006b06:	d041      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006b08:	e06a      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0e:	d066      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x152>
 8006b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b14:	d017      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006b16:	e063      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6899      	ldr	r1, [r3, #8]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f000 fc6e 	bl	8007408 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b3a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	609a      	str	r2, [r3, #8]
      break;
 8006b44:	e04c      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f000 fc57 	bl	8007408 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b68:	609a      	str	r2, [r3, #8]
      break;
 8006b6a:	e039      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6859      	ldr	r1, [r3, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f000 fbcb 	bl	8007314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2150      	movs	r1, #80	; 0x50
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fc24 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006b8a:	e029      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6859      	ldr	r1, [r3, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f000 fbea 	bl	8007372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2160      	movs	r1, #96	; 0x60
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fc14 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006baa:	e019      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f000 fbab 	bl	8007314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2140      	movs	r1, #64	; 0x40
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fc04 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006bca:	e009      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 fbfb 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e000      	b.n	8006be0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e031      	b.n	8006c76 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa7b 	bl	8007120 <TIM_SlaveTimer_SetConfig>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d009      	beq.n	8006c44 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e018      	b.n	8006c76 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c52:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c62:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a40      	ldr	r2, [pc, #256]	; (8006d94 <TIM_Base_SetConfig+0x114>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9e:	d00f      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3d      	ldr	r2, [pc, #244]	; (8006d98 <TIM_Base_SetConfig+0x118>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3b      	ldr	r2, [pc, #236]	; (8006da0 <TIM_Base_SetConfig+0x120>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <TIM_Base_SetConfig+0x124>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d108      	bne.n	8006cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2f      	ldr	r2, [pc, #188]	; (8006d94 <TIM_Base_SetConfig+0x114>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02b      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d027      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	; (8006d98 <TIM_Base_SetConfig+0x118>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d023      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2b      	ldr	r2, [pc, #172]	; (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01f      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	; (8006da0 <TIM_Base_SetConfig+0x120>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01b      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a29      	ldr	r2, [pc, #164]	; (8006da4 <TIM_Base_SetConfig+0x124>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d017      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <TIM_Base_SetConfig+0x128>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	; (8006dac <TIM_Base_SetConfig+0x12c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00f      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <TIM_Base_SetConfig+0x130>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00b      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <TIM_Base_SetConfig+0x134>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a24      	ldr	r2, [pc, #144]	; (8006db8 <TIM_Base_SetConfig+0x138>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a23      	ldr	r2, [pc, #140]	; (8006dbc <TIM_Base_SetConfig+0x13c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <TIM_Base_SetConfig+0x114>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0xf8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <TIM_Base_SetConfig+0x124>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d103      	bne.n	8006d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	615a      	str	r2, [r3, #20]
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800
 8006db4:	40001800 	.word	0x40001800
 8006db8:	40001c00 	.word	0x40001c00
 8006dbc:	40002000 	.word	0x40002000

08006dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f023 0302 	bic.w	r3, r3, #2
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <TIM_OC1_SetConfig+0xd8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC1_SetConfig+0x64>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <TIM_OC1_SetConfig+0xdc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d10c      	bne.n	8006e3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0308 	bic.w	r3, r3, #8
 8006e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 0304 	bic.w	r3, r3, #4
 8006e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <TIM_OC1_SetConfig+0xd8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_OC1_SetConfig+0x8e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <TIM_OC1_SetConfig+0xdc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d111      	bne.n	8006e72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40010400 	.word	0x40010400

08006ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0210 	bic.w	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0320 	bic.w	r3, r3, #32
 8006eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a22      	ldr	r2, [pc, #136]	; (8006f84 <TIM_OC2_SetConfig+0xe4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_OC2_SetConfig+0x68>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d10d      	bne.n	8006f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a17      	ldr	r2, [pc, #92]	; (8006f84 <TIM_OC2_SetConfig+0xe4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC2_SetConfig+0x94>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a16      	ldr	r2, [pc, #88]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d113      	bne.n	8006f5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40010400 	.word	0x40010400

08006f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0303 	bic.w	r3, r3, #3
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a21      	ldr	r2, [pc, #132]	; (800706c <TIM_OC3_SetConfig+0xe0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_OC3_SetConfig+0x66>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a20      	ldr	r2, [pc, #128]	; (8007070 <TIM_OC3_SetConfig+0xe4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10d      	bne.n	800700e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <TIM_OC3_SetConfig+0xe0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_OC3_SetConfig+0x92>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a15      	ldr	r2, [pc, #84]	; (8007070 <TIM_OC3_SetConfig+0xe4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d113      	bne.n	8007046 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	621a      	str	r2, [r3, #32]
}
 8007060:	bf00      	nop
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40010000 	.word	0x40010000
 8007070:	40010400 	.word	0x40010400

08007074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a12      	ldr	r2, [pc, #72]	; (8007118 <TIM_OC4_SetConfig+0xa4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_OC4_SetConfig+0x68>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a11      	ldr	r2, [pc, #68]	; (800711c <TIM_OC4_SetConfig+0xa8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d109      	bne.n	80070f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	019b      	lsls	r3, r3, #6
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400

08007120 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007138:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b30      	cmp	r3, #48	; 0x30
 8007164:	d05c      	beq.n	8007220 <TIM_SlaveTimer_SetConfig+0x100>
 8007166:	2b30      	cmp	r3, #48	; 0x30
 8007168:	d806      	bhi.n	8007178 <TIM_SlaveTimer_SetConfig+0x58>
 800716a:	2b10      	cmp	r3, #16
 800716c:	d058      	beq.n	8007220 <TIM_SlaveTimer_SetConfig+0x100>
 800716e:	2b20      	cmp	r3, #32
 8007170:	d056      	beq.n	8007220 <TIM_SlaveTimer_SetConfig+0x100>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d054      	beq.n	8007220 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007176:	e054      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007178:	2b50      	cmp	r3, #80	; 0x50
 800717a:	d03d      	beq.n	80071f8 <TIM_SlaveTimer_SetConfig+0xd8>
 800717c:	2b50      	cmp	r3, #80	; 0x50
 800717e:	d802      	bhi.n	8007186 <TIM_SlaveTimer_SetConfig+0x66>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d010      	beq.n	80071a6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007184:	e04d      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007186:	2b60      	cmp	r3, #96	; 0x60
 8007188:	d040      	beq.n	800720c <TIM_SlaveTimer_SetConfig+0xec>
 800718a:	2b70      	cmp	r3, #112	; 0x70
 800718c:	d000      	beq.n	8007190 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800718e:	e048      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68d9      	ldr	r1, [r3, #12]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f000 f932 	bl	8007408 <TIM_ETR_SetConfig>
      break;
 80071a4:	e03d      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d101      	bne.n	80071b2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e038      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	621a      	str	r2, [r3, #32]
      break;
 80071f6:	e014      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6899      	ldr	r1, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	461a      	mov	r2, r3
 8007206:	f000 f885 	bl	8007314 <TIM_TI1_ConfigInputStage>
      break;
 800720a:	e00a      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	6899      	ldr	r1, [r3, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	461a      	mov	r2, r3
 800721a:	f000 f8aa 	bl	8007372 <TIM_TI2_ConfigInputStage>
      break;
 800721e:	e000      	b.n	8007222 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007220:	bf00      	nop
  }
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <TIM_TI1_SetConfig+0xcc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d01b      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d017      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a25      	ldr	r2, [pc, #148]	; (80072fc <TIM_TI1_SetConfig+0xd0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <TIM_TI1_SetConfig+0xd4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00f      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a23      	ldr	r2, [pc, #140]	; (8007304 <TIM_TI1_SetConfig+0xd8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00b      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a22      	ldr	r2, [pc, #136]	; (8007308 <TIM_TI1_SetConfig+0xdc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d007      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a21      	ldr	r2, [pc, #132]	; (800730c <TIM_TI1_SetConfig+0xe0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_TI1_SetConfig+0x66>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a20      	ldr	r2, [pc, #128]	; (8007310 <TIM_TI1_SetConfig+0xe4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d101      	bne.n	8007296 <TIM_TI1_SetConfig+0x6a>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <TIM_TI1_SetConfig+0x6c>
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d008      	beq.n	80072ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e003      	b.n	80072b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f023 030a 	bic.w	r3, r3, #10
 80072d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f003 030a 	and.w	r3, r3, #10
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40010400 	.word	0x40010400
 800730c:	40014000 	.word	0x40014000
 8007310:	40001800 	.word	0x40001800

08007314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f023 0201 	bic.w	r2, r3, #1
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800733e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f023 030a 	bic.w	r3, r3, #10
 8007350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007372:	b480      	push	{r7}
 8007374:	b087      	sub	sp, #28
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0210 	bic.w	r2, r3, #16
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800739c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f043 0307 	orr.w	r3, r3, #7
 80073f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	609a      	str	r2, [r3, #8]
}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	021a      	lsls	r2, r3, #8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	431a      	orrs	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4313      	orrs	r3, r2
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	609a      	str	r2, [r3, #8]
}
 800743c:	bf00      	nop
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e086      	b.n	800756a <HAL_TIMEx_HallSensor_Init+0x122>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f87e 	bl	8007572 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7ff fbf9 	bl	8006c80 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6819      	ldr	r1, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2203      	movs	r2, #3
 800749c:	f7ff fec6 	bl	800722c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 020c 	bic.w	r2, r2, #12
 80074ae:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6999      	ldr	r1, [r3, #24]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d0:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80074e0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f0:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0207 	bic.w	r2, r2, #7
 8007500:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0204 	orr.w	r2, r2, #4
 8007510:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007516:	2300      	movs	r3, #0
 8007518:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800751a:	2370      	movs	r3, #112	; 0x70
 800751c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f107 020c 	add.w	r2, r7, #12
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff fcb0 	bl	8006ea0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800754e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800755e:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800759c:	2302      	movs	r3, #2
 800759e:	e05a      	b.n	8007656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a21      	ldr	r2, [pc, #132]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d022      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ec:	d01d      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d018      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00e      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d004      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a15      	ldr	r2, [pc, #84]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d10c      	bne.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	4313      	orrs	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40010000 	.word	0x40010000
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40000c00 	.word	0x40000c00
 8007674:	40010400 	.word	0x40010400
 8007678:	40014000 	.word	0x40014000
 800767c:	40001800 	.word	0x40001800

08007680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007698:	2302      	movs	r3, #2
 800769a:	e03d      	b.n	8007718 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e03f      	b.n	80077b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fb ff22 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2224      	movs	r2, #36	; 0x24
 8007754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f829 	bl	80077c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800777c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800778c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800779c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007802:	f023 030c 	bic.w	r3, r3, #12
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	430b      	orrs	r3, r1
 800780e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782e:	f040 818b 	bne.w	8007b48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4ac1      	ldr	r2, [pc, #772]	; (8007b3c <UART_SetConfig+0x37c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d005      	beq.n	8007848 <UART_SetConfig+0x88>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4abf      	ldr	r2, [pc, #764]	; (8007b40 <UART_SetConfig+0x380>)
 8007842:	4293      	cmp	r3, r2
 8007844:	f040 80bd 	bne.w	80079c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007848:	f7fe fbec 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 800784c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	461d      	mov	r5, r3
 8007852:	f04f 0600 	mov.w	r6, #0
 8007856:	46a8      	mov	r8, r5
 8007858:	46b1      	mov	r9, r6
 800785a:	eb18 0308 	adds.w	r3, r8, r8
 800785e:	eb49 0409 	adc.w	r4, r9, r9
 8007862:	4698      	mov	r8, r3
 8007864:	46a1      	mov	r9, r4
 8007866:	eb18 0805 	adds.w	r8, r8, r5
 800786a:	eb49 0906 	adc.w	r9, r9, r6
 800786e:	f04f 0100 	mov.w	r1, #0
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800787a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800787e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007882:	4688      	mov	r8, r1
 8007884:	4691      	mov	r9, r2
 8007886:	eb18 0005 	adds.w	r0, r8, r5
 800788a:	eb49 0106 	adc.w	r1, r9, r6
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	461d      	mov	r5, r3
 8007894:	f04f 0600 	mov.w	r6, #0
 8007898:	196b      	adds	r3, r5, r5
 800789a:	eb46 0406 	adc.w	r4, r6, r6
 800789e:	461a      	mov	r2, r3
 80078a0:	4623      	mov	r3, r4
 80078a2:	f7f8 fcaf 	bl	8000204 <__aeabi_uldivmod>
 80078a6:	4603      	mov	r3, r0
 80078a8:	460c      	mov	r4, r1
 80078aa:	461a      	mov	r2, r3
 80078ac:	4ba5      	ldr	r3, [pc, #660]	; (8007b44 <UART_SetConfig+0x384>)
 80078ae:	fba3 2302 	umull	r2, r3, r3, r2
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	461d      	mov	r5, r3
 80078bc:	f04f 0600 	mov.w	r6, #0
 80078c0:	46a9      	mov	r9, r5
 80078c2:	46b2      	mov	sl, r6
 80078c4:	eb19 0309 	adds.w	r3, r9, r9
 80078c8:	eb4a 040a 	adc.w	r4, sl, sl
 80078cc:	4699      	mov	r9, r3
 80078ce:	46a2      	mov	sl, r4
 80078d0:	eb19 0905 	adds.w	r9, r9, r5
 80078d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078ec:	4689      	mov	r9, r1
 80078ee:	4692      	mov	sl, r2
 80078f0:	eb19 0005 	adds.w	r0, r9, r5
 80078f4:	eb4a 0106 	adc.w	r1, sl, r6
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	461d      	mov	r5, r3
 80078fe:	f04f 0600 	mov.w	r6, #0
 8007902:	196b      	adds	r3, r5, r5
 8007904:	eb46 0406 	adc.w	r4, r6, r6
 8007908:	461a      	mov	r2, r3
 800790a:	4623      	mov	r3, r4
 800790c:	f7f8 fc7a 	bl	8000204 <__aeabi_uldivmod>
 8007910:	4603      	mov	r3, r0
 8007912:	460c      	mov	r4, r1
 8007914:	461a      	mov	r2, r3
 8007916:	4b8b      	ldr	r3, [pc, #556]	; (8007b44 <UART_SetConfig+0x384>)
 8007918:	fba3 1302 	umull	r1, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	2164      	movs	r1, #100	; 0x64
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	3332      	adds	r3, #50	; 0x32
 800792a:	4a86      	ldr	r2, [pc, #536]	; (8007b44 <UART_SetConfig+0x384>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007938:	4498      	add	r8, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	461d      	mov	r5, r3
 800793e:	f04f 0600 	mov.w	r6, #0
 8007942:	46a9      	mov	r9, r5
 8007944:	46b2      	mov	sl, r6
 8007946:	eb19 0309 	adds.w	r3, r9, r9
 800794a:	eb4a 040a 	adc.w	r4, sl, sl
 800794e:	4699      	mov	r9, r3
 8007950:	46a2      	mov	sl, r4
 8007952:	eb19 0905 	adds.w	r9, r9, r5
 8007956:	eb4a 0a06 	adc.w	sl, sl, r6
 800795a:	f04f 0100 	mov.w	r1, #0
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007966:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800796a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800796e:	4689      	mov	r9, r1
 8007970:	4692      	mov	sl, r2
 8007972:	eb19 0005 	adds.w	r0, r9, r5
 8007976:	eb4a 0106 	adc.w	r1, sl, r6
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	461d      	mov	r5, r3
 8007980:	f04f 0600 	mov.w	r6, #0
 8007984:	196b      	adds	r3, r5, r5
 8007986:	eb46 0406 	adc.w	r4, r6, r6
 800798a:	461a      	mov	r2, r3
 800798c:	4623      	mov	r3, r4
 800798e:	f7f8 fc39 	bl	8000204 <__aeabi_uldivmod>
 8007992:	4603      	mov	r3, r0
 8007994:	460c      	mov	r4, r1
 8007996:	461a      	mov	r2, r3
 8007998:	4b6a      	ldr	r3, [pc, #424]	; (8007b44 <UART_SetConfig+0x384>)
 800799a:	fba3 1302 	umull	r1, r3, r3, r2
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	2164      	movs	r1, #100	; 0x64
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	3332      	adds	r3, #50	; 0x32
 80079ac:	4a65      	ldr	r2, [pc, #404]	; (8007b44 <UART_SetConfig+0x384>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	f003 0207 	and.w	r2, r3, #7
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4442      	add	r2, r8
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	e26f      	b.n	8007ea2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079c2:	f7fe fb1b 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 80079c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	461d      	mov	r5, r3
 80079cc:	f04f 0600 	mov.w	r6, #0
 80079d0:	46a8      	mov	r8, r5
 80079d2:	46b1      	mov	r9, r6
 80079d4:	eb18 0308 	adds.w	r3, r8, r8
 80079d8:	eb49 0409 	adc.w	r4, r9, r9
 80079dc:	4698      	mov	r8, r3
 80079de:	46a1      	mov	r9, r4
 80079e0:	eb18 0805 	adds.w	r8, r8, r5
 80079e4:	eb49 0906 	adc.w	r9, r9, r6
 80079e8:	f04f 0100 	mov.w	r1, #0
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079fc:	4688      	mov	r8, r1
 80079fe:	4691      	mov	r9, r2
 8007a00:	eb18 0005 	adds.w	r0, r8, r5
 8007a04:	eb49 0106 	adc.w	r1, r9, r6
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	461d      	mov	r5, r3
 8007a0e:	f04f 0600 	mov.w	r6, #0
 8007a12:	196b      	adds	r3, r5, r5
 8007a14:	eb46 0406 	adc.w	r4, r6, r6
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	f7f8 fbf2 	bl	8000204 <__aeabi_uldivmod>
 8007a20:	4603      	mov	r3, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	461a      	mov	r2, r3
 8007a26:	4b47      	ldr	r3, [pc, #284]	; (8007b44 <UART_SetConfig+0x384>)
 8007a28:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	461d      	mov	r5, r3
 8007a36:	f04f 0600 	mov.w	r6, #0
 8007a3a:	46a9      	mov	r9, r5
 8007a3c:	46b2      	mov	sl, r6
 8007a3e:	eb19 0309 	adds.w	r3, r9, r9
 8007a42:	eb4a 040a 	adc.w	r4, sl, sl
 8007a46:	4699      	mov	r9, r3
 8007a48:	46a2      	mov	sl, r4
 8007a4a:	eb19 0905 	adds.w	r9, r9, r5
 8007a4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a52:	f04f 0100 	mov.w	r1, #0
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a66:	4689      	mov	r9, r1
 8007a68:	4692      	mov	sl, r2
 8007a6a:	eb19 0005 	adds.w	r0, r9, r5
 8007a6e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	461d      	mov	r5, r3
 8007a78:	f04f 0600 	mov.w	r6, #0
 8007a7c:	196b      	adds	r3, r5, r5
 8007a7e:	eb46 0406 	adc.w	r4, r6, r6
 8007a82:	461a      	mov	r2, r3
 8007a84:	4623      	mov	r3, r4
 8007a86:	f7f8 fbbd 	bl	8000204 <__aeabi_uldivmod>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <UART_SetConfig+0x384>)
 8007a92:	fba3 1302 	umull	r1, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	2164      	movs	r1, #100	; 0x64
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	3332      	adds	r3, #50	; 0x32
 8007aa4:	4a27      	ldr	r2, [pc, #156]	; (8007b44 <UART_SetConfig+0x384>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ab2:	4498      	add	r8, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	f04f 0600 	mov.w	r6, #0
 8007abc:	46a9      	mov	r9, r5
 8007abe:	46b2      	mov	sl, r6
 8007ac0:	eb19 0309 	adds.w	r3, r9, r9
 8007ac4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ac8:	4699      	mov	r9, r3
 8007aca:	46a2      	mov	sl, r4
 8007acc:	eb19 0905 	adds.w	r9, r9, r5
 8007ad0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ad4:	f04f 0100 	mov.w	r1, #0
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ae0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ae4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ae8:	4689      	mov	r9, r1
 8007aea:	4692      	mov	sl, r2
 8007aec:	eb19 0005 	adds.w	r0, r9, r5
 8007af0:	eb4a 0106 	adc.w	r1, sl, r6
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	461d      	mov	r5, r3
 8007afa:	f04f 0600 	mov.w	r6, #0
 8007afe:	196b      	adds	r3, r5, r5
 8007b00:	eb46 0406 	adc.w	r4, r6, r6
 8007b04:	461a      	mov	r2, r3
 8007b06:	4623      	mov	r3, r4
 8007b08:	f7f8 fb7c 	bl	8000204 <__aeabi_uldivmod>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <UART_SetConfig+0x384>)
 8007b14:	fba3 1302 	umull	r1, r3, r3, r2
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	2164      	movs	r1, #100	; 0x64
 8007b1c:	fb01 f303 	mul.w	r3, r1, r3
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	3332      	adds	r3, #50	; 0x32
 8007b26:	4a07      	ldr	r2, [pc, #28]	; (8007b44 <UART_SetConfig+0x384>)
 8007b28:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	f003 0207 	and.w	r2, r3, #7
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4442      	add	r2, r8
 8007b38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b3a:	e1b2      	b.n	8007ea2 <UART_SetConfig+0x6e2>
 8007b3c:	40011000 	.word	0x40011000
 8007b40:	40011400 	.word	0x40011400
 8007b44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4ad7      	ldr	r2, [pc, #860]	; (8007eac <UART_SetConfig+0x6ec>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d005      	beq.n	8007b5e <UART_SetConfig+0x39e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4ad6      	ldr	r2, [pc, #856]	; (8007eb0 <UART_SetConfig+0x6f0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	f040 80d1 	bne.w	8007d00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b5e:	f7fe fa61 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 8007b62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	469a      	mov	sl, r3
 8007b68:	f04f 0b00 	mov.w	fp, #0
 8007b6c:	46d0      	mov	r8, sl
 8007b6e:	46d9      	mov	r9, fp
 8007b70:	eb18 0308 	adds.w	r3, r8, r8
 8007b74:	eb49 0409 	adc.w	r4, r9, r9
 8007b78:	4698      	mov	r8, r3
 8007b7a:	46a1      	mov	r9, r4
 8007b7c:	eb18 080a 	adds.w	r8, r8, sl
 8007b80:	eb49 090b 	adc.w	r9, r9, fp
 8007b84:	f04f 0100 	mov.w	r1, #0
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b98:	4688      	mov	r8, r1
 8007b9a:	4691      	mov	r9, r2
 8007b9c:	eb1a 0508 	adds.w	r5, sl, r8
 8007ba0:	eb4b 0609 	adc.w	r6, fp, r9
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	f04f 0200 	mov.w	r2, #0
 8007bae:	f04f 0300 	mov.w	r3, #0
 8007bb2:	f04f 0400 	mov.w	r4, #0
 8007bb6:	0094      	lsls	r4, r2, #2
 8007bb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bbc:	008b      	lsls	r3, r1, #2
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	f7f8 fb1d 	bl	8000204 <__aeabi_uldivmod>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	460c      	mov	r4, r1
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4bb8      	ldr	r3, [pc, #736]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	469b      	mov	fp, r3
 8007be0:	f04f 0c00 	mov.w	ip, #0
 8007be4:	46d9      	mov	r9, fp
 8007be6:	46e2      	mov	sl, ip
 8007be8:	eb19 0309 	adds.w	r3, r9, r9
 8007bec:	eb4a 040a 	adc.w	r4, sl, sl
 8007bf0:	4699      	mov	r9, r3
 8007bf2:	46a2      	mov	sl, r4
 8007bf4:	eb19 090b 	adds.w	r9, r9, fp
 8007bf8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bfc:	f04f 0100 	mov.w	r1, #0
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c10:	4689      	mov	r9, r1
 8007c12:	4692      	mov	sl, r2
 8007c14:	eb1b 0509 	adds.w	r5, fp, r9
 8007c18:	eb4c 060a 	adc.w	r6, ip, sl
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	f04f 0400 	mov.w	r4, #0
 8007c2e:	0094      	lsls	r4, r2, #2
 8007c30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c34:	008b      	lsls	r3, r1, #2
 8007c36:	461a      	mov	r2, r3
 8007c38:	4623      	mov	r3, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	f7f8 fae1 	bl	8000204 <__aeabi_uldivmod>
 8007c42:	4603      	mov	r3, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	461a      	mov	r2, r3
 8007c48:	4b9a      	ldr	r3, [pc, #616]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	2164      	movs	r1, #100	; 0x64
 8007c52:	fb01 f303 	mul.w	r3, r1, r3
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	3332      	adds	r3, #50	; 0x32
 8007c5c:	4a95      	ldr	r2, [pc, #596]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c68:	4498      	add	r8, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	469b      	mov	fp, r3
 8007c6e:	f04f 0c00 	mov.w	ip, #0
 8007c72:	46d9      	mov	r9, fp
 8007c74:	46e2      	mov	sl, ip
 8007c76:	eb19 0309 	adds.w	r3, r9, r9
 8007c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c7e:	4699      	mov	r9, r3
 8007c80:	46a2      	mov	sl, r4
 8007c82:	eb19 090b 	adds.w	r9, r9, fp
 8007c86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c8a:	f04f 0100 	mov.w	r1, #0
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	4692      	mov	sl, r2
 8007ca2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ca6:	eb4c 060a 	adc.w	r6, ip, sl
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	f04f 0400 	mov.w	r4, #0
 8007cbc:	0094      	lsls	r4, r2, #2
 8007cbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cc2:	008b      	lsls	r3, r1, #2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	4631      	mov	r1, r6
 8007ccc:	f7f8 fa9a 	bl	8000204 <__aeabi_uldivmod>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b77      	ldr	r3, [pc, #476]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	2164      	movs	r1, #100	; 0x64
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	3332      	adds	r3, #50	; 0x32
 8007cea:	4a72      	ldr	r2, [pc, #456]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f003 020f 	and.w	r2, r3, #15
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4442      	add	r2, r8
 8007cfc:	609a      	str	r2, [r3, #8]
 8007cfe:	e0d0      	b.n	8007ea2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fe f97c 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 8007d04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	469a      	mov	sl, r3
 8007d0a:	f04f 0b00 	mov.w	fp, #0
 8007d0e:	46d0      	mov	r8, sl
 8007d10:	46d9      	mov	r9, fp
 8007d12:	eb18 0308 	adds.w	r3, r8, r8
 8007d16:	eb49 0409 	adc.w	r4, r9, r9
 8007d1a:	4698      	mov	r8, r3
 8007d1c:	46a1      	mov	r9, r4
 8007d1e:	eb18 080a 	adds.w	r8, r8, sl
 8007d22:	eb49 090b 	adc.w	r9, r9, fp
 8007d26:	f04f 0100 	mov.w	r1, #0
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d3a:	4688      	mov	r8, r1
 8007d3c:	4691      	mov	r9, r2
 8007d3e:	eb1a 0508 	adds.w	r5, sl, r8
 8007d42:	eb4b 0609 	adc.w	r6, fp, r9
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	f04f 0300 	mov.w	r3, #0
 8007d54:	f04f 0400 	mov.w	r4, #0
 8007d58:	0094      	lsls	r4, r2, #2
 8007d5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d5e:	008b      	lsls	r3, r1, #2
 8007d60:	461a      	mov	r2, r3
 8007d62:	4623      	mov	r3, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	4631      	mov	r1, r6
 8007d68:	f7f8 fa4c 	bl	8000204 <__aeabi_uldivmod>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	461a      	mov	r2, r3
 8007d72:	4b50      	ldr	r3, [pc, #320]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007d74:	fba3 2302 	umull	r2, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	469b      	mov	fp, r3
 8007d82:	f04f 0c00 	mov.w	ip, #0
 8007d86:	46d9      	mov	r9, fp
 8007d88:	46e2      	mov	sl, ip
 8007d8a:	eb19 0309 	adds.w	r3, r9, r9
 8007d8e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d92:	4699      	mov	r9, r3
 8007d94:	46a2      	mov	sl, r4
 8007d96:	eb19 090b 	adds.w	r9, r9, fp
 8007d9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d9e:	f04f 0100 	mov.w	r1, #0
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007daa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007db2:	4689      	mov	r9, r1
 8007db4:	4692      	mov	sl, r2
 8007db6:	eb1b 0509 	adds.w	r5, fp, r9
 8007dba:	eb4c 060a 	adc.w	r6, ip, sl
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	f04f 0400 	mov.w	r4, #0
 8007dd0:	0094      	lsls	r4, r2, #2
 8007dd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dd6:	008b      	lsls	r3, r1, #2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4623      	mov	r3, r4
 8007ddc:	4628      	mov	r0, r5
 8007dde:	4631      	mov	r1, r6
 8007de0:	f7f8 fa10 	bl	8000204 <__aeabi_uldivmod>
 8007de4:	4603      	mov	r3, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	461a      	mov	r2, r3
 8007dea:	4b32      	ldr	r3, [pc, #200]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007dec:	fba3 1302 	umull	r1, r3, r3, r2
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	2164      	movs	r1, #100	; 0x64
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	3332      	adds	r3, #50	; 0x32
 8007dfe:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e0a:	4498      	add	r8, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	469b      	mov	fp, r3
 8007e10:	f04f 0c00 	mov.w	ip, #0
 8007e14:	46d9      	mov	r9, fp
 8007e16:	46e2      	mov	sl, ip
 8007e18:	eb19 0309 	adds.w	r3, r9, r9
 8007e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8007e20:	4699      	mov	r9, r3
 8007e22:	46a2      	mov	sl, r4
 8007e24:	eb19 090b 	adds.w	r9, r9, fp
 8007e28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e40:	4689      	mov	r9, r1
 8007e42:	4692      	mov	sl, r2
 8007e44:	eb1b 0509 	adds.w	r5, fp, r9
 8007e48:	eb4c 060a 	adc.w	r6, ip, sl
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	f04f 0400 	mov.w	r4, #0
 8007e5e:	0094      	lsls	r4, r2, #2
 8007e60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e64:	008b      	lsls	r3, r1, #2
 8007e66:	461a      	mov	r2, r3
 8007e68:	4623      	mov	r3, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	f7f8 f9c9 	bl	8000204 <__aeabi_uldivmod>
 8007e72:	4603      	mov	r3, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	461a      	mov	r2, r3
 8007e78:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2164      	movs	r1, #100	; 0x64
 8007e82:	fb01 f303 	mul.w	r3, r1, r3
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	3332      	adds	r3, #50	; 0x32
 8007e8c:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <UART_SetConfig+0x6f4>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	f003 020f 	and.w	r2, r3, #15
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4442      	add	r2, r8
 8007e9e:	609a      	str	r2, [r3, #8]
}
 8007ea0:	e7ff      	b.n	8007ea2 <UART_SetConfig+0x6e2>
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eac:	40011000 	.word	0x40011000
 8007eb0:	40011400 	.word	0x40011400
 8007eb4:	51eb851f 	.word	0x51eb851f

08007eb8 <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  return ( pHandle->AvBusVoltage_d );
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	88db      	ldrh	r3, [r3, #6]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	88db      	ldrh	r3, [r3, #6]
 8007edc:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	885b      	ldrh	r3, [r3, #2]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	b29b      	uxth	r3, r3
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8007f02:	b480      	push	{r7}
 8007f04:	b089      	sub	sp, #36	; 0x24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8007f10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007f14:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007f18:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 8007f1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f20:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8007f28:	4413      	add	r3, r2
 8007f2a:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	fb03 f302 	mul.w	r3, r3, r2
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d930      	bls.n	8007fa6 <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	0e1b      	lsrs	r3, r3, #24
 8007f48:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8007f50:	461a      	mov	r2, r3
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	4413      	add	r3, r2
 8007f62:	889b      	ldrh	r3, [r3, #4]
 8007f64:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 8007f66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	fb03 f302 	mul.w	r3, r3, r2
 8007f72:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da02      	bge.n	8007f80 <Circle_Limitation+0x7e>
 8007f7a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8007f7e:	337f      	adds	r3, #127	; 0x7f
 8007f80:	13db      	asrs	r3, r3, #15
 8007f82:	b21b      	sxth	r3, r3
 8007f84:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8007f86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	8afb      	ldrh	r3, [r7, #22]
 8007f8e:	fb03 f302 	mul.w	r3, r3, r2
 8007f92:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da02      	bge.n	8007fa0 <Circle_Limitation+0x9e>
 8007f9a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8007f9e:	337f      	adds	r3, #127	; 0x7f
 8007fa0:	13db      	asrs	r3, r3, #15
 8007fa2:	b21b      	sxth	r3, r3
 8007fa4:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	613b      	str	r3, [r7, #16]
 8007faa:	2300      	movs	r3, #0
 8007fac:	8a3a      	ldrh	r2, [r7, #16]
 8007fae:	f362 030f 	bfi	r3, r2, #0, #16
 8007fb2:	8a7a      	ldrh	r2, [r7, #18]
 8007fb4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3724      	adds	r7, #36	; 0x24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
 8008036:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	60da      	str	r2, [r3, #12]
  }
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d027      	beq.n	80080c8 <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b29a      	uxth	r2, r3
 800807e:	89bb      	ldrh	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	b29a      	uxth	r2, r3
 800808a:	89bb      	ldrh	r3, [r7, #12]
 800808c:	4413      	add	r3, r2
 800808e:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008090:	2300      	movs	r3, #0
 8008092:	72fb      	strb	r3, [r7, #11]
 8008094:	e00a      	b.n	80080ac <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	4413      	add	r3, r2
 800809c:	789b      	ldrb	r3, [r3, #2]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	89bb      	ldrh	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	3301      	adds	r3, #1
 80080aa:	72fb      	strb	r3, [r7, #11]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	7afa      	ldrb	r2, [r7, #11]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3ef      	bcc.n	8008096 <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80080ba:	89bb      	ldrh	r3, [r7, #12]
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	b29b      	uxth	r3, r3
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	4413      	add	r3, r2
 80080c6:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <LL_TIM_EnableCounter>:
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f043 0201 	orr.w	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <LL_TIM_SetUpdateSource>:
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f023 0204 	bic.w	r2, r3, #4
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	601a      	str	r2, [r3, #0]
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <LL_TIM_SetCounter>:
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <LL_TIM_SetPrescaler>:
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <LL_TIM_GetPrescaler>:
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <LL_TIM_CC_EnableChannel>:
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1a      	ldr	r2, [r3, #32]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <LL_TIM_IC_SetFilter>:
{
 8008190:	b4b0      	push	{r4, r5, r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d01c      	beq.n	80081dc <LL_TIM_IC_SetFilter+0x4c>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d017      	beq.n	80081d8 <LL_TIM_IC_SetFilter+0x48>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b10      	cmp	r3, #16
 80081ac:	d012      	beq.n	80081d4 <LL_TIM_IC_SetFilter+0x44>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	d00d      	beq.n	80081d0 <LL_TIM_IC_SetFilter+0x40>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ba:	d007      	beq.n	80081cc <LL_TIM_IC_SetFilter+0x3c>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c2:	d101      	bne.n	80081c8 <LL_TIM_IC_SetFilter+0x38>
 80081c4:	2305      	movs	r3, #5
 80081c6:	e00a      	b.n	80081de <LL_TIM_IC_SetFilter+0x4e>
 80081c8:	2306      	movs	r3, #6
 80081ca:	e008      	b.n	80081de <LL_TIM_IC_SetFilter+0x4e>
 80081cc:	2304      	movs	r3, #4
 80081ce:	e006      	b.n	80081de <LL_TIM_IC_SetFilter+0x4e>
 80081d0:	2303      	movs	r3, #3
 80081d2:	e004      	b.n	80081de <LL_TIM_IC_SetFilter+0x4e>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e002      	b.n	80081de <LL_TIM_IC_SetFilter+0x4e>
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <LL_TIM_IC_SetFilter+0x4e>
 80081dc:	2300      	movs	r3, #0
 80081de:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3318      	adds	r3, #24
 80081e4:	461a      	mov	r2, r3
 80081e6:	4629      	mov	r1, r5
 80081e8:	4b0c      	ldr	r3, [pc, #48]	; (800821c <LL_TIM_IC_SetFilter+0x8c>)
 80081ea:	5c5b      	ldrb	r3, [r3, r1]
 80081ec:	4413      	add	r3, r2
 80081ee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	4629      	mov	r1, r5
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <LL_TIM_IC_SetFilter+0x90>)
 80081f6:	5c5b      	ldrb	r3, [r3, r1]
 80081f8:	4619      	mov	r1, r3
 80081fa:	23f0      	movs	r3, #240	; 0xf0
 80081fc:	408b      	lsls	r3, r1
 80081fe:	43db      	mvns	r3, r3
 8008200:	401a      	ands	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	4628      	mov	r0, r5
 8008208:	4905      	ldr	r1, [pc, #20]	; (8008220 <LL_TIM_IC_SetFilter+0x90>)
 800820a:	5c09      	ldrb	r1, [r1, r0]
 800820c:	408b      	lsls	r3, r1
 800820e:	4313      	orrs	r3, r2
 8008210:	6023      	str	r3, [r4, #0]
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bcb0      	pop	{r4, r5, r7}
 800821a:	4770      	bx	lr
 800821c:	0800c7a0 	.word	0x0800c7a0
 8008220:	0800c7a8 	.word	0x0800c7a8

08008224 <LL_TIM_IC_GetCaptureCH1>:
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f043 0201 	orr.w	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	60da      	str	r2, [r3, #12]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f043 0202 	orr.w	r2, r3, #2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60da      	str	r2, [r3, #12]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <LL_TIM_DisableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_DisableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f023 0202 	bic.w	r2, r3, #2
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f043 0201 	orr.w	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	615a      	str	r2, [r3, #20]
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	4013      	ands	r3, r2
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	bf0c      	ite	eq
 80082d4:	2301      	moveq	r3, #1
 80082d6:	2300      	movne	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	613b      	str	r3, [r7, #16]

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8ada      	ldrh	r2, [r3, #22]
                                     pHandle->_Super.bElToMecRatio;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	b29b      	uxth	r3, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8008300:	fb12 f303 	smulbb	r3, r2, r3
 8008304:	81fb      	strh	r3, [r7, #14]
  uint16_t hMaxReliableElSpeedUnit = pHandle->_Super.hMaxReliableMecSpeedUnit *
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	8a9a      	ldrh	r2, [r3, #20]
                                     pHandle->_Super.bElToMecRatio;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	b29b      	uxth	r3, r3
  uint16_t hMaxReliableElSpeedUnit = pHandle->_Super.hMaxReliableMecSpeedUnit *
 8008310:	fb12 f303 	smulbb	r3, r2, r3
 8008314:	81bb      	strh	r3, [r7, #12]
  uint8_t bSpeedBufferSize;
  uint8_t bIndex;

  /* Adjustment factor: minimum measurable speed is x time less than the minimum
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;
 8008316:	89fb      	ldrh	r3, [r7, #14]
 8008318:	089b      	lsrs	r3, r3, #2
 800831a:	81fb      	strh	r3, [r7, #14]

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 800831c:	89bb      	ldrh	r3, [r7, #12]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	81bb      	strh	r3, [r7, #12]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	b29a      	uxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HALL_Init+0x58>
  {
    /* Set fixed to 150 ms */
    pHandle->HallTimeout = 150u;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2296      	movs	r2, #150	; 0x96
 800833a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800833e:	e00d      	b.n	800835c <HALL_Init+0x74>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8008340:	89fa      	ldrh	r2, [r7, #14]
 8008342:	4613      	mov	r3, r2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	4413      	add	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	461a      	mov	r2, r3
 800834c:	f242 7310 	movw	r3, #10000	; 0x2710
 8008350:	fbb3 f3f2 	udiv	r3, r3, r2
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800836a:	fb03 f302 	mul.w	r3, r3, r2
 800836e:	4a49      	ldr	r2, [pc, #292]	; (8008494 <HALL_Init+0x1ac>)
 8008370:	fb82 1203 	smull	r1, r2, r2, r3
 8008374:	1192      	asrs	r2, r2, #6
 8008376:	17db      	asrs	r3, r3, #31
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8008388:	041a      	lsls	r2, r3, #16
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	89ba      	ldrh	r2, [r7, #12]
 8008394:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	4a3e      	ldr	r2, [pc, #248]	; (8008498 <HALL_Init+0x1b0>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	089b      	lsrs	r3, r3, #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	8b52      	ldrh	r2, [r2, #26]
 80083a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	69d2      	ldr	r2, [r2, #28]
 80083b0:	fb02 f203 	mul.w	r2, r2, r3
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	4a36      	ldr	r2, [pc, #216]	; (8008498 <HALL_Init+0x1b0>)
 80083c0:	fba2 2303 	umull	r2, r3, r2, r3
 80083c4:	089a      	lsrs	r2, r3, #2
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	461a      	mov	r2, r3
                       / hMaxReliableElSpeedUnit);
 80083d0:	89bb      	ldrh	r3, [r7, #12]
 80083d2:	fbb2 f2f3 	udiv	r2, r2, r3
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8b5b      	ldrh	r3, [r3, #26]
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80083e8:	fb03 f302 	mul.w	r3, r3, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80083f0:	fb93 f3f2 	sdiv	r3, r3, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	461a      	mov	r2, r3
 8008412:	2101      	movs	r1, #1
 8008414:	6938      	ldr	r0, [r7, #16]
 8008416:	f7ff febb 	bl	8008190 <LL_TIM_IC_SetFilter>

  /* Force the TIMx prescaler with immediate access (gen update event)
  */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8008420:	4619      	mov	r1, r3
 8008422:	6938      	ldr	r0, [r7, #16]
 8008424:	f7ff fe88 	bl	8008138 <LL_TIM_SetPrescaler>
  LL_TIM_GenerateEvent_UPDATE ( TIMx );
 8008428:	6938      	ldr	r0, [r7, #16]
 800842a:	f7ff ff37 	bl	800829c <LL_TIM_GenerateEvent_UPDATE>


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2200      	movs	r2, #0
 8008432:	611a      	str	r2, [r3, #16]

  /* Selected input capture and Update (overflow) events generate interrupt */

  /* Source of Update event is only counter overflow/underflow */
  LL_TIM_SetUpdateSource ( TIMx, LL_TIM_UPDATESOURCE_COUNTER );
 8008434:	2104      	movs	r1, #4
 8008436:	6938      	ldr	r0, [r7, #16]
 8008438:	f7ff fe5d 	bl	80080f6 <LL_TIM_SetUpdateSource>

  LL_TIM_EnableIT_CC1 ( TIMx );
 800843c:	6938      	ldr	r0, [r7, #16]
 800843e:	f7ff ff0d 	bl	800825c <LL_TIM_EnableIT_CC1>
  LL_TIM_EnableIT_UPDATE ( TIMx );
 8008442:	6938      	ldr	r0, [r7, #16]
 8008444:	f7ff fefa 	bl	800823c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter ( TIMx, HALL_COUNTER_RESET );
 8008448:	2100      	movs	r1, #0
 800844a:	6938      	ldr	r0, [r7, #16]
 800844c:	f7ff fe66 	bl	800811c <LL_TIM_SetCounter>

  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
 8008450:	2101      	movs	r1, #1
 8008452:	6938      	ldr	r0, [r7, #16]
 8008454:	f7ff fe8a 	bl	800816c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter ( TIMx );
 8008458:	6938      	ldr	r0, [r7, #16]
 800845a:	f7ff fe3c 	bl	80080d6 <LL_TIM_EnableCounter>


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008464:	72fb      	strb	r3, [r7, #11]

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8008466:	2300      	movs	r3, #0
 8008468:	75fb      	strb	r3, [r7, #23]
 800846a:	e00b      	b.n	8008484 <HALL_Init+0x19c>
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008472:	7dfa      	ldrb	r2, [r7, #23]
 8008474:	4619      	mov	r1, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3214      	adds	r2, #20
 800847a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	3301      	adds	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]
 8008484:	7dfa      	ldrb	r2, [r7, #23]
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	429a      	cmp	r2, r3
 800848a:	d3ef      	bcc.n	800846c <HALL_Init+0x184>
  }
}
 800848c:	bf00      	nop
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	10624dd3 	.word	0x10624dd3
 8008498:	aaaaaaab 	.word	0xaaaaaaab

0800849c <HALL_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff fee6 	bl	800827c <LL_TIM_DisableIT_CC1>

  pHandle->RatioDec = false;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  pHandle->RatioInc = false;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	825a      	strh	r2, [r3, #18]

  pHandle->FirstCapt = 0u;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  pHandle->BufferFilled = 0u;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  pHandle->OVFCounter = 0u;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  pHandle->CompSpeed = 0;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  pHandle->Direction = POSITIVE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0u;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800850a:	4619      	mov	r1, r3
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7ff fe13 	bl	8008138 <LL_TIM_SetPrescaler>

  LL_TIM_SetCounter ( TIMx, HALL_COUNTER_RESET );
 8008512:	2100      	movs	r1, #0
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fe01 	bl	800811c <LL_TIM_SetCounter>

  LL_TIM_EnableCounter ( TIMx );
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fddb 	bl	80080d6 <LL_TIM_EnableCounter>

  LL_TIM_EnableIT_CC1 ( TIMx );
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff fe9b 	bl	800825c <LL_TIM_EnableIT_CC1>

  HALL_Init_Electrical_Angle( pHandle );
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fc38 	bl	8008d9c <HALL_Init_Electrical_Angle>
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HALL_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t HALL_CalcElAngle( HALL_Handle_t * pHandle )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008542:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008546:	4293      	cmp	r3, r2
 8008548:	d027      	beq.n	800859a <HALL_CalcElAngle+0x66>
  {
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008558:	b29b      	uxth	r3, r3
 800855a:	4413      	add	r3, r2
 800855c:	b29b      	uxth	r3, r3
 800855e:	b21a      	sxth	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008574:	b299      	uxth	r1, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 800857c:	b29b      	uxth	r3, r3
 800857e:	440b      	add	r3, r1
 8008580:	b29b      	uxth	r3, r3
 8008582:	4413      	add	r3, r2
 8008584:	b29b      	uxth	r3, r3
 8008586:	b21a      	sxth	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	809a      	strh	r2, [r3, #4]
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8008598:	e00c      	b.n	80085b4 <HALL_CalcElAngle+0x80>
  }
  else
  {
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4413      	add	r3, r2
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	b21a      	sxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	809a      	strh	r2, [r3, #4]
  }

  return pHandle->_Super.hElAngle;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <HALL_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool HALL_CalcAvrgMecSpeedUnit( HALL_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	60bb      	str	r3, [r7, #8]
  bool bReliability;

  if ( pHandle->SensorIsReliable )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d071      	beq.n	80086c4 <HALL_CalcAvrgMecSpeedUnit+0xfe>
  {
    /* No errors have been detected during rotor speed information
    extrapolation */
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f7ff fdb7 	bl	8008154 <LL_TIM_GetPrescaler>
 80085e6:	4602      	mov	r2, r0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d306      	bcc.n	8008600 <HALL_CalcAvrgMecSpeedUnit+0x3a>
    {
      /* At start-up or very low freq */
      /* Based on current prescaler value only */
      pHandle->_Super.hElSpeedDpp = 0;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	81da      	strh	r2, [r3, #14]
      *hMecSpeedUnit = 0;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	e059      	b.n	80086b4 <HALL_CalcAvrgMecSpeedUnit+0xee>
    }
    else
    {
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f9b3 20a4 	ldrsh.w	r2, [r3, #164]	; 0xa4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	81da      	strh	r2, [r3, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <HALL_CalcAvrgMecSpeedUnit+0x56>
      {
        /* Speed is too low */
        *hMecSpeedUnit = 0;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2200      	movs	r2, #0
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	e04b      	b.n	80086b4 <HALL_CalcAvrgMecSpeedUnit+0xee>
      }
      else
      {
        /* Check if speed is not to fast */
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8008622:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008626:	4293      	cmp	r3, r2
 8008628:	d03e      	beq.n	80086a8 <HALL_CalcAvrgMecSpeedUnit+0xe2>
        {
          if (pHandle->HallMtpa == true)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <HALL_CalcAvrgMecSpeedUnit+0x78>
          {
            pHandle->CompSpeed = 0;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800863c:	e01a      	b.n	8008674 <HALL_CalcAvrgMecSpeedUnit+0xae>
          }
          else  
          {
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8008644:	b29a      	uxth	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800864c:	b29b      	uxth	r3, r3
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	b29b      	uxth	r3, r3
 8008652:	b21a      	sxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
            ( ( int32_t )( pHandle->DeltaAngle ) /
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8008660:	461a      	mov	r2, r3
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
            ( ( int32_t )( pHandle->DeltaAngle ) /
 8008668:	fb92 f3f3 	sdiv	r3, r2, r3
            pHandle->CompSpeed = ( int16_t )
 800866c:	b21a      	sxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          }
          /* Convert el_dpp to MecUnit */
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800867a:	461a      	mov	r2, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	8b5b      	ldrh	r3, [r3, #26]
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8008680:	fb03 f202 	mul.w	r2, r3, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	461a      	mov	r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	4619      	mov	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	785b      	ldrb	r3, [r3, #1]
 8008698:	fb03 f301 	mul.w	r3, r3, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800869c:	fb92 f3f3 	sdiv	r3, r2, r3
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80086a0:	b21a      	sxth	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e005      	b.n	80086b4 <HALL_CalcAvrgMecSpeedUnit+0xee>
        }
        else
        {
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80086ae:	b21a      	sxth	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f002 fa6d 	bl	800ab98 <SPD_IsMecSpeedReliable>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
 80086c2:	e00b      	b.n	80086dc <HALL_CalcAvrgMecSpeedUnit+0x116>
  }
  else
  {
    bReliability = false;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	78da      	ldrb	r2, [r3, #3]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	701a      	strb	r2, [r3, #0]
    /* If speed is not reliable the El and Mec speed is set to 0 */
    pHandle->_Super.hElSpeedDpp = 0;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	81da      	strh	r2, [r3, #14]
    *hMecSpeedUnit = 0;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2200      	movs	r2, #0
 80086da:	801a      	strh	r2, [r3, #0]
  }

  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	819a      	strh	r2, [r3, #12]

  return ( bReliability );
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HALL_TIMx_CC_IRQHandler>:
*         to be called when TIMx capture event occurs
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
* @retval none
*/
__weak void * HALL_TIMx_CC_IRQHandler( void * pHandleVoid )
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b089      	sub	sp, #36	; 0x24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  HALL_Handle_t * pHandle = ( HALL_Handle_t * ) pHandleVoid;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	61bb      	str	r3, [r7, #24]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	617b      	str	r3, [r7, #20]
  int8_t PrevDirection;
  uint32_t wCaptBuf;
  uint16_t hPrscBuf;
  uint16_t hHighSpeedCapture;

  if ( pHandle->SensorIsReliable )
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 82ce 	beq.w	8008caa <HALL_TIMx_CC_IRQHandler+0x5ba>
  {
    /* A capture event generated this interrupt */
    bPrevHallState = pHandle->HallState;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008714:	74fb      	strb	r3, [r7, #19]
    PrevDirection = pHandle->Direction;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800871c:	74bb      	strb	r3, [r7, #18]

    if ( pHandle->SensorPlacement == DEGREES_120 )
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d129      	bne.n	800877c <HALL_TIMx_CC_IRQHandler+0x8c>
    {
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f7ff fdc2 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008738:	4603      	mov	r3, r0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	b2dc      	uxtb	r4, r3
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f7ff fdb6 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008750:	4603      	mov	r3, r0
 8008752:	b2db      	uxtb	r3, r3
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	4323      	orrs	r3, r4
 800875a:	b2dc      	uxtb	r4, r3
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7ff fda8 	bl	80082bc <LL_GPIO_IsInputPinSet>
 800876c:	4603      	mov	r3, r0
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800876e:	b2db      	uxtb	r3, r3
 8008770:	4323      	orrs	r3, r4
 8008772:	b2da      	uxtb	r2, r3
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800877a:	e02b      	b.n	80087d4 <HALL_TIMx_CC_IRQHandler+0xe4>
    }
    else
    {
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7ff fd98 	bl	80082bc <LL_GPIO_IsInputPinSet>
 800878c:	4603      	mov	r3, r0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f083 0304 	eor.w	r3, r3, #4
 8008798:	b2dc      	uxtb	r4, r3
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7ff fd89 	bl	80082bc <LL_GPIO_IsInputPinSet>
 80087aa:	4603      	mov	r3, r0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	4323      	orrs	r3, r4
 80087b4:	b2dc      	uxtb	r4, r3
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087be:	4619      	mov	r1, r3
 80087c0:	4610      	mov	r0, r2
 80087c2:	f7ff fd7b 	bl	80082bc <LL_GPIO_IsInputPinSet>
 80087c6:	4603      	mov	r3, r0
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	4323      	orrs	r3, r4
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    }

    switch ( pHandle->HallState )
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b05      	cmp	r3, #5
 80087de:	f200 80f6 	bhi.w	80089ce <HALL_TIMx_CC_IRQHandler+0x2de>
 80087e2:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <HALL_TIMx_CC_IRQHandler+0xf8>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008847 	.word	0x08008847
 80087ec:	080088eb 	.word	0x080088eb
 80087f0:	08008899 	.word	0x08008899
 80087f4:	0800898b 	.word	0x0800898b
 80087f8:	08008801 	.word	0x08008801
 80087fc:	0800893b 	.word	0x0800893b
    {
      case STATE_5:
        if ( bPrevHallState == STATE_4 )
 8008800:	7cfb      	ldrb	r3, [r7, #19]
 8008802:	2b04      	cmp	r3, #4
 8008804:	d10a      	bne.n	800881c <HALL_TIMx_CC_IRQHandler+0x12c>
        {
          pHandle->Direction = POSITIVE;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
        }
        else
        {
        }
        break;
 800881a:	e0dd      	b.n	80089d8 <HALL_TIMx_CC_IRQHandler+0x2e8>
        else if ( bPrevHallState == STATE_1 )
 800881c:	7cfb      	ldrb	r3, [r7, #19]
 800881e:	2b01      	cmp	r3, #1
 8008820:	f040 80da 	bne.w	80089d8 <HALL_TIMx_CC_IRQHandler+0x2e8>
          pHandle->Direction = NEGATIVE;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	22ff      	movs	r2, #255	; 0xff
 8008828:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008832:	b29b      	uxth	r3, r3
 8008834:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8008838:	332a      	adds	r3, #42	; 0x2a
 800883a:	b29b      	uxth	r3, r3
 800883c:	b21a      	sxth	r2, r3
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 8008844:	e0c8      	b.n	80089d8 <HALL_TIMx_CC_IRQHandler+0x2e8>

      case STATE_1:
        if ( bPrevHallState == STATE_5 )
 8008846:	7cfb      	ldrb	r3, [r7, #19]
 8008848:	2b05      	cmp	r3, #5
 800884a:	d110      	bne.n	800886e <HALL_TIMx_CC_IRQHandler+0x17e>
        {
          pHandle->Direction = POSITIVE;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800885a:	b29b      	uxth	r3, r3
 800885c:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8008860:	332a      	adds	r3, #42	; 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	b21a      	sxth	r2, r3
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
        }
        else
        {
        }
        break;
 800886c:	e0b6      	b.n	80089dc <HALL_TIMx_CC_IRQHandler+0x2ec>
        else if ( bPrevHallState == STATE_3 )
 800886e:	7cfb      	ldrb	r3, [r7, #19]
 8008870:	2b03      	cmp	r3, #3
 8008872:	f040 80b3 	bne.w	80089dc <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->Direction = NEGATIVE;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008884:	b29b      	uxth	r3, r3
 8008886:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800888a:	3355      	adds	r3, #85	; 0x55
 800888c:	b29b      	uxth	r3, r3
 800888e:	b21a      	sxth	r2, r3
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 8008896:	e0a1      	b.n	80089dc <HALL_TIMx_CC_IRQHandler+0x2ec>

      case STATE_3:
        if ( bPrevHallState == STATE_1 )
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d110      	bne.n	80088c0 <HALL_TIMx_CC_IRQHandler+0x1d0>
        {
          pHandle->Direction = POSITIVE;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80088b2:	3355      	adds	r3, #85	; 0x55
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	b21a      	sxth	r2, r3
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        }
        else
        {
        }

        break;
 80088be:	e08f      	b.n	80089e0 <HALL_TIMx_CC_IRQHandler+0x2f0>
        else if ( bPrevHallState == STATE_2 )
 80088c0:	7cfb      	ldrb	r3, [r7, #19]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	f040 808c 	bne.w	80089e0 <HALL_TIMx_CC_IRQHandler+0x2f0>
          pHandle->Direction = NEGATIVE;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	22ff      	movs	r2, #255	; 0xff
 80088cc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80088dc:	337f      	adds	r3, #127	; 0x7f
 80088de:	b29b      	uxth	r3, r3
 80088e0:	b21a      	sxth	r2, r3
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 80088e8:	e07a      	b.n	80089e0 <HALL_TIMx_CC_IRQHandler+0x2f0>

      case STATE_2:
        if ( bPrevHallState == STATE_3 )
 80088ea:	7cfb      	ldrb	r3, [r7, #19]
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d110      	bne.n	8008912 <HALL_TIMx_CC_IRQHandler+0x222>
        {
          pHandle->Direction = POSITIVE;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80088fe:	b29b      	uxth	r3, r3
                                                  + S16_60_PHASE_SHIFT );
 8008900:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8008904:	337f      	adds	r3, #127	; 0x7f
 8008906:	b29b      	uxth	r3, r3
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8008908:	b21a      	sxth	r2, r3
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
        }
        else
        {
        }
        break;
 8008910:	e068      	b.n	80089e4 <HALL_TIMx_CC_IRQHandler+0x2f4>
        else if ( bPrevHallState == STATE_6 )
 8008912:	7cfb      	ldrb	r3, [r7, #19]
 8008914:	2b06      	cmp	r3, #6
 8008916:	d165      	bne.n	80089e4 <HALL_TIMx_CC_IRQHandler+0x2f4>
          pHandle->Direction = NEGATIVE;
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	22ff      	movs	r2, #255	; 0xff
 800891c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008926:	b29b      	uxth	r3, r3
 8008928:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 800892c:	3b55      	subs	r3, #85	; 0x55
 800892e:	b29b      	uxth	r3, r3
 8008930:	b21a      	sxth	r2, r3
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 8008938:	e054      	b.n	80089e4 <HALL_TIMx_CC_IRQHandler+0x2f4>

      case STATE_6:
        if ( bPrevHallState == STATE_2 )
 800893a:	7cfb      	ldrb	r3, [r7, #19]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d110      	bne.n	8008962 <HALL_TIMx_CC_IRQHandler+0x272>
        {
          pHandle->Direction = POSITIVE;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800894e:	b29b      	uxth	r3, r3
 8008950:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8008954:	3b55      	subs	r3, #85	; 0x55
 8008956:	b29b      	uxth	r3, r3
 8008958:	b21a      	sxth	r2, r3
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
        }
        else
        {
        }
        break;
 8008960:	e042      	b.n	80089e8 <HALL_TIMx_CC_IRQHandler+0x2f8>
        else if ( bPrevHallState == STATE_4 )
 8008962:	7cfb      	ldrb	r3, [r7, #19]
 8008964:	2b04      	cmp	r3, #4
 8008966:	d13f      	bne.n	80089e8 <HALL_TIMx_CC_IRQHandler+0x2f8>
          pHandle->Direction = NEGATIVE;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	22ff      	movs	r2, #255	; 0xff
 800896c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008976:	b29b      	uxth	r3, r3
 8008978:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800897c:	3b2a      	subs	r3, #42	; 0x2a
 800897e:	b29b      	uxth	r3, r3
 8008980:	b21a      	sxth	r2, r3
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 8008988:	e02e      	b.n	80089e8 <HALL_TIMx_CC_IRQHandler+0x2f8>

      case STATE_4:
        if ( bPrevHallState == STATE_6 )
 800898a:	7cfb      	ldrb	r3, [r7, #19]
 800898c:	2b06      	cmp	r3, #6
 800898e:	d110      	bne.n	80089b2 <HALL_TIMx_CC_IRQHandler+0x2c2>
        {
          pHandle->Direction = POSITIVE;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80089a4:	3b2a      	subs	r3, #42	; 0x2a
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	b21a      	sxth	r2, r3
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
        }
        else
        {
        }
        break;
 80089b0:	e01c      	b.n	80089ec <HALL_TIMx_CC_IRQHandler+0x2fc>
        else if ( bPrevHallState == STATE_5 )
 80089b2:	7cfb      	ldrb	r3, [r7, #19]
 80089b4:	2b05      	cmp	r3, #5
 80089b6:	d119      	bne.n	80089ec <HALL_TIMx_CC_IRQHandler+0x2fc>
          pHandle->Direction = NEGATIVE;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	22ff      	movs	r2, #255	; 0xff
 80089bc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 80089cc:	e00e      	b.n	80089ec <HALL_TIMx_CC_IRQHandler+0x2fc>

      default:
        /* Bad hall sensor configutarion so update the speed reliability */
        pHandle->SensorIsReliable = false;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        break;
 80089d6:	e00a      	b.n	80089ee <HALL_TIMx_CC_IRQHandler+0x2fe>
        break;
 80089d8:	bf00      	nop
 80089da:	e008      	b.n	80089ee <HALL_TIMx_CC_IRQHandler+0x2fe>
        break;
 80089dc:	bf00      	nop
 80089de:	e006      	b.n	80089ee <HALL_TIMx_CC_IRQHandler+0x2fe>
        break;
 80089e0:	bf00      	nop
 80089e2:	e004      	b.n	80089ee <HALL_TIMx_CC_IRQHandler+0x2fe>
        break;
 80089e4:	bf00      	nop
 80089e6:	e002      	b.n	80089ee <HALL_TIMx_CC_IRQHandler+0x2fe>
        break;
 80089e8:	bf00      	nop
 80089ea:	e000      	b.n	80089ee <HALL_TIMx_CC_IRQHandler+0x2fe>
        break;
 80089ec:	bf00      	nop
    }
    /* We need to check that the direction has not changed.
       If it is the case, the sign of the current speed can be the opposite of the
       average speed, and the average time can be close to 0 which lead to a 
       computed speed close to the infinite, and bring instability. */
    if (pHandle->Direction != PrevDirection)
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80089f4:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d007      	beq.n	8008a0c <HALL_TIMx_CC_IRQHandler+0x31c>
    {
      /* Setting BufferFilled to 0 will prevent to compute the average speed based
       on the SpeedPeriod buffer values */
      pHandle->BufferFilled = 0 ;
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    }

    if (pHandle->HallMtpa == true)
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <HALL_TIMx_CC_IRQHandler+0x330>
    {
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f9b3 20aa 	ldrsh.w	r2, [r3, #170]	; 0xaa
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	809a      	strh	r2, [r3, #4]
    {
      /* Nothing to do */
    }

    /* Discard first capture */
    if ( pHandle->FirstCapt == 0u )
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10c      	bne.n	8008a46 <HALL_TIMx_CC_IRQHandler+0x356>
    {
      pHandle->FirstCapt++;
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	3301      	adds	r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      LL_TIM_IC_GetCaptureCH1( TIMx );
 8008a3e:	6978      	ldr	r0, [r7, #20]
 8008a40:	f7ff fbf0 	bl	8008224 <LL_TIM_IC_GetCaptureCH1>
 8008a44:	e131      	b.n	8008caa <HALL_TIMx_CC_IRQHandler+0x5ba>
    }
    else
    {
      /* used to validate the average speed measurement */
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d208      	bcs.n	8008a6a <HALL_TIMx_CC_IRQHandler+0x37a>
      {
        pHandle->BufferFilled++;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	3301      	adds	r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }

      /* Store the latest speed acquisition */
      hHighSpeedCapture = LL_TIM_IC_GetCaptureCH1( TIMx );
 8008a6a:	6978      	ldr	r0, [r7, #20]
 8008a6c:	f7ff fbda 	bl	8008224 <LL_TIM_IC_GetCaptureCH1>
 8008a70:	4603      	mov	r3, r0
 8008a72:	823b      	strh	r3, [r7, #16]
      wCaptBuf = ( uint32_t )hHighSpeedCapture;
 8008a74:	8a3b      	ldrh	r3, [r7, #16]
 8008a76:	61fb      	str	r3, [r7, #28]
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8008a78:	6978      	ldr	r0, [r7, #20]
 8008a7a:	f7ff fb6b 	bl	8008154 <LL_TIM_GetPrescaler>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	81fb      	strh	r3, [r7, #14]

      /* Add the numbers of overflow to the counter */
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	041b      	lsls	r3, r3, #16
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	61fb      	str	r3, [r7, #28]

      if ( pHandle->OVFCounter != 0u )
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d029      	beq.n	8008af2 <HALL_TIMx_CC_IRQHandler+0x402>
      {
        /* Adjust the capture using prescaler */
        uint16_t hAux;
        hAux = hPrscBuf + 1u;
 8008a9e:	89fb      	ldrh	r3, [r7, #14]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	813b      	strh	r3, [r7, #8]
        wCaptBuf *= hAux;
 8008aa4:	893a      	ldrh	r2, [r7, #8]
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	61fb      	str	r3, [r7, #28]

        if ( pHandle->RatioInc )
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <HALL_TIMx_CC_IRQHandler+0x3d4>
        {
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8008ac2:	e048      	b.n	8008b56 <HALL_TIMx_CC_IRQHandler+0x466>
          /* Don't change prescaler (delay due to preload/update mechanism) */
        }
        else
        {
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8008ac4:	6978      	ldr	r0, [r7, #20]
 8008ac6:	f7ff fb45 	bl	8008154 <LL_TIM_GetPrescaler>
 8008aca:	4602      	mov	r2, r0
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d23f      	bcs.n	8008b56 <HALL_TIMx_CC_IRQHandler+0x466>
          {
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8008ad6:	6978      	ldr	r0, [r7, #20]
 8008ad8:	f7ff fb3c 	bl	8008154 <LL_TIM_GetPrescaler>
 8008adc:	4603      	mov	r3, r0
 8008ade:	3301      	adds	r3, #1
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6978      	ldr	r0, [r7, #20]
 8008ae4:	f7ff fb28 	bl	8008138 <LL_TIM_SetPrescaler>
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8008af0:	e031      	b.n	8008b56 <HALL_TIMx_CC_IRQHandler+0x466>
        }
      }
      else
      {
        /* If prsc preload reduced in last capture, store current register + 1 */
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00c      	beq.n	8008b18 <HALL_TIMx_CC_IRQHandler+0x428>
        {
          /* Adjust the capture using prescaler */
          uint16_t hAux;
          hAux = hPrscBuf + 2u;
 8008afe:	89fb      	ldrh	r3, [r7, #14]
 8008b00:	3302      	adds	r3, #2
 8008b02:	817b      	strh	r3, [r7, #10]
          wCaptBuf *= hAux;
 8008b04:	897a      	ldrh	r2, [r7, #10]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	fb02 f303 	mul.w	r3, r2, r3
 8008b0c:	61fb      	str	r3, [r7, #28]

          pHandle->RatioDec = false;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8008b16:	e01e      	b.n	8008b56 <HALL_TIMx_CC_IRQHandler+0x466>
        }
        else  /* If prescaler was not modified on previous capture */
        {
          /* Adjust the capture using prescaler */
          uint16_t hAux = hPrscBuf + 1u;
 8008b18:	89fb      	ldrh	r3, [r7, #14]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	81bb      	strh	r3, [r7, #12]
          wCaptBuf *= hAux;
 8008b1e:	89ba      	ldrh	r2, [r7, #12]
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	61fb      	str	r3, [r7, #28]

          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8008b28:	8a3b      	ldrh	r3, [r7, #16]
 8008b2a:	f5b3 4faa 	cmp.w	r3, #21760	; 0x5500
 8008b2e:	d212      	bcs.n	8008b56 <HALL_TIMx_CC_IRQHandler+0x466>
          {
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8008b30:	6978      	ldr	r0, [r7, #20]
 8008b32:	f7ff fb0f 	bl	8008154 <LL_TIM_GetPrescaler>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00c      	beq.n	8008b56 <HALL_TIMx_CC_IRQHandler+0x466>
            {
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8008b3c:	6978      	ldr	r0, [r7, #20]
 8008b3e:	f7ff fb09 	bl	8008154 <LL_TIM_GetPrescaler>
 8008b42:	4603      	mov	r3, r0
 8008b44:	3b01      	subs	r3, #1
 8008b46:	4619      	mov	r1, r3
 8008b48:	6978      	ldr	r0, [r7, #20]
 8008b4a:	f7ff faf5 	bl	8008138 <LL_TIM_SetPrescaler>
              /* Avoid decrementing again in next capt.(register preload delay) */
              pHandle->RatioDec = true;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        }
      }

      /* Filtering to fast speed... could be a glitch  ? */
      /* the HALL_MAX_PSEUDO_SPEED is temporary in the buffer, and never included in average computation*/
        if ( wCaptBuf < pHandle->MinPeriod )
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	f0c0 809f 	bcc.w	8008ca2 <HALL_TIMx_CC_IRQHandler+0x5b2>
        {
           /* pHandle->AvrElSpeedDpp = HALL_MAX_PSEUDO_SPEED; */
        }
        else
        {
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008b70:	4619      	mov	r1, r3
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	3114      	adds	r1, #20
 8008b76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b7a:	1ad2      	subs	r2, r2, r3
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b88:	69fa      	ldr	r2, [r7, #28]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d310      	bcc.n	8008bb0 <HALL_TIMx_CC_IRQHandler+0x4c0>
          {
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	f992 20a2 	ldrsb.w	r2, [r2, #162]	; 0xa2
 8008b9a:	fb02 f103 	mul.w	r1, r2, r3
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	3214      	adds	r2, #20
 8008baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008bae:	e02c      	b.n	8008c0a <HALL_TIMx_CC_IRQHandler+0x51a>
          }
          else
          {
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = wCaptBuf ;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	69f9      	ldr	r1, [r7, #28]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	3214      	adds	r2, #20
 8008bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008bc8:	461a      	mov	r2, r3
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	3214      	adds	r2, #20
 8008bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	f992 20a2 	ldrsb.w	r2, [r2, #162]	; 0xa2
 8008bd8:	4611      	mov	r1, r2
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 8008be0:	fb01 f103 	mul.w	r1, r1, r3
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	3214      	adds	r2, #20
 8008be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	3114      	adds	r1, #20
 8008bfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c02:	441a      	add	r2, r3
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          }
          /* Update pointers to speed buffer */
          pHandle->SpeedFIFOIdx++;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d103      	bne.n	8008c32 <HALL_TIMx_CC_IRQHandler+0x542>
          {
            pHandle->SpeedFIFOIdx = 0u;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if ( pHandle->SensorIsReliable) 
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d02e      	beq.n	8008c9a <HALL_TIMx_CC_IRQHandler+0x5aa>
          {
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d212      	bcs.n	8008c74 <HALL_TIMx_CC_IRQHandler+0x584>
            {
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	fb12 f303 	smulbb	r3, r2, r3
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	b21a      	sxth	r2, r3
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8008c72:	e016      	b.n	8008ca2 <HALL_TIMx_CC_IRQHandler+0x5b2>
            }
            else 
            { /* Average speed allow to smooth the mechanical sensors misalignement */
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c8c:	fb91 f3f3 	sdiv	r3, r1, r3
 8008c90:	b21a      	sxth	r2, r3
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8008c98:	e003      	b.n	8008ca2 <HALL_TIMx_CC_IRQHandler+0x5b2>

            }
          }
          else /* Sensor is not reliable */
          {
            pHandle->AvrElSpeedDpp = 0;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
          }
        }
      /* Reset the number of overflow occurred */
      pHandle->OVFCounter = 0u;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    }
  }
  return MC_NULL;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3724      	adds	r7, #36	; 0x24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd90      	pop	{r4, r7, pc}

08008cb4 <HALL_TIMx_UP_IRQHandler>:
*         to be called when TIMx update event occurs
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
* @retval none
*/
__weak void * HALL_TIMx_UP_IRQHandler( void * pHandleVoid )
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  HALL_Handle_t * pHandle = ( HALL_Handle_t * ) pHandleVoid;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	60fb      	str	r3, [r7, #12]

  if ( pHandle->SensorIsReliable )
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d060      	beq.n	8008d92 <HALL_TIMx_UP_IRQHandler+0xde>
  {
    uint16_t hMaxTimerOverflow;
    /* an update event occured for this interrupt request generation */
    pHandle->OVFCounter++;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	3301      	adds	r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8008cf0:	fb03 f402 	mul.w	r4, r3, r2
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff fa2d 	bl	8008154 <LL_TIM_GetPrescaler>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
 8008d06:	fbb4 f3f3 	udiv	r3, r4, r3
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008d0a:	817b      	strh	r3, [r7, #10]
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	897a      	ldrh	r2, [r7, #10]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d83a      	bhi.n	8008d92 <HALL_TIMx_UP_IRQHandler+0xde>
    {
      /* Set rotor speed to zero */
      pHandle->_Super.hElSpeedDpp = 0;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	81da      	strh	r2, [r3, #14]

      /* Reset the electrical angle according the hall sensor configuration */
      HALL_Init_Electrical_Angle( pHandle );
 8008d22:	6938      	ldr	r0, [r7, #16]
 8008d24:	f000 f83a 	bl	8008d9c <HALL_Init_Electrical_Angle>

      /* Reset the overflow counter */
      pHandle->OVFCounter = 0u;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

      /* Reset first capture flag */
      pHandle->FirstCapt = 0u;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Reset the SensorSpeed buffer*/
      uint8_t bIndex;
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008d38:	2300      	movs	r3, #0
 8008d3a:	75fb      	strb	r3, [r7, #23]
 8008d3c:	e00b      	b.n	8008d56 <HALL_TIMx_UP_IRQHandler+0xa2>
      {
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d44:	7dfa      	ldrb	r2, [r7, #23]
 8008d46:	4619      	mov	r1, r3
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3214      	adds	r2, #20
 8008d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	3301      	adds	r3, #1
 8008d54:	75fb      	strb	r3, [r7, #23]
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008d5c:	7dfa      	ldrb	r2, [r7, #23]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d3ed      	bcc.n	8008d3e <HALL_TIMx_UP_IRQHandler+0x8a>
      }
      pHandle->BufferFilled = 0 ;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      pHandle->AvrElSpeedDpp = 0;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      pHandle->SpeedFIFOIdx = 0;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008d86:	fb02 f303 	mul.w	r3, r2, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }
  return MC_NULL;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	371c      	adds	r7, #28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd90      	pop	{r4, r7, pc}

08008d9c <HALL_Init_Electrical_Angle>:
*         initialized.
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d129      	bne.n	8008e02 <HALL_Init_Electrical_Angle+0x66>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f7ff fa7f 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	b2dc      	uxtb	r4, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7ff fa73 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	4323      	orrs	r3, r4
 8008de0:	b2dc      	uxtb	r4, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7ff fa65 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008df2:	4603      	mov	r3, r0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	4323      	orrs	r3, r4
 8008df8:	b2da      	uxtb	r2, r3
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8008e00:	e02b      	b.n	8008e5a <HALL_Init_Electrical_Angle+0xbe>
  }
  else
  {
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7ff fa55 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008e12:	4603      	mov	r3, r0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f083 0304 	eor.w	r3, r3, #4
 8008e1e:	b2dc      	uxtb	r4, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f7ff fa46 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008e30:	4603      	mov	r3, r0
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	4323      	orrs	r3, r4
 8008e3a:	b2dc      	uxtb	r4, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7ff fa38 	bl	80082bc <LL_GPIO_IsInputPinSet>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	4323      	orrs	r3, r4
 8008e52:	b2da      	uxtb	r2, r3
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  }

  switch ( pHandle->HallState )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008e60:	3b01      	subs	r3, #1
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	d856      	bhi.n	8008f14 <HALL_Init_Electrical_Angle+0x178>
 8008e66:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <HALL_Init_Electrical_Angle+0xd0>)
 8008e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6c:	08008e9d 	.word	0x08008e9d
 8008e70:	08008ecd 	.word	0x08008ecd
 8008e74:	08008eb5 	.word	0x08008eb5
 8008e78:	08008efd 	.word	0x08008efd
 8008e7c:	08008e85 	.word	0x08008e85
 8008e80:	08008ee5 	.word	0x08008ee5
  {
    case STATE_5:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8008e90:	3315      	adds	r3, #21
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	b21a      	sxth	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	809a      	strh	r2, [r3, #4]
      break;
 8008e9a:	e040      	b.n	8008f1e <HALL_Init_Electrical_Angle+0x182>
    case STATE_1:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8008ea8:	333f      	adds	r3, #63	; 0x3f
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	b21a      	sxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	809a      	strh	r2, [r3, #4]
                                              S16_60_PHASE_SHIFT / 2 );
      break;
 8008eb2:	e034      	b.n	8008f1e <HALL_Init_Electrical_Angle+0x182>
    case STATE_3:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8008ec0:	332a      	adds	r3, #42	; 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	b21a      	sxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	809a      	strh	r2, [r3, #4]
                                              S16_60_PHASE_SHIFT / 2 );
      break;
 8008eca:	e028      	b.n	8008f1e <HALL_Init_Electrical_Angle+0x182>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8008ed8:	3b2a      	subs	r3, #42	; 0x2a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	b21a      	sxth	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	809a      	strh	r2, [r3, #4]
                                              S16_60_PHASE_SHIFT / 2 );
      break;
 8008ee2:	e01c      	b.n	8008f1e <HALL_Init_Electrical_Angle+0x182>
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8008ef0:	3b3f      	subs	r3, #63	; 0x3f
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	b21a      	sxth	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	809a      	strh	r2, [r3, #4]
                                              S16_60_PHASE_SHIFT / 2 );
      break;
 8008efa:	e010      	b.n	8008f1e <HALL_Init_Electrical_Angle+0x182>
    case STATE_4:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8008f08:	3b15      	subs	r3, #21
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	b21a      	sxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	809a      	strh	r2, [r3, #4]
      break;
 8008f12:	e004      	b.n	8008f1e <HALL_Init_Electrical_Angle+0x182>
    default:
      /* Bad hall sensor configutarion so update the speed reliability */
      pHandle->SensorIsReliable = false;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
      break;
 8008f1c:	bf00      	nop
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd90      	pop	{r4, r7, pc}
 8008f32:	bf00      	nop

08008f34 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	4904      	ldr	r1, [pc, #16]	; (8008f54 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60cb      	str	r3, [r1, #12]
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	e0042000 	.word	0xe0042000

08008f58 <LL_ADC_REG_SetSequencerLength>:
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <LL_ADC_INJ_SetTriggerSource>:
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	609a      	str	r2, [r3, #8]
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <LL_ADC_Enable>:
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f043 0201 	orr.w	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	609a      	str	r2, [r3, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <LL_ADC_ClearFlag_JEOS>:
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f06f 0204 	mvn.w	r2, #4
 8008fd6:	601a      	str	r2, [r3, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <LL_ADC_EnableIT_JEOS>:
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <LL_TIM_DisableCounter>:
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f023 0201 	bic.w	r2, r3, #1
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <LL_TIM_SetCounter>:
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <LL_TIM_SetRepetitionCounter>:
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <LL_TIM_CC_EnableChannel>:
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1a      	ldr	r2, [r3, #32]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	621a      	str	r2, [r3, #32]
}
 8009072:	bf00      	nop
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <LL_TIM_CC_DisableChannel>:
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1a      	ldr	r2, [r3, #32]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	43db      	mvns	r3, r3
 8009090:	401a      	ands	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <LL_TIM_CC_IsEnabledChannel>:
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1a      	ldr	r2, [r3, #32]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	4013      	ands	r3, r2
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d101      	bne.n	80090be <LL_TIM_CC_IsEnabledChannel+0x1c>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <LL_TIM_CC_IsEnabledChannel+0x1e>
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <LL_TIM_OC_EnablePreload>:
{
 80090cc:	b4b0      	push	{r4, r5, r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d01c      	beq.n	8009116 <LL_TIM_OC_EnablePreload+0x4a>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d017      	beq.n	8009112 <LL_TIM_OC_EnablePreload+0x46>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b10      	cmp	r3, #16
 80090e6:	d012      	beq.n	800910e <LL_TIM_OC_EnablePreload+0x42>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d00d      	beq.n	800910a <LL_TIM_OC_EnablePreload+0x3e>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f4:	d007      	beq.n	8009106 <LL_TIM_OC_EnablePreload+0x3a>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fc:	d101      	bne.n	8009102 <LL_TIM_OC_EnablePreload+0x36>
 80090fe:	2305      	movs	r3, #5
 8009100:	e00a      	b.n	8009118 <LL_TIM_OC_EnablePreload+0x4c>
 8009102:	2306      	movs	r3, #6
 8009104:	e008      	b.n	8009118 <LL_TIM_OC_EnablePreload+0x4c>
 8009106:	2304      	movs	r3, #4
 8009108:	e006      	b.n	8009118 <LL_TIM_OC_EnablePreload+0x4c>
 800910a:	2303      	movs	r3, #3
 800910c:	e004      	b.n	8009118 <LL_TIM_OC_EnablePreload+0x4c>
 800910e:	2302      	movs	r3, #2
 8009110:	e002      	b.n	8009118 <LL_TIM_OC_EnablePreload+0x4c>
 8009112:	2301      	movs	r3, #1
 8009114:	e000      	b.n	8009118 <LL_TIM_OC_EnablePreload+0x4c>
 8009116:	2300      	movs	r3, #0
 8009118:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3318      	adds	r3, #24
 800911e:	461a      	mov	r2, r3
 8009120:	4629      	mov	r1, r5
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <LL_TIM_OC_EnablePreload+0x7c>)
 8009124:	5c5b      	ldrb	r3, [r3, r1]
 8009126:	4413      	add	r3, r2
 8009128:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	4629      	mov	r1, r5
 800912e:	4b07      	ldr	r3, [pc, #28]	; (800914c <LL_TIM_OC_EnablePreload+0x80>)
 8009130:	5c5b      	ldrb	r3, [r3, r1]
 8009132:	4619      	mov	r1, r3
 8009134:	2308      	movs	r3, #8
 8009136:	408b      	lsls	r3, r1
 8009138:	4313      	orrs	r3, r2
 800913a:	6023      	str	r3, [r4, #0]
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bcb0      	pop	{r4, r5, r7}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	0800c7b0 	.word	0x0800c7b0
 800914c:	0800c7b8 	.word	0x0800c7b8

08009150 <LL_TIM_OC_DisablePreload>:
{
 8009150:	b4b0      	push	{r4, r5, r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d01c      	beq.n	800919a <LL_TIM_OC_DisablePreload+0x4a>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b04      	cmp	r3, #4
 8009164:	d017      	beq.n	8009196 <LL_TIM_OC_DisablePreload+0x46>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b10      	cmp	r3, #16
 800916a:	d012      	beq.n	8009192 <LL_TIM_OC_DisablePreload+0x42>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d00d      	beq.n	800918e <LL_TIM_OC_DisablePreload+0x3e>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009178:	d007      	beq.n	800918a <LL_TIM_OC_DisablePreload+0x3a>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009180:	d101      	bne.n	8009186 <LL_TIM_OC_DisablePreload+0x36>
 8009182:	2305      	movs	r3, #5
 8009184:	e00a      	b.n	800919c <LL_TIM_OC_DisablePreload+0x4c>
 8009186:	2306      	movs	r3, #6
 8009188:	e008      	b.n	800919c <LL_TIM_OC_DisablePreload+0x4c>
 800918a:	2304      	movs	r3, #4
 800918c:	e006      	b.n	800919c <LL_TIM_OC_DisablePreload+0x4c>
 800918e:	2303      	movs	r3, #3
 8009190:	e004      	b.n	800919c <LL_TIM_OC_DisablePreload+0x4c>
 8009192:	2302      	movs	r3, #2
 8009194:	e002      	b.n	800919c <LL_TIM_OC_DisablePreload+0x4c>
 8009196:	2301      	movs	r3, #1
 8009198:	e000      	b.n	800919c <LL_TIM_OC_DisablePreload+0x4c>
 800919a:	2300      	movs	r3, #0
 800919c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3318      	adds	r3, #24
 80091a2:	461a      	mov	r2, r3
 80091a4:	4629      	mov	r1, r5
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <LL_TIM_OC_DisablePreload+0x7c>)
 80091a8:	5c5b      	ldrb	r3, [r3, r1]
 80091aa:	4413      	add	r3, r2
 80091ac:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	4629      	mov	r1, r5
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <LL_TIM_OC_DisablePreload+0x80>)
 80091b4:	5c5b      	ldrb	r3, [r3, r1]
 80091b6:	4619      	mov	r1, r3
 80091b8:	2308      	movs	r3, #8
 80091ba:	408b      	lsls	r3, r1
 80091bc:	43db      	mvns	r3, r3
 80091be:	4013      	ands	r3, r2
 80091c0:	6023      	str	r3, [r4, #0]
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bcb0      	pop	{r4, r5, r7}
 80091ca:	4770      	bx	lr
 80091cc:	0800c7b0 	.word	0x0800c7b0
 80091d0:	0800c7b8 	.word	0x0800c7b8

080091d4 <LL_TIM_OC_SetCompareCH1>:
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <LL_TIM_OC_SetCompareCH2>:
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <LL_TIM_OC_SetCompareCH3>:
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <LL_TIM_OC_SetCompareCH4>:
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <LL_TIM_EnableAllOutputs>:
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009250:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <LL_TIM_DisableAllOutputs>:
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009270:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <LL_TIM_ClearFlag_UPDATE>:
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f06f 0201 	mvn.w	r2, #1
 8009292:	611a      	str	r2, [r3, #16]
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e000      	b.n	80092ba <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <LL_TIM_ClearFlag_BRK>:
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092d4:	611a      	str	r2, [r3, #16]
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <LL_TIM_EnableIT_UPDATE>:
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f043 0201 	orr.w	r2, r3, #1
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	60da      	str	r2, [r3, #12]
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <LL_TIM_DisableIT_UPDATE>:
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f023 0201 	bic.w	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60da      	str	r2, [r3, #12]
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <LL_TIM_EnableIT_BRK>:
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60da      	str	r2, [r3, #12]
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <LL_TIM_GenerateEvent_UPDATE>:
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f043 0201 	orr.w	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	615a      	str	r2, [r3, #20]
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	619a      	str	r2, [r3, #24]
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	041a      	lsls	r2, r3, #16
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	619a      	str	r2, [r3, #24]
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <ICS_Init>:
*         in ICS configuration using STM32F4XX
* @param  ICS F4xx PWM Current Feedback Handle
* @retval none
*/
__weak void ICS_Init( PWMC_ICS_Handle_t * pHandle )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	60fb      	str	r3, [r7, #12]

  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	461a      	mov	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d173      	bne.n	800949e <ICS_Init+0x102>
  {

    /* disable main TIM counter to ensure
     * a synchronous start by TIM2 trigger */
    LL_TIM_DisableCounter( TIMx );
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff fe24 	bl	8009004 <LL_TIM_DisableCounter>

    /* BKIN, if enabled */
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <ICS_Init+0x38>
    {
      LL_TIM_ClearFlag_BRK( TIMx );
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff ff7c 	bl	80092c6 <LL_TIM_ClearFlag_BRK>
      LL_TIM_EnableIT_BRK( TIMx );
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7ff ffa7 	bl	8009322 <LL_TIM_EnableIT_BRK>
    }

    /* Prepare timer for synchronization */
    LL_TIM_GenerateEvent_UPDATE( TIMx );
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff ffb4 	bl	8009342 <LL_TIM_GenerateEvent_UPDATE>

    if ( pHandle->pParams_str->FreqRatio == 2u )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	791b      	ldrb	r3, [r3, #4]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d11d      	bne.n	8009420 <ICS_Init+0x84>
    {
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e8:	795b      	ldrb	r3, [r3, #5]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d10f      	bne.n	800940e <ICS_Init+0x72>
      {
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	7a1b      	ldrb	r3, [r3, #8]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d10a      	bne.n	800940e <ICS_Init+0x72>
        {
          /* Set TIMx repetition counter to 1 */
          LL_TIM_SetRepetitionCounter( TIMx, 1u );
 80093f8:	2101      	movs	r1, #1
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff fe20 	bl	8009040 <LL_TIM_SetRepetitionCounter>
          LL_TIM_GenerateEvent_UPDATE( TIMx );
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff ff9e 	bl	8009342 <LL_TIM_GenerateEvent_UPDATE>
          /* Repetition counter will be set to 3 at next Update */
          LL_TIM_SetRepetitionCounter( TIMx, 3 );
 8009406:	2103      	movs	r1, #3
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff fe19 	bl	8009040 <LL_TIM_SetRepetitionCounter>
        }
      }

      LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009414:	3b01      	subs	r3, #1
 8009416:	4619      	mov	r1, r3
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7ff fe03 	bl	8009024 <LL_TIM_SetCounter>
 800941e:	e00c      	b.n	800943a <ICS_Init+0x9e>
    }
    else /* FreqRatio equal to 1 or 3 */
    {
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d107      	bne.n	800943a <ICS_Init+0x9e>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009430:	3b01      	subs	r3, #1
 8009432:	4619      	mov	r1, r3
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fdf5 	bl	8009024 <LL_TIM_SetCounter>
      }
    }

    /* Enable PWM channel */
    LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 800943a:	f240 5155 	movw	r1, #1365	; 0x555
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff fe0c 	bl	800905c <LL_TIM_CC_EnableChannel>

    if ( pHandle->pParams_str->TIMx == TIM1 )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	4a17      	ldr	r2, [pc, #92]	; (80094a8 <ICS_Init+0x10c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d107      	bne.n	8009460 <ICS_Init+0xc4>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 8009450:	2001      	movs	r0, #1
 8009452:	f7ff fd6f 	bl	8008f34 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800945c:	669a      	str	r2, [r3, #104]	; 0x68
 800945e:	e006      	b.n	800946e <ICS_Init+0xd2>
    }
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 8009460:	2002      	movs	r0, #2
 8009462:	f7ff fd67 	bl	8008f34 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 800946c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* ADC1 and ADC2 registers configuration ---------------------------------*/
    /* Enable ADC1 and ADC2 */
    LL_ADC_Enable( ADC1 );
 800946e:	480f      	ldr	r0, [pc, #60]	; (80094ac <ICS_Init+0x110>)
 8009470:	f7ff fd9a 	bl	8008fa8 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 8009474:	480e      	ldr	r0, [pc, #56]	; (80094b0 <ICS_Init+0x114>)
 8009476:	f7ff fd97 	bl	8008fa8 <LL_ADC_Enable>

    /* reset regular conversion sequencer length set by cubeMX */
    LL_ADC_REG_SetSequencerLength( ADC1, LL_ADC_REG_SEQ_SCAN_DISABLE );
 800947a:	2100      	movs	r1, #0
 800947c:	480b      	ldr	r0, [pc, #44]	; (80094ac <ICS_Init+0x110>)
 800947e:	f7ff fd6b 	bl	8008f58 <LL_ADC_REG_SetSequencerLength>

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8009482:	480a      	ldr	r0, [pc, #40]	; (80094ac <ICS_Init+0x110>)
 8009484:	f7ff fda0 	bl	8008fc8 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8009488:	4808      	ldr	r0, [pc, #32]	; (80094ac <ICS_Init+0x110>)
 800948a:	f7ff fdab 	bl	8008fe4 <LL_ADC_EnableIT_JEOS>


    pHandle->OverCurrentFlag = false;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  }
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40012000 	.word	0x40012000
 80094b0:	40012100 	.word	0x40012100

080094b4 <ICS_CurrentReadingCalibration>:
*         Ib current feedback analog channels when no current is flowing into the
*         motor
* @param pHandle ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_CurrentReadingCalibration( PWMC_Handle_t * pHdl )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	60bb      	str	r3, [r7, #8]

  pHandle->PhaseAOffset = 0u;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PolarizationCounter = 0u;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

  /* Force inactive level on TIMx CHy and TIMx CHyN */
  LL_TIM_CC_DisableChannel( TIMx, TIMxCCER_MASK_CH123 );
 80094dc:	f240 5155 	movw	r1, #1365	; 0x555
 80094e0:	68b8      	ldr	r0, [r7, #8]
 80094e2:	f7ff fdcc 	bl	800907e <LL_TIM_CC_DisableChannel>

  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4a2c      	ldr	r2, [pc, #176]	; (800959c <ICS_CurrentReadingCalibration+0xe8>)
 80094ea:	605a      	str	r2, [r3, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f954 	bl	800979c <ICS_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  waitForPolarizationEnd( TIMx,
 80094fe:	7a1a      	ldrb	r2, [r3, #8]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3366      	adds	r3, #102	; 0x66
 8009504:	68b8      	ldr	r0, [r7, #8]
 8009506:	f000 fe8a 	bl	800a21e <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  ICS_SwitchOffPWM( &pHandle->_Super );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f9da 	bl	80098c6 <ICS_SwitchOffPWM>

  pHandle->PhaseAOffset >>= 3;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009516:	08da      	lsrs	r2, r3, #3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset >>= 3;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009520:	08da      	lsrs	r2, r3, #3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	661a      	str	r2, [r3, #96]	; 0x60

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
   force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 8009526:	2101      	movs	r1, #1
 8009528:	68b8      	ldr	r0, [r7, #8]
 800952a:	f7ff fe11 	bl	8009150 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800952e:	2110      	movs	r1, #16
 8009530:	68b8      	ldr	r0, [r7, #8]
 8009532:	f7ff fe0d 	bl	8009150 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 8009536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800953a:	68b8      	ldr	r0, [r7, #8]
 800953c:	f7ff fe08 	bl	8009150 <LL_TIM_OC_DisablePreload>

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009546:	4619      	mov	r1, r3
 8009548:	68b8      	ldr	r0, [r7, #8]
 800954a:	f7ff fe43 	bl	80091d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->Half_PWMPeriod );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009554:	4619      	mov	r1, r3
 8009556:	68b8      	ldr	r0, [r7, #8]
 8009558:	f7ff fe4a 	bl	80091f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->Half_PWMPeriod );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009562:	4619      	mov	r1, r3
 8009564:	68b8      	ldr	r0, [r7, #8]
 8009566:	f7ff fe51 	bl	800920c <LL_TIM_OC_SetCompareCH3>

  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800956a:	2101      	movs	r1, #1
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f7ff fdad 	bl	80090cc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 8009572:	2110      	movs	r1, #16
 8009574:	68b8      	ldr	r0, [r7, #8]
 8009576:	f7ff fda9 	bl	80090cc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800957a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800957e:	68b8      	ldr	r0, [r7, #8]
 8009580:	f7ff fda4 	bl	80090cc <LL_TIM_OC_EnablePreload>

  /* Set back TIMx CCER register */
  LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 8009584:	f240 5155 	movw	r1, #1365	; 0x555
 8009588:	68b8      	ldr	r0, [r7, #8]
 800958a:	f7ff fd67 	bl	800905c <LL_TIM_CC_EnableChannel>

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4a03      	ldr	r2, [pc, #12]	; (80095a0 <ICS_CurrentReadingCalibration+0xec>)
 8009592:	605a      	str	r2, [r3, #4]
}
 8009594:	bf00      	nop
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	0800968d 	.word	0x0800968d
 80095a0:	080095a5 	.word	0x080095a5

080095a4 <ICS_GetPhaseCurrents>:
* @brief Computes and return latest converted motor phase currents motor
* @param pHandle ICS F4xx PWM Current Feedback Handle
* @retval Ia and Ib current in ab_t format
*/
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	617b      	str	r3, [r7, #20]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	613b      	str	r3, [r7, #16]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 80095ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80095be:	6938      	ldr	r0, [r7, #16]
 80095c0:	f7ff fd5d 	bl	800907e <LL_TIM_CC_DisableChannel>

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80095c4:	4b2f      	ldr	r3, [pc, #188]	; (8009684 <ICS_GetPhaseCurrents+0xe0>)
 80095c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	81fb      	strh	r3, [r7, #14]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80095ce:	89fb      	ldrh	r3, [r7, #14]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	60bb      	str	r3, [r7, #8]

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80095de:	dc04      	bgt.n	80095ea <ICS_GetPhaseCurrents+0x46>
  {
    pStator_Currents->a = -INT16_MAX;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f248 0201 	movw	r2, #32769	; 0x8001
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	e00c      	b.n	8009604 <ICS_GetPhaseCurrents+0x60>
  }
  else  if ( aux > INT16_MAX )
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f0:	db04      	blt.n	80095fc <ICS_GetPhaseCurrents+0x58>
  {
    pStator_Currents->a = INT16_MAX;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80095f8:	801a      	strh	r2, [r3, #0]
 80095fa:	e003      	b.n	8009604 <ICS_GetPhaseCurrents+0x60>
  }
  else
  {
    pStator_Currents->a = ( int16_t )aux;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	b21a      	sxth	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	801a      	strh	r2, [r3, #0]
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8009604:	4b20      	ldr	r3, [pc, #128]	; (8009688 <ICS_GetPhaseCurrents+0xe4>)
 8009606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009608:	b29b      	uxth	r3, r3
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	81fb      	strh	r3, [r7, #14]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 800960e:	89fb      	ldrh	r3, [r7, #14]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	60bb      	str	r3, [r7, #8]

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800961e:	dc04      	bgt.n	800962a <ICS_GetPhaseCurrents+0x86>
  {
    pStator_Currents->b = -INT16_MAX;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	f248 0201 	movw	r2, #32769	; 0x8001
 8009626:	805a      	strh	r2, [r3, #2]
 8009628:	e00c      	b.n	8009644 <ICS_GetPhaseCurrents+0xa0>
  }
  else  if ( aux > INT16_MAX )
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009630:	db04      	blt.n	800963c <ICS_GetPhaseCurrents+0x98>
  {
    pStator_Currents->b = INT16_MAX;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009638:	805a      	strh	r2, [r3, #2]
 800963a:	e003      	b.n	8009644 <ICS_GetPhaseCurrents+0xa0>
  }
  else
  {
    pStator_Currents->b = ( int16_t )aux;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	b21a      	sxth	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	805a      	strh	r2, [r3, #2]
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f9b3 2000 	ldrsh.w	r2, [r3]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009662:	b29b      	uxth	r3, r3
 8009664:	425b      	negs	r3, r3
 8009666:	b29a      	uxth	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800966e:	b29b      	uxth	r3, r3
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	b29b      	uxth	r3, r3
 8009674:	b21a      	sxth	r2, r3
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

}
 800967c:	bf00      	nop
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40012000 	.word	0x40012000
 8009688:	40012100 	.word	0x40012100

0800968c <ICS_HFCurrentsCalibration>:
*         only during current calibration
* @param pHdl ICS F4xx PWM Current Feedback Handle
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	60bb      	str	r3, [r7, #8]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );
 80096a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f7ff fce9 	bl	800907e <LL_TIM_CC_DisableChannel>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80096b2:	2b0f      	cmp	r3, #15
 80096b4:	d815      	bhi.n	80096e2 <ICS_HFCurrentsCalibration+0x56>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 80096b6:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <ICS_HFCurrentsCalibration+0x6c>)
 80096b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096be:	441a      	add	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 80096c4:	4b0d      	ldr	r3, [pc, #52]	; (80096fc <ICS_HFCurrentsCalibration+0x70>)
 80096c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096cc:	441a      	add	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80096d8:	3301      	adds	r3, #1
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2200      	movs	r2, #0
 80096e6:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = 0;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	805a      	strh	r2, [r3, #2]
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	40012000 	.word	0x40012000
 80096fc:	40012100 	.word	0x40012100

08009700 <ICS_TurnOnLowSides>:
  *         used for charging boot capacitors of driving section. It has to be
  *         called each motor start-up when using high voltage drivers
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
 800971c:	2100      	movs	r1, #0
 800971e:	68b8      	ldr	r0, [r7, #8]
 8009720:	f7ff fd58 	bl	80091d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
 8009724:	2100      	movs	r1, #0
 8009726:	68b8      	ldr	r0, [r7, #8]
 8009728:	f7ff fd62 	bl	80091f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );
 800972c:	2100      	movs	r1, #0
 800972e:	68b8      	ldr	r0, [r7, #8]
 8009730:	f7ff fd6c 	bl	800920c <LL_TIM_OC_SetCompareCH3>

  LL_TIM_ClearFlag_UPDATE( TIMx );
 8009734:	68b8      	ldr	r0, [r7, #8]
 8009736:	f7ff fda5 	bl	8009284 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 800973a:	bf00      	nop
 800973c:	68b8      	ldr	r0, [r7, #8]
 800973e:	f7ff fdaf 	bl	80092a0 <LL_TIM_IsActiveFlag_UPDATE>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0f9      	beq.n	800973c <ICS_TurnOnLowSides+0x3c>

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 8009748:	68b8      	ldr	r0, [r7, #8]
 800974a:	f7ff fd7b 	bl	8009244 <LL_TIM_EnableAllOutputs>
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	7c1b      	ldrb	r3, [r3, #16]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d11d      	bne.n	8009794 <ICS_TurnOnLowSides+0x94>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975c:	695a      	ldr	r2, [r3, #20]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7ff fdfb 	bl	8009362 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009770:	69da      	ldr	r2, [r3, #28]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f7ff fdf1 	bl	8009362 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7ff fde7 	bl	8009362 <LL_GPIO_SetOutputPin>
  }
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <ICS_SwitchOnPWM>:
/**
* @brief Enables PWM generation on the proper Timer peripheral acting on MOE bit
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	68b8      	ldr	r0, [r7, #8]
 80097c6:	f7ff fd05 	bl	80091d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097d0:	085b      	lsrs	r3, r3, #1
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4619      	mov	r1, r3
 80097d6:	68b8      	ldr	r0, [r7, #8]
 80097d8:	f7ff fd0a 	bl	80091f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	68b8      	ldr	r0, [r7, #8]
 80097ea:	f7ff fd0f 	bl	800920c <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097f4:	3b05      	subs	r3, #5
 80097f6:	4619      	mov	r1, r3
 80097f8:	68b8      	ldr	r0, [r7, #8]
 80097fa:	f7ff fd15 	bl	8009228 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 80097fe:	68b8      	ldr	r0, [r7, #8]
 8009800:	f7ff fd40 	bl	8009284 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8009804:	bf00      	nop
 8009806:	68b8      	ldr	r0, [r7, #8]
 8009808:	f7ff fd4a 	bl	80092a0 <LL_TIM_IsActiveFlag_UPDATE>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0f9      	beq.n	8009806 <ICS_SwitchOnPWM+0x6a>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f7ff fd36 	bl	8009284 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 8009818:	68b8      	ldr	r0, [r7, #8]
 800981a:	f7ff fd13 	bl	8009244 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009822:	7c1b      	ldrb	r3, [r3, #16]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d144      	bne.n	80098b2 <ICS_SwitchOnPWM+0x116>
  {
    if ( LL_TIM_CC_IsEnabledChannel(TIMx, TIMxCCER_MASK_CH123) != 0u )
 8009828:	f240 5155 	movw	r1, #1365	; 0x555
 800982c:	68b8      	ldr	r0, [r7, #8]
 800982e:	f7ff fc38 	bl	80090a2 <LL_TIM_CC_IsEnabledChannel>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01e      	beq.n	8009876 <ICS_SwitchOnPWM+0xda>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983c:	695a      	ldr	r2, [r3, #20]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7ff fd8b 	bl	8009362 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009850:	69da      	ldr	r2, [r3, #28]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7ff fd81 	bl	8009362 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7ff fd77 	bl	8009362 <LL_GPIO_SetOutputPin>
 8009874:	e01d      	b.n	80098b2 <ICS_SwitchOnPWM+0x116>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	695a      	ldr	r2, [r3, #20]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7ff fd7a 	bl	800937e <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	69da      	ldr	r2, [r3, #28]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7ff fd70 	bl	800937e <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7ff fd66 	bl	800937e <LL_GPIO_ResetOutputPin>
    }
  }

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 80098b2:	68b8      	ldr	r0, [r7, #8]
 80098b4:	f7ff fce6 	bl	8009284 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 80098b8:	68b8      	ldr	r0, [r7, #8]
 80098ba:	f7ff fd12 	bl	80092e2 <LL_TIM_EnableIT_UPDATE>

}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <ICS_SwitchOffPWM>:
* @brief  Disables PWM generation on the proper Timer peripheral acting on
*         MOE bit
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 80098da:	68b8      	ldr	r0, [r7, #8]
 80098dc:	f7ff fd11 	bl	8009302 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
 80098e8:	68b8      	ldr	r0, [r7, #8]
 80098ea:	f7ff fcbb 	bl	8009264 <LL_TIM_DisableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	7c1b      	ldrb	r3, [r3, #16]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d11d      	bne.n	8009934 <ICS_SwitchOffPWM+0x6e>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fc:	695a      	ldr	r2, [r3, #20]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7ff fd39 	bl	800937e <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009910:	69da      	ldr	r2, [r3, #28]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7ff fd2f 	bl	800937e <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f7ff fd25 	bl	800937e <LL_GPIO_ResetOutputPin>
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 8009934:	68b8      	ldr	r0, [r7, #8]
 8009936:	f7ff fca5 	bl	8009284 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800993a:	bf00      	nop
 800993c:	68b8      	ldr	r0, [r7, #8]
 800993e:	f7ff fcaf 	bl	80092a0 <LL_TIM_IsActiveFlag_UPDATE>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0f9      	beq.n	800993c <ICS_SwitchOffPWM+0x76>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 8009948:	68b8      	ldr	r0, [r7, #8]
 800994a:	f7ff fc9b 	bl	8009284 <LL_TIM_ClearFlag_UPDATE>

  return;
 800994e:	bf00      	nop
}
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <ICS_WriteTIMRegisters>:
*         motor
* @param pHandle ICS F4xx PWM Current Feedback Handle
* @retval none
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b086      	sub	sp, #24
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	60fb      	str	r3, [r7, #12]

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800996e:	4619      	mov	r1, r3
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f7ff fc2f 	bl	80091d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800997a:	4619      	mov	r1, r3
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff fc37 	bl	80091f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009986:	4619      	mov	r1, r3
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7ff fc3f 	bl	800920c <LL_TIM_OC_SetCompareCH3>

  /* Limit for update event */
  /* Check the status of SOFOC flag. If it is set, an update event has occurred
  and thus the FOC rate is too high */
  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4))
 800998e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff fb85 	bl	80090a2 <LL_TIM_CC_IsEnabledChannel>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <ICS_WriteTIMRegisters+0x4e>
  {
    aux = MC_FOC_DURATION;
 800999e:	2301      	movs	r3, #1
 80099a0:	82fb      	strh	r3, [r7, #22]
 80099a2:	e001      	b.n	80099a8 <ICS_WriteTIMRegisters+0x52>
  }
  else
  {
    aux = MC_NO_ERROR;
 80099a4:	2300      	movs	r3, #0
 80099a6:	82fb      	strh	r3, [r7, #22]
  }
  return aux;
 80099a8:	8afb      	ldrh	r3, [r7, #22]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <ICS_TIMx_UP_IRQHandler>:
* @brief Contains the TIMx Update event interrupt
* @param pHandle ICS F4xx PWM Current Feedback Handle
* @retval none
*/
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	60fb      	str	r3, [r7, #12]

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 80099c4:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <ICS_TIMx_UP_IRQHandler+0xb0>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 030c 	and.w	r3, r3, #12
 80099cc:	60bb      	str	r3, [r7, #8]

  if ( adcinjflags == CONV_STARTED )
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d108      	bne.n	80099e6 <ICS_TIMx_UP_IRQHandler+0x32>
  {
    do
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80099d4:	4b23      	ldr	r3, [pc, #140]	; (8009a64 <ICS_TIMx_UP_IRQHandler+0xb0>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 030c 	and.w	r3, r3, #12
 80099dc:	60bb      	str	r3, [r7, #8]
    }
    while ( adcinjflags != CONV_FINISHED );
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	d1f7      	bne.n	80099d4 <ICS_TIMx_UP_IRQHandler+0x20>
 80099e4:	e01a      	b.n	8009a1c <ICS_TIMx_UP_IRQHandler+0x68>
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d117      	bne.n	8009a1c <ICS_TIMx_UP_IRQHandler+0x68>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 80099ec:	bf00      	nop
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80099f6:	8852      	ldrh	r2, [r2, #2]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d3f8      	bcc.n	80099ee <ICS_TIMx_UP_IRQHandler+0x3a>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80099fc:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <ICS_TIMx_UP_IRQHandler+0xb0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 030c 	and.w	r3, r3, #12
 8009a04:	60bb      	str	r3, [r7, #8]

    if ( adcinjflags == CONV_STARTED )
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b08      	cmp	r3, #8
 8009a0a:	d107      	bne.n	8009a1c <ICS_TIMx_UP_IRQHandler+0x68>
    {
      do
      {
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8009a0c:	4b15      	ldr	r3, [pc, #84]	; (8009a64 <ICS_TIMx_UP_IRQHandler+0xb0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 030c 	and.w	r3, r3, #12
 8009a14:	60bb      	str	r3, [r7, #8]
      }
      while ( adcinjflags != CONV_FINISHED );
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2b0c      	cmp	r3, #12
 8009a1a:	d1f7      	bne.n	8009a0c <ICS_TIMx_UP_IRQHandler+0x58>
  }
  else {}

  /* Switch Context */
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a20:	4619      	mov	r1, r3
 8009a22:	4810      	ldr	r0, [pc, #64]	; (8009a64 <ICS_TIMx_UP_IRQHandler+0xb0>)
 8009a24:	f7ff faab 	bl	8008f7e <LL_ADC_INJ_SetTriggerSource>
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	480e      	ldr	r0, [pc, #56]	; (8009a68 <ICS_TIMx_UP_IRQHandler+0xb4>)
 8009a30:	f7ff faa5 	bl	8008f7e <LL_ADC_INJ_SetTriggerSource>

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a38:	799b      	ldrb	r3, [r3, #6]
 8009a3a:	4a0a      	ldr	r2, [pc, #40]	; (8009a64 <ICS_TIMx_UP_IRQHandler+0xb0>)
 8009a3c:	03db      	lsls	r3, r3, #15
 8009a3e:	6393      	str	r3, [r2, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a44:	79db      	ldrb	r3, [r3, #7]
 8009a46:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <ICS_TIMx_UP_IRQHandler+0xb4>)
 8009a48:	03db      	lsls	r3, r3, #15
 8009a4a:	6393      	str	r3, [r2, #56]	; 0x38

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );
 8009a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7ff fb03 	bl	800905c <LL_TIM_CC_EnableChannel>

  return &( pHandle->_Super.Motor );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3346      	adds	r3, #70	; 0x46
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40012000 	.word	0x40012000
 8009a68:	40012100 	.word	0x40012100

08009a6c <ICS_BRK_IRQHandler>:
 * @brief  It contains the Break event interrupt
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a78:	7c1b      	ldrb	r3, [r3, #16]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d11d      	bne.n	8009aba <ICS_BRK_IRQHandler+0x4e>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a82:	695a      	ldr	r2, [r3, #20]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7ff fc76 	bl	800937e <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f7ff fc6c 	bl	800937e <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	f7ff fc62 	bl	800937e <LL_GPIO_ResetOutputPin>
  }
  pHandle->OverCurrentFlag = true;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3346      	adds	r3, #70	; 0x46
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <ICS_IsOverCurrentOccurred>:
* @param pHandle ICS F4xx PWM Current Feedback Handle
* @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
*                  detected since last method call, MC_NO_FAULTS otherwise.
*/
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	60bb      	str	r3, [r7, #8]
  uint16_t retval = MC_NO_FAULTS;
 8009ada:	2300      	movs	r3, #0
 8009adc:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverCurrentFlag == true )
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <ICS_IsOverCurrentOccurred+0x26>
  {
    retval = MC_BREAK_IN;
 8009ae8:	2340      	movs	r3, #64	; 0x40
 8009aea:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  }
  return retval;
 8009af4:	89fb      	ldrh	r3, [r7, #14]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8009b02:	b480      	push	{r7}
 8009b04:	b085      	sub	sp, #20
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	81fb      	strh	r3, [r7, #14]
 8009b0e:	e007      	b.n	8009b20 <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 8009b10:	89fa      	ldrh	r2, [r7, #14]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2100      	movs	r1, #0
 8009b16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009b1a:	89fb      	ldrh	r3, [r7, #14]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	81fb      	strh	r3, [r7, #14]
 8009b20:	89fb      	ldrh	r3, [r7, #14]
 8009b22:	2b7f      	cmp	r3, #127	; 0x7f
 8009b24:	d9f4      	bls.n	8009b10 <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 8009b36:	bf00      	nop
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 8009b42:	b480      	push	{r7}
 8009b44:	b085      	sub	sp, #20
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009b58:	4619      	mov	r1, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	887a      	ldrh	r2, [r7, #2]
 8009b5e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009b74:	3301      	adds	r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009b84:	2b7f      	cmp	r3, #127	; 0x7f
 8009b86:	d903      	bls.n	8009b90 <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009b90:	2300      	movs	r3, #0
 8009b92:	81fb      	strh	r3, [r7, #14]
 8009b94:	e00a      	b.n	8009bac <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009b96:	89fa      	ldrh	r2, [r7, #14]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009ba6:	89fb      	ldrh	r3, [r7, #14]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	81fb      	strh	r3, [r7, #14]
 8009bac:	89fb      	ldrh	r3, [r7, #14]
 8009bae:	2b7f      	cmp	r3, #127	; 0x7f
 8009bb0:	d9f1      	bls.n	8009b96 <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	da00      	bge.n	8009bba <MPM_CalcElMotorPower+0x78>
 8009bb8:	337f      	adds	r3, #127	; 0x7f
 8009bba:	11db      	asrs	r3, r3, #7
 8009bbc:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	b21a      	sxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 8009bc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8a1a      	ldrh	r2, [r3, #16]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	8b5b      	ldrh	r3, [r3, #26]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d902      	bls.n	8009c0c <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 8009c06:	2308      	movs	r3, #8
 8009c08:	81fb      	strh	r3, [r7, #14]
 8009c0a:	e00b      	b.n	8009c24 <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8a1a      	ldrh	r2, [r3, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8b9b      	ldrh	r3, [r3, #28]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d202      	bcs.n	8009c1e <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	81fb      	strh	r3, [r7, #14]
 8009c1c:	e002      	b.n	8009c24 <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8adb      	ldrh	r3, [r3, #22]
 8009c22:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 8009c24:	89fb      	ldrh	r3, [r7, #14]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10d      	bne.n	8009c5e <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7f9 f9d0 	bl	8002fec <RCM_RegisterRegConv>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f80c 	bl	8009c74 <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 8009c5c:	e006      	b.n	8009c6c <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	8a5a      	ldrh	r2, [r3, #18]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	821a      	strh	r2, [r3, #16]
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	821a      	strh	r2, [r3, #16]
}
 8009c82:	bf00      	nop
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d12e      	bne.n	8009cfc <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7f9 fa39 	bl	800311c <RCM_ExecRegularConv>
 8009caa:	4603      	mov	r3, r0
 8009cac:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 8009cae:	89fb      	ldrh	r3, [r7, #14]
 8009cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d019      	beq.n	8009cec <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8b1b      	ldrh	r3, [r3, #24]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8a1b      	ldrh	r3, [r3, #16]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 8009cce:	89fb      	ldrh	r3, [r7, #14]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8b1b      	ldrh	r3, [r3, #24]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff ff80 	bl	8009bf2 <NTC_SetFaultState>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	82da      	strh	r2, [r3, #22]
 8009cfa:	e002      	b.n	8009d02 <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8adb      	ldrh	r3, [r3, #22]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d11d      	bne.n	8009d5a <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8a1b      	ldrh	r3, [r3, #16]
 8009d22:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009d36:	461a      	mov	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
 8009d3e:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da02      	bge.n	8009d4c <NTC_GetAvTemp_C+0x3e>
 8009d46:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8009d4a:	33ff      	adds	r3, #255	; 0xff
 8009d4c:	141b      	asrs	r3, r3, #16
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d54:	4413      	add	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	e002      	b.n	8009d60 <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	8a9b      	ldrh	r3, [r3, #20]
 8009d5e:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	b21b      	sxth	r3, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	887a      	ldrh	r2, [r7, #2]
 8009dbe:	809a      	strh	r2, [r3, #4]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	887a      	ldrh	r2, [r7, #2]
 8009ddc:	80da      	strh	r2, [r3, #6]
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	609a      	str	r2, [r3, #8]

  return;
 8009e2e:	bf00      	nop
}
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	8b1b      	ldrh	r3, [r3, #24]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8b5b      	ldrh	r3, [r3, #26]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	887a      	ldrh	r2, [r7, #2]
 8009e7a:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b089      	sub	sp, #36	; 0x24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8a9b      	ldrh	r3, [r3, #20]
 8009eb6:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8adb      	ldrh	r3, [r3, #22]
 8009ebc:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	fb02 f303 	mul.w	r3, r2, r3
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
 8009ede:	e03a      	b.n	8009f56 <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
 8009eee:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	da0a      	bge.n	8009f16 <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dd0f      	ble.n	8009f28 <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dd0c      	ble.n	8009f28 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 8009f0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009f12:	61bb      	str	r3, [r7, #24]
 8009f14:	e008      	b.n	8009f28 <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da04      	bge.n	8009f28 <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	da01      	bge.n	8009f28 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 8009f24:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <PI_Controller+0x120>)
 8009f26:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	dd04      	ble.n	8009f3c <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68da      	ldr	r2, [r3, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	609a      	str	r2, [r3, #8]
 8009f3a:	e00c      	b.n	8009f56 <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	da04      	bge.n	8009f50 <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	e002      	b.n	8009f56 <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8b9b      	ldrh	r3, [r3, #28]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	fa43 f202 	asr.w	r2, r3, r2
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	8bc9      	ldrh	r1, [r1, #30]
 8009f6a:	410b      	asrs	r3, r1
 8009f6c:	4413      	add	r3, r2
 8009f6e:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8009f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	dd08      	ble.n	8009f8c <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8009f7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 8009f84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f88:	61fb      	str	r3, [r7, #28]
 8009f8a:	e00c      	b.n	8009fa6 <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8009f8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	da07      	bge.n	8009fa6 <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8009f96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 8009fa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009fa4:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	441a      	add	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	b21b      	sxth	r3, r3
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3724      	adds	r7, #36	; 0x24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	80000001 	.word	0x80000001

08009fc8 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b089      	sub	sp, #36	; 0x24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009fd6:	f107 0310 	add.w	r3, r7, #16
 8009fda:	320c      	adds	r2, #12
 8009fdc:	6810      	ldr	r0, [r2, #0]
 8009fde:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009fe6:	f107 030c 	add.w	r3, r7, #12
 8009fea:	3216      	adds	r2, #22
 8009fec:	6810      	ldr	r0, [r2, #0]
 8009fee:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009ff0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009ff4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009ff8:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8009ffc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a000:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800a004:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800a008:	4413      	add	r3, r2
 800a00a:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	da02      	bge.n	800a018 <PQD_CalcElMotorPower+0x50>
 800a012:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a016:	33ff      	adds	r3, #255	; 0xff
 800a018:	141b      	asrs	r3, r3, #16
 800a01a:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd ff51 	bl	8007ed0 <VBS_GetAvBusVoltage_V>
 800a02e:	4603      	mov	r3, r0
 800a030:	fb03 f304 	mul.w	r3, r3, r4
 800a034:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	4a16      	ldr	r2, [pc, #88]	; (800a094 <PQD_CalcElMotorPower+0xcc>)
 800a03a:	fb82 1203 	smull	r1, r2, r2, r3
 800a03e:	1192      	asrs	r2, r2, #6
 800a040:	17db      	asrs	r3, r3, #31
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4613      	mov	r3, r2
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4413      	add	r3, r2
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	4a0e      	ldr	r2, [pc, #56]	; (800a098 <PQD_CalcElMotorPower+0xd0>)
 800a060:	fb82 1203 	smull	r1, r2, r2, r3
 800a064:	1092      	asrs	r2, r2, #2
 800a066:	17db      	asrs	r3, r3, #31
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da02      	bge.n	800a078 <PQD_CalcElMotorPower+0xb0>
 800a072:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a076:	33ff      	adds	r3, #255	; 0xff
 800a078:	141b      	asrs	r3, r3, #16
 800a07a:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	b212      	sxth	r2, r2
 800a082:	4611      	mov	r1, r2
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff fd5c 	bl	8009b42 <MPM_CalcElMotorPower>

}
 800a08a:	bf00      	nop
 800a08c:	3724      	adds	r7, #36	; 0x24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}
 800a092:	bf00      	nop
 800a094:	1b4e81b5 	.word	0x1b4e81b5
 800a098:	66666667 	.word	0x66666667

0800a09c <LL_TIM_GetCounterMode>:
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <LL_TIM_SetTriggerOutput>:
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	605a      	str	r2, [r3, #4]
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <LL_TIM_ClearFlag_CC1>:
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f06f 0202 	mvn.w	r2, #2
 800a0ec:	611a      	str	r2, [r3, #16]
}
 800a0ee:	bf00      	nop
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <LL_TIM_IsActiveFlag_CC1>:
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d101      	bne.n	800a112 <LL_TIM_IsActiveFlag_CC1+0x18>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <LL_TIM_GenerateEvent_UPDATE>:
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	f043 0201 	orr.w	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	615a      	str	r2, [r3, #20]
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800a148:	4b08      	ldr	r3, [pc, #32]	; (800a16c <LL_APB1_GRP1_EnableClock+0x2c>)
 800a14a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a14c:	4907      	ldr	r1, [pc, #28]	; (800a16c <LL_APB1_GRP1_EnableClock+0x2c>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4313      	orrs	r3, r2
 800a152:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <LL_APB1_GRP1_EnableClock+0x2c>)
 800a156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4013      	ands	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a15e:	68fb      	ldr	r3, [r7, #12]
}
 800a160:	bf00      	nop
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	40023800 	.word	0x40023800

0800a170 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800a17a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4013      	ands	r3, r2
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	429a      	cmp	r2, r3
 800a184:	bf0c      	ite	eq
 800a186:	2301      	moveq	r3, #1
 800a188:	2300      	movne	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	40023800 	.word	0x40023800

0800a19c <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800a1a4:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <LL_APB1_GRP1_DisableClock+0x24>)
 800a1a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	43db      	mvns	r3, r3
 800a1ac:	4904      	ldr	r1, [pc, #16]	; (800a1c0 <LL_APB1_GRP1_DisableClock+0x24>)
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a1b2:	bf00      	nop
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	40023800 	.word	0x40023800

0800a1c4 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	f7ff ffd0 	bl	800a170 <LL_APB1_GRP1_IsEnabledClock>
 800a1d0:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800a1d8:	2001      	movs	r0, #1
 800a1da:	f7ff ffb1 	bl	800a140 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800a1de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a1e2:	f7ff ff9d 	bl	800a120 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	f7ff ffd8 	bl	800a19c <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800a1ec:	e013      	b.n	800a216 <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800a1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f8:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 800a1fa:	2120      	movs	r1, #32
 800a1fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a200:	f7ff ff5a 	bl	800a0b8 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800a204:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a208:	f7ff ff8a 	bl	800a120 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a212:	f7ff ff51 	bl	800a0b8 <LL_TIM_SetTriggerOutput>
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	603b      	str	r3, [r7, #0]
 800a22a:	4613      	mov	r3, r2
 800a22c:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff ff34 	bl	800a09c <LL_TIM_GetCounterMode>
 800a234:	4603      	mov	r3, r0
 800a236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a23a:	2b60      	cmp	r3, #96	; 0x60
 800a23c:	d105      	bne.n	800a24a <waitForPolarizationEnd+0x2c>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	3301      	adds	r3, #1
 800a242:	b29b      	uxth	r3, r3
 800a244:	015b      	lsls	r3, r3, #5
 800a246:	82bb      	strh	r3, [r7, #20]
 800a248:	e005      	b.n	800a256 <waitForPolarizationEnd+0x38>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	3301      	adds	r3, #1
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	b29b      	uxth	r3, r3
 800a252:	015b      	lsls	r3, r3, #5
 800a254:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff ff41 	bl	800a0de <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 800a25c:	2300      	movs	r3, #0
 800a25e:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 800a260:	e017      	b.n	800a292 <waitForPolarizationEnd+0x74>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff ff49 	bl	800a0fa <LL_TIM_IsActiveFlag_CC1>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d011      	beq.n	800a292 <waitForPolarizationEnd+0x74>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7ff ff35 	bl	800a0de <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 800a274:	8afb      	ldrh	r3, [r7, #22]
 800a276:	3301      	adds	r3, #1
 800a278:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800a27a:	8afa      	ldrh	r2, [r7, #22]
 800a27c:	8abb      	ldrh	r3, [r7, #20]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d307      	bcc.n	800a292 <waitForPolarizationEnd+0x74>
      {
        if (*cnt < NB_CONVERSIONS)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b0f      	cmp	r3, #15
 800a288:	d803      	bhi.n	800a292 <waitForPolarizationEnd+0x74>
        {
          *SWerror = 1u;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2201      	movs	r2, #1
 800a28e:	801a      	strh	r2, [r3, #0]
          break;
 800a290:	e003      	b.n	800a29a <waitForPolarizationEnd+0x7c>
  while (*cnt < NB_CONVERSIONS)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d9e3      	bls.n	800a262 <waitForPolarizationEnd+0x44>
        }
      }
    }
  }
}
 800a29a:	bf00      	nop
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08a      	sub	sp, #40	; 0x28
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a2c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a2d2:	fb03 f302 	mul.w	r3, r3, r2
 800a2d6:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a2d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e4:	fb03 f202 	mul.w	r2, r3, r2
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	07db      	lsls	r3, r3, #31
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	0fda      	lsrs	r2, r3, #31
 800a2fe:	4413      	add	r3, r2
 800a300:	105b      	asrs	r3, r3, #1
 800a302:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	0fda      	lsrs	r2, r3, #31
 800a30c:	4413      	add	r3, r2
 800a30e:	105b      	asrs	r3, r3, #1
 800a310:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f280 80bd 	bge.w	800a494 <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	da3c      	bge.n	800a39a <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2204      	movs	r2, #4
 800a324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a32e:	089b      	lsrs	r3, r3, #2
 800a330:	b29b      	uxth	r3, r3
 800a332:	4619      	mov	r1, r3
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	da03      	bge.n	800a346 <PWMC_SetPhaseVoltage+0x88>
 800a33e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a342:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a346:	149b      	asrs	r3, r3, #18
 800a348:	440b      	add	r3, r1
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	da03      	bge.n	800a35a <PWMC_SetPhaseVoltage+0x9c>
 800a352:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a356:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a35a:	145b      	asrs	r3, r3, #17
 800a35c:	461a      	mov	r2, r3
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	4413      	add	r3, r2
 800a362:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	da03      	bge.n	800a372 <PWMC_SetPhaseVoltage+0xb4>
 800a36a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a36e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a372:	145b      	asrs	r3, r3, #17
 800a374:	425b      	negs	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	4413      	add	r3, r2
 800a37c:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	b29a      	uxth	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	b29a      	uxth	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	b29a      	uxth	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a398:	e138      	b.n	800a60c <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dc3c      	bgt.n	800a41a <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ae:	089b      	lsrs	r3, r3, #2
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da03      	bge.n	800a3c6 <PWMC_SetPhaseVoltage+0x108>
 800a3be:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a3c2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a3c6:	149b      	asrs	r3, r3, #18
 800a3c8:	440b      	add	r3, r1
 800a3ca:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da03      	bge.n	800a3da <PWMC_SetPhaseVoltage+0x11c>
 800a3d2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a3d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a3da:	145b      	asrs	r3, r3, #17
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	4413      	add	r3, r2
 800a3e2:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da03      	bge.n	800a3f2 <PWMC_SetPhaseVoltage+0x134>
 800a3ea:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a3ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a3f2:	145b      	asrs	r3, r3, #17
 800a3f4:	425b      	negs	r3, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	b29a      	uxth	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a418:	e0f8      	b.n	800a60c <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2202      	movs	r2, #2
 800a41e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a428:	089b      	lsrs	r3, r3, #2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	4619      	mov	r1, r3
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	da03      	bge.n	800a440 <PWMC_SetPhaseVoltage+0x182>
 800a438:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a43c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a440:	149b      	asrs	r3, r3, #18
 800a442:	440b      	add	r3, r1
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da03      	bge.n	800a454 <PWMC_SetPhaseVoltage+0x196>
 800a44c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a450:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a454:	145b      	asrs	r3, r3, #17
 800a456:	425b      	negs	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	4413      	add	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	da03      	bge.n	800a46e <PWMC_SetPhaseVoltage+0x1b0>
 800a466:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a46a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a46e:	145b      	asrs	r3, r3, #17
 800a470:	461a      	mov	r2, r3
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	4413      	add	r3, r2
 800a476:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a492:	e0bb      	b.n	800a60c <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	db3c      	blt.n	800a514 <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a8:	089b      	lsrs	r3, r3, #2
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	da03      	bge.n	800a4c0 <PWMC_SetPhaseVoltage+0x202>
 800a4b8:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a4bc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a4c0:	149b      	asrs	r3, r3, #18
 800a4c2:	440b      	add	r3, r1
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	da03      	bge.n	800a4d4 <PWMC_SetPhaseVoltage+0x216>
 800a4cc:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a4d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4d4:	145b      	asrs	r3, r3, #17
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	4413      	add	r3, r2
 800a4dc:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	da03      	bge.n	800a4ec <PWMC_SetPhaseVoltage+0x22e>
 800a4e4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a4e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4ec:	145b      	asrs	r3, r3, #17
 800a4ee:	425b      	negs	r3, r3
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	b29a      	uxth	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a512:	e07b      	b.n	800a60c <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dc3c      	bgt.n	800a594 <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2205      	movs	r2, #5
 800a51e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a528:	089b      	lsrs	r3, r3, #2
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4619      	mov	r1, r3
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	da03      	bge.n	800a540 <PWMC_SetPhaseVoltage+0x282>
 800a538:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a53c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a540:	149b      	asrs	r3, r3, #18
 800a542:	440b      	add	r3, r1
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da03      	bge.n	800a554 <PWMC_SetPhaseVoltage+0x296>
 800a54c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a550:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a554:	145b      	asrs	r3, r3, #17
 800a556:	425b      	negs	r3, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	4413      	add	r3, r2
 800a55e:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	da03      	bge.n	800a56e <PWMC_SetPhaseVoltage+0x2b0>
 800a566:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a56a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a56e:	145b      	asrs	r3, r3, #17
 800a570:	461a      	mov	r2, r3
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	4413      	add	r3, r2
 800a576:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a592:	e03b      	b.n	800a60c <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5a2:	089b      	lsrs	r3, r3, #2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da03      	bge.n	800a5ba <PWMC_SetPhaseVoltage+0x2fc>
 800a5b2:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a5b6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a5ba:	149b      	asrs	r3, r3, #18
 800a5bc:	440b      	add	r3, r1
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da03      	bge.n	800a5ce <PWMC_SetPhaseVoltage+0x310>
 800a5c6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a5ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5ce:	145b      	asrs	r3, r3, #17
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	4413      	add	r3, r2
 800a5d6:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da03      	bge.n	800a5e6 <PWMC_SetPhaseVoltage+0x328>
 800a5de:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a5e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5e6:	145b      	asrs	r3, r3, #17
 800a5e8:	425b      	negs	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	b29a      	uxth	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	b29a      	uxth	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d147      	bne.n	800a6be <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a634:	2b00      	cmp	r3, #0
 800a636:	dd09      	ble.n	800a64c <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a642:	4413      	add	r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	865a      	strh	r2, [r3, #50]	; 0x32
 800a64a:	e008      	b.n	800a65e <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd09      	ble.n	800a67c <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a672:	4413      	add	r3, r2
 800a674:	b29a      	uxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	869a      	strh	r2, [r3, #52]	; 0x34
 800a67a:	e008      	b.n	800a68e <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800a694:	2b00      	cmp	r3, #0
 800a696:	dd09      	ble.n	800a6ac <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a6a2:	4413      	add	r3, r2
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	86da      	strh	r2, [r3, #54]	; 0x36
 800a6aa:	e008      	b.n	800a6be <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	4798      	blx	r3
 800a6c6:	4603      	mov	r3, r0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3728      	adds	r7, #40	; 0x28
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
}
 800a6e0:	bf00      	nop
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d114      	bne.n	800a728 <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff ffe6 	bl	800a6d0 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a716:	2b00      	cmp	r3, #0
 800a718:	d124      	bne.n	800a764 <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	4798      	blx	r3
      retVal = true;
 800a722:	2301      	movs	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]
 800a726:	e01d      	b.n	800a764 <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d11a      	bne.n	800a764 <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a734:	2b00      	cmp	r3, #0
 800a736:	d013      	beq.n	800a760 <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a73e:	3b01      	subs	r3, #1
 800a740:	b29a      	uxth	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d108      	bne.n	800a764 <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
        retVal = true;
 800a75a:	2301      	movs	r3, #1
 800a75c:	73fb      	strb	r3, [r7, #15]
 800a75e:	e001      	b.n	800a764 <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 800a760:	2301      	movs	r3, #1
 800a762:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 800a764:	7bfb      	ldrb	r3, [r7, #15]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
 800a77e:	4603      	mov	r3, r0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	330c      	adds	r3, #12
 800a794:	4618      	mov	r0, r3
 800a796:	f7f8 fc29 	bl	8002fec <RCM_RegisterRegConv>
 800a79a:	4603      	mov	r3, r0
 800a79c:	461a      	mov	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f804 	bl	800a7b2 <RVBS_Clear>
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8b5b      	ldrh	r3, [r3, #26]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8b9b      	ldrh	r3, [r3, #28]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	81fb      	strh	r3, [r7, #14]
 800a7ce:	e009      	b.n	800a7e4 <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a1a      	ldr	r2, [r3, #32]
 800a7d4:	89fb      	ldrh	r3, [r7, #14]
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	4413      	add	r3, r2
 800a7da:	89ba      	ldrh	r2, [r7, #12]
 800a7dc:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a7de:	89fb      	ldrh	r3, [r7, #14]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	81fb      	strh	r3, [r7, #14]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	8b1b      	ldrh	r3, [r3, #24]
 800a7e8:	89fa      	ldrh	r2, [r7, #14]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d3f0      	bcc.n	800a7d0 <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	89ba      	ldrh	r2, [r7, #12]
 800a7f2:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	89ba      	ldrh	r2, [r7, #12]
 800a7f8:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800a802:	bf00      	nop
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <RVBS_CalcAvVbus>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbus( RDivider_Handle_t * pHandle )
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f8 fc7d 	bl	800311c <RCM_ExecRegularConv>
 800a822:	4603      	mov	r3, r0
 800a824:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800a826:	893b      	ldrh	r3, [r7, #8]
 800a828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d044      	beq.n	800a8ba <RVBS_CalcAvVbus+0xac>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a1a      	ldr	r2, [r3, #32]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4413      	add	r3, r2
 800a83e:	893a      	ldrh	r2, [r7, #8]
 800a840:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800a842:	2300      	movs	r3, #0
 800a844:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a846:	2300      	movs	r3, #0
 800a848:	72fb      	strb	r3, [r7, #11]
 800a84a:	e00c      	b.n	800a866 <RVBS_CalcAvVbus+0x58>
    {
      wtemp += pHandle->aBuffer[i];
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1a      	ldr	r2, [r3, #32]
 800a850:	7afb      	ldrb	r3, [r7, #11]
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	3301      	adds	r3, #1
 800a864:	72fb      	strb	r3, [r7, #11]
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	b29a      	uxth	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8b1b      	ldrh	r3, [r3, #24]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d3ec      	bcc.n	800a84c <RVBS_CalcAvVbus+0x3e>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8b1b      	ldrh	r3, [r3, #24]
 800a876:	461a      	mov	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	b29a      	uxth	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	893a      	ldrh	r2, [r7, #8]
 800a88c:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a894:	461a      	mov	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8b1b      	ldrh	r3, [r3, #24]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	429a      	cmp	r2, r3
 800a89e:	da08      	bge.n	800a8b2 <RVBS_CalcAvVbus+0xa4>
    {
      pHandle->index++;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800a8b0:	e003      	b.n	800a8ba <RVBS_CalcAvVbus+0xac>
    }
    else
    {
      pHandle->index = 0;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f80a 	bl	800a8d4 <RVBS_CheckFaultState>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	891b      	ldrh	r3, [r3, #8]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	88da      	ldrh	r2, [r3, #6]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	8b5b      	ldrh	r3, [r3, #26]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d902      	bls.n	800a8ee <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	81fb      	strh	r3, [r7, #14]
 800a8ec:	e00a      	b.n	800a904 <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	88da      	ldrh	r2, [r3, #6]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	8b9b      	ldrh	r3, [r3, #28]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d202      	bcs.n	800a900 <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800a8fa:	2304      	movs	r3, #4
 800a8fc:	81fb      	strh	r3, [r7, #14]
 800a8fe:	e001      	b.n	800a904 <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800a900:	2300      	movs	r3, #0
 800a902:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800a904:	89fb      	ldrh	r3, [r7, #14]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	60fb      	str	r3, [r7, #12]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d90a      	bls.n	800a970 <REMNG_Calc+0x2c>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4413      	add	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60da      	str	r2, [r3, #12]
 800a96e:	e00d      	b.n	800a98c <REMNG_Calc+0x48>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d109      	bne.n	800a98c <REMNG_Calc+0x48>
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6952      	ldr	r2, [r2, #20]
 800a980:	fb02 f303 	mul.w	r3, r2, r3
 800a984:	60fb      	str	r3, [r7, #12]
    pHandle->RampRemainingStep = 0u;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	609a      	str	r2, [r3, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	6952      	ldr	r2, [r2, #20]
 800a99a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a99e:	60bb      	str	r3, [r7, #8]
#endif

  return ret_val;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
	...

0800a9b0 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08c      	sub	sp, #48	; 0x30
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  uint32_t aux;
  int32_t aux1;
  int32_t current_ref;
  bool retVal = true;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Get current state */
#ifdef FASTDIV
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	6952      	ldr	r2, [r2, #20]
 800a9ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24
#endif

  if ( Durationms == 0u )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d114      	bne.n	800aa00 <REMNG_ExecRamp+0x50>
  {
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800a9d6:	68b8      	ldr	r0, [r7, #8]
 800a9d8:	f000 f887 	bl	800aaea <getScalingFactor>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	615a      	str	r2, [r3, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	fb03 f202 	mul.w	r2, r3, r2
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	609a      	str	r2, [r3, #8]
    pHandle->RampRemainingStep = 0u;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	611a      	str	r2, [r3, #16]
 800a9fe:	e059      	b.n	800aab4 <REMNG_ExecRamp+0x104>
  }
  else
  {
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 f86f 	bl	800aaea <getScalingFactor>
 800aa0c:	6238      	str	r0, [r7, #32]
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800aa0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa10:	f000 f86b 	bl	800aaea <getScalingFactor>
 800aa14:	61f8      	str	r0, [r7, #28]
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800aa16:	68b8      	ldr	r0, [r7, #8]
 800aa18:	f000 f867 	bl	800aaea <getScalingFactor>
 800aa1c:	61b8      	str	r0, [r7, #24]
    uint32_t wScalingFactorMin;

    if ( wScalingFactor <  wScalingFactor2 )
 800aa1e:	6a3a      	ldr	r2, [r7, #32]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d209      	bcs.n	800aa3a <REMNG_ExecRamp+0x8a>
    {
      if ( wScalingFactor < wScalingFactor3 )
 800aa26:	6a3a      	ldr	r2, [r7, #32]
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d202      	bcs.n	800aa34 <REMNG_ExecRamp+0x84>
      {
        wScalingFactorMin = wScalingFactor;
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa32:	e00b      	b.n	800aa4c <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa38:	e008      	b.n	800aa4c <REMNG_ExecRamp+0x9c>
      }
    }
    else
    {
      if ( wScalingFactor2 < wScalingFactor3 )
 800aa3a:	69fa      	ldr	r2, [r7, #28]
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d202      	bcs.n	800aa48 <REMNG_ExecRamp+0x98>
      {
        wScalingFactorMin = wScalingFactor2;
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa46:	e001      	b.n	800aa4c <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }

    pHandle->ScalingFactor = wScalingFactorMin;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa50:	615a      	str	r2, [r3, #20]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	461a      	mov	r2, r3
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	fb03 f202 	mul.w	r2, r3, r2
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	609a      	str	r2, [r3, #8]

    /* Store the TargetFinal to be applied in the last step */
    pHandle->TargetFinal = TargetFinal;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	605a      	str	r2, [r3, #4]

    /* Compute the (wRampRemainingStep) number of steps remaining to complete
    the ramp. */
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	fb02 f303 	mul.w	r3, r2, r3
 800aa72:	617b      	str	r3, [r7, #20]
    aux /= 1000u;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	4a12      	ldr	r2, [pc, #72]	; (800aac0 <REMNG_ExecRamp+0x110>)
 800aa78:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7c:	099b      	lsrs	r3, r3, #6
 800aa7e:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = aux;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	60da      	str	r2, [r3, #12]
    pHandle->RampRemainingStep++;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	60da      	str	r2, [r3, #12]

    /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    the reference value at each CalcTorqueReference. */
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	6952      	ldr	r2, [r2, #20]
 800aa9a:	fb02 f303 	mul.w	r3, r2, r3
 800aa9e:	613b      	str	r3, [r7, #16]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaac:	613b      	str	r3, [r7, #16]
    pHandle->IncDecAmount = aux1;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	611a      	str	r2, [r3, #16]
  }

  return retVal;
 800aab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3730      	adds	r7, #48	; 0x30
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	10624dd3 	.word	0x10624dd3

0800aac4 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]
  if ( pHandle->RampRemainingStep == 0u )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <REMNG_RampCompleted+0x18>
  {
    retVal = true;
 800aad8:	2301      	movs	r3, #1
 800aada:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800aaea:	b480      	push	{r7}
 800aaec:	b087      	sub	sp, #28
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	da05      	bge.n	800ab04 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	425b      	negs	r3, r3
 800aafc:	60fb      	str	r3, [r7, #12]
    TargetAbs = ( uint32_t )( aux );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	e001      	b.n	800ab08 <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = ( uint32_t )( Target );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	613b      	str	r3, [r7, #16]
  }
  for ( i = 1u; i < 32u; i++ )
 800ab08:	2301      	movs	r3, #1
 800ab0a:	75fb      	strb	r3, [r7, #23]
 800ab0c:	e00d      	b.n	800ab2a <getScalingFactor+0x40>
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	f1c3 031f 	rsb	r3, r3, #31
 800ab14:	2201      	movs	r2, #1
 800ab16:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1a:	60bb      	str	r3, [r7, #8]
    if ( TargetAbs >= limit )
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d206      	bcs.n	800ab32 <getScalingFactor+0x48>
  for ( i = 1u; i < 32u; i++ )
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	3301      	adds	r3, #1
 800ab28:	75fb      	strb	r3, [r7, #23]
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	2b1f      	cmp	r3, #31
 800ab2e:	d9ee      	bls.n	800ab0e <getScalingFactor+0x24>
 800ab30:	e000      	b.n	800ab34 <getScalingFactor+0x4a>
    {
      break;
 800ab32:	bf00      	nop
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2201      	movs	r2, #1
 800ab3a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800aba2:	2301      	movs	r3, #1
 800aba4:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	78db      	ldrb	r3, [r3, #3]
 800abaa:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800abac:	2300      	movs	r3, #0
 800abae:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da09      	bge.n	800abd4 <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	425b      	negs	r3, r3
 800abca:	b29b      	uxth	r3, r3
 800abcc:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800abce:	89bb      	ldrh	r3, [r7, #12]
 800abd0:	827b      	strh	r3, [r7, #18]
 800abd2:	e003      	b.n	800abdc <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abda:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	8a9b      	ldrh	r3, [r3, #20]
 800abe0:	8a7a      	ldrh	r2, [r7, #18]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d901      	bls.n	800abea <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800abe6:	2301      	movs	r3, #1
 800abe8:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	8adb      	ldrh	r3, [r3, #22]
 800abee:	8a7a      	ldrh	r2, [r7, #18]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d201      	bcs.n	800abf8 <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800abf4:	2301      	movs	r3, #1
 800abf6:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da09      	bge.n	800ac16 <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	425b      	negs	r3, r3
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800ac10:	89bb      	ldrh	r3, [r7, #12]
 800ac12:	823b      	strh	r3, [r7, #16]
 800ac14:	e003      	b.n	800ac1e <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ac1c:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	8b1b      	ldrh	r3, [r3, #24]
 800ac22:	8a3a      	ldrh	r2, [r7, #16]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d901      	bls.n	800ac2c <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800ac2c:	7d7b      	ldrb	r3, [r7, #21]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d007      	beq.n	800ac42 <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800ac32:	7dba      	ldrb	r2, [r7, #22]
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d209      	bcs.n	800ac4e <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800ac3a:	7dbb      	ldrb	r3, [r7, #22]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	75bb      	strb	r3, [r7, #22]
 800ac40:	e005      	b.n	800ac4e <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800ac42:	7dba      	ldrb	r2, [r7, #22]
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d201      	bcs.n	800ac4e <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800ac4e:	7dba      	ldrb	r2, [r7, #22]
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d101      	bne.n	800ac5a <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	7dba      	ldrb	r2, [r7, #22]
 800ac5e:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ac7c:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4613      	mov	r3, r2
 800ac82:	03db      	lsls	r3, r3, #15
 800ac84:	1a9b      	subs	r3, r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	8a9b      	ldrh	r3, [r3, #20]
 800ac8c:	b21b      	sxth	r3, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	b21b      	sxth	r3, r3
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800acd0:	041a      	lsls	r2, r3, #16
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800acdc:	041a      	lsls	r2, r3, #16
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	619a      	str	r2, [r3, #24]
}
 800acf4:	bf00      	nop
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	615a      	str	r2, [r3, #20]
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	695b      	ldr	r3, [r3, #20]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d105      	bne.n	800ad50 <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff f867 	bl	8009e1e <PID_SetIntegralTerm>
  }
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da02      	bge.n	800ad6e <STC_GetMecSpeedRefUnit+0x16>
 800ad68:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ad6c:	33ff      	adds	r3, #255	; 0xff
 800ad6e:	141b      	asrs	r3, r3, #16
 800ad70:	b21b      	sxth	r3, r3
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da02      	bge.n	800ad94 <STC_GetTorqueRef+0x16>
 800ad8e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ad92:	33ff      	adds	r3, #255	; 0xff
 800ad94:	141b      	asrs	r3, r3, #16
 800ad96:	b21b      	sxth	r3, r3
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	78fa      	ldrb	r2, [r7, #3]
 800adb4:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	60da      	str	r2, [r3, #12]
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	460b      	mov	r3, r1
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800add6:	2301      	movs	r3, #1
 800add8:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d116      	bne.n	800ae10 <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff ffcb 	bl	800ad7e <STC_GetTorqueRef>
 800ade8:	4603      	mov	r3, r0
 800adea:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800adec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800adf4:	4293      	cmp	r3, r2
 800adf6:	dd01      	ble.n	800adfc <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800adf8:	2300      	movs	r3, #0
 800adfa:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800ae02:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	da2d      	bge.n	800ae66 <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	77fb      	strb	r3, [r7, #31]
 800ae0e:	e02a      	b.n	800ae66 <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	da02      	bge.n	800ae1e <STC_ExecRamp+0x56>
 800ae18:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ae1c:	33ff      	adds	r3, #255	; 0xff
 800ae1e:	141b      	asrs	r3, r3, #16
 800ae20:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800ae22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	8bd2      	ldrh	r2, [r2, #30]
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	dd02      	ble.n	800ae34 <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	77fb      	strb	r3, [r7, #31]
 800ae32:	e018      	b.n	800ae66 <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ae3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	da02      	bge.n	800ae48 <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800ae42:	2300      	movs	r3, #0
 800ae44:	77fb      	strb	r3, [r7, #31]
 800ae46:	e00e      	b.n	800ae66 <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800ae48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	8c12      	ldrh	r2, [r2, #32]
 800ae50:	4293      	cmp	r3, r2
 800ae52:	da08      	bge.n	800ae66 <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ae5a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	dd01      	ble.n	800ae66 <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800ae62:	2300      	movs	r3, #0
 800ae64:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800ae66:	7ffb      	ldrb	r3, [r7, #31]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d041      	beq.n	800aef0 <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d115      	bne.n	800ae9e <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d105      	bne.n	800ae86 <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800ae7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae7e:	041a      	lsls	r2, r3, #16
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	605a      	str	r2, [r3, #4]
 800ae84:	e004      	b.n	800ae90 <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800ae86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae8a:	041a      	lsls	r2, r3, #16
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	619a      	str	r2, [r3, #24]
 800ae9c:	e028      	b.n	800aef0 <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	897a      	ldrh	r2, [r7, #10]
 800aea2:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	8b9b      	ldrh	r3, [r3, #28]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	fb02 f303 	mul.w	r3, r2, r3
 800aeb0:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	4a11      	ldr	r2, [pc, #68]	; (800aefc <STC_ExecRamp+0x134>)
 800aeb6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeba:	099b      	lsrs	r3, r3, #6
 800aebc:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	69ba      	ldr	r2, [r7, #24]
 800aec2:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800aece:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800aed2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	041b      	lsls	r3, r3, #16
 800aeda:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	461a      	mov	r2, r3
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800aef0:	7ffb      	ldrb	r3, [r7, #31]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	10624dd3 	.word	0x10624dd3

0800af00 <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	619a      	str	r2, [r3, #24]
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	e002      	b.n	800af42 <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d90a      	bls.n	800af60 <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	4413      	add	r3, r2
 800af52:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	1e5a      	subs	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	60da      	str	r2, [r3, #12]
 800af5e:	e00b      	b.n	800af78 <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d107      	bne.n	800af78 <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d126      	bne.n	800afce <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	da02      	bge.n	800af8c <STC_CalcTorqueReference+0x6c>
 800af86:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800af8a:	33ff      	adds	r3, #255	; 0xff
 800af8c:	141b      	asrs	r3, r3, #16
 800af8e:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff fde5 	bl	800ab64 <SPD_GetAvrgMecSpeedUnit>
 800af9a:	4603      	mov	r3, r0
 800af9c:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800af9e:	8a3a      	ldrh	r2, [r7, #16]
 800afa0:	89fb      	ldrh	r3, [r7, #14]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe ff76 	bl	8009ea4 <PI_Controller>
 800afb8:	4603      	mov	r3, r0
 800afba:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800afc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800afc6:	041a      	lsls	r2, r3, #16
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	609a      	str	r2, [r3, #8]
 800afcc:	e00a      	b.n	800afe4 <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	da02      	bge.n	800afe0 <STC_CalcTorqueReference+0xc0>
 800afda:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800afde:	33ff      	adds	r3, #255	; 0xff
 800afe0:	141b      	asrs	r3, r3, #16
 800afe2:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800afe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8bdb      	ldrh	r3, [r3, #30]
}
 800b016:	4618      	mov	r0, r3
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b04a:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b052:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	2300      	movs	r3, #0
 800b05a:	89ba      	ldrh	r2, [r7, #12]
 800b05c:	f362 030f 	bfi	r3, r2, #0, #16
 800b060:	89fa      	ldrh	r2, [r7, #14]
 800b062:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff fd70 	bl	800ab64 <SPD_GetAvrgMecSpeedUnit>
 800b084:	4603      	mov	r3, r0
 800b086:	041a      	lsls	r2, r3, #16
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	605a      	str	r2, [r3, #4]
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	809a      	strh	r2, [r3, #4]
}
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
	...

0800b0bc <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800b0d2:	7b7b      	ldrb	r3, [r7, #13]
 800b0d4:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800b0d6:	7b7b      	ldrb	r3, [r7, #13]
 800b0d8:	2b14      	cmp	r3, #20
 800b0da:	f200 8110 	bhi.w	800b2fe <STM_NextState+0x242>
 800b0de:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <STM_NextState+0x28>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b14b 	.word	0x0800b14b
 800b0e8:	0800b169 	.word	0x0800b169
 800b0ec:	0800b1cf 	.word	0x0800b1cf
 800b0f0:	0800b1e1 	.word	0x0800b1e1
 800b0f4:	0800b26b 	.word	0x0800b26b
 800b0f8:	0800b2a3 	.word	0x0800b2a3
 800b0fc:	0800b2b9 	.word	0x0800b2b9
 800b100:	0800b2c9 	.word	0x0800b2c9
 800b104:	0800b2d9 	.word	0x0800b2d9
 800b108:	0800b2e9 	.word	0x0800b2e9
 800b10c:	0800b2ff 	.word	0x0800b2ff
 800b110:	0800b2ff 	.word	0x0800b2ff
 800b114:	0800b139 	.word	0x0800b139
 800b118:	0800b187 	.word	0x0800b187
 800b11c:	0800b19f 	.word	0x0800b19f
 800b120:	0800b1b7 	.word	0x0800b1b7
 800b124:	0800b20b 	.word	0x0800b20b
 800b128:	0800b223 	.word	0x0800b223
 800b12c:	0800b255 	.word	0x0800b255
 800b130:	0800b287 	.word	0x0800b287
 800b134:	0800b23f 	.word	0x0800b23f
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800b138:	78fb      	ldrb	r3, [r7, #3]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f040 80e1 	bne.w	800b302 <STM_NextState+0x246>
      {
        bNewState = bState;
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b144:	2301      	movs	r3, #1
 800b146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b148:	e0db      	b.n	800b302 <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d006      	beq.n	800b15e <STM_NextState+0xa2>
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d003      	beq.n	800b15e <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	2b0c      	cmp	r3, #12
 800b15a:	f040 80d4 	bne.w	800b306 <STM_NextState+0x24a>
      {
        bNewState = bState;
 800b15e:	78fb      	ldrb	r3, [r7, #3]
 800b160:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b162:	2301      	movs	r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b166:	e0ce      	b.n	800b306 <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	2b07      	cmp	r3, #7
 800b16c:	d006      	beq.n	800b17c <STM_NextState+0xc0>
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	2b0d      	cmp	r3, #13
 800b172:	d003      	beq.n	800b17c <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800b174:	78fb      	ldrb	r3, [r7, #3]
 800b176:	2b0e      	cmp	r3, #14
 800b178:	f040 80c7 	bne.w	800b30a <STM_NextState+0x24e>
      {
        bNewState = bState;
 800b17c:	78fb      	ldrb	r3, [r7, #3]
 800b17e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b180:	2301      	movs	r3, #1
 800b182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b184:	e0c1      	b.n	800b30a <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800b186:	78fb      	ldrb	r3, [r7, #3]
 800b188:	2b0e      	cmp	r3, #14
 800b18a:	d003      	beq.n	800b194 <STM_NextState+0xd8>
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	2b07      	cmp	r3, #7
 800b190:	f040 80bd 	bne.w	800b30e <STM_NextState+0x252>
      {
        bNewState = bState;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b198:	2301      	movs	r3, #1
 800b19a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b19c:	e0b7      	b.n	800b30e <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	2b0f      	cmp	r3, #15
 800b1a2:	d003      	beq.n	800b1ac <STM_NextState+0xf0>
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	2b07      	cmp	r3, #7
 800b1a8:	f040 80b3 	bne.w	800b312 <STM_NextState+0x256>
      {
        bNewState = bState;
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1b4:	e0ad      	b.n	800b312 <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d003      	beq.n	800b1c4 <STM_NextState+0x108>
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	2b07      	cmp	r3, #7
 800b1c0:	f040 80a9 	bne.w	800b316 <STM_NextState+0x25a>
      {
        bNewState = bState;
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1cc:	e0a3      	b.n	800b316 <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	2b07      	cmp	r3, #7
 800b1d2:	f040 80a2 	bne.w	800b31a <STM_NextState+0x25e>
      {
        bNewState = bState;
 800b1d6:	78fb      	ldrb	r3, [r7, #3]
 800b1d8:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1de:	e09c      	b.n	800b31a <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	2b07      	cmp	r3, #7
 800b1e4:	d00c      	beq.n	800b200 <STM_NextState+0x144>
 800b1e6:	78fb      	ldrb	r3, [r7, #3]
 800b1e8:	2b10      	cmp	r3, #16
 800b1ea:	d009      	beq.n	800b200 <STM_NextState+0x144>
 800b1ec:	78fb      	ldrb	r3, [r7, #3]
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d006      	beq.n	800b200 <STM_NextState+0x144>
           ( bState == START ) ||
 800b1f2:	78fb      	ldrb	r3, [r7, #3]
 800b1f4:	2b11      	cmp	r3, #17
 800b1f6:	d003      	beq.n	800b200 <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	f040 808f 	bne.w	800b31e <STM_NextState+0x262>
      {
        bNewState = bState;
 800b200:	78fb      	ldrb	r3, [r7, #3]
 800b202:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b204:	2301      	movs	r3, #1
 800b206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b208:	e089      	b.n	800b31e <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800b20a:	78fb      	ldrb	r3, [r7, #3]
 800b20c:	2b11      	cmp	r3, #17
 800b20e:	d003      	beq.n	800b218 <STM_NextState+0x15c>
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	2b07      	cmp	r3, #7
 800b214:	f040 8085 	bne.w	800b322 <STM_NextState+0x266>
      {
        bNewState = bState;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b21c:	2301      	movs	r3, #1
 800b21e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b220:	e07f      	b.n	800b322 <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	2b12      	cmp	r3, #18
 800b226:	d005      	beq.n	800b234 <STM_NextState+0x178>
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	2b07      	cmp	r3, #7
 800b22c:	d002      	beq.n	800b234 <STM_NextState+0x178>
 800b22e:	78fb      	ldrb	r3, [r7, #3]
 800b230:	2b14      	cmp	r3, #20
 800b232:	d178      	bne.n	800b326 <STM_NextState+0x26a>
      {
        bNewState = bState;
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b238:	2301      	movs	r3, #1
 800b23a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b23c:	e073      	b.n	800b326 <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	2b12      	cmp	r3, #18
 800b242:	d002      	beq.n	800b24a <STM_NextState+0x18e>
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	2b07      	cmp	r3, #7
 800b248:	d16f      	bne.n	800b32a <STM_NextState+0x26e>
      {
        bNewState = bState;
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b24e:	2301      	movs	r3, #1
 800b250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b252:	e06a      	b.n	800b32a <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	2b04      	cmp	r3, #4
 800b258:	d002      	beq.n	800b260 <STM_NextState+0x1a4>
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	2b07      	cmp	r3, #7
 800b25e:	d166      	bne.n	800b32e <STM_NextState+0x272>
      {
        bNewState = bState;
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b264:	2301      	movs	r3, #1
 800b266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b268:	e061      	b.n	800b32e <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	2b13      	cmp	r3, #19
 800b26e:	d005      	beq.n	800b27c <STM_NextState+0x1c0>
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	2b07      	cmp	r3, #7
 800b274:	d002      	beq.n	800b27c <STM_NextState+0x1c0>
 800b276:	78fb      	ldrb	r3, [r7, #3]
 800b278:	2b05      	cmp	r3, #5
 800b27a:	d15a      	bne.n	800b332 <STM_NextState+0x276>
      {
        bNewState = bState;
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b280:	2301      	movs	r3, #1
 800b282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b284:	e055      	b.n	800b332 <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800b286:	78fb      	ldrb	r3, [r7, #3]
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d005      	beq.n	800b298 <STM_NextState+0x1dc>
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	2b07      	cmp	r3, #7
 800b290:	d002      	beq.n	800b298 <STM_NextState+0x1dc>
 800b292:	78fb      	ldrb	r3, [r7, #3]
 800b294:	2b05      	cmp	r3, #5
 800b296:	d14e      	bne.n	800b336 <STM_NextState+0x27a>
      {
        bNewState = bState;
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b29c:	2301      	movs	r3, #1
 800b29e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2a0:	e049      	b.n	800b336 <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800b2a2:	78fb      	ldrb	r3, [r7, #3]
 800b2a4:	2b06      	cmp	r3, #6
 800b2a6:	d002      	beq.n	800b2ae <STM_NextState+0x1f2>
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	2b07      	cmp	r3, #7
 800b2ac:	d145      	bne.n	800b33a <STM_NextState+0x27e>
      {
        bNewState = bState;
 800b2ae:	78fb      	ldrb	r3, [r7, #3]
 800b2b0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2b6:	e040      	b.n	800b33a <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	2b07      	cmp	r3, #7
 800b2bc:	d13f      	bne.n	800b33e <STM_NextState+0x282>
      {
        bNewState = bState;
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2c6:	e03a      	b.n	800b33e <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	2b08      	cmp	r3, #8
 800b2cc:	d139      	bne.n	800b342 <STM_NextState+0x286>
      {
        bNewState = bState;
 800b2ce:	78fb      	ldrb	r3, [r7, #3]
 800b2d0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2d6:	e034      	b.n	800b342 <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800b2d8:	78fb      	ldrb	r3, [r7, #3]
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d133      	bne.n	800b346 <STM_NextState+0x28a>
      {
        bNewState = bState;
 800b2de:	78fb      	ldrb	r3, [r7, #3]
 800b2e0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2e6:	e02e      	b.n	800b346 <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800b2e8:	78fb      	ldrb	r3, [r7, #3]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <STM_NextState+0x238>
 800b2ee:	78fb      	ldrb	r3, [r7, #3]
 800b2f0:	2b0c      	cmp	r3, #12
 800b2f2:	d12a      	bne.n	800b34a <STM_NextState+0x28e>
      {
        bNewState = bState;
 800b2f4:	78fb      	ldrb	r3, [r7, #3]
 800b2f6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2fc:	e025      	b.n	800b34a <STM_NextState+0x28e>
    default:
      break;
 800b2fe:	bf00      	nop
 800b300:	e024      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b302:	bf00      	nop
 800b304:	e022      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b306:	bf00      	nop
 800b308:	e020      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b30a:	bf00      	nop
 800b30c:	e01e      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b30e:	bf00      	nop
 800b310:	e01c      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b312:	bf00      	nop
 800b314:	e01a      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b316:	bf00      	nop
 800b318:	e018      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b31a:	bf00      	nop
 800b31c:	e016      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b31e:	bf00      	nop
 800b320:	e014      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b322:	bf00      	nop
 800b324:	e012      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b326:	bf00      	nop
 800b328:	e010      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b32a:	bf00      	nop
 800b32c:	e00e      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b32e:	bf00      	nop
 800b330:	e00c      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b332:	bf00      	nop
 800b334:	e00a      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b336:	bf00      	nop
 800b338:	e008      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b33a:	bf00      	nop
 800b33c:	e006      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b33e:	bf00      	nop
 800b340:	e004      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b342:	bf00      	nop
 800b344:	e002      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b346:	bf00      	nop
 800b348:	e000      	b.n	800b34c <STM_NextState+0x290>
      break;
 800b34a:	bf00      	nop
  }

  if ( bChangeState )
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	7bba      	ldrb	r2, [r7, #14]
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	e00d      	b.n	800b376 <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d00a      	beq.n	800b376 <STM_NextState+0x2ba>
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d007      	beq.n	800b376 <STM_NextState+0x2ba>
 800b366:	78fb      	ldrb	r3, [r7, #3]
 800b368:	2b07      	cmp	r3, #7
 800b36a:	d004      	beq.n	800b376 <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800b36c:	2200      	movs	r2, #0
 800b36e:	2180      	movs	r1, #128	; 0x80
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f805 	bl	800b380 <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800b376:	7bfb      	ldrb	r3, [r7, #15]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	807b      	strh	r3, [r7, #2]
 800b38c:	4613      	mov	r3, r2
 800b38e:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	885a      	ldrh	r2, [r3, #2]
 800b39a:	887b      	ldrh	r3, [r7, #2]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	b21a      	sxth	r2, r3
 800b3a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b3a6:	43db      	mvns	r3, r3
 800b3a8:	b21b      	sxth	r3, r3
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	b21b      	sxth	r3, r3
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	889a      	ldrh	r2, [r3, #4]
 800b3b8:	887b      	ldrh	r3, [r7, #2]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	2b0a      	cmp	r3, #10
 800b3c6:	d109      	bne.n	800b3dc <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	885b      	ldrh	r3, [r3, #2]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10e      	bne.n	800b3ee <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	220b      	movs	r2, #11
 800b3d4:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800b3d6:	230b      	movs	r3, #11
 800b3d8:	73fb      	strb	r3, [r7, #15]
 800b3da:	e008      	b.n	800b3ee <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	885b      	ldrh	r3, [r3, #2]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d004      	beq.n	800b3ee <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	220a      	movs	r2, #10
 800b3e8:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800b3ea:	230a      	movs	r3, #10
 800b3ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	781b      	ldrb	r3, [r3, #0]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b0b      	cmp	r3, #11
 800b426:	d107      	bne.n	800b438 <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2209      	movs	r2, #9
 800b42c:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800b434:	2301      	movs	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800b438:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800b446:	b480      	push	{r7}
 800b448:	b085      	sub	sp, #20
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	889b      	ldrh	r3, [r3, #4]
 800b452:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	885b      	ldrh	r3, [r3, #2]
 800b458:	041b      	lsls	r3, r3, #16
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800b460:	68fb      	ldr	r3, [r7, #12]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <LL_USART_EnableIT_RXNE>:
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	f043 0220 	orr.w	r2, r3, #32
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	60da      	str	r2, [r3, #12]
}
 800b482:	bf00      	nop
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <LL_USART_EnableIT_TXE>:
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	60da      	str	r2, [r3, #12]
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <LL_USART_DisableIT_RXNE>:
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f023 0220 	bic.w	r2, r3, #32
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60da      	str	r2, [r3, #12]
}
 800b4c2:	bf00      	nop
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <LL_USART_DisableIT_TXE>:
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60da      	str	r2, [r3, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800b4fa:	78fa      	ldrb	r2, [r7, #3]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	605a      	str	r2, [r3, #4]
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4618      	mov	r0, r3
 800b518:	f7fc fd54 	bl	8007fc4 <FCP_Init>
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800b524:	b590      	push	{r4, r7, lr}
 800b526:	b087      	sub	sp, #28
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b530:	4b4b      	ldr	r3, [pc, #300]	; (800b660 <UFCP_RX_IRQ_Handler+0x13c>)
 800b532:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 8089 	beq.w	800b656 <UFCP_RX_IRQ_Handler+0x132>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800b544:	887b      	ldrh	r3, [r7, #2]
 800b546:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <UFCP_RX_IRQ_Handler+0x34>
 800b552:	2b01      	cmp	r3, #1
 800b554:	d013      	beq.n	800b57e <UFCP_RX_IRQ_Handler+0x5a>
 800b556:	e029      	b.n	800b5ac <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	7bfa      	ldrb	r2, [r7, #15]
 800b55c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800b560:	4b40      	ldr	r3, [pc, #256]	; (800b664 <UFCP_RX_IRQ_Handler+0x140>)
 800b562:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	8a1a      	ldrh	r2, [r3, #16]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b572:	3301      	adds	r3, #1
 800b574:	b2da      	uxtb	r2, r3
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800b57c:	e06b      	b.n	800b656 <UFCP_RX_IRQ_Handler+0x132>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	7bfa      	ldrb	r2, [r7, #15]
 800b582:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b58c:	3301      	adds	r3, #1
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	da58      	bge.n	800b654 <UFCP_RX_IRQ_Handler+0x130>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800b5aa:	e053      	b.n	800b654 <UFCP_RX_IRQ_Handler+0x130>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b5ba:	3302      	adds	r3, #2
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	da11      	bge.n	800b5e4 <UFCP_RX_IRQ_Handler+0xc0>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b5c6:	3b02      	subs	r3, #2
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	7bfa      	ldrb	r2, [r7, #15]
 800b5ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b5d8:	3301      	adds	r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800b5e2:	e038      	b.n	800b656 <UFCP_RX_IRQ_Handler+0x132>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	7bfa      	ldrb	r2, [r7, #15]
 800b5e8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800b5ec:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <UFCP_RX_IRQ_Handler+0x144>)
 800b5ee:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff ff56 	bl	800b4ae <LL_USART_DisableIT_RXNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	3399      	adds	r3, #153	; 0x99
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fc fd27 	bl	8008062 <FCP_CalcCRC>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800b61e:	429a      	cmp	r2, r3
 800b620:	d10e      	bne.n	800b640 <UFCP_RX_IRQ_Handler+0x11c>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	689c      	ldr	r4, [r3, #8]
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b63c:	47a0      	blx	r4
 800b63e:	e00a      	b.n	800b656 <UFCP_RX_IRQ_Handler+0x132>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800b640:	230a      	movs	r3, #10
 800b642:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b644:	f107 020e 	add.w	r2, r7, #14
 800b648:	2301      	movs	r3, #1
 800b64a:	21ff      	movs	r1, #255	; 0xff
 800b64c:	6938      	ldr	r0, [r7, #16]
 800b64e:	f000 f8a3 	bl	800b798 <UFCP_Send>
 800b652:	e000      	b.n	800b656 <UFCP_RX_IRQ_Handler+0x132>
        break;
 800b654:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800b656:	697b      	ldr	r3, [r7, #20]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	371c      	adds	r7, #28
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd90      	pop	{r4, r7, pc}
 800b660:	0800c7c0 	.word	0x0800c7c0
 800b664:	0800c7c2 	.word	0x0800c7c2
 800b668:	0800c7c4 	.word	0x0800c7c4

0800b66c <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d050      	beq.n	800b724 <UFCP_TX_IRQ_Handler+0xb8>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <UFCP_TX_IRQ_Handler+0x26>
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d004      	beq.n	800b69a <UFCP_TX_IRQ_Handler+0x2e>
 800b690:	e007      	b.n	800b6a2 <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	7d1b      	ldrb	r3, [r3, #20]
 800b696:	81fb      	strh	r3, [r7, #14]
        break;
 800b698:	e019      	b.n	800b6ce <UFCP_TX_IRQ_Handler+0x62>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	7d5b      	ldrb	r3, [r3, #21]
 800b69e:	81fb      	strh	r3, [r7, #14]
        break;
 800b6a0:	e015      	b.n	800b6ce <UFCP_TX_IRQ_Handler+0x62>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	7d5b      	ldrb	r3, [r3, #21]
 800b6ae:	3302      	adds	r3, #2
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	da08      	bge.n	800b6c6 <UFCP_TX_IRQ_Handler+0x5a>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6ba:	3b02      	subs	r3, #2
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4413      	add	r3, r2
 800b6c0:	7d9b      	ldrb	r3, [r3, #22]
 800b6c2:	81fb      	strh	r3, [r7, #14]
 800b6c4:	e003      	b.n	800b6ce <UFCP_TX_IRQ_Handler+0x62>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b6cc:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b6d4:	89fa      	ldrh	r2, [r7, #14]
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff ff07 	bl	800b4ee <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	7d5b      	ldrb	r3, [r3, #21]
 800b6ec:	3302      	adds	r3, #2
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	da08      	bge.n	800b704 <UFCP_TX_IRQ_Handler+0x98>
    {
      pBaseHandle->TxFrameLevel++;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800b702:	e00f      	b.n	800b724 <UFCP_TX_IRQ_Handler+0xb8>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fedf 	bl	800b4ce <LL_USART_DisableIT_TXE>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	6812      	ldr	r2, [r2, #0]
 800b720:	4610      	mov	r0, r2
 800b722:	4798      	blx	r3
}
 800b724:	bf00      	nop
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800b738:	2308      	movs	r3, #8
 800b73a:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b73c:	f107 020b 	add.w	r2, r7, #11
 800b740:	2301      	movs	r3, #1
 800b742:	21ff      	movs	r1, #255	; 0xff
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f827 	bl	800b798 <UFCP_Send>

}
 800b74a:	bf00      	nop
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d112      	bne.n	800b78a <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff fe75 	bl	800b46e <LL_USART_EnableIT_RXNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800b784:	2302      	movs	r3, #2
 800b786:	73fb      	strb	r3, [r7, #15]
 800b788:	e001      	b.n	800b78e <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b78a:	2301      	movs	r3, #1
 800b78c:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	72fb      	strb	r3, [r7, #11]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d133      	bne.n	800b81e <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3316      	adds	r3, #22
 800b7be:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	7afa      	ldrb	r2, [r7, #11]
 800b7c4:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	7aba      	ldrb	r2, [r7, #10]
 800b7ca:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800b7cc:	e007      	b.n	800b7de <UFCP_Send+0x46>
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	1c53      	adds	r3, r2, #1
 800b7d2:	607b      	str	r3, [r7, #4]
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	1c59      	adds	r1, r3, #1
 800b7d8:	61b9      	str	r1, [r7, #24]
 800b7da:	7812      	ldrb	r2, [r2, #0]
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	7abb      	ldrb	r3, [r7, #10]
 800b7e0:	1e5a      	subs	r2, r3, #1
 800b7e2:	72ba      	strb	r2, [r7, #10]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1f2      	bne.n	800b7ce <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	3314      	adds	r3, #20
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fc fc38 	bl	8008062 <FCP_CalcCRC>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fe3b 	bl	800b48e <LL_USART_EnableIT_TXE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800b818:	2302      	movs	r3, #2
 800b81a:	77fb      	strb	r3, [r7, #31]
 800b81c:	e001      	b.n	800b822 <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b81e:	2301      	movs	r3, #1
 800b820:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800b822:	7ffb      	ldrb	r3, [r7, #31]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3720      	adds	r7, #32
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f804 	bl	800b85e <VSS_Clear>
}
 800b856:	bf00      	nop
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800b8d2:	bf00      	nop
 800b8d4:	370c      	adds	r7, #12
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b087      	sub	sp, #28
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]

  int16_t hRetAngle;
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	827b      	strh	r3, [r7, #18]

  if ( pHandle->bCopyObserver == true )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <VSS_CalcElAngle+0x20>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	82fb      	strh	r3, [r7, #22]
 800b8fc:	e09a      	b.n	800ba34 <VSS_CalcElAngle+0x156>
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b904:	b29a      	uxth	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	4413      	add	r3, r2
 800b910:	b29b      	uxth	r3, r3
 800b912:	b21a      	sxth	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	861a      	strh	r2, [r3, #48]	; 0x30
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b91e:	b29a      	uxth	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b926:	4619      	mov	r1, r3
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	785b      	ldrb	r3, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800b92c:	fb91 f3f3 	sdiv	r3, r1, r3
 800b930:	b29b      	uxth	r3, r3
 800b932:	4413      	add	r3, r2
 800b934:	b29b      	uxth	r3, r3
 800b936:	b21a      	sxth	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	80da      	strh	r2, [r3, #6]
#endif

    if ( pHandle->bTransitionStarted == true )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b942:	2b00      	cmp	r3, #0
 800b944:	d073      	beq.n	800ba2e <VSS_CalcElAngle+0x150>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <VSS_CalcElAngle+0x88>
      {
        hRetAngle = *( int16_t * )pInputVars_str;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	82fb      	strh	r3, [r7, #22]
        pHandle->bTransitionEnded = true;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	e066      	b.n	800ba34 <VSS_CalcElAngle+0x156>
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	3b01      	subs	r3, #1
 800b970:	b29b      	uxth	r3, r3
 800b972:	b21a      	sxth	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	85da      	strh	r2, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	db0b      	blt.n	800b99a <VSS_CalcElAngle+0xbc>
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b990:	b29b      	uxth	r3, r3
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	b29b      	uxth	r3, r3
 800b996:	82bb      	strh	r3, [r7, #20]
 800b998:	e00d      	b.n	800b9b6 <VSS_CalcElAngle+0xd8>
        }
        else
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	82bb      	strh	r3, [r7, #20]
          hSignCorr = -1;
 800b9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9b4:	827b      	strh	r3, [r7, #18]
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800b9b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800b9c0:	fb02 f303 	mul.w	r3, r2, r3
 800b9c4:	60fb      	str	r3, [r7, #12]
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9d4:	817b      	strh	r3, [r7, #10]
#endif

        hAngleCorr *= hSignCorr;
 800b9d6:	897a      	ldrh	r2, [r7, #10]
 800b9d8:	8a7b      	ldrh	r3, [r7, #18]
 800b9da:	fb12 f303 	smulbb	r3, r2, r3
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	817b      	strh	r3, [r7, #10]

        if ( hAngleDiff >= 0 )
 800b9e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	db0c      	blt.n	800ba04 <VSS_CalcElAngle+0x126>
        {
          pHandle->bTransitionLocked = true;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	897b      	ldrh	r3, [r7, #10]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	82fb      	strh	r3, [r7, #22]
 800ba02:	e017      	b.n	800ba34 <VSS_CalcElAngle+0x156>
        }
        else
        {
          if ( pHandle->bTransitionLocked == false )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ba0a:	f083 0301 	eor.w	r3, r3, #1
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <VSS_CalcElAngle+0x13e>
          {
            hRetAngle = pHandle->hElAngleAccu;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba18:	82fb      	strh	r3, [r7, #22]
 800ba1a:	e00b      	b.n	800ba34 <VSS_CalcElAngle+0x156>
          }
          else
          {
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	897b      	ldrh	r3, [r7, #10]
 800ba26:	4413      	add	r3, r2
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	82fb      	strh	r3, [r7, #22]
 800ba2c:	e002      	b.n	800ba34 <VSS_CalcElAngle+0x156>
        }
      }
    }
    else
    {
      hRetAngle = pHandle->hElAngleAccu;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba32:	82fb      	strh	r3, [r7, #22]
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	8afa      	ldrh	r2, [r7, #22]
 800ba38:	809a      	strh	r2, [r3, #4]
  return hRetAngle;
 800ba3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = false;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingStep > 1u )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d936      	bls.n	800bace <VSS_CalcAvrgMecSpeedUnit+0x84>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a1b      	ldr	r3, [r3, #32]
 800ba68:	441a      	add	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da02      	bge.n	800ba7c <VSS_CalcAvrgMecSpeedUnit+0x32>
 800ba76:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ba7a:	33ff      	adds	r3, #255	; 0xff
 800ba7c:	141b      	asrs	r3, r3, #16
 800ba7e:	b21a      	sxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	81da      	strh	r2, [r3, #14]

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ba8a:	461a      	mov	r2, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8b5b      	ldrh	r3, [r3, #26]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800ba90:	fb03 f202 	mul.w	r2, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800ba94:	4613      	mov	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	461a      	mov	r2, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	4619      	mov	r1, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	fb03 f301 	mul.w	r3, r3, r1
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800baac:	fb92 f3f3 	sdiv	r3, r2, r3
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800bab0:	b21a      	sxth	r2, r3
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	819a      	strh	r2, [r3, #12]

    pHandle->hRemainingStep--;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	851a      	strh	r2, [r3, #40]	; 0x28
 800bacc:	e037      	b.n	800bb3e <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else if ( pHandle->hRemainingStep == 1u )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d12e      	bne.n	800bb34 <VSS_CalcAvrgMecSpeedUnit+0xea>
  {
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	819a      	strh	r2, [r3, #12]

    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800baf0:	461a      	mov	r2, r3
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800baf6:	fb03 f202 	mul.w	r2, r3, r2
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	8b5b      	ldrh	r3, [r3, #26]
 800bafe:	4619      	mov	r1, r3
 800bb00:	460b      	mov	r3, r1
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	440b      	add	r3, r1
 800bb06:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800bb08:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800bb0c:	b21a      	sxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	81da      	strh	r2, [r3, #14]

    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	fb12 f303 	smulbb	r3, r2, r3
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	b21a      	sxth	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	81da      	strh	r2, [r3, #14]

    pHandle->hRemainingStep = 0u;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	851a      	strh	r2, [r3, #40]	; 0x28
 800bb32:	e004      	b.n	800bb3e <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	801a      	strh	r2, [r3, #0]
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb44:	f083 0301 	eor.w	r3, r3, #1
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d006      	beq.n	800bb5c <VSS_CalcAvrgMecSpeedUnit+0x112>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	78da      	ldrb	r2, [r3, #3]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	701a      	strb	r2, [r3, #0]
    SpeedSensorReliability = false;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73fb      	strb	r3, [r7, #15]
 800bb5a:	e006      	b.n	800bb6a <VSS_CalcAvrgMecSpeedUnit+0x120>
  }
  else
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff f819 	bl	800ab98 <SPD_IsMecSpeedReliable>
 800bb66:	4603      	mov	r3, r0
 800bb68:	73fb      	strb	r3, [r7, #15]
  }

  return ( SpeedSensorReliability );
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	887a      	ldrh	r2, [r7, #2]
 800bb84:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	785b      	ldrb	r3, [r3, #1]
 800bb92:	fb92 f3f3 	sdiv	r3, r2, r3
 800bb96:	b21a      	sxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	887a      	ldrh	r2, [r7, #2]
 800bba0:	809a      	strh	r2, [r3, #4]
}
 800bba2:	bf00      	nop
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
	...

0800bbb0 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	807b      	strh	r3, [r7, #2]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbc6:	f083 0301 	eor.w	r3, r3, #1
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d06f      	beq.n	800bcb0 <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800bbd0:	883b      	ldrh	r3, [r7, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d128      	bne.n	800bc28 <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	887a      	ldrh	r2, [r7, #2]
 800bbda:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800bbdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800bbe4:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	8b5b      	ldrh	r3, [r3, #26]
 800bbec:	4619      	mov	r1, r3
 800bbee:	460b      	mov	r3, r1
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800bbf6:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800bbfa:	b21a      	sxth	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	785b      	ldrb	r3, [r3, #1]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	fb12 f303 	smulbb	r3, r2, r3
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	b21a      	sxth	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	887a      	ldrh	r2, [r7, #2]
 800bc24:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800bc26:	e043      	b.n	800bcb0 <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800bc28:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800bc2e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800bc32:	4a22      	ldr	r2, [pc, #136]	; (800bcbc <VSS_SetMecAcceleration+0x10c>)
 800bc34:	fba2 2303 	umull	r2, r3, r2, r3
 800bc38:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800bc3a:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800bc3c:	8afb      	ldrh	r3, [r7, #22]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8afa      	ldrh	r2, [r7, #22]
 800bc46:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bc4e:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800bc54:	fb92 f3f3 	sdiv	r3, r2, r3
 800bc58:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800bc5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	69d2      	ldr	r2, [r2, #28]
 800bc62:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	8b5b      	ldrh	r3, [r3, #26]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800bc74:	fb92 f3f3 	sdiv	r3, r2, r3
 800bc78:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800bc7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bc7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800bc86:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800bc88:	fb92 f3f3 	sdiv	r3, r2, r3
 800bc8c:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	785b      	ldrb	r3, [r3, #1]
 800bc92:	461a      	mov	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	fb03 f202 	mul.w	r2, r3, r2
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	887a      	ldrh	r2, [r7, #2]
 800bca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bcaa:	041a      	lsls	r2, r3, #16
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	10624dd3 	.word	0x10624dd3

0800bcc0 <VSS_SetStartTransition>:
  * @retval bool true if Transition phase is enabled (started or not), false if
            transition has been triggered but it's actually disabled
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800bccc:	2301      	movs	r3, #1
 800bcce:	73fb      	strb	r3, [r7, #15]
  if ( bCommand == true )
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d011      	beq.n	800bcfa <VSS_SetStartTransition+0x3a>
  {
    pHandle->bTransitionStarted = true;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if ( pHandle->hTransitionSteps == 0 )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d108      	bne.n	800bcfa <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionEnded = true;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	701a      	strb	r2, [r3, #0]
      bAux = false;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]
    }
  }
  return bAux;
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <VSS_TransitionEnded>:
  }
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
    return pHandle->bTransitionEnded;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
	...

0800bd24 <RUC_Init>:
 800bd24:	b430      	push	{r4, r5}
 800bd26:	6681      	str	r1, [r0, #104]	; 0x68
 800bd28:	2100      	movs	r1, #0
 800bd2a:	9c02      	ldr	r4, [sp, #8]
 800bd2c:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800bd30:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800bd34:	f110 010c 	adds.w	r1, r0, #12
 800bd38:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 800bd3c:	6744      	str	r4, [r0, #116]	; 0x74
 800bd3e:	d023      	beq.n	800bd88 <RUC_Init+0x64>
 800bd40:	6943      	ldr	r3, [r0, #20]
 800bd42:	b323      	cbz	r3, 800bd8e <RUC_Init+0x6a>
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	b323      	cbz	r3, 800bd92 <RUC_Init+0x6e>
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	b323      	cbz	r3, 800bd96 <RUC_Init+0x72>
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	b1c3      	cbz	r3, 800bd82 <RUC_Init+0x5e>
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	2105      	movs	r1, #5
 800bd54:	b1b3      	cbz	r3, 800bd84 <RUC_Init+0x60>
 800bd56:	2204      	movs	r2, #4
 800bd58:	2105      	movs	r1, #5
 800bd5a:	8805      	ldrh	r5, [r0, #0]
 800bd5c:	4c0f      	ldr	r4, [pc, #60]	; (800bd9c <RUC_Init+0x78>)
 800bd5e:	2364      	movs	r3, #100	; 0x64
 800bd60:	fb03 f305 	mul.w	r3, r3, r5
 800bd64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bd68:	fba4 4303 	umull	r4, r3, r4, r3
 800bd6c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bd70:	2400      	movs	r4, #0
 800bd72:	099b      	lsrs	r3, r3, #6
 800bd74:	6154      	str	r4, [r2, #20]
 800bd76:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 800bd7a:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800bd7e:	bc30      	pop	{r4, r5}
 800bd80:	4770      	bx	lr
 800bd82:	2104      	movs	r1, #4
 800bd84:	1e4a      	subs	r2, r1, #1
 800bd86:	e7e8      	b.n	800bd5a <RUC_Init+0x36>
 800bd88:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8c:	e7e5      	b.n	800bd5a <RUC_Init+0x36>
 800bd8e:	2101      	movs	r1, #1
 800bd90:	e7f8      	b.n	800bd84 <RUC_Init+0x60>
 800bd92:	2102      	movs	r1, #2
 800bd94:	e7f6      	b.n	800bd84 <RUC_Init+0x60>
 800bd96:	2103      	movs	r1, #3
 800bd98:	e7f4      	b.n	800bd84 <RUC_Init+0x60>
 800bd9a:	bf00      	nop
 800bd9c:	10624dd3 	.word	0x10624dd3

0800bda0 <RUC_Clear>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	4604      	mov	r4, r0
 800bda6:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800bda8:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 800bdac:	80e1      	strh	r1, [r4, #6]
 800bdae:	2500      	movs	r5, #0
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800bdb6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800bdba:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800bdbe:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800bdc2:	460e      	mov	r6, r1
 800bdc4:	f7ff fd4b 	bl	800b85e <VSS_Clear>
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4640      	mov	r0, r8
 800bdcc:	f7fe ffea 	bl	800ada4 <STC_SetControlMode>
 800bdd0:	8861      	ldrh	r1, [r4, #2]
 800bdd2:	b2b6      	uxth	r6, r6
 800bdd4:	fb11 f106 	smulbb	r1, r1, r6
 800bdd8:	b209      	sxth	r1, r1
 800bdda:	4638      	mov	r0, r7
 800bddc:	f7ff feca 	bl	800bb74 <VSS_SetMecAngle>
 800bde0:	462a      	mov	r2, r5
 800bde2:	4629      	mov	r1, r5
 800bde4:	4640      	mov	r0, r8
 800bde6:	f7fe ffef 	bl	800adc8 <STC_ExecRamp>
 800bdea:	8a21      	ldrh	r1, [r4, #16]
 800bdec:	89a2      	ldrh	r2, [r4, #12]
 800bdee:	fb11 f106 	smulbb	r1, r1, r6
 800bdf2:	b209      	sxth	r1, r1
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	f7fe ffe7 	bl	800adc8 <STC_ExecRamp>
 800bdfa:	89e1      	ldrh	r1, [r4, #14]
 800bdfc:	89a2      	ldrh	r2, [r4, #12]
 800bdfe:	fb11 f106 	smulbb	r1, r1, r6
 800be02:	4638      	mov	r0, r7
 800be04:	b209      	sxth	r1, r1
 800be06:	f7ff fed3 	bl	800bbb0 <VSS_SetMecAcceleration>
 800be0a:	89a0      	ldrh	r0, [r4, #12]
 800be0c:	8823      	ldrh	r3, [r4, #0]
 800be0e:	4907      	ldr	r1, [pc, #28]	; (800be2c <RUC_Clear+0x8c>)
 800be10:	6962      	ldr	r2, [r4, #20]
 800be12:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800be16:	fb03 f300 	mul.w	r3, r3, r0
 800be1a:	fba1 1303 	umull	r1, r3, r1, r3
 800be1e:	099b      	lsrs	r3, r3, #6
 800be20:	3301      	adds	r3, #1
 800be22:	80a3      	strh	r3, [r4, #4]
 800be24:	60a2      	str	r2, [r4, #8]
 800be26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2a:	bf00      	nop
 800be2c:	10624dd3 	.word	0x10624dd3

0800be30 <RUC_Exec>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	8883      	ldrh	r3, [r0, #4]
 800be34:	bb53      	cbnz	r3, 800be8c <RUC_Exec+0x5c>
 800be36:	6883      	ldr	r3, [r0, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d02e      	beq.n	800be9a <RUC_Exec+0x6a>
 800be3c:	88c5      	ldrh	r5, [r0, #6]
 800be3e:	8899      	ldrh	r1, [r3, #4]
 800be40:	881a      	ldrh	r2, [r3, #0]
 800be42:	4604      	mov	r4, r0
 800be44:	fb11 f105 	smulbb	r1, r1, r5
 800be48:	b209      	sxth	r1, r1
 800be4a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800be4c:	f7fe ffbc 	bl	800adc8 <STC_ExecRamp>
 800be50:	68a3      	ldr	r3, [r4, #8]
 800be52:	88e5      	ldrh	r5, [r4, #6]
 800be54:	8859      	ldrh	r1, [r3, #2]
 800be56:	881a      	ldrh	r2, [r3, #0]
 800be58:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800be5a:	fb11 f105 	smulbb	r1, r1, r5
 800be5e:	b209      	sxth	r1, r1
 800be60:	f7ff fea6 	bl	800bbb0 <VSS_SetMecAcceleration>
 800be64:	68a2      	ldr	r2, [r4, #8]
 800be66:	8823      	ldrh	r3, [r4, #0]
 800be68:	8810      	ldrh	r0, [r2, #0]
 800be6a:	490d      	ldr	r1, [pc, #52]	; (800bea0 <RUC_Exec+0x70>)
 800be6c:	6892      	ldr	r2, [r2, #8]
 800be6e:	60a2      	str	r2, [r4, #8]
 800be70:	fb03 f300 	mul.w	r3, r3, r0
 800be74:	fba1 2303 	umull	r2, r3, r1, r3
 800be78:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800be7c:	099b      	lsrs	r3, r3, #6
 800be7e:	3301      	adds	r3, #1
 800be80:	3201      	adds	r2, #1
 800be82:	80a3      	strh	r3, [r4, #4]
 800be84:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800be88:	2001      	movs	r0, #1
 800be8a:	bd38      	pop	{r3, r4, r5, pc}
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29b      	uxth	r3, r3
 800be90:	8083      	strh	r3, [r0, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0cf      	beq.n	800be36 <RUC_Exec+0x6>
 800be96:	2001      	movs	r0, #1
 800be98:	e7f7      	b.n	800be8a <RUC_Exec+0x5a>
 800be9a:	4618      	mov	r0, r3
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop
 800bea0:	10624dd3 	.word	0x10624dd3

0800bea4 <RUC_FirstAccelerationStageReached>:
 800bea4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800bea8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 800beac:	4282      	cmp	r2, r0
 800beae:	bf34      	ite	cc
 800beb0:	2000      	movcc	r0, #0
 800beb2:	2001      	movcs	r0, #1
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop

0800beb8 <RUC_SetPhaseDurationms>:
 800beb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bebc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bec0:	818a      	strh	r2, [r1, #12]
 800bec2:	4770      	bx	lr

0800bec4 <RUC_SetPhaseFinalMecSpeedUnit>:
 800bec4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bec8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800becc:	81ca      	strh	r2, [r1, #14]
 800bece:	4770      	bx	lr

0800bed0 <RUC_SetPhaseFinalTorque>:
 800bed0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bed8:	820a      	strh	r2, [r1, #16]
 800beda:	4770      	bx	lr

0800bedc <RUC_GetPhaseDurationms>:
 800bedc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bee4:	8988      	ldrh	r0, [r1, #12]
 800bee6:	4770      	bx	lr

0800bee8 <RUC_GetPhaseFinalMecSpeedUnit>:
 800bee8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800beec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bef0:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop

0800bef8 <RUC_GetPhaseFinalTorque>:
 800bef8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800befc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf00:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop

0800bf08 <RUC_GetNumberOfPhases>:
 800bf08:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop

0800bf10 <STO_PLL_CalcElAngle>:
 800bf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf14:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800bf18:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	03d8      	lsls	r0, r3, #15
 800bf20:	1ac2      	subs	r2, r0, r3
 800bf22:	4596      	cmp	lr, r2
 800bf24:	b089      	sub	sp, #36	; 0x24
 800bf26:	f340 80bb 	ble.w	800c0a0 <STO_PLL_CalcElAngle+0x190>
 800bf2a:	66a2      	str	r2, [r4, #104]	; 0x68
 800bf2c:	4696      	mov	lr, r2
 800bf2e:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800bf32:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800bf36:	fa4e f605 	asr.w	r6, lr, r5
 800bf3a:	9605      	str	r6, [sp, #20]
 800bf3c:	4562      	cmp	r2, ip
 800bf3e:	b236      	sxth	r6, r6
 800bf40:	9600      	str	r6, [sp, #0]
 800bf42:	f280 80bf 	bge.w	800c0c4 <STO_PLL_CalcElAngle+0x1b4>
 800bf46:	66e2      	str	r2, [r4, #108]	; 0x6c
 800bf48:	4694      	mov	ip, r2
 800bf4a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800bf4e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bf50:	03de      	lsls	r6, r3, #15
 800bf52:	fa4c f205 	asr.w	r2, ip, r5
 800bf56:	1af5      	subs	r5, r6, r3
 800bf58:	9202      	str	r2, [sp, #8]
 800bf5a:	42a8      	cmp	r0, r5
 800bf5c:	b212      	sxth	r2, r2
 800bf5e:	9201      	str	r2, [sp, #4]
 800bf60:	f340 80aa 	ble.w	800c0b8 <STO_PLL_CalcElAngle+0x1a8>
 800bf64:	6625      	str	r5, [r4, #96]	; 0x60
 800bf66:	4628      	mov	r0, r5
 800bf68:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf6a:	4295      	cmp	r5, r2
 800bf6c:	f280 809e 	bge.w	800c0ac <STO_PLL_CalcElAngle+0x19c>
 800bf70:	6665      	str	r5, [r4, #100]	; 0x64
 800bf72:	462a      	mov	r2, r5
 800bf74:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800bf78:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
 800bf7c:	88cd      	ldrh	r5, [r1, #6]
 800bf7e:	890e      	ldrh	r6, [r1, #8]
 800bf80:	f9b1 8000 	ldrsh.w	r8, [r1]
 800bf84:	888f      	ldrh	r7, [r1, #4]
 800bf86:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bf8a:	9104      	str	r1, [sp, #16]
 800bf8c:	fa40 f903 	asr.w	r9, r0, r3
 800bf90:	fa42 f303 	asr.w	r3, r2, r3
 800bf94:	fb13 f10a 	smulbb	r1, r3, sl
 800bf98:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 800bf9c:	1a51      	subs	r1, r2, r1
 800bf9e:	eba9 0707 	sub.w	r7, r9, r7
 800bfa2:	fb19 f90a 	smulbb	r9, r9, sl
 800bfa6:	fb06 f208 	mul.w	r2, r6, r8
 800bfaa:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 800bfae:	9103      	str	r1, [sp, #12]
 800bfb0:	b23f      	sxth	r7, r7
 800bfb2:	eba0 0009 	sub.w	r0, r0, r9
 800bfb6:	9904      	ldr	r1, [sp, #16]
 800bfb8:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 800bfbc:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800bfc0:	fb0b 0007 	mla	r0, fp, r7, r0
 800bfc4:	1412      	asrs	r2, r2, #16
 800bfc6:	fb0a 0202 	mla	r2, sl, r2, r0
 800bfca:	1b5b      	subs	r3, r3, r5
 800bfcc:	fb06 f601 	mul.w	r6, r6, r1
 800bfd0:	8e65      	ldrh	r5, [r4, #50]	; 0x32
 800bfd2:	9801      	ldr	r0, [sp, #4]
 800bfd4:	9903      	ldr	r1, [sp, #12]
 800bfd6:	b21b      	sxth	r3, r3
 800bfd8:	fb0b 1103 	mla	r1, fp, r3, r1
 800bfdc:	fa40 fb05 	asr.w	fp, r0, r5
 800bfe0:	9800      	ldr	r0, [sp, #0]
 800bfe2:	1436      	asrs	r6, r6, #16
 800bfe4:	fb0a 1106 	mla	r1, sl, r6, r1
 800bfe8:	fa40 f505 	asr.w	r5, r0, r5
 800bfec:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 800bff0:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800bff4:	f9b4 a124 	ldrsh.w	sl, [r4, #292]	; 0x124
 800bff8:	fb0b fb08 	mul.w	fp, fp, r8
 800bffc:	fb05 f508 	mul.w	r5, r5, r8
 800c000:	fb09 c303 	mla	r3, r9, r3, ip
 800c004:	fb07 e709 	mla	r7, r7, r9, lr
 800c008:	fb0b 7706 	mla	r7, fp, r6, r7
 800c00c:	fb05 3616 	mls	r6, r5, r6, r3
 800c010:	9b00      	ldr	r3, [sp, #0]
 800c012:	fb00 2513 	mls	r5, r0, r3, r2
 800c016:	9a01      	ldr	r2, [sp, #4]
 800c018:	f1ba 0f00 	cmp.w	sl, #0
 800c01c:	fb00 1b12 	mls	fp, r0, r2, r1
 800c020:	4698      	mov	r8, r3
 800c022:	db55      	blt.n	800c0d0 <STO_PLL_CalcElAngle+0x1c0>
 800c024:	f04f 0901 	mov.w	r9, #1
 800c028:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800c02c:	9b01      	ldr	r3, [sp, #4]
 800c02e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800c032:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800c036:	f7f5 f96f 	bl	8001318 <MCM_Trig_Functions>
 800c03a:	9b02      	ldr	r3, [sp, #8]
 800c03c:	fb13 f109 	smulbb	r1, r3, r9
 800c040:	4249      	negs	r1, r1
 800c042:	1403      	asrs	r3, r0, #16
 800c044:	fb10 f001 	smulbb	r0, r0, r1
 800c048:	fb08 f103 	mul.w	r1, r8, r3
 800c04c:	f340 30cf 	sbfx	r0, r0, #15, #16
 800c050:	f341 31cf 	sbfx	r1, r1, #15, #16
 800c054:	1a41      	subs	r1, r0, r1
 800c056:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c05a:	f7fd ff23 	bl	8009ea4 <PI_Controller>
 800c05e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800c062:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800c066:	8220      	strh	r0, [r4, #16]
 800c068:	3301      	adds	r3, #1
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	429a      	cmp	r2, r3
 800c06e:	bf0a      	itet	eq
 800c070:	2200      	moveq	r2, #0
 800c072:	461a      	movne	r2, r3
 800c074:	4613      	moveq	r3, r2
 800c076:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800c07a:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800c07e:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800c082:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800c086:	88a2      	ldrh	r2, [r4, #4]
 800c088:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800c08c:	4410      	add	r0, r2
 800c08e:	b200      	sxth	r0, r0
 800c090:	6625      	str	r5, [r4, #96]	; 0x60
 800c092:	e9c4 b719 	strd	fp, r7, [r4, #100]	; 0x64
 800c096:	66e6      	str	r6, [r4, #108]	; 0x6c
 800c098:	80a0      	strh	r0, [r4, #4]
 800c09a:	b009      	add	sp, #36	; 0x24
 800c09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a0:	1a1d      	subs	r5, r3, r0
 800c0a2:	45ae      	cmp	lr, r5
 800c0a4:	bfdc      	itt	le
 800c0a6:	66a5      	strle	r5, [r4, #104]	; 0x68
 800c0a8:	46ae      	movle	lr, r5
 800c0aa:	e740      	b.n	800bf2e <STO_PLL_CalcElAngle+0x1e>
 800c0ac:	1b9b      	subs	r3, r3, r6
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	bfdc      	itt	le
 800c0b2:	6663      	strle	r3, [r4, #100]	; 0x64
 800c0b4:	461a      	movle	r2, r3
 800c0b6:	e75d      	b.n	800bf74 <STO_PLL_CalcElAngle+0x64>
 800c0b8:	1b9a      	subs	r2, r3, r6
 800c0ba:	4290      	cmp	r0, r2
 800c0bc:	bfdc      	itt	le
 800c0be:	6622      	strle	r2, [r4, #96]	; 0x60
 800c0c0:	4610      	movle	r0, r2
 800c0c2:	e751      	b.n	800bf68 <STO_PLL_CalcElAngle+0x58>
 800c0c4:	1a1b      	subs	r3, r3, r0
 800c0c6:	459c      	cmp	ip, r3
 800c0c8:	bfdc      	itt	le
 800c0ca:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800c0cc:	469c      	movle	ip, r3
 800c0ce:	e73c      	b.n	800bf4a <STO_PLL_CalcElAngle+0x3a>
 800c0d0:	9b05      	ldr	r3, [sp, #20]
 800c0d2:	f1c3 0800 	rsb	r8, r3, #0
 800c0d6:	fa0f f888 	sxth.w	r8, r8
 800c0da:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	e7a2      	b.n	800c028 <STO_PLL_CalcElAngle+0x118>
 800c0e2:	bf00      	nop

0800c0e4 <STO_PLL_CalcAvrgMecSpeedUnit>:
 800c0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e6:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800c0ea:	f1bc 0f00 	cmp.w	ip, #0
 800c0ee:	f000 8095 	beq.w	800c21c <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800c0f2:	f10c 37ff 	add.w	r7, ip, #4294967295
 800c0f6:	b2fb      	uxtb	r3, r7
 800c0f8:	f100 0672 	add.w	r6, r0, #114	; 0x72
 800c0fc:	f100 0774 	add.w	r7, r0, #116	; 0x74
 800c100:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800c104:	4632      	mov	r2, r6
 800c106:	2300      	movs	r3, #0
 800c108:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800c10c:	4297      	cmp	r7, r2
 800c10e:	442b      	add	r3, r5
 800c110:	d1fa      	bne.n	800c108 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800c112:	fb93 f5fc 	sdiv	r5, r3, ip
 800c116:	2400      	movs	r4, #0
 800c118:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800c11c:	1b5b      	subs	r3, r3, r5
 800c11e:	42b2      	cmp	r2, r6
 800c120:	fb03 4403 	mla	r4, r3, r3, r4
 800c124:	d1f8      	bne.n	800c118 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800c126:	fb94 f4fc 	sdiv	r4, r4, ip
 800c12a:	fb05 fc05 	mul.w	ip, r5, r5
 800c12e:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800c132:	8b43      	ldrh	r3, [r0, #26]
 800c134:	7887      	ldrb	r7, [r0, #2]
 800c136:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 800c13a:	fb0c fc02 	mul.w	ip, ip, r2
 800c13e:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800c142:	fb05 f303 	mul.w	r3, r5, r3
 800c146:	45a4      	cmp	ip, r4
 800c148:	69c2      	ldr	r2, [r0, #28]
 800c14a:	bfd4      	ite	le
 800c14c:	2500      	movle	r5, #0
 800c14e:	2501      	movgt	r5, #1
 800c150:	fb03 f307 	mul.w	r3, r3, r7
 800c154:	fb93 f3f2 	sdiv	r3, r3, r2
 800c158:	7842      	ldrb	r2, [r0, #1]
 800c15a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c15e:	b21a      	sxth	r2, r3
 800c160:	800a      	strh	r2, [r1, #0]
 800c162:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 800c166:	8182      	strh	r2, [r0, #12]
 800c168:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 800c16c:	b99e      	cbnz	r6, 800c196 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 800c16e:	b355      	cbz	r5, 800c1c6 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800c170:	45a4      	cmp	ip, r4
 800c172:	dc25      	bgt.n	800c1c0 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 800c174:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800c178:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800c17c:	3301      	adds	r3, #1
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	429a      	cmp	r2, r3
 800c182:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800c186:	d81e      	bhi.n	800c1c6 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800c188:	2300      	movs	r3, #0
 800c18a:	78c2      	ldrb	r2, [r0, #3]
 800c18c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800c190:	7002      	strb	r2, [r0, #0]
 800c192:	4618      	mov	r0, r3
 800c194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c196:	2b00      	cmp	r3, #0
 800c198:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 800c19c:	bfb8      	it	lt
 800c19e:	425b      	neglt	r3, r3
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	dc14      	bgt.n	800c1ce <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	4616      	mov	r6, r2
 800c1aa:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 800c1ae:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 800c1b2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c1b6:	b135      	cbz	r5, 800c1c6 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800c1b8:	45a4      	cmp	ip, r4
 800c1ba:	dddb      	ble.n	800c174 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	d0d9      	beq.n	800c174 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800c1c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c1ca:	f7fe bce5 	b.w	800ab98 <SPD_IsMecSpeedReliable>
 800c1ce:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 800c1d2:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800c1d6:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800c1da:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 800c1de:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800c1e2:	fb93 f3fe 	sdiv	r3, r3, lr
 800c1e6:	fb03 f202 	mul.w	r2, r3, r2
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	bfb8      	it	lt
 800c1ee:	323f      	addlt	r2, #63	; 0x3f
 800c1f0:	1192      	asrs	r2, r2, #6
 800c1f2:	fb02 f303 	mul.w	r3, r2, r3
 800c1f6:	fb07 f707 	mul.w	r7, r7, r7
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	fb06 7606 	mla	r6, r6, r6, r7
 800c200:	461a      	mov	r2, r3
 800c202:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800c206:	bfb8      	it	lt
 800c208:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 800c20c:	1192      	asrs	r2, r2, #6
 800c20e:	fb07 3212 	mls	r2, r7, r2, r3
 800c212:	4296      	cmp	r6, r2
 800c214:	bfd4      	ite	le
 800c216:	2200      	movle	r2, #0
 800c218:	2201      	movgt	r2, #1
 800c21a:	e7c6      	b.n	800c1aa <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 800c21c:	4664      	mov	r4, ip
 800c21e:	4665      	mov	r5, ip
 800c220:	e785      	b.n	800c12e <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800c222:	bf00      	nop

0800c224 <STO_PLL_CalcAvrgElSpeedDpp>:
 800c224:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 800c228:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 800c22c:	b470      	push	{r4, r5, r6}
 800c22e:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800c232:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800c236:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800c23a:	b2a6      	uxth	r6, r4
 800c23c:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 800c240:	1af3      	subs	r3, r6, r3
 800c242:	b29b      	uxth	r3, r3
 800c244:	442a      	add	r2, r5
 800c246:	b19b      	cbz	r3, 800c270 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800c248:	440b      	add	r3, r1
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	b219      	sxth	r1, r3
 800c24e:	428c      	cmp	r4, r1
 800c250:	bfdc      	itt	le
 800c252:	1b9b      	suble	r3, r3, r6
 800c254:	b219      	sxthle	r1, r3
 800c256:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800c25a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800c264:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800c268:	4113      	asrs	r3, r2
 800c26a:	81c3      	strh	r3, [r0, #14]
 800c26c:	bc70      	pop	{r4, r5, r6}
 800c26e:	4770      	bx	lr
 800c270:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	e7f3      	b.n	800c260 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

0800c278 <STO_PLL_Clear>:
 800c278:	b510      	push	{r4, lr}
 800c27a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800c27e:	2100      	movs	r1, #0
 800c280:	4604      	mov	r4, r0
 800c282:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 800c286:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 800c28a:	8081      	strh	r1, [r0, #4]
 800c28c:	81c1      	strh	r1, [r0, #14]
 800c28e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 800c292:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800c296:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800c29a:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800c29e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800c2a2:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800c2a6:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800c2aa:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800c2ae:	b132      	cbz	r2, 800c2be <STO_PLL_Clear+0x46>
 800c2b0:	3a01      	subs	r2, #1
 800c2b2:	b2d2      	uxtb	r2, r2
 800c2b4:	3201      	adds	r2, #1
 800c2b6:	0052      	lsls	r2, r2, #1
 800c2b8:	3074      	adds	r0, #116	; 0x74
 800c2ba:	f000 f929 	bl	800c510 <memset>
 800c2be:	2100      	movs	r1, #0
 800c2c0:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 800c2c4:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800c2c8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d0:	f7fd bda5 	b.w	8009e1e <PID_SetIntegralTerm>

0800c2d4 <STO_PLL_Init>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 800c2dc:	4b18      	ldr	r3, [pc, #96]	; (800c340 <STO_PLL_Init+0x6c>)
 800c2de:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800c2e2:	fb93 f3f5 	sdiv	r3, r3, r5
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800c2f0:	8662      	strh	r2, [r4, #50]	; 0x32
 800c2f2:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800c2f6:	b303      	cbz	r3, 800c33a <STO_PLL_Init+0x66>
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	e000      	b.n	800c2fe <STO_PLL_Init+0x2a>
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800c302:	1c4a      	adds	r2, r1, #1
 800c304:	105b      	asrs	r3, r3, #1
 800c306:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800c30a:	b292      	uxth	r2, r2
 800c30c:	d1f6      	bne.n	800c2fc <STO_PLL_Init+0x28>
 800c30e:	b200      	sxth	r0, r0
 800c310:	fb05 f200 	mul.w	r2, r5, r0
 800c314:	8661      	strh	r1, [r4, #50]	; 0x32
 800c316:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <STO_PLL_Init+0x70>)
 800c318:	8620      	strh	r0, [r4, #48]	; 0x30
 800c31a:	fb83 1302 	smull	r1, r3, r3, r2
 800c31e:	17d2      	asrs	r2, r2, #31
 800c320:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800c324:	8562      	strh	r2, [r4, #42]	; 0x2a
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff ffa6 	bl	800c278 <STO_PLL_Clear>
 800c32c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c330:	f7fd fd1e 	bl	8009d70 <PID_HandleInit>
 800c334:	2300      	movs	r3, #0
 800c336:	8263      	strh	r3, [r4, #18]
 800c338:	bd38      	pop	{r3, r4, r5, pc}
 800c33a:	462a      	mov	r2, r5
 800c33c:	4608      	mov	r0, r1
 800c33e:	e7ea      	b.n	800c316 <STO_PLL_Init+0x42>
 800c340:	000fea5e 	.word	0x000fea5e
 800c344:	06488dc5 	.word	0x06488dc5

0800c348 <STO_PLL_IsObserverConverged>:
 800c348:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800c34c:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 800c350:	4603      	mov	r3, r0
 800c352:	b10a      	cbz	r2, 800c358 <STO_PLL_IsObserverConverged+0x10>
 800c354:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800c358:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d143      	bne.n	800c3e8 <STO_PLL_IsObserverConverged+0xa0>
 800c360:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c364:	b430      	push	{r4, r5}
 800c366:	fb02 f501 	mul.w	r5, r2, r1
 800c36a:	2d00      	cmp	r5, #0
 800c36c:	460c      	mov	r4, r1
 800c36e:	dd34      	ble.n	800c3da <STO_PLL_IsObserverConverged+0x92>
 800c370:	2a00      	cmp	r2, #0
 800c372:	bfbc      	itt	lt
 800c374:	4252      	neglt	r2, r2
 800c376:	b212      	sxthlt	r2, r2
 800c378:	2900      	cmp	r1, #0
 800c37a:	bfbc      	itt	lt
 800c37c:	4249      	neglt	r1, r1
 800c37e:	b20c      	sxthlt	r4, r1
 800c380:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800c384:	b359      	cbz	r1, 800c3de <STO_PLL_IsObserverConverged+0x96>
 800c386:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800c38a:	b291      	uxth	r1, r2
 800c38c:	428d      	cmp	r5, r1
 800c38e:	d226      	bcs.n	800c3de <STO_PLL_IsObserverConverged+0x96>
 800c390:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800c394:	fb04 f101 	mul.w	r1, r4, r1
 800c398:	2900      	cmp	r1, #0
 800c39a:	bfb8      	it	lt
 800c39c:	310f      	addlt	r1, #15
 800c39e:	f341 110f 	sbfx	r1, r1, #4, #16
 800c3a2:	428a      	cmp	r2, r1
 800c3a4:	db1b      	blt.n	800c3de <STO_PLL_IsObserverConverged+0x96>
 800c3a6:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800c3aa:	fb04 f101 	mul.w	r1, r4, r1
 800c3ae:	2900      	cmp	r1, #0
 800c3b0:	bfb8      	it	lt
 800c3b2:	310f      	addlt	r1, #15
 800c3b4:	f341 110f 	sbfx	r1, r1, #4, #16
 800c3b8:	428a      	cmp	r2, r1
 800c3ba:	dc10      	bgt.n	800c3de <STO_PLL_IsObserverConverged+0x96>
 800c3bc:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800c3c0:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800c3c4:	3201      	adds	r2, #1
 800c3c6:	b2d2      	uxtb	r2, r2
 800c3c8:	4291      	cmp	r1, r2
 800c3ca:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c3ce:	d804      	bhi.n	800c3da <STO_PLL_IsObserverConverged+0x92>
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	bc30      	pop	{r4, r5}
 800c3dc:	4770      	bx	lr
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c3e4:	bc30      	pop	{r4, r5}
 800c3e6:	4770      	bx	lr
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	4770      	bx	lr

0800c3f4 <STO_PLL_GetEstimatedBemf>:
 800c3f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	f362 000f 	bfi	r0, r2, #0, #16
 800c3fe:	0c1b      	lsrs	r3, r3, #16
 800c400:	b082      	sub	sp, #8
 800c402:	f363 401f 	bfi	r0, r3, #16, #16
 800c406:	b002      	add	sp, #8
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop

0800c40c <STO_PLL_GetEstimatedCurrent>:
 800c40c:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 800c410:	b410      	push	{r4}
 800c412:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800c416:	4122      	asrs	r2, r4
 800c418:	b292      	uxth	r2, r2
 800c41a:	4123      	asrs	r3, r4
 800c41c:	2100      	movs	r1, #0
 800c41e:	b29b      	uxth	r3, r3
 800c420:	f362 010f 	bfi	r1, r2, #0, #16
 800c424:	f363 411f 	bfi	r1, r3, #16, #16
 800c428:	b083      	sub	sp, #12
 800c42a:	4608      	mov	r0, r1
 800c42c:	b003      	add	sp, #12
 800c42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <STO_PLL_GetObserverGains>:
 800c434:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800c438:	800b      	strh	r3, [r1, #0]
 800c43a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800c43e:	8013      	strh	r3, [r2, #0]
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop

0800c444 <STO_PLL_SetObserverGains>:
 800c444:	8441      	strh	r1, [r0, #34]	; 0x22
 800c446:	84c2      	strh	r2, [r0, #38]	; 0x26
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop

0800c44c <STO_GetPLLGains>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800c452:	4620      	mov	r0, r4
 800c454:	460e      	mov	r6, r1
 800c456:	4615      	mov	r5, r2
 800c458:	f7fd fcc7 	bl	8009dea <PID_GetKP>
 800c45c:	8030      	strh	r0, [r6, #0]
 800c45e:	4620      	mov	r0, r4
 800c460:	f7fd fcd0 	bl	8009e04 <PID_GetKI>
 800c464:	8028      	strh	r0, [r5, #0]
 800c466:	bd70      	pop	{r4, r5, r6, pc}

0800c468 <STO_SetPLLGains>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800c46e:	4615      	mov	r5, r2
 800c470:	4620      	mov	r0, r4
 800c472:	f7fd fc9c 	bl	8009dae <PID_SetKP>
 800c476:	4629      	mov	r1, r5
 800c478:	4620      	mov	r0, r4
 800c47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c47e:	f7fd bca5 	b.w	8009dcc <PID_SetKI>
 800c482:	bf00      	nop

0800c484 <STO_OTF_ResetPLL>:
 800c484:	6800      	ldr	r0, [r0, #0]
 800c486:	2100      	movs	r1, #0
 800c488:	3034      	adds	r0, #52	; 0x34
 800c48a:	f7fd bcc8 	b.w	8009e1e <PID_SetIntegralTerm>
 800c48e:	bf00      	nop

0800c490 <STO_ResetPLL>:
 800c490:	3034      	adds	r0, #52	; 0x34
 800c492:	2100      	movs	r1, #0
 800c494:	f7fd bcc3 	b.w	8009e1e <PID_SetIntegralTerm>

0800c498 <STO_PLL_GetEstimatedBemfLevel>:
 800c498:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop

0800c4a0 <STO_PLL_GetObservedBemfLevel>:
 800c4a0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop

0800c4a8 <STO_PLL_IsVarianceTight>:
 800c4a8:	6803      	ldr	r3, [r0, #0]
 800c4aa:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800c4ae:	4770      	bx	lr

0800c4b0 <STO_PLL_ForceConvergency1>:
 800c4b0:	6803      	ldr	r3, [r0, #0]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop

0800c4bc <STO_PLL_ForceConvergency2>:
 800c4bc:	6803      	ldr	r3, [r0, #0]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop

0800c4c8 <__libc_init_array>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	4e0d      	ldr	r6, [pc, #52]	; (800c500 <__libc_init_array+0x38>)
 800c4cc:	4c0d      	ldr	r4, [pc, #52]	; (800c504 <__libc_init_array+0x3c>)
 800c4ce:	1ba4      	subs	r4, r4, r6
 800c4d0:	10a4      	asrs	r4, r4, #2
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	42a5      	cmp	r5, r4
 800c4d6:	d109      	bne.n	800c4ec <__libc_init_array+0x24>
 800c4d8:	4e0b      	ldr	r6, [pc, #44]	; (800c508 <__libc_init_array+0x40>)
 800c4da:	4c0c      	ldr	r4, [pc, #48]	; (800c50c <__libc_init_array+0x44>)
 800c4dc:	f000 f820 	bl	800c520 <_init>
 800c4e0:	1ba4      	subs	r4, r4, r6
 800c4e2:	10a4      	asrs	r4, r4, #2
 800c4e4:	2500      	movs	r5, #0
 800c4e6:	42a5      	cmp	r5, r4
 800c4e8:	d105      	bne.n	800c4f6 <__libc_init_array+0x2e>
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4f0:	4798      	blx	r3
 800c4f2:	3501      	adds	r5, #1
 800c4f4:	e7ee      	b.n	800c4d4 <__libc_init_array+0xc>
 800c4f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4fa:	4798      	blx	r3
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	e7f2      	b.n	800c4e6 <__libc_init_array+0x1e>
 800c500:	0800c7d0 	.word	0x0800c7d0
 800c504:	0800c7d0 	.word	0x0800c7d0
 800c508:	0800c7d0 	.word	0x0800c7d0
 800c50c:	0800c7d4 	.word	0x0800c7d4

0800c510 <memset>:
 800c510:	4402      	add	r2, r0
 800c512:	4603      	mov	r3, r0
 800c514:	4293      	cmp	r3, r2
 800c516:	d100      	bne.n	800c51a <memset+0xa>
 800c518:	4770      	bx	lr
 800c51a:	f803 1b01 	strb.w	r1, [r3], #1
 800c51e:	e7f9      	b.n	800c514 <memset+0x4>

0800c520 <_init>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr

0800c52c <_fini>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	bf00      	nop
 800c530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c532:	bc08      	pop	{r3}
 800c534:	469e      	mov	lr, r3
 800c536:	4770      	bx	lr
