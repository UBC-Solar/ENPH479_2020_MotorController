
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  0002076c  2**0
                  CONTENTS
  4 .ARM          00000008  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  0002076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000076c  20000000  080078a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000076c  0800800c  0002076c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  0800800c  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00022763  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00045985  00000000  00000000  00042eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006a2d  00000000  00000000  00088884  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015e8  00000000  00000000  0008f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f1c48  00000000  00000000  000908a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002aa0  00000000  00000000  001824e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000155e7  00000000  00000000  00184f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002beed  00000000  00000000  0019a56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fa  00000000  00000000  001c645c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000426c  00000000  00000000  001c6558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000076c 	.word	0x2000076c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075cc 	.word	0x080075cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000770 	.word	0x20000770
 800020c:	080075cc 	.word	0x080075cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr  r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ea:	f002 fe01 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f006 fbbb 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f000 f893 	bl	800071c <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005fc:	080078a0 	.word	0x080078a0
  ldr  r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000604:	2000076c 	.word	0x2000076c
  ldr  r2, =_sbss
 8000608:	2000076c 	.word	0x2000076c
  ldr  r3, = _ebss
 800060c:	20000b14 	.word	0x20000b14

08000610 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <BusFault_Handler>
	...

08000614 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000614:	4a02      	ldr	r2, [pc, #8]	; (8000620 <DAC_Init+0xc>)
 8000616:	6813      	ldr	r3, [r2, #0]
 8000618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061c:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel2 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);
}
 800061e:	4770      	bx	lr
 8000620:	40007400 	.word	0x40007400

08000624 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000624:	b510      	push	{r4, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000626:	2200      	movs	r2, #0
 8000628:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 800062c:	f002 fab4 	bl	8002b98 <UI_GetReg>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000630:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8000634:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8000638:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800063c:	fab3 f383 	clz	r3, r3
 8000640:	40da      	lsrs	r2, r3
 8000642:	4c09      	ldr	r4, [pc, #36]	; (8000668 <DAC_Exec+0x44>)
  SET_BIT(DACx->SWTRIGR,
 8000644:	4909      	ldr	r1, [pc, #36]	; (800066c <DAC_Exec+0x48>)
  
  MODIFY_REG(*preg,
 8000646:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800064a:	b200      	sxth	r0, r0
 800064c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000654:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8000658:	4318      	orrs	r0, r3
 800065a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800065e:	684b      	ldr	r3, [r1, #4]
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	604b      	str	r3, [r1, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 8000666:	bd10      	pop	{r4, pc}
 8000668:	40007408 	.word	0x40007408
 800066c:	40007400 	.word	0x40007400

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2300      	movs	r3, #0
{
 8000674:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800067a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000682:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4923      	ldr	r1, [pc, #140]	; (8000714 <SystemClock_Config+0xa4>)
 8000688:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000694:	6408      	str	r0, [r1, #64]	; 0x40
 8000696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000698:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800069c:	9100      	str	r1, [sp, #0]
 800069e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	6813      	ldr	r3, [r2, #0]
 80006a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	6813      	ldr	r3, [r2, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b6:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006be:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c4:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	9d01      	ldr	r5, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f003 fc0a 	bl	8003ef0 <HAL_RCC_OscConfig>
 80006dc:	b108      	cbz	r0, 80006e2 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 80006de:	b672      	cpsid	i
 80006e0:	e7fe      	b.n	80006e0 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e2:	f003 faab 	bl	8003c3c <HAL_PWREx_EnableOverDrive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b108      	cbz	r0, 80006ee <SystemClock_Config+0x7e>
 80006ea:	b672      	cpsid	i
 80006ec:	e7fe      	b.n	80006ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f8:	a802      	add	r0, sp, #8
 80006fa:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f003 fad7 	bl	8003cb8 <HAL_RCC_ClockConfig>
 800070a:	b108      	cbz	r0, 8000710 <SystemClock_Config+0xa0>
 800070c:	b672      	cpsid	i
 800070e:	e7fe      	b.n	800070e <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 8000710:	b014      	add	sp, #80	; 0x50
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <main>:
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	b09d      	sub	sp, #116	; 0x74
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	f04f 0800 	mov.w	r8, #0
  HAL_Init();
 8000726:	f002 fd95 	bl	8003254 <HAL_Init>
  SystemClock_Config();
 800072a:	f7ff ffa1 	bl	8000670 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4ba5      	ldr	r3, [pc, #660]	; (80009c4 <main+0x2a8>)
 8000730:	f8cd 8008 	str.w	r8, [sp, #8]
 8000734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000736:	4ca4      	ldr	r4, [pc, #656]	; (80009c8 <main+0x2ac>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 80009e8 <main+0x2cc>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000740:	631a      	str	r2, [r3, #48]	; 0x30
 8000742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000744:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000748:	9202      	str	r2, [sp, #8]
 800074a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	631a      	str	r2, [r3, #48]	; 0x30
 8000758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800075a:	f002 0201 	and.w	r2, r2, #1
 800075e:	9203      	str	r2, [sp, #12]
 8000760:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	f8cd 8010 	str.w	r8, [sp, #16]
 8000766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000768:	f042 0204 	orr.w	r2, r2, #4
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
 800076e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000770:	f002 0204 	and.w	r2, r2, #4
 8000774:	9204      	str	r2, [sp, #16]
 8000776:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	f8cd 8014 	str.w	r8, [sp, #20]
 800077c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077e:	f042 0202 	orr.w	r2, r2, #2
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000786:	2620      	movs	r6, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	9305      	str	r3, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800078e:	4641      	mov	r1, r8
 8000790:	a814      	add	r0, sp, #80	; 0x50
 8000792:	4632      	mov	r2, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	9b05      	ldr	r3, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000796:	f006 fb0b 	bl	8006db0 <memset>
  hadc1.Instance = ADC1;
 800079a:	4b8c      	ldr	r3, [pc, #560]	; (80009cc <main+0x2b0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800079c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hadc1.Init.ScanConvMode = ENABLE;
 80007a0:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007a6:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ac:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
 80007b0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b8:	f884 8018 	strb.w	r8, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007bc:	f884 8020 	strb.w	r8, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c8:	e9c4 3b00 	strd	r3, fp, [r4]
  hadc1.Init.ScanConvMode = ENABLE;
 80007cc:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 80007ce:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d0:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d2:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007d6:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d8:	f002 fd68 	bl	80032ac <HAL_ADC_Init>
 80007dc:	b108      	cbz	r0, 80007e2 <main+0xc6>
 80007de:	b672      	cpsid	i
 80007e0:	e7fe      	b.n	80007e0 <main+0xc4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007e2:	2201      	movs	r2, #1
 80007e4:	2301      	movs	r3, #1
 80007e6:	4684      	mov	ip, r0
 80007e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80007ec:	f04f 0800 	mov.w	r8, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80007f4:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007f8:	a914      	add	r1, sp, #80	; 0x50
 80007fa:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007fc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000800:	9518      	str	r5, [sp, #96]	; 0x60
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000802:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000806:	f88d c064 	strb.w	ip, [sp, #100]	; 0x64
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800080a:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800080e:	f002 ff8b 	bl	8003728 <HAL_ADCEx_InjectedConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	b108      	cbz	r0, 800081a <main+0xfe>
 8000816:	b672      	cpsid	i
 8000818:	e7fe      	b.n	8000818 <main+0xfc>
  sConfig.Channel = ADC_CHANNEL_15;
 800081a:	220f      	movs	r2, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	4620      	mov	r0, r4
 800081e:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_15;
 8000824:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	f002 fec7 	bl	80035b8 <HAL_ADC_ConfigChannel>
 800082a:	b108      	cbz	r0, 8000830 <main+0x114>
 800082c:	b672      	cpsid	i
 800082e:	e7fe      	b.n	800082e <main+0x112>
  hadc2.Instance = ADC2;
 8000830:	4c67      	ldr	r4, [pc, #412]	; (80009d0 <main+0x2b4>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000832:	9001      	str	r0, [sp, #4]
 8000834:	4601      	mov	r1, r0
 8000836:	4632      	mov	r2, r6
 8000838:	a814      	add	r0, sp, #80	; 0x50
 800083a:	f006 fab9 	bl	8006db0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	9b01      	ldr	r3, [sp, #4]
  hadc2.Instance = ADC2;
 8000840:	4a64      	ldr	r2, [pc, #400]	; (80009d4 <main+0x2b8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000844:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800084a:	9310      	str	r3, [sp, #64]	; 0x40
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800084c:	e9c4 b301 	strd	fp, r3, [r4, #4]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000850:	7623      	strb	r3, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000852:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	e9c4 a30a 	strd	sl, r3, [r4, #40]	; 0x28
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800085a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.ScanConvMode = ENABLE;
 800085e:	6125      	str	r5, [r4, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000860:	60e7      	str	r7, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000862:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	6165      	str	r5, [r4, #20]
  hadc2.Instance = ADC2;
 8000866:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000868:	f002 fd20 	bl	80032ac <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	b108      	cbz	r0, 8000874 <main+0x158>
 8000870:	b672      	cpsid	i
 8000872:	e7fe      	b.n	8000872 <main+0x156>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000874:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000878:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800087c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000880:	2204      	movs	r2, #4
 8000882:	2301      	movs	r3, #1
 8000884:	2701      	movs	r7, #1
 8000886:	f04f 0800 	mov.w	r8, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800088a:	a914      	add	r1, sp, #80	; 0x50
 800088c:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 1;
 800088e:	9518      	str	r5, [sp, #96]	; 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000890:	e9cd 7816 	strd	r7, r8, [sp, #88]	; 0x58
 8000894:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000898:	f002 ff46 	bl	8003728 <HAL_ADCEx_InjectedConfigChannel>
 800089c:	b108      	cbz	r0, 80008a2 <main+0x186>
 800089e:	b672      	cpsid	i
 80008a0:	e7fe      	b.n	80008a0 <main+0x184>
  sConfig.Channel = ADC_CHANNEL_4;
 80008a2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a4:	4620      	mov	r0, r4
 80008a6:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008a8:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 80008ac:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ae:	f002 fe83 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80008b2:	b108      	cbz	r0, 80008b8 <main+0x19c>
 80008b4:	b672      	cpsid	i
 80008b6:	e7fe      	b.n	80008b6 <main+0x19a>
  hdac.Instance = DAC;
 80008b8:	4c47      	ldr	r4, [pc, #284]	; (80009d8 <main+0x2bc>)
 80008ba:	4b48      	ldr	r3, [pc, #288]	; (80009dc <main+0x2c0>)
 80008bc:	6023      	str	r3, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 80008be:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008c2:	4620      	mov	r0, r4
 80008c4:	f003 f88a 	bl	80039dc <HAL_DAC_Init>
 80008c8:	b108      	cbz	r0, 80008ce <main+0x1b2>
 80008ca:	b672      	cpsid	i
 80008cc:	e7fe      	b.n	80008cc <main+0x1b0>
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008ce:	213c      	movs	r1, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008d0:	4620      	mov	r0, r4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008d2:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008d4:	9114      	str	r1, [sp, #80]	; 0x50
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008d6:	2210      	movs	r2, #16
 80008d8:	a914      	add	r1, sp, #80	; 0x50
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008da:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008dc:	f003 f894 	bl	8003a08 <HAL_DAC_ConfigChannel>
 80008e0:	4604      	mov	r4, r0
 80008e2:	b108      	cbz	r0, 80008e8 <main+0x1cc>
 80008e4:	b672      	cpsid	i
 80008e6:	e7fe      	b.n	80008e6 <main+0x1ca>
  htim1.Instance = TIM1;
 80008e8:	4f3d      	ldr	r7, [pc, #244]	; (80009e0 <main+0x2c4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ea:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ec:	4601      	mov	r1, r0
 80008ee:	4632      	mov	r2, r6
 80008f0:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f2:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80008f8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80008fc:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000900:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000902:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000906:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800090c:	f006 fa50 	bl	8006db0 <memset>
  htim1.Instance = TIM1;
 8000910:	4934      	ldr	r1, [pc, #208]	; (80009e4 <main+0x2c8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000912:	607c      	str	r4, [r7, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000914:	f241 1294 	movw	r2, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800091c:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800091e:	60be      	str	r6, [r7, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	e9c7 5405 	strd	r5, r4, [r7, #20]
  htim1.Instance = TIM1;
 8000924:	6039      	str	r1, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000926:	e9c7 2303 	strd	r2, r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800092a:	f003 fcb5 	bl	8004298 <HAL_TIM_Base_Init>
 800092e:	b108      	cbz	r0, 8000934 <main+0x218>
 8000930:	b672      	cpsid	i
 8000932:	e7fe      	b.n	8000932 <main+0x216>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000934:	4638      	mov	r0, r7
 8000936:	f003 fd35 	bl	80043a4 <HAL_TIM_PWM_Init>
 800093a:	b108      	cbz	r0, 8000940 <main+0x224>
 800093c:	b672      	cpsid	i
 800093e:	e7fe      	b.n	800093e <main+0x222>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000940:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000942:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000944:	a908      	add	r1, sp, #32
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <main+0x2c4>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000948:	9208      	str	r2, [sp, #32]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800094a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800094c:	f003 ff5e 	bl	800480c <HAL_TIM_SlaveConfigSynchro>
 8000950:	b108      	cbz	r0, 8000956 <main+0x23a>
 8000952:	b672      	cpsid	i
 8000954:	e7fe      	b.n	8000954 <main+0x238>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000956:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095a:	a906      	add	r1, sp, #24
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <main+0x2c4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800095e:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000960:	f004 f90a 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	b108      	cbz	r0, 800096a <main+0x24e>
 8000966:	b672      	cpsid	i
 8000968:	e7fe      	b.n	8000968 <main+0x24c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096a:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000976:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097a:	a90d      	add	r1, sp, #52	; 0x34
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <main+0x2c4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000980:	f003 fd94 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8000984:	b108      	cbz	r0, 800098a <main+0x26e>
 8000986:	b672      	cpsid	i
 8000988:	e7fe      	b.n	8000988 <main+0x26c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098a:	2204      	movs	r2, #4
 800098c:	a90d      	add	r1, sp, #52	; 0x34
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <main+0x2c4>)
 8000990:	f003 fd8c 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8000994:	b108      	cbz	r0, 800099a <main+0x27e>
 8000996:	b672      	cpsid	i
 8000998:	e7fe      	b.n	8000998 <main+0x27c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800099a:	2208      	movs	r2, #8
 800099c:	a90d      	add	r1, sp, #52	; 0x34
 800099e:	4810      	ldr	r0, [pc, #64]	; (80009e0 <main+0x2c4>)
 80009a0:	f003 fd84 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 80009a4:	b108      	cbz	r0, 80009aa <main+0x28e>
 80009a6:	b672      	cpsid	i
 80009a8:	e7fe      	b.n	80009a8 <main+0x28c>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009aa:	2070      	movs	r0, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009ac:	f241 1393 	movw	r3, #4499	; 0x1193
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009b0:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009b2:	220c      	movs	r2, #12
 80009b4:	a90d      	add	r1, sp, #52	; 0x34
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <main+0x2c4>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009b8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ba:	f003 fd77 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 80009be:	b1a8      	cbz	r0, 80009ec <main+0x2d0>
 80009c0:	b672      	cpsid	i
 80009c2:	e7fe      	b.n	80009c2 <main+0x2a6>
 80009c4:	40023800 	.word	0x40023800
 80009c8:	200007f8 	.word	0x200007f8
 80009cc:	40012000 	.word	0x40012000
 80009d0:	200007b0 	.word	0x200007b0
 80009d4:	40012100 	.word	0x40012100
 80009d8:	20000840 	.word	0x20000840
 80009dc:	40007400 	.word	0x40007400
 80009e0:	20000854 	.word	0x20000854
 80009e4:	40010000 	.word	0x40010000
 80009e8:	0f000001 	.word	0x0f000001
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80009ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80009f4:	f44f 6400 	mov.w	r4, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f8:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80009fa:	2248      	movs	r2, #72	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80009fc:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80009fe:	9116      	str	r1, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a04:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a08:	a914      	add	r1, sp, #80	; 0x50
 8000a0a:	4852      	ldr	r0, [pc, #328]	; (8000b54 <main+0x438>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a0c:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a0e:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a10:	e9cd 6318 	strd	r6, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a14:	f004 f8f6 	bl	8004c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a18:	4604      	mov	r4, r0
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x304>
 8000a1c:	b672      	cpsid	i
 8000a1e:	e7fe      	b.n	8000a1e <main+0x302>
  htim2.Instance = TIM2;
 8000a20:	4d4d      	ldr	r5, [pc, #308]	; (8000b58 <main+0x43c>)
  HAL_TIM_MspPostInit(&htim1);
 8000a22:	484c      	ldr	r0, [pc, #304]	; (8000b54 <main+0x438>)
 8000a24:	f001 fc4c 	bl	80022c0 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a30:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000a36:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000a3a:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000a3e:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8000a4e:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000a50:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a52:	f003 fc21 	bl	8004298 <HAL_TIM_Base_Init>
 8000a56:	b108      	cbz	r0, 8000a5c <main+0x340>
 8000a58:	b672      	cpsid	i
 8000a5a:	e7fe      	b.n	8000a5a <main+0x33e>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	a90d      	add	r1, sp, #52	; 0x34
 8000a5e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a62:	f003 fe2d 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b108      	cbz	r0, 8000a6e <main+0x352>
 8000a6a:	b672      	cpsid	i
 8000a6c:	e7fe      	b.n	8000a6c <main+0x350>
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000a6e:	220c      	movs	r2, #12
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a70:	4628      	mov	r0, r5
 8000a72:	a914      	add	r1, sp, #80	; 0x50
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a74:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000a78:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a7c:	f004 f822 	bl	8004ac4 <HAL_TIMEx_HallSensor_Init>
 8000a80:	b108      	cbz	r0, 8000a86 <main+0x36a>
 8000a82:	b672      	cpsid	i
 8000a84:	e7fe      	b.n	8000a84 <main+0x368>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000a86:	2250      	movs	r2, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8a:	a908      	add	r1, sp, #32
 8000a8c:	4832      	ldr	r0, [pc, #200]	; (8000b58 <main+0x43c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a92:	f004 f871 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	b108      	cbz	r0, 8000a9c <main+0x380>
 8000a98:	b672      	cpsid	i
 8000a9a:	e7fe      	b.n	8000a9a <main+0x37e>
  huart2.Instance = USART2;
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <main+0x440>)
 8000a9e:	4c30      	ldr	r4, [pc, #192]	; (8000b60 <main+0x444>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa0:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 115200;
 8000aa2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa6:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa8:	e9c3 0003 	strd	r0, r0, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	e9c3 0006 	strd	r0, r0, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab0:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8000ab2:	e9c3 4100 	strd	r4, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab6:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab8:	f004 f8ce 	bl	8004c58 <HAL_UART_Init>
 8000abc:	4604      	mov	r4, r0
 8000abe:	b108      	cbz	r0, 8000ac4 <main+0x3a8>
 8000ac0:	b672      	cpsid	i
 8000ac2:	e7fe      	b.n	8000ac2 <main+0x3a6>
  MX_MotorControl_Init();
 8000ac4:	f001 f950 	bl	8001d68 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000ac8:	4622      	mov	r2, r4
 8000aca:	2102      	movs	r1, #2
 8000acc:	2012      	movs	r0, #18
 8000ace:	f002 ff21 	bl	8003914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ad2:	2012      	movs	r0, #18
 8000ad4:	f002 ff54 	bl	8003980 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ad8:	4622      	mov	r2, r4
 8000ada:	4621      	mov	r1, r4
 8000adc:	2019      	movs	r0, #25
 8000ade:	f002 ff19 	bl	8003914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f002 ff4c 	bl	8003980 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2104      	movs	r1, #4
 8000aec:	2018      	movs	r0, #24
 8000aee:	f002 ff11 	bl	8003914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000af2:	2018      	movs	r0, #24
 8000af4:	f002 ff44 	bl	8003980 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000af8:	4622      	mov	r2, r4
 8000afa:	2103      	movs	r1, #3
 8000afc:	201c      	movs	r0, #28
 8000afe:	f002 ff09 	bl	8003914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b02:	201c      	movs	r0, #28
 8000b04:	f002 ff3c 	bl	8003980 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	2026      	movs	r0, #38	; 0x26
 8000b0e:	f002 ff01 	bl	8003914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b12:	2026      	movs	r0, #38	; 0x26
 8000b14:	f002 ff34 	bl	8003980 <HAL_NVIC_EnableIRQ>
	  HAL_ADC_Start(&hadc1);
 8000b18:	4c12      	ldr	r4, [pc, #72]	; (8000b64 <main+0x448>)
	  sprintf(msg_debug, "%hu\r\n", pot1_raw);
 8000b1a:	4d13      	ldr	r5, [pc, #76]	; (8000b68 <main+0x44c>)
	  HAL_ADC_Start(&hadc1);
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f002 fc77 	bl	8003410 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b22:	f04f 31ff 	mov.w	r1, #4294967295
 8000b26:	4620      	mov	r0, r4
 8000b28:	f002 fcf0 	bl	800350c <HAL_ADC_PollForConversion>
	  pot1_raw = HAL_ADC_GetValue(&hadc1);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f002 fd3f 	bl	80035b0 <HAL_ADC_GetValue>
	  sprintf(msg_debug, "%hu\r\n", pot1_raw);
 8000b32:	4629      	mov	r1, r5
 8000b34:	b282      	uxth	r2, r0
 8000b36:	a814      	add	r0, sp, #80	; 0x50
 8000b38:	f006 f942 	bl	8006dc0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8000b3c:	a814      	add	r0, sp, #80	; 0x50
 8000b3e:	f7ff fb67 	bl	8000210 <strlen>
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	b282      	uxth	r2, r0
 8000b48:	a914      	add	r1, sp, #80	; 0x50
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <main+0x440>)
 8000b4c:	f004 f926 	bl	8004d9c <HAL_UART_Transmit>
 8000b50:	e7e4      	b.n	8000b1c <main+0x400>
 8000b52:	bf00      	nop
 8000b54:	20000854 	.word	0x20000854
 8000b58:	20000894 	.word	0x20000894
 8000b5c:	200008d4 	.word	0x200008d4
 8000b60:	40004400 	.word	0x40004400
 8000b64:	200007f8 	.word	0x200007f8
 8000b68:	080075e4 	.word	0x080075e4

08000b6c <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000b6c:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000b6e:	2400      	movs	r4, #0
 8000b70:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000b72:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000b76:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000b78:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000b7a:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000b7e:	6083      	str	r3, [r0, #8]
}
 8000b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000b88:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8000b8a:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000b8c:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000b8e:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b90:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000b92:	7643      	strb	r3, [r0, #25]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000b98:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000b9a:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000b9c:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b9e:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ba0:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ba2:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8000ba4:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000ba6:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000ba8:	7643      	strb	r3, [r0, #25]
}
 8000baa:	bc30      	pop	{r4, r5}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000bb0:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bb2:	2201      	movs	r2, #1
{
 8000bb4:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000bb6:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000bb8:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 8000bba:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000bbe:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bc0:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000bc2:	7643      	strb	r3, [r0, #25]
}
 8000bc4:	b003      	add	sp, #12
 8000bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000bcc:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000bce:	2103      	movs	r1, #3
{
 8000bd0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000bd2:	6800      	ldr	r0, [r0, #0]
 8000bd4:	f005 fc58 	bl	8006488 <STM_NextState>

  if ( RetVal == true )
 8000bd8:	b108      	cbz	r0, 8000bde <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000bde:	bd10      	pop	{r4, pc}

08000be0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000be0:	6800      	ldr	r0, [r0, #0]
 8000be2:	2107      	movs	r1, #7
 8000be4:	f005 bc50 	b.w	8006488 <STM_NextState>

08000be8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000be8:	6800      	ldr	r0, [r0, #0]
 8000bea:	f005 bcc3 	b.w	8006574 <STM_FaultAcknowledged>
 8000bee:	bf00      	nop

08000bf0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000bf0:	6800      	ldr	r0, [r0, #0]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	f005 bc48 	b.w	8006488 <STM_NextState>

08000bf8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000bf8:	b110      	cbz	r0, 8000c00 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000bfa:	7e03      	ldrb	r3, [r0, #24]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d000      	beq.n	8000c02 <MCI_ExecBufferedCommands+0xa>
 8000c00:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8000c02:	7b01      	ldrb	r1, [r0, #12]
 8000c04:	2902      	cmp	r1, #2
{
 8000c06:	b510      	push	{r4, lr}
 8000c08:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8000c0a:	d01f      	beq.n	8000c4c <MCI_ExecBufferedCommands+0x54>
 8000c0c:	2903      	cmp	r1, #3
 8000c0e:	d004      	beq.n	8000c1a <MCI_ExecBufferedCommands+0x22>
 8000c10:	2901      	cmp	r1, #1
 8000c12:	d00b      	beq.n	8000c2c <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000c14:	2303      	movs	r3, #3
 8000c16:	7623      	strb	r3, [r4, #24]
      }
    }
  }
}
 8000c18:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c1a:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000c1c:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8000c20:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c22:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000c26:	2302      	movs	r3, #2
 8000c28:	7623      	strb	r3, [r4, #24]
}
 8000c2a:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c2c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c36:	f005 fb67 	bl	8006308 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000c3a:	8ae2      	ldrh	r2, [r4, #22]
 8000c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c40:	6860      	ldr	r0, [r4, #4]
 8000c42:	f005 fb65 	bl	8006310 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d0e4      	beq.n	8000c14 <MCI_ExecBufferedCommands+0x1c>
 8000c4a:	e7ec      	b.n	8000c26 <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000c4c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c50:	2100      	movs	r1, #0
 8000c52:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000c56:	f005 fb57 	bl	8006308 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000c5a:	8ae2      	ldrh	r2, [r4, #22]
 8000c5c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000c60:	6860      	ldr	r0, [r4, #4]
 8000c62:	f005 fb55 	bl	8006310 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d0d4      	beq.n	8000c14 <MCI_ExecBufferedCommands+0x1c>
 8000c6a:	e7dc      	b.n	8000c26 <MCI_ExecBufferedCommands+0x2e>

08000c6c <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000c6c:	6800      	ldr	r0, [r0, #0]
 8000c6e:	f005 bc7f 	b.w	8006570 <STM_GetState>
 8000c72:	bf00      	nop

08000c74 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000c74:	7e40      	ldrb	r0, [r0, #25]
 8000c76:	4770      	bx	lr

08000c78 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000c78:	7b03      	ldrb	r3, [r0, #12]
 8000c7a:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000c7c:	bf0c      	ite	eq
 8000c7e:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000c82:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000c88:	6840      	ldr	r0, [r0, #4]
 8000c8a:	f005 bb8b 	b.w	80063a4 <STC_StopRamp>
 8000c8e:	bf00      	nop

08000c90 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000c90:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000c92:	6840      	ldr	r0, [r0, #4]
 8000c94:	f005 fb1e 	bl	80062d4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000c9c:	f005 bac4 	b.w	8006228 <SPD_GetAvrgMecSpeedUnit>

08000ca0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000ca0:	6840      	ldr	r0, [r0, #4]
 8000ca2:	f005 bb21 	b.w	80062e8 <STC_GetMecSpeedRefUnit>
 8000ca6:	bf00      	nop

08000ca8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000ca8:	6883      	ldr	r3, [r0, #8]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	b283      	uxth	r3, r0
{
 8000cae:	b082      	sub	sp, #8
}
 8000cb0:	f363 000f 	bfi	r0, r3, #0, #16
 8000cb4:	b002      	add	sp, #8
 8000cb6:	4770      	bx	lr

08000cb8 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000cb8:	6883      	ldr	r3, [r0, #8]
 8000cba:	6858      	ldr	r0, [r3, #4]
 8000cbc:	b283      	uxth	r3, r0
{
 8000cbe:	b082      	sub	sp, #8
}
 8000cc0:	f363 000f 	bfi	r0, r3, #0, #16
 8000cc4:	b002      	add	sp, #8
 8000cc6:	4770      	bx	lr

08000cc8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000cc8:	6883      	ldr	r3, [r0, #8]
 8000cca:	68d8      	ldr	r0, [r3, #12]
 8000ccc:	b283      	uxth	r3, r0
{
 8000cce:	b082      	sub	sp, #8
}
 8000cd0:	f363 000f 	bfi	r0, r3, #0, #16
 8000cd4:	b002      	add	sp, #8
 8000cd6:	4770      	bx	lr

08000cd8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000cd8:	6883      	ldr	r3, [r0, #8]
 8000cda:	6918      	ldr	r0, [r3, #16]
 8000cdc:	b283      	uxth	r3, r0
{
 8000cde:	b082      	sub	sp, #8
}
 8000ce0:	f363 000f 	bfi	r0, r3, #0, #16
 8000ce4:	b002      	add	sp, #8
 8000ce6:	4770      	bx	lr

08000ce8 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000ce8:	6883      	ldr	r3, [r0, #8]
 8000cea:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8000cee:	b283      	uxth	r3, r0
{
 8000cf0:	b082      	sub	sp, #8
}
 8000cf2:	f363 000f 	bfi	r0, r3, #0, #16
 8000cf6:	b002      	add	sp, #8
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000cfc:	6883      	ldr	r3, [r0, #8]
 8000cfe:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8000d02:	b283      	uxth	r3, r0
{
 8000d04:	b082      	sub	sp, #8
}
 8000d06:	f363 000f 	bfi	r0, r3, #0, #16
 8000d0a:	b002      	add	sp, #8
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000d10:	6883      	ldr	r3, [r0, #8]
}
 8000d12:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000d16:	4770      	bx	lr

08000d18 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000d18:	6883      	ldr	r3, [r0, #8]
 8000d1a:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000d1c:	8299      	strh	r1, [r3, #20]
}
 8000d1e:	4770      	bx	lr

08000d20 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000d20:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000d22:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000d26:	f005 fb7b 	bl	8006420 <STC_GetDefaultIqdref>
 8000d2a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000d2e:	8220      	strh	r0, [r4, #16]
 8000d30:	8263      	strh	r3, [r4, #18]
}
 8000d32:	bd10      	pop	{r4, pc}

08000d34 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d34:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000d38:	b202      	sxth	r2, r0
 8000d3a:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000d3e:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d42:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000d46:	4240      	negs	r0, r0
 8000d48:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000d4c:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000d4e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8000d52:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000d54:	da04      	bge.n	8000d60 <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000d56:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000d5a:	da0c      	bge.n	8000d76 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MCM_Clarke+0x48>)
 8000d5e:	e001      	b.n	8000d64 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8000d60:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8000d64:	b292      	uxth	r2, r2
 8000d66:	2000      	movs	r0, #0
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f362 000f 	bfi	r0, r2, #0, #16
 8000d6e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d72:	b004      	add	sp, #16
 8000d74:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000d76:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8000d78:	d1f4      	bne.n	8000d64 <MCM_Clarke+0x30>
 8000d7a:	e7ef      	b.n	8000d5c <MCM_Clarke+0x28>
 8000d7c:	ffff8001 	.word	0xffff8001

08000d80 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000d80:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000d84:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000d88:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000d8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8000d90:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000d92:	d031      	beq.n	8000df8 <MCM_Trig_Functions+0x78>
 8000d94:	d921      	bls.n	8000dda <MCM_Trig_Functions+0x5a>
 8000d96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000d9a:	d015      	beq.n	8000dc8 <MCM_Trig_Functions+0x48>
 8000d9c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000da0:	d109      	bne.n	8000db6 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000da2:	b2c0      	uxtb	r0, r0
 8000da4:	491a      	ldr	r1, [pc, #104]	; (8000e10 <MCM_Trig_Functions+0x90>)
 8000da6:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000da8:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dac:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dae:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000db0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000db4:	b212      	sxth	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000db6:	b292      	uxth	r2, r2
 8000db8:	2000      	movs	r0, #0
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f362 000f 	bfi	r0, r2, #0, #16
 8000dc0:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000dc4:	b002      	add	sp, #8
 8000dc6:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dc8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dca:	43c3      	mvns	r3, r0
 8000dcc:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dd0:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dd4:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 8000dd8:	e7ed      	b.n	8000db6 <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d1eb      	bne.n	8000db6 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dde:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000de0:	43c3      	mvns	r3, r0
 8000de2:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000de4:	490a      	ldr	r1, [pc, #40]	; (8000e10 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000de6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dea:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dee:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000df0:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000df2:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000df4:	b21b      	sxth	r3, r3
      break;
 8000df6:	e7de      	b.n	8000db6 <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000df8:	b2c0      	uxtb	r0, r0
 8000dfa:	43c3      	mvns	r3, r0
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <MCM_Trig_Functions+0x90>)
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e04:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e08:	425b      	negs	r3, r3
 8000e0a:	b21b      	sxth	r3, r3
      break;
 8000e0c:	e7d3      	b.n	8000db6 <MCM_Trig_Functions+0x36>
 8000e0e:	bf00      	nop
 8000e10:	080075ec 	.word	0x080075ec

08000e14 <MCM_Park>:
{
 8000e14:	b530      	push	{r4, r5, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	b204      	sxth	r4, r0
 8000e1a:	9001      	str	r0, [sp, #4]
 8000e1c:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e1e:	4608      	mov	r0, r1
 8000e20:	f7ff ffae 	bl	8000d80 <MCM_Trig_Functions>
 8000e24:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000e26:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e2a:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000e2c:	fb05 3310 	mls	r3, r5, r0, r3
 8000e30:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e36:	da04      	bge.n	8000e42 <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 8000e38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000e3c:	da1e      	bge.n	8000e7c <MCM_Park+0x68>
    Output.q = -32767;
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <MCM_Park+0x70>)
 8000e40:	e001      	b.n	8000e46 <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8000e42:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000e46:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000e4a:	fb04 1000 	mla	r0, r4, r0, r1
 8000e4e:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000e50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e54:	da04      	bge.n	8000e60 <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 8000e56:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000e5a:	da0c      	bge.n	8000e76 <MCM_Park+0x62>
    Output.d = -32767;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MCM_Park+0x70>)
 8000e5e:	e001      	b.n	8000e64 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8000e60:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000e64:	b292      	uxth	r2, r2
 8000e66:	2000      	movs	r0, #0
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f362 000f 	bfi	r0, r2, #0, #16
 8000e6e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000e72:	b005      	add	sp, #20
 8000e74:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000e76:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 8000e78:	d1f4      	bne.n	8000e64 <MCM_Park+0x50>
 8000e7a:	e7ef      	b.n	8000e5c <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000e7c:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8000e7e:	d1e2      	bne.n	8000e46 <MCM_Park+0x32>
 8000e80:	e7dd      	b.n	8000e3e <MCM_Park+0x2a>
 8000e82:	bf00      	nop
 8000e84:	ffff8001 	.word	0xffff8001

08000e88 <MCM_Rev_Park>:
{
 8000e88:	b530      	push	{r4, r5, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	b204      	sxth	r4, r0
 8000e8e:	1405      	asrs	r5, r0, #16
 8000e90:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e92:	4608      	mov	r0, r1
 8000e94:	f7ff ff74 	bl	8000d80 <MCM_Trig_Functions>
 8000e98:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000e9a:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e9e:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000ea0:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000ea4:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000ea8:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000eac:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000eb6:	f362 000f 	bfi	r0, r2, #0, #16
 8000eba:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ebe:	b005      	add	sp, #20
 8000ec0:	bd30      	pop	{r4, r5, pc}
 8000ec2:	bf00      	nop

08000ec4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <FOC_Clear+0x68>)
 8000ecc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ed6:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8000eda:	509c      	str	r4, [r3, r2]
{
 8000edc:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ede:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ee2:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8000ee4:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ee6:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8000eea:	50b4      	str	r4, [r6, r2]
 8000eec:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ef0:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ef2:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ef4:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ef6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000efa:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000efc:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8000efe:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000f00:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f02:	f004 ff03 	bl	8005d0c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <FOC_Clear+0x70>)
 8000f08:	4621      	mov	r1, r4
 8000f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f0e:	f004 fefd 	bl	8005d0c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <FOC_Clear+0x74>)
 8000f14:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f18:	f005 f9de 	bl	80062d8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <FOC_Clear+0x78>)
 8000f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000f26:	f005 b8d9 	b.w	80060dc <PWMC_SwitchOffPWM>
 8000f2a:	bf00      	nop
 8000f2c:	20000944 	.word	0x20000944
 8000f30:	20000938 	.word	0x20000938
 8000f34:	200009f4 	.word	0x200009f4
 8000f38:	200009f8 	.word	0x200009f8
 8000f3c:	20000930 	.word	0x20000930

08000f40 <MCboot>:
{
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8000f44:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8001118 <MCboot+0x1d8>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f48:	4c5c      	ldr	r4, [pc, #368]	; (80010bc <MCboot+0x17c>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000f4a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800111c <MCboot+0x1dc>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000f4e:	4d5c      	ldr	r5, [pc, #368]	; (80010c0 <MCboot+0x180>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000f50:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8001120 <MCboot+0x1e0>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000f54:	4f5b      	ldr	r7, [pc, #364]	; (80010c4 <MCboot+0x184>)
  NTC_Init(&TempSensorParamsM1);
 8000f56:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8001124 <MCboot+0x1e4>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000f5a:	4e5b      	ldr	r6, [pc, #364]	; (80010c8 <MCboot+0x188>)
{
 8000f5c:	b087      	sub	sp, #28
 8000f5e:	9002      	str	r0, [sp, #8]
  STM_Init(&STM[M1]);
 8000f60:	4658      	mov	r0, fp
{
 8000f62:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000f64:	f005 fa70 	bl	8006448 <STM_Init>
  bMCBootCompleted = 0;
 8000f68:	4958      	ldr	r1, [pc, #352]	; (80010cc <MCboot+0x18c>)
  pCLM[M1] = &CircleLimitationM1;
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f6c:	4859      	ldr	r0, [pc, #356]	; (80010d4 <MCboot+0x194>)
  pCLM[M1] = &CircleLimitationM1;
 8000f6e:	4a5a      	ldr	r2, [pc, #360]	; (80010d8 <MCboot+0x198>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f70:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 8000f72:	2400      	movs	r4, #0
 8000f74:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000f76:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8000f78:	f004 fc70 	bl	800585c <ICS_Init>
  startTimers();
 8000f7c:	f004 ff4c 	bl	8005e18 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000f80:	4640      	mov	r0, r8
 8000f82:	f004 feaf 	bl	8005ce4 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000f86:	4b55      	ldr	r3, [pc, #340]	; (80010dc <MCboot+0x19c>)
  HALL_Init (&HALL_M1);
 8000f88:	4855      	ldr	r0, [pc, #340]	; (80010e0 <MCboot+0x1a0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000f8a:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000f8c:	f8ca 8000 	str.w	r8, [sl]
  HALL_Init (&HALL_M1);
 8000f90:	f004 f80a 	bl	8004fa8 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000f94:	f8da 1000 	ldr.w	r1, [sl]
 8000f98:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <MCboot+0x1a0>)
 8000f9a:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000f9c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8001128 <MCboot+0x1e8>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000fa0:	f005 f984 	bl	80062ac <STC_Init>
  STO_PLL_Init (&STO_PLL_M1);
 8000fa4:	484f      	ldr	r0, [pc, #316]	; (80010e4 <MCboot+0x1a4>)
 8000fa6:	f005 fe4f 	bl	8006c48 <STO_PLL_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000faa:	484f      	ldr	r0, [pc, #316]	; (80010e8 <MCboot+0x1a8>)
 8000fac:	f004 fe9a 	bl	8005ce4 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000fb0:	484e      	ldr	r0, [pc, #312]	; (80010ec <MCboot+0x1ac>)
 8000fb2:	f004 fe97 	bl	8005ce4 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000fb6:	4a4e      	ldr	r2, [pc, #312]	; (80010f0 <MCboot+0x1b0>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <MCboot+0x1b4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000fba:	484b      	ldr	r0, [pc, #300]	; (80010e8 <MCboot+0x1a8>)
 8000fbc:	6010      	str	r0, [r2, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <MCboot+0x1b8>)
 8000fc0:	494a      	ldr	r1, [pc, #296]	; (80010ec <MCboot+0x1ac>)
 8000fc2:	6011      	str	r1, [r2, #0]
  RVBS_Init(pBusSensorM1);
 8000fc4:	4618      	mov	r0, r3
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000fc6:	603b      	str	r3, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8000fc8:	f005 f8d4 	bl	8006174 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000fcc:	494b      	ldr	r1, [pc, #300]	; (80010fc <MCboot+0x1bc>)
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <MCboot+0x1c0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000fd0:	683a      	ldr	r2, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000fd2:	600b      	str	r3, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8000fd4:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000fd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000fda:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000fde:	f004 fe3b 	bl	8005c58 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000fe2:	4b48      	ldr	r3, [pc, #288]	; (8001104 <MCboot+0x1c4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000fe4:	4848      	ldr	r0, [pc, #288]	; (8001108 <MCboot+0x1c8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000fe8:	f8c0 9000 	str.w	r9, [r0]
  REMNG_Init(pREMNG[M1]);
 8000fec:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000fee:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ff0:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8000ff4:	f005 f90c 	bl	8006210 <REMNG_Init>
  FOC_Clear(M1);
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff ff63 	bl	8000ec4 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ffe:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001002:	6828      	ldr	r0, [r5, #0]
 8001004:	f005 fa0c 	bl	8006420 <STC_GetDefaultIqdref>
 8001008:	4603      	mov	r3, r0
 800100a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800100e:	8233      	strh	r3, [r6, #16]
 8001010:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001012:	6828      	ldr	r0, [r5, #0]
 8001014:	f005 fa04 	bl	8006420 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8001018:	493d      	ldr	r1, [pc, #244]	; (8001110 <MCboot+0x1d0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800101a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800101c:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001020:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001024:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001026:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800102a:	4608      	mov	r0, r1
 800102c:	4659      	mov	r1, fp
 800102e:	f7ff fd9d 	bl	8000b6c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001032:	6828      	ldr	r0, [r5, #0]
 8001034:	f8d8 6000 	ldr.w	r6, [r8]
 8001038:	f005 f9e8 	bl	800640c <STC_GetMecSpeedRefUnitDefault>
 800103c:	4622      	mov	r2, r4
 800103e:	4601      	mov	r1, r0
 8001040:	4630      	mov	r0, r6
 8001042:	f7ff fda1 	bl	8000b88 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDId = pPIDId[M1];
 8001046:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <MCboot+0x1b8>)
  pMCIList[M1] = oMCInterface[M1];
 8001048:	f8d8 6000 	ldr.w	r6, [r8]
  MCT[M1].pPIDId = pPIDId[M1];
 800104c:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800104e:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <MCboot+0x17c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001050:	f8da c000 	ldr.w	ip, [sl]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001054:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001056:	4a29      	ldr	r2, [pc, #164]	; (80010fc <MCboot+0x1bc>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001058:	f8d5 a000 	ldr.w	sl, [r5]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800105c:	f8d2 e000 	ldr.w	lr, [r2]
  pMCIList[M1] = oMCInterface[M1];
 8001060:	9a02      	ldr	r2, [sp, #8]
 8001062:	9601      	str	r6, [sp, #4]
 8001064:	4690      	mov	r8, r2
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001066:	4e22      	ldr	r6, [pc, #136]	; (80010f0 <MCboot+0x1b0>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001068:	4d27      	ldr	r5, [pc, #156]	; (8001108 <MCboot+0x1c8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MCboot+0x1d4>)
  pMCIList[M1] = oMCInterface[M1];
 800106c:	9a01      	ldr	r2, [sp, #4]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800106e:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001070:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001072:	683f      	ldr	r7, [r7, #0]
  pMCIList[M1] = oMCInterface[M1];
 8001074:	f8c8 2000 	str.w	r2, [r8]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <MCboot+0x1a0>)
 800107a:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <MCboot+0x1a4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800107e:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001080:	e9c3 2407 	strd	r2, r4, [r3, #28]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001084:	e9c3 c600 	strd	ip, r6, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8001088:	6098      	str	r0, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800108a:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800108e:	e9c3 570b 	strd	r5, r7, [r3, #44]	; 0x2c
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001092:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001096:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001098:	615c      	str	r4, [r3, #20]
  MCT[M1].pStateMachine = &STM[M1];
 800109a:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800109e:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 80010a2:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  bMCBootCompleted = 1;
 80010a6:	4909      	ldr	r1, [pc, #36]	; (80010cc <MCboot+0x18c>)
  MCT[M1].pSCC = MC_NULL;
 80010a8:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  pMCTList[M1] = &MCT[M1];
 80010ac:	9a03      	ldr	r2, [sp, #12]
  MCT[M1].pOTT = MC_NULL;
 80010ae:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80010b0:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 80010b2:	f881 9000 	strb.w	r9, [r1]
}
 80010b6:	b007      	add	sp, #28
 80010b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010bc:	20000930 	.word	0x20000930
 80010c0:	200009f8 	.word	0x200009f8
 80010c4:	200009c4 	.word	0x200009c4
 80010c8:	20000944 	.word	0x20000944
 80010cc:	20000788 	.word	0x20000788
 80010d0:	200009c0 	.word	0x200009c0
 80010d4:	20000350 	.word	0x20000350
 80010d8:	20000000 	.word	0x20000000
 80010dc:	2000052c 	.word	0x2000052c
 80010e0:	200000f0 	.word	0x200000f0
 80010e4:	20000404 	.word	0x20000404
 80010e8:	200001e4 	.word	0x200001e4
 80010ec:	200001b8 	.word	0x200001b8
 80010f0:	20000938 	.word	0x20000938
 80010f4:	200003dc 	.word	0x200003dc
 80010f8:	200009f4 	.word	0x200009f4
 80010fc:	200009f0 	.word	0x200009f0
 8001100:	2000023c 	.word	0x2000023c
 8001104:	200003c4 	.word	0x200003c4
 8001108:	2000092c 	.word	0x2000092c
 800110c:	200009ec 	.word	0x200009ec
 8001110:	200009c8 	.word	0x200009c8
 8001114:	2000096c 	.word	0x2000096c
 8001118:	200009e4 	.word	0x200009e4
 800111c:	20000210 	.word	0x20000210
 8001120:	20000934 	.word	0x20000934
 8001124:	20000560 	.word	0x20000560
 8001128:	2000093c 	.word	0x2000093c

0800112c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <FOC_CalcCurrRef+0x24>)
{
 8001132:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001134:	2426      	movs	r4, #38	; 0x26
 8001136:	fb04 3400 	mla	r4, r4, r0, r3
 800113a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800113e:	b103      	cbz	r3, 8001142 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001140:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <FOC_CalcCurrRef+0x28>)
 8001144:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001148:	f005 f930 	bl	80063ac <STC_CalcTorqueReference>
 800114c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800114e:	8220      	strh	r0, [r4, #16]
}
 8001150:	bd10      	pop	{r4, pc}
 8001152:	bf00      	nop
 8001154:	20000944 	.word	0x20000944
 8001158:	200009f8 	.word	0x200009f8

0800115c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800115c:	4b01      	ldr	r3, [pc, #4]	; (8001164 <TSK_SetChargeBootCapDelayM1+0x8>)
 800115e:	8018      	strh	r0, [r3, #0]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000078a 	.word	0x2000078a

08001168 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800116a:	8818      	ldrh	r0, [r3, #0]
 800116c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800116e:	fab0 f080 	clz	r0, r0
 8001172:	0940      	lsrs	r0, r0, #5
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000078a 	.word	0x2000078a

0800117c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <TSK_SetStopPermanencyTimeM1+0x8>)
 800117e:	8018      	strh	r0, [r3, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2000078e 	.word	0x2000078e

08001188 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800118a:	8818      	ldrh	r0, [r3, #0]
 800118c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800118e:	fab0 f080 	clz	r0, r0
 8001192:	0940      	lsrs	r0, r0, #5
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000078e 	.word	0x2000078e

0800119c <TSK_MediumFrequencyTaskM1>:
{
 800119c:	b530      	push	{r4, r5, lr}
 800119e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80011a0:	ac02      	add	r4, sp, #8
 80011a2:	2300      	movs	r3, #0
 80011a4:	f824 3d02 	strh.w	r3, [r4, #-2]!
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011a8:	484f      	ldr	r0, [pc, #316]	; (80012e8 <TSK_MediumFrequencyTaskM1+0x14c>)
  PQD_CalcElMotorPower( pMPM[M1] );
 80011aa:	4d50      	ldr	r5, [pc, #320]	; (80012ec <TSK_MediumFrequencyTaskM1+0x150>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011ac:	4621      	mov	r1, r4
 80011ae:	f005 fc53 	bl	8006a58 <STO_PLL_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80011b2:	4621      	mov	r1, r4
 80011b4:	484e      	ldr	r0, [pc, #312]	; (80012f0 <TSK_MediumFrequencyTaskM1+0x154>)
 80011b6:	f004 f843 	bl	8005240 <HALL_CalcAvrgMecSpeedUnit>
 80011ba:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80011bc:	6828      	ldr	r0, [r5, #0]
 80011be:	f004 fdf5 	bl	8005dac <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80011c2:	484c      	ldr	r0, [pc, #304]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 80011c4:	f005 f9d4 	bl	8006570 <STM_GetState>
  switch ( StateM1 )
 80011c8:	3803      	subs	r0, #3
 80011ca:	280f      	cmp	r0, #15
 80011cc:	d80d      	bhi.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
 80011ce:	e8df f000 	tbb	[pc, r0]
 80011d2:	2e22      	.short	0x2e22
 80011d4:	68554633 	.word	0x68554633
 80011d8:	0c0c0c08 	.word	0x0c0c0c08
 80011dc:	710c0c0c 	.word	0x710c0c0c
 80011e0:	0e7f      	.short	0x0e7f
    STM_NextState( &STM[M1], IDLE );
 80011e2:	2100      	movs	r1, #0
 80011e4:	4843      	ldr	r0, [pc, #268]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 80011e6:	f005 f94f 	bl	8006488 <STM_NextState>
}
 80011ea:	b003      	add	sp, #12
 80011ec:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 80011ee:	4840      	ldr	r0, [pc, #256]	; (80012f0 <TSK_MediumFrequencyTaskM1+0x154>)
 80011f0:	f003 ff5e 	bl	80050b0 <HALL_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 80011f4:	483c      	ldr	r0, [pc, #240]	; (80012e8 <TSK_MediumFrequencyTaskM1+0x14c>)
 80011f6:	f005 fcf9 	bl	8006bec <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80011fa:	2104      	movs	r1, #4
 80011fc:	483d      	ldr	r0, [pc, #244]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 80011fe:	f005 f943 	bl	8006488 <STM_NextState>
 8001202:	2800      	cmp	r0, #0
 8001204:	d0f1      	beq.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
      FOC_Clear( M1 );
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fe5c 	bl	8000ec4 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <TSK_MediumFrequencyTaskM1+0x15c>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	f004 fbb0 	bl	8005974 <ICS_SwitchOnPWM>
 8001214:	e7e9      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <TSK_MediumFrequencyTaskM1+0x15c>)
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	f004 fb87 	bl	800592c <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800121e:	2014      	movs	r0, #20
 8001220:	f7ff ff9c 	bl	800115c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001224:	2110      	movs	r1, #16
 8001226:	4833      	ldr	r0, [pc, #204]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 8001228:	f005 f92e 	bl	8006488 <STM_NextState>
    break;
 800122c:	e7dd      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 800122e:	2105      	movs	r1, #5
 8001230:	4830      	ldr	r0, [pc, #192]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 8001232:	f005 f929 	bl	8006488 <STM_NextState>
    break;
 8001236:	e7d8      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
	  FOC_InitAdditionalMethods(M1);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff77 	bl	800112c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff76 	bl	8001130 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001244:	2106      	movs	r1, #6
 8001246:	482b      	ldr	r0, [pc, #172]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 8001248:	f005 f91e 	bl	8006488 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <TSK_MediumFrequencyTaskM1+0x160>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f005 f8f2 	bl	8006438 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <TSK_MediumFrequencyTaskM1+0x164>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	f7ff fcce 	bl	8000bf8 <MCI_ExecBufferedCommands>
    break;
 800125c:	e7c5      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <TSK_MediumFrequencyTaskM1+0x164>)
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f7ff fcc9 	bl	8000bf8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff ff62 	bl	8001130 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 800126c:	2c00      	cmp	r4, #0
 800126e:	d1bc      	bne.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001270:	4622      	mov	r2, r4
 8001272:	2120      	movs	r1, #32
 8001274:	481f      	ldr	r0, [pc, #124]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 8001276:	f005 f8ed 	bl	8006454 <STM_FaultProcessing>
 800127a:	e7b6      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <TSK_MediumFrequencyTaskM1+0x15c>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	f004 fbb2 	bl	80059e8 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fe1d 	bl	8000ec4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800128a:	6828      	ldr	r0, [r5, #0]
 800128c:	f004 fca4 	bl	8005bd8 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001290:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001294:	f7ff ff72 	bl	800117c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001298:	2108      	movs	r1, #8
 800129a:	4816      	ldr	r0, [pc, #88]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 800129c:	f005 f8f4 	bl	8006488 <STM_NextState>
    break;
 80012a0:	e7a3      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80012a2:	f7ff ff71 	bl	8001188 <TSK_StopPermanencyTimeHasElapsedM1>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d09f      	beq.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
      STM_NextState( &STM[M1], STOP_IDLE );
 80012aa:	2109      	movs	r1, #9
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 80012ae:	f005 f8eb 	bl	8006488 <STM_NextState>
 80012b2:	e79a      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80012b4:	f7ff ff58 	bl	8001168 <TSK_ChargeBootCapDelayHasElapsedM1>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d096      	beq.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <TSK_MediumFrequencyTaskM1+0x15c>)
 80012be:	2100      	movs	r1, #0
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f004 ff0d 	bl	80060e0 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80012c6:	2111      	movs	r1, #17
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 80012ca:	f005 f8dd 	bl	8006488 <STM_NextState>
 80012ce:	e78c      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <TSK_MediumFrequencyTaskM1+0x15c>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f004 ff03 	bl	80060e0 <PWMC_CurrentReadingCalibr>
 80012da:	2800      	cmp	r0, #0
 80012dc:	d085      	beq.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
      STM_NextState( &STM[M1], CLEAR );
 80012de:	2112      	movs	r1, #18
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <TSK_MediumFrequencyTaskM1+0x158>)
 80012e2:	f005 f8d1 	bl	8006488 <STM_NextState>
 80012e6:	e780      	b.n	80011ea <TSK_MediumFrequencyTaskM1+0x4e>
 80012e8:	20000404 	.word	0x20000404
 80012ec:	200009f0 	.word	0x200009f0
 80012f0:	200000f0 	.word	0x200000f0
 80012f4:	200009e4 	.word	0x200009e4
 80012f8:	20000930 	.word	0x20000930
 80012fc:	200009f8 	.word	0x200009f8
 8001300:	2000093c 	.word	0x2000093c

08001304 <MC_Scheduler>:
{
 8001304:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MC_Scheduler+0x4c>)
 8001308:	781c      	ldrb	r4, [r3, #0]
 800130a:	2c01      	cmp	r4, #1
 800130c:	d000      	beq.n	8001310 <MC_Scheduler+0xc>
}
 800130e:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001310:	4d10      	ldr	r5, [pc, #64]	; (8001354 <MC_Scheduler+0x50>)
 8001312:	882b      	ldrh	r3, [r5, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	b1b3      	cbz	r3, 8001346 <MC_Scheduler+0x42>
      hMFTaskCounterM1--;
 8001318:	882b      	ldrh	r3, [r5, #0]
 800131a:	3b01      	subs	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <MC_Scheduler+0x54>)
 8001322:	8813      	ldrh	r3, [r2, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	b94b      	cbnz	r3, 800133c <MC_Scheduler+0x38>
    if(hStopPermanencyCounterM1 > 0u)
 8001328:	4a0c      	ldr	r2, [pc, #48]	; (800135c <MC_Scheduler+0x58>)
 800132a:	8813      	ldrh	r3, [r2, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ed      	beq.n	800130e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001332:	8813      	ldrh	r3, [r2, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	8013      	strh	r3, [r2, #0]
}
 800133a:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 800133c:	8813      	ldrh	r3, [r2, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	8013      	strh	r3, [r2, #0]
 8001344:	e7f0      	b.n	8001328 <MC_Scheduler+0x24>
      TSK_MediumFrequencyTaskM1();
 8001346:	f7ff ff29 	bl	800119c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800134a:	802c      	strh	r4, [r5, #0]
 800134c:	e7e8      	b.n	8001320 <MC_Scheduler+0x1c>
 800134e:	bf00      	nop
 8001350:	20000788 	.word	0x20000788
 8001354:	2000078c 	.word	0x2000078c
 8001358:	2000078a 	.word	0x2000078a
 800135c:	2000078e 	.word	0x2000078e

08001360 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  Observer_Inputs_t STO_aux_Inputs; /*  only if sensorless aux*/
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001364:	4c3b      	ldr	r4, [pc, #236]	; (8001454 <TSK_HighFrequencyTask+0xf4>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001366:	4f3c      	ldr	r7, [pc, #240]	; (8001458 <TSK_HighFrequencyTask+0xf8>)
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001368:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 800136c:	b088      	sub	sp, #32
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800136e:	9005      	str	r0, [sp, #20]
  HALL_CalcElAngle (&HALL_M1);
 8001370:	483a      	ldr	r0, [pc, #232]	; (800145c <TSK_HighFrequencyTask+0xfc>)
 8001372:	f003 ff45 	bl	8005200 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <TSK_HighFrequencyTask+0x100>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	f004 ffab 	bl	80062d4 <STC_GetSpeedSensor>
 800137e:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001380:	f004 ff4e 	bl	8006220 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001384:	a902      	add	r1, sp, #8
  hElAngle = SPD_GetElAngle(speedHandle);
 8001386:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f004 fd99 	bl	8005ec0 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 800138e:	9802      	ldr	r0, [sp, #8]
 8001390:	f7ff fcd0 	bl	8000d34 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001394:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001396:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001398:	f7ff fd3c 	bl	8000e14 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <TSK_HighFrequencyTask+0x104>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800139e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013a2:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80013a4:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013a6:	1a09      	subs	r1, r1, r0
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f004 fcbb 	bl	8005d24 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80013ae:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <TSK_HighFrequencyTask+0x108>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80013b4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013b8:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80013ba:	1a89      	subs	r1, r1, r2
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	f004 fcb1 	bl	8005d24 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <TSK_HighFrequencyTask+0x10c>)
 80013c4:	f8ad 8004 	strh.w	r8, [sp, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8ad 0006 	strh.w	r0, [sp, #6]
 80013ce:	9901      	ldr	r1, [sp, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fd79 	bl	8004ec8 <Circle_Limitation>
 80013d6:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80013d8:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80013da:	fa0f f883 	sxth.w	r8, r3
 80013de:	141d      	asrs	r5, r3, #16
 80013e0:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80013e2:	f004 ff25 	bl	8006230 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80013e6:	4631      	mov	r1, r6
 80013e8:	9801      	ldr	r0, [sp, #4]
 80013ea:	f7ff fd4d 	bl	8000e88 <MCM_Rev_Park>
 80013ee:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80013f0:	4601      	mov	r1, r0
 80013f2:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80013f4:	9304      	str	r3, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80013f6:	f004 fd65 	bl	8005ec4 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80013fa:	4623      	mov	r3, r4
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80013fc:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 80013fe:	9802      	ldr	r0, [sp, #8]
 8001400:	f843 0b04 	str.w	r0, [r3], #4
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001404:	9803      	ldr	r0, [sp, #12]
 8001406:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001408:	9800      	ldr	r0, [sp, #0]
 800140a:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 800140c:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 800140e:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001410:	f8a4 8016 	strh.w	r8, [r4, #22]
 8001414:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001416:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001418:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 800141c:	d012      	beq.n	8001444 <TSK_HighFrequencyTask+0xe4>
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <TSK_HighFrequencyTask+0x110>)
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	9006      	str	r0, [sp, #24]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001424:	6810      	ldr	r0, [r2, #0]
 8001426:	f003 fd47 	bl	8004eb8 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 800142a:	a905      	add	r1, sp, #20
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800142c:	f8ad 001c 	strh.w	r0, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <TSK_HighFrequencyTask+0x114>)
 8001432:	f005 fa27 	bl	8006884 <STO_PLL_CalcElAngle>
	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <TSK_HighFrequencyTask+0x114>)
 8001438:	f005 fbae 	bl	8006b98 <STO_PLL_CalcAvrgElSpeedDpp>
}
 800143c:	2000      	movs	r0, #0
 800143e:	b008      	add	sp, #32
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <TSK_HighFrequencyTask+0x118>)
 8001448:	f005 f804 	bl	8006454 <STM_FaultProcessing>
}
 800144c:	2000      	movs	r0, #0
 800144e:	b008      	add	sp, #32
 8001450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001454:	20000944 	.word	0x20000944
 8001458:	20000930 	.word	0x20000930
 800145c:	200000f0 	.word	0x200000f0
 8001460:	200009f8 	.word	0x200009f8
 8001464:	20000938 	.word	0x20000938
 8001468:	200009f4 	.word	0x200009f4
 800146c:	200009c0 	.word	0x200009c0
 8001470:	200009c4 	.word	0x200009c4
 8001474:	20000404 	.word	0x20000404
 8001478:	200009e4 	.word	0x200009e4

0800147c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001480:	4f20      	ldr	r7, [pc, #128]	; (8001504 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001482:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001484:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001488:	f004 fbf8 	bl	8005c7c <NTC_CalcAvTemp>
 800148c:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800148e:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001492:	f004 fe4f 	bl	8006134 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001496:	f024 040c 	bic.w	r4, r4, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800149a:	4304      	orrs	r4, r0
 800149c:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800149e:	b335      	cbz	r5, 80014ee <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80014a0:	4e19      	ldr	r6, [pc, #100]	; (8001508 <TSK_SafetyTask_PWMOFF+0x8c>)
 80014a2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80014a6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80014aa:	43e2      	mvns	r2, r4
 80014ac:	b292      	uxth	r2, r2
 80014ae:	4621      	mov	r1, r4
 80014b0:	4630      	mov	r0, r6
 80014b2:	f004 ffcf 	bl	8006454 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80014b6:	4630      	mov	r0, r6
 80014b8:	f005 f85a 	bl	8006570 <STM_GetState>
 80014bc:	280a      	cmp	r0, #10
 80014be:	d008      	beq.n	80014d2 <TSK_SafetyTask_PWMOFF+0x56>
 80014c0:	280b      	cmp	r0, #11
 80014c2:	d105      	bne.n	80014d0 <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014c4:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80014c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014cc:	f004 be06 	b.w	80060dc <PWMC_SwitchOffPWM>
}
 80014d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014d2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80014d6:	f004 fe01 	bl	80060dc <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80014da:	4628      	mov	r0, r5
 80014dc:	f7ff fcf2 	bl	8000ec4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <TSK_SafetyTask_PWMOFF+0x90>)
 80014e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 80014e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80014ea:	f004 bb75 	b.w	8005bd8 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <TSK_SafetyTask_PWMOFF+0x94>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f004 fe57 	bl	80061a4 <RVBS_CalcAvVbus>
 80014f6:	f020 000c 	bic.w	r0, r0, #12
 80014fa:	4304      	orrs	r4, r0
 80014fc:	b2a4      	uxth	r4, r4
 80014fe:	e7cf      	b.n	80014a0 <TSK_SafetyTask_PWMOFF+0x24>
 8001500:	2000092c 	.word	0x2000092c
 8001504:	20000930 	.word	0x20000930
 8001508:	200009e4 	.word	0x200009e4
 800150c:	200009f0 	.word	0x200009f0
 8001510:	200009c4 	.word	0x200009c4

08001514 <TSK_SafetyTask>:
{
 8001514:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <TSK_SafetyTask+0x1c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d000      	beq.n	8001520 <TSK_SafetyTask+0xc>
}
 800151e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ffab 	bl	800147c <TSK_SafetyTask_PWMOFF>
}
 8001526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800152a:	f000 bd33 	b.w	8001f94 <RCM_ExecUserConv>
 800152e:	bf00      	nop
 8001530:	20000788 	.word	0x20000788

08001534 <MC_RunMotorControlTasks>:
{
 8001534:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MC_RunMotorControlTasks+0x1c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b903      	cbnz	r3, 800153e <MC_RunMotorControlTasks+0xa>
}
 800153c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800153e:	f7ff fee1 	bl	8001304 <MC_Scheduler>
    TSK_SafetyTask();
 8001542:	f7ff ffe7 	bl	8001514 <TSK_SafetyTask>
}
 8001546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800154a:	f001 b8ad 	b.w	80026a8 <UI_Scheduler>
 800154e:	bf00      	nop
 8001550:	20000788 	.word	0x20000788

08001554 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <TSK_HardwareFaultTask+0x18>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f004 fa45 	bl	80059e8 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001568:	f004 bf74 	b.w	8006454 <STM_FaultProcessing>
 800156c:	20000930 	.word	0x20000930
 8001570:	200009e4 	.word	0x200009e4

08001574 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001574:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <mc_lock_pins+0xf8>)
 8001578:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <mc_lock_pins+0xfc>)
 800157a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800157c:	2110      	movs	r1, #16
 800157e:	61d9      	str	r1, [r3, #28]
 8001580:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001582:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001584:	69d9      	ldr	r1, [r3, #28]
 8001586:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001588:	4a3a      	ldr	r2, [pc, #232]	; (8001674 <mc_lock_pins+0x100>)
  (void) temp;
 800158a:	980d      	ldr	r0, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800158c:	493a      	ldr	r1, [pc, #232]	; (8001678 <mc_lock_pins+0x104>)
 800158e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001590:	2008      	movs	r0, #8
 8001592:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001594:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001596:	69d1      	ldr	r1, [r2, #28]
 8001598:	910c      	str	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800159a:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 800159e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 80015a2:	990c      	ldr	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015a4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015a6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015a8:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015aa:	69d1      	ldr	r1, [r2, #28]
 80015ac:	910b      	str	r1, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015ae:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015b2:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 80015b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015b8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015ba:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015bc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015be:	69de      	ldr	r6, [r3, #28]
 80015c0:	960a      	str	r6, [sp, #40]	; 0x28
  (void) temp;
 80015c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015c4:	4e2d      	ldr	r6, [pc, #180]	; (800167c <mc_lock_pins+0x108>)
 80015c6:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015c8:	f44f 7780 	mov.w	r7, #256	; 0x100
 80015cc:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ce:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015d0:	69de      	ldr	r6, [r3, #28]
 80015d2:	9609      	str	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015d4:	f44f 7700 	mov.w	r7, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015d8:	f44f 3681 	mov.w	r6, #66048	; 0x10200
  (void) temp;
 80015dc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015e0:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015e2:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015e4:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015e6:	69de      	ldr	r6, [r3, #28]
 80015e8:	9608      	str	r6, [sp, #32]
  (void) temp;
 80015ea:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ec:	4e24      	ldr	r6, [pc, #144]	; (8001680 <mc_lock_pins+0x10c>)
 80015ee:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015f0:	2740      	movs	r7, #64	; 0x40
 80015f2:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015f4:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015f6:	69de      	ldr	r6, [r3, #28]
 80015f8:	9607      	str	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015fa:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015fe:	f44f 36a0 	mov.w	r6, #81920	; 0x14000
  (void) temp;
 8001602:	f8dd c01c 	ldr.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001606:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001608:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800160a:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800160c:	69d6      	ldr	r6, [r2, #28]
 800160e:	9606      	str	r6, [sp, #24]
  (void) temp;
 8001610:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001612:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001614:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001616:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001618:	69d8      	ldr	r0, [r3, #28]
 800161a:	9005      	str	r0, [sp, #20]
  (void) temp;
 800161c:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800161e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001620:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001622:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001624:	69d1      	ldr	r1, [r2, #28]
 8001626:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001628:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800162c:	f44f 3190 	mov.w	r1, #73728	; 0x12000
  (void) temp;
 8001630:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001632:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001634:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001636:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001638:	69d1      	ldr	r1, [r2, #28]
 800163a:	9103      	str	r1, [sp, #12]
  (void) temp;
 800163c:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800163e:	4911      	ldr	r1, [pc, #68]	; (8001684 <mc_lock_pins+0x110>)
 8001640:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001644:	2020      	movs	r0, #32
 8001646:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800164a:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800164e:	442a      	add	r2, r5
  temp = READ_REG(GPIOx->LCKR);
 8001650:	69d2      	ldr	r2, [r2, #28]
 8001652:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001654:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <mc_lock_pins+0x114>)
 8001658:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800165a:	2102      	movs	r1, #2
 800165c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800165e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001664:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001666:	b00e      	add	sp, #56	; 0x38
 8001668:	bcf0      	pop	{r4, r5, r6, r7}
 800166a:	4770      	bx	lr
 800166c:	40020000 	.word	0x40020000
 8001670:	00010010 	.word	0x00010010
 8001674:	40020400 	.word	0x40020400
 8001678:	00010008 	.word	0x00010008
 800167c:	00010100 	.word	0x00010100
 8001680:	00010040 	.word	0x00010040
 8001684:	00010020 	.word	0x00010020
 8001688:	00010002 	.word	0x00010002

0800168c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800168c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001690:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001692:	2700      	movs	r7, #0
{
 8001694:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001696:	094a      	lsrs	r2, r1, #5
{
 8001698:	460c      	mov	r4, r1
 800169a:	4699      	mov	r9, r3
  bool bNoError = false; // Default is error
 800169c:	f88d 7009 	strb.w	r7, [sp, #9]
{
 80016a0:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 80016a2:	d123      	bne.n	80016ec <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80016a4:	2912      	cmp	r1, #18
 80016a6:	d814      	bhi.n	80016d2 <MCP_ReceivedFrame+0x46>
 80016a8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016ac:	00580016 	.word	0x00580016
 80016b0:	017c00ea 	.word	0x017c00ea
 80016b4:	00130013 	.word	0x00130013
 80016b8:	01b30186 	.word	0x01b30186
 80016bc:	01fb01c8 	.word	0x01fb01c8
 80016c0:	022e021d 	.word	0x022e021d
 80016c4:	02620245 	.word	0x02620245
 80016c8:	00130013 	.word	0x00130013
 80016cc:	00130013 	.word	0x00130013
 80016d0:	0016      	.short	0x0016
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80016d8:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80016dc:	2301      	movs	r3, #1
 80016de:	f10d 020e 	add.w	r2, sp, #14
 80016e2:	21ff      	movs	r1, #255	; 0xff
 80016e4:	47a0      	blx	r4
    }
  }
}
 80016e6:	b00d      	add	sp, #52	; 0x34
 80016e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80016ec:	f102 38ff 	add.w	r8, r2, #4294967295
 80016f0:	4642      	mov	r2, r8
 80016f2:	4639      	mov	r1, r7
 80016f4:	f001 f82c 	bl	8002750 <UI_SetReg>
 80016f8:	b300      	cbz	r0, 800173c <MCP_ReceivedFrame+0xb0>
      if (pHandle->pDAC)
 80016fa:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 80016fe:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001702:	b118      	cbz	r0, 800170c <MCP_ReceivedFrame+0x80>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001704:	4642      	mov	r2, r8
 8001706:	4639      	mov	r1, r7
 8001708:	f001 f822 	bl	8002750 <UI_SetReg>
  switch (Code)
 800170c:	2c12      	cmp	r4, #18
 800170e:	f200 82de 	bhi.w	8001cce <MCP_ReceivedFrame+0x642>
 8001712:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001716:	01c3      	.short	0x01c3
 8001718:	00b50023 	.word	0x00b50023
 800171c:	02dc0147 	.word	0x02dc0147
 8001720:	015102dc 	.word	0x015102dc
 8001724:	0193017e 	.word	0x0193017e
 8001728:	01e801c6 	.word	0x01e801c6
 800172c:	021001f9 	.word	0x021001f9
 8001730:	02dc022d 	.word	0x02dc022d
 8001734:	02dc02dc 	.word	0x02dc02dc
 8001738:	01c302dc 	.word	0x01c302dc
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800173c:	230b      	movs	r3, #11
 800173e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001742:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001746:	2800      	cmp	r0, #0
 8001748:	d0c6      	beq.n	80016d8 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 800174a:	2300      	movs	r3, #0
 800174c:	461a      	mov	r2, r3
 800174e:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001752:	21f0      	movs	r1, #240	; 0xf0
 8001754:	47a0      	blx	r4
}
 8001756:	b00d      	add	sp, #52	; 0x34
 8001758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 800175c:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 800175e:	2305      	movs	r3, #5
 8001760:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001764:	2988      	cmp	r1, #136	; 0x88
 8001766:	f200 82b8 	bhi.w	8001cda <MCP_ReceivedFrame+0x64e>
 800176a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800176e:	02a1      	.short	0x02a1
 8001770:	02b602b6 	.word	0x02b602b6
 8001774:	02b6029a 	.word	0x02b6029a
 8001778:	02900290 	.word	0x02900290
 800177c:	02900290 	.word	0x02900290
 8001780:	02900290 	.word	0x02900290
 8001784:	02900290 	.word	0x02900290
 8001788:	02900290 	.word	0x02900290
 800178c:	02800290 	.word	0x02800290
 8001790:	02b60280 	.word	0x02b60280
 8001794:	029002b6 	.word	0x029002b6
 8001798:	02900290 	.word	0x02900290
 800179c:	02900290 	.word	0x02900290
 80017a0:	02b602b6 	.word	0x02b602b6
 80017a4:	027602b6 	.word	0x027602b6
 80017a8:	02b6026c 	.word	0x02b6026c
 80017ac:	02b602b6 	.word	0x02b602b6
 80017b0:	02b602b6 	.word	0x02b602b6
 80017b4:	02b602b6 	.word	0x02b602b6
 80017b8:	02b602b6 	.word	0x02b602b6
 80017bc:	02b602b6 	.word	0x02b602b6
 80017c0:	02b602b6 	.word	0x02b602b6
 80017c4:	02b602b6 	.word	0x02b602b6
 80017c8:	02b602b6 	.word	0x02b602b6
 80017cc:	02b602b6 	.word	0x02b602b6
 80017d0:	02b602b6 	.word	0x02b602b6
 80017d4:	02b602b6 	.word	0x02b602b6
 80017d8:	02b602b6 	.word	0x02b602b6
 80017dc:	02b602b6 	.word	0x02b602b6
 80017e0:	02b602b6 	.word	0x02b602b6
 80017e4:	02b602b6 	.word	0x02b602b6
 80017e8:	02b602b6 	.word	0x02b602b6
 80017ec:	02b602b6 	.word	0x02b602b6
 80017f0:	02b60290 	.word	0x02b60290
 80017f4:	02b602b6 	.word	0x02b602b6
 80017f8:	028002b6 	.word	0x028002b6
 80017fc:	02800280 	.word	0x02800280
 8001800:	02b602b6 	.word	0x02b602b6
 8001804:	02b602b6 	.word	0x02b602b6
 8001808:	02b602b6 	.word	0x02b602b6
 800180c:	02b60290 	.word	0x02b60290
 8001810:	02b602b6 	.word	0x02b602b6
 8001814:	02900290 	.word	0x02900290
 8001818:	02900290 	.word	0x02900290
 800181c:	02900290 	.word	0x02900290
 8001820:	02b60290 	.word	0x02b60290
 8001824:	02b60280 	.word	0x02b60280
 8001828:	02b602b6 	.word	0x02b602b6
 800182c:	02b602b6 	.word	0x02b602b6
 8001830:	02b60290 	.word	0x02b60290
 8001834:	029002b6 	.word	0x029002b6
 8001838:	02b60290 	.word	0x02b60290
 800183c:	02b602b6 	.word	0x02b602b6
 8001840:	02b602b6 	.word	0x02b602b6
 8001844:	02b602b6 	.word	0x02b602b6
 8001848:	02b602b6 	.word	0x02b602b6
 800184c:	02b602b6 	.word	0x02b602b6
 8001850:	02b602b6 	.word	0x02b602b6
 8001854:	029a02b6 	.word	0x029a02b6
 8001858:	02800280 	.word	0x02800280
 800185c:	02800280 	.word	0x02800280
 8001860:	02b60280 	.word	0x02b60280
 8001864:	02b602b6 	.word	0x02b602b6
 8001868:	02800280 	.word	0x02800280
 800186c:	02b602b6 	.word	0x02b602b6
 8001870:	02b602b6 	.word	0x02b602b6
 8001874:	02b602b6 	.word	0x02b602b6
 8001878:	029002b6 	.word	0x029002b6
 800187c:	02900290 	.word	0x02900290
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001880:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001882:	2303      	movs	r3, #3
 8001884:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001888:	2988      	cmp	r1, #136	; 0x88
 800188a:	f200 8107 	bhi.w	8001a9c <MCP_ReceivedFrame+0x410>
 800188e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001892:	0191      	.short	0x0191
 8001894:	0191017f 	.word	0x0191017f
 8001898:	017f0191 	.word	0x017f0191
 800189c:	01c801c8 	.word	0x01c801c8
 80018a0:	01c801c8 	.word	0x01c801c8
 80018a4:	01c801c8 	.word	0x01c801c8
 80018a8:	01c801c8 	.word	0x01c801c8
 80018ac:	01c801c8 	.word	0x01c801c8
 80018b0:	01c801c8 	.word	0x01c801c8
 80018b4:	01c801c8 	.word	0x01c801c8
 80018b8:	01c801c8 	.word	0x01c801c8
 80018bc:	01c801c8 	.word	0x01c801c8
 80018c0:	01c801c8 	.word	0x01c801c8
 80018c4:	01c801c8 	.word	0x01c801c8
 80018c8:	01b701c8 	.word	0x01b701c8
 80018cc:	017f01a3 	.word	0x017f01a3
 80018d0:	01c801c8 	.word	0x01c801c8
 80018d4:	019101c8 	.word	0x019101c8
 80018d8:	01050105 	.word	0x01050105
 80018dc:	01050105 	.word	0x01050105
 80018e0:	01050105 	.word	0x01050105
 80018e4:	01050105 	.word	0x01050105
 80018e8:	01050105 	.word	0x01050105
 80018ec:	01050105 	.word	0x01050105
 80018f0:	01050105 	.word	0x01050105
 80018f4:	01050105 	.word	0x01050105
 80018f8:	01050105 	.word	0x01050105
 80018fc:	01050105 	.word	0x01050105
 8001900:	01050105 	.word	0x01050105
 8001904:	01050105 	.word	0x01050105
 8001908:	01050105 	.word	0x01050105
 800190c:	01050105 	.word	0x01050105
 8001910:	01050105 	.word	0x01050105
 8001914:	010501c8 	.word	0x010501c8
 8001918:	01050105 	.word	0x01050105
 800191c:	017f0105 	.word	0x017f0105
 8001920:	017f017f 	.word	0x017f017f
 8001924:	01c801c8 	.word	0x01c801c8
 8001928:	01c801c8 	.word	0x01c801c8
 800192c:	017f0191 	.word	0x017f0191
 8001930:	01c801c8 	.word	0x01c801c8
 8001934:	01c801c8 	.word	0x01c801c8
 8001938:	01c801c8 	.word	0x01c801c8
 800193c:	01c801c8 	.word	0x01c801c8
 8001940:	01c801c8 	.word	0x01c801c8
 8001944:	019101c8 	.word	0x019101c8
 8001948:	0105017f 	.word	0x0105017f
 800194c:	01c801c8 	.word	0x01c801c8
 8001950:	01c801c8 	.word	0x01c801c8
 8001954:	010501c8 	.word	0x010501c8
 8001958:	01c80105 	.word	0x01c80105
 800195c:	019101c8 	.word	0x019101c8
 8001960:	017f0191 	.word	0x017f0191
 8001964:	017f017f 	.word	0x017f017f
 8001968:	017f017f 	.word	0x017f017f
 800196c:	01c80191 	.word	0x01c80191
 8001970:	017f01c8 	.word	0x017f01c8
 8001974:	01c80105 	.word	0x01c80105
 8001978:	019101c8 	.word	0x019101c8
 800197c:	017f017f 	.word	0x017f017f
 8001980:	017f017f 	.word	0x017f017f
 8001984:	017f017f 	.word	0x017f017f
 8001988:	017f017f 	.word	0x017f017f
 800198c:	017f017f 	.word	0x017f017f
 8001990:	0191017f 	.word	0x0191017f
 8001994:	01910105 	.word	0x01910105
 8001998:	017f017f 	.word	0x017f017f
 800199c:	01c8017f 	.word	0x01c8017f
 80019a0:	01c801c8 	.word	0x01c801c8
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80019a4:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 80019a6:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80019a8:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80019ac:	4628      	mov	r0, r5
 80019ae:	f001 f83f 	bl	8002a30 <UI_ExecCmd>
 80019b2:	f88d 0009 	strb.w	r0, [sp, #9]
 80019b6:	e6c6      	b.n	8001746 <MCP_ReceivedFrame+0xba>
 80019b8:	ac04      	add	r4, sp, #16
 80019ba:	2100      	movs	r1, #0
 80019bc:	4620      	mov	r0, r4
 80019be:	2220      	movs	r2, #32
 80019c0:	f005 f9f6 	bl	8006db0 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019c4:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 80019c8:	f10d 0012 	add.w	r0, sp, #18
 80019cc:	1e71      	subs	r1, r6, #1
 80019ce:	2300      	movs	r3, #0
 80019d0:	e005      	b.n	80019de <MCP_ReceivedFrame+0x352>
 80019d2:	3301      	adds	r3, #1
 80019d4:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80019d6:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019da:	f000 8182 	beq.w	8001ce2 <MCP_ReceivedFrame+0x656>
 80019de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80019e2:	2a09      	cmp	r2, #9
 80019e4:	d1f5      	bne.n	80019d2 <MCP_ReceivedFrame+0x346>
 80019e6:	1d5a      	adds	r2, r3, #5
 80019e8:	1dd9      	adds	r1, r3, #7
 80019ea:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80019ec:	5cb2      	ldrb	r2, [r6, r2]
 80019ee:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80019f2:	5c72      	ldrb	r2, [r6, r1]
 80019f4:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80019f8:	5cf3      	ldrb	r3, [r6, r3]
 80019fa:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80019fe:	4622      	mov	r2, r4
 8001a00:	2320      	movs	r3, #32
 8001a02:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a06:	21f0      	movs	r1, #240	; 0xf0
 8001a08:	47a0      	blx	r4
      bNoError = true;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f88d 3009 	strb.w	r3, [sp, #9]
 8001a10:	e69b      	b.n	800174a <MCP_ReceivedFrame+0xbe>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a12:	7877      	ldrb	r7, [r6, #1]
 8001a14:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a16:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a18:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a1a:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a1c:	78f1      	ldrb	r1, [r6, #3]
 8001a1e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001a22:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a26:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a2a:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	4628      	mov	r0, r5
 8001a32:	f001 f83b 	bl	8002aac <UI_ExecSpeedRamp>
 8001a36:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a3a:	e684      	b.n	8001746 <MCP_ReceivedFrame+0xba>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001a3c:	f10d 030e 	add.w	r3, sp, #14
 8001a40:	7831      	ldrb	r1, [r6, #0]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f10d 020a 	add.w	r2, sp, #10
 8001a48:	ab03      	add	r3, sp, #12
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	f001 f84a 	bl	8002ae4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a50:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 8001a54:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001a58:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8001a5c:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a64:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001a66:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001a68:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a6a:	f363 0207 	bfi	r2, r3, #0, #8
 8001a6e:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001a72:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 8001a74:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001a78:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 8001a7a:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a7e:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a80:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a82:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a84:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001a88:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a8c:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001a90:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a94:	2308      	movs	r3, #8
 8001a96:	aa04      	add	r2, sp, #16
 8001a98:	21f0      	movs	r1, #240	; 0xf0
 8001a9a:	47a0      	blx	r4
 8001a9c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001aa0:	e651      	b.n	8001746 <MCP_ReceivedFrame+0xba>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001aa2:	78b1      	ldrb	r1, [r6, #2]
 8001aa4:	7873      	ldrb	r3, [r6, #1]
 8001aa6:	78f2      	ldrb	r2, [r6, #3]
 8001aa8:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001aaa:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001aac:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001aae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001ab2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001ab6:	4a8d      	ldr	r2, [pc, #564]	; (8001cec <MCP_ReceivedFrame+0x660>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ab8:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001aba:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001abe:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001ac2:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ac4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001ac8:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001acc:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001ace:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001ad2:	7831      	ldrb	r1, [r6, #0]
 8001ad4:	9000      	str	r0, [sp, #0]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	4628      	mov	r0, r5
 8001adc:	f001 f820 	bl	8002b20 <UI_SetRevupData>
 8001ae0:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ae4:	e62f      	b.n	8001746 <MCP_ReceivedFrame+0xba>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001ae6:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001ae8:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001aea:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001aec:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001aee:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001af2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001af6:	b212      	sxth	r2, r2
 8001af8:	b209      	sxth	r1, r1
 8001afa:	4628      	mov	r0, r5
 8001afc:	f001 f82a 	bl	8002b54 <UI_SetCurrentReferences>
      bNoError = true;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f88d 3009 	strb.w	r3, [sp, #9]
 8001b06:	e620      	b.n	800174a <MCP_ReceivedFrame+0xbe>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b08:	4c79      	ldr	r4, [pc, #484]	; (8001cf0 <MCP_ReceivedFrame+0x664>)
      stepList.data = buffer;
 8001b0a:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001b0c:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b0e:	4621      	mov	r1, r4
 8001b10:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001b12:	f88d 9014 	strb.w	r9, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001b16:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b1a:	f001 f829 	bl	8002b70 <UI_GetMPInfo>
 8001b1e:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001b22:	2800      	cmp	r0, #0
 8001b24:	f43f add8 	beq.w	80016d8 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001b28:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8001b2c:	7923      	ldrb	r3, [r4, #4]
 8001b2e:	6822      	ldr	r2, [r4, #0]
 8001b30:	21f0      	movs	r1, #240	; 0xf0
 8001b32:	47b0      	blx	r6
 8001b34:	e5d7      	b.n	80016e6 <MCP_ReceivedFrame+0x5a>
 8001b36:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8001b3a:	ac04      	add	r4, sp, #16
 8001b3c:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001b3e:	4623      	mov	r3, r4
 8001b40:	ae0c      	add	r6, sp, #48	; 0x30
 8001b42:	e004      	b.n	8001b4e <MCP_ReceivedFrame+0x4c2>
        outBuff[i] = pHandle->s_fwVer[i];
 8001b44:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001b48:	429e      	cmp	r6, r3
 8001b4a:	f43f af58 	beq.w	80019fe <MCP_ReceivedFrame+0x372>
 8001b4e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001b52:	1b18      	subs	r0, r3, r4
 8001b54:	b2c0      	uxtb	r0, r0
 8001b56:	2900      	cmp	r1, #0
 8001b58:	d1f4      	bne.n	8001b44 <MCP_ReceivedFrame+0x4b8>
      for (; i < 32; i++)
 8001b5a:	281f      	cmp	r0, #31
 8001b5c:	f63f af4f 	bhi.w	80019fe <MCP_ReceivedFrame+0x372>
        outBuff[i] = 0;
 8001b60:	f1c0 021f 	rsb	r2, r0, #31
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	3201      	adds	r2, #1
 8001b68:	4420      	add	r0, r4
 8001b6a:	f005 f921 	bl	8006db0 <memset>
 8001b6e:	e746      	b.n	80019fe <MCP_ReceivedFrame+0x372>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001b70:	7970      	ldrb	r0, [r6, #5]
 8001b72:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001b74:	7873      	ldrb	r3, [r6, #1]
 8001b76:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001b78:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001b7c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001b80:	b292      	uxth	r2, r2
 8001b82:	b209      	sxth	r1, r1
 8001b84:	4628      	mov	r0, r5
 8001b86:	f000 ffa3 	bl	8002ad0 <UI_ExecTorqueRamp>
 8001b8a:	f88d 0009 	strb.w	r0, [sp, #9]
 8001b8e:	e5da      	b.n	8001746 <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001b90:	f10d 0209 	add.w	r2, sp, #9
 8001b94:	4628      	mov	r0, r5
 8001b96:	f000 ffff 	bl	8002b98 <UI_GetReg>
          if ( bNoError == true )
 8001b9a:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001b9e:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f43f ad99 	beq.w	80016d8 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001ba6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001baa:	2304      	movs	r3, #4
 8001bac:	aa04      	add	r2, sp, #16
 8001bae:	21f0      	movs	r1, #240	; 0xf0
 8001bb0:	47a0      	blx	r4
 8001bb2:	e598      	b.n	80016e6 <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001bb4:	f10d 0209 	add.w	r2, sp, #9
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 ffed 	bl	8002b98 <UI_GetReg>
           if ( bNoError == true )
 8001bbe:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001bc2:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f43f ad87 	beq.w	80016d8 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001bca:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001bce:	2301      	movs	r3, #1
 8001bd0:	aa04      	add	r2, sp, #16
 8001bd2:	21f0      	movs	r1, #240	; 0xf0
 8001bd4:	47a0      	blx	r4
 8001bd6:	e586      	b.n	80016e6 <MCP_ReceivedFrame+0x5a>
          if (pHandle->pDAC)
 8001bd8:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	f43f af5d 	beq.w	8001a9c <MCP_ReceivedFrame+0x410>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001be2:	2101      	movs	r1, #1
 8001be4:	f000 ffd2 	bl	8002b8c <UI_GetDAC>
 8001be8:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001bea:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001bec:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001bf0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001bf2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001bf4:	21f0      	movs	r1, #240	; 0xf0
 8001bf6:	47a0      	blx	r4
            bNoError = true;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f88d 3009 	strb.w	r3, [sp, #9]
 8001bfe:	e5a4      	b.n	800174a <MCP_ReceivedFrame+0xbe>
          if (pHandle->pDAC)
 8001c00:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001c04:	2800      	cmp	r0, #0
 8001c06:	f43f af49 	beq.w	8001a9c <MCP_ReceivedFrame+0x410>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f000 ffbe 	bl	8002b8c <UI_GetDAC>
 8001c10:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c12:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001c14:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c18:	2301      	movs	r3, #1
 8001c1a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c1c:	21f0      	movs	r1, #240	; 0xf0
 8001c1e:	47a0      	blx	r4
 8001c20:	e561      	b.n	80016e6 <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001c22:	f10d 0209 	add.w	r2, sp, #9
 8001c26:	4628      	mov	r0, r5
 8001c28:	f000 ffb6 	bl	8002b98 <UI_GetReg>
          if ( bNoError == true )
 8001c2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001c30:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f43f ad50 	beq.w	80016d8 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001c38:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	aa04      	add	r2, sp, #16
 8001c40:	21f0      	movs	r1, #240	; 0xf0
 8001c42:	47a0      	blx	r4
 8001c44:	e54f      	b.n	80016e6 <MCP_ReceivedFrame+0x5a>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001c46:	7872      	ldrb	r2, [r6, #1]
 8001c48:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	f000 ff99 	bl	8002b84 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001c52:	2301      	movs	r3, #1
 8001c54:	f88d 3009 	strb.w	r3, [sp, #9]
 8001c58:	e577      	b.n	800174a <MCP_ReceivedFrame+0xbe>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001c5a:	7872      	ldrb	r2, [r6, #1]
 8001c5c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001c60:	2100      	movs	r1, #0
 8001c62:	f000 ff8f 	bl	8002b84 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001c66:	2301      	movs	r3, #1
 8001c68:	f88d 3009 	strb.w	r3, [sp, #9]
 8001c6c:	e56d      	b.n	800174a <MCP_ReceivedFrame+0xbe>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001c6e:	78b4      	ldrb	r4, [r6, #2]
 8001c70:	7873      	ldrb	r3, [r6, #1]
 8001c72:	78f0      	ldrb	r0, [r6, #3]
 8001c74:	7932      	ldrb	r2, [r6, #4]
 8001c76:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001c7a:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001c7e:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001c82:	4628      	mov	r0, r5
 8001c84:	f000 fd64 	bl	8002750 <UI_SetReg>
 8001c88:	f88d 0009 	strb.w	r0, [sp, #9]
 8001c8c:	e55b      	b.n	8001746 <MCP_ReceivedFrame+0xba>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001c8e:	78b2      	ldrb	r2, [r6, #2]
 8001c90:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001c92:	4628      	mov	r0, r5
 8001c94:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001c98:	f000 fd5a 	bl	8002750 <UI_SetReg>
 8001c9c:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ca0:	e551      	b.n	8001746 <MCP_ReceivedFrame+0xba>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001ca2:	7872      	ldrb	r2, [r6, #1]
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 fd53 	bl	8002750 <UI_SetReg>
 8001caa:	f88d 0009 	strb.w	r0, [sp, #9]
 8001cae:	e54a      	b.n	8001746 <MCP_ReceivedFrame+0xba>
          int32_t wValue = (int32_t)(buffer[1]);
 8001cb0:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001cb2:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f000 fd49 	bl	8002750 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f000 fd44 	bl	8002750 <UI_SetReg>
 8001cc8:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ccc:	e53b      	b.n	8001746 <MCP_ReceivedFrame+0xba>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001cd4:	f88d 300e 	strb.w	r3, [sp, #14]
 8001cd8:	e535      	b.n	8001746 <MCP_ReceivedFrame+0xba>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f88d 300e 	strb.w	r3, [sp, #14]
 8001ce0:	e6dc      	b.n	8001a9c <MCP_ReceivedFrame+0x410>
 8001ce2:	2326      	movs	r3, #38	; 0x26
 8001ce4:	2124      	movs	r1, #36	; 0x24
 8001ce6:	2222      	movs	r2, #34	; 0x22
 8001ce8:	e680      	b.n	80019ec <MCP_ReceivedFrame+0x360>
 8001cea:	bf00      	nop
 8001cec:	2aaaaaab 	.word	0x2aaaaaab
 8001cf0:	20000790 	.word	0x20000790

08001cf4 <MCP_WaitNextFrame>:
{
 8001cf4:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001cf6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8001cf8:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001cfa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001cfc:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d04:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8001d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d0c:	4718      	bx	r3
 8001d0e:	bf00      	nop

08001d10 <MCP_Init>:
{
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	4604      	mov	r4, r0
 8001d16:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 8001d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001d1a:	6301      	str	r1, [r0, #48]	; 0x30
  FCP_SetClient( pFCP, pHandle,
 8001d1c:	4f0b      	ldr	r7, [pc, #44]	; (8001d4c <MCP_Init+0x3c>)
  pHandle->pDAC = pDAC;
 8001d1e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 8001d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d24:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001d28:	4608      	mov	r0, r1
{
 8001d2a:	4615      	mov	r5, r2
  FCP_SetClient( pFCP, pHandle,
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	9700      	str	r7, [sp, #0]
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <MCP_Init+0x40>)
{
 8001d32:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <MCP_Init+0x44>)
 8001d36:	f003 f919 	bl	8004f6c <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001d3a:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001d3e:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ffd7 	bl	8001cf4 <MCP_WaitNextFrame>
}
 8001d46:	b003      	add	sp, #12
 8001d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	08001d59 	.word	0x08001d59
 8001d50:	0800168d 	.word	0x0800168d
 8001d54:	08001d61 	.word	0x08001d61

08001d58 <MCP_OnTimeOut>:
{
 8001d58:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001d5a:	f7ff ffcb 	bl	8001cf4 <MCP_WaitNextFrame>
}
 8001d5e:	bd08      	pop	{r3, pc}

08001d60 <MCP_SentFrame>:
{
 8001d60:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001d62:	f7ff ffc7 	bl	8001cf4 <MCP_WaitNextFrame>
}
 8001d66:	bd08      	pop	{r3, pc}

08001d68 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001d68:	b530      	push	{r4, r5, lr}
 8001d6a:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001d6c:	f002 f842 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001d72:	4d0c      	ldr	r5, [pc, #48]	; (8001da4 <MX_MotorControl_Init+0x3c>)
 8001d74:	4c0c      	ldr	r4, [pc, #48]	; (8001da8 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001d76:	fba3 3000 	umull	r3, r0, r3, r0
 8001d7a:	09c0      	lsrs	r0, r0, #7
 8001d7c:	f001 fe0e 	bl	800399c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001d80:	4629      	mov	r1, r5
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff f8dc 	bl	8000f40 <MCboot>
  mc_lock_pins();
 8001d88:	f7ff fbf4 	bl	8001574 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <MX_MotorControl_Init+0x44>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4622      	mov	r2, r4
 8001d92:	462b      	mov	r3, r5
 8001d94:	2101      	movs	r1, #1
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_MotorControl_Init+0x48>)
 8001d98:	f000 fc16 	bl	80025c8 <UI_TaskInit>
}
 8001d9c:	b003      	add	sp, #12
 8001d9e:	bd30      	pop	{r4, r5, pc}
 8001da0:	10624dd3 	.word	0x10624dd3
 8001da4:	20000a00 	.word	0x20000a00
 8001da8:	200009fc 	.word	0x200009fc
 8001dac:	0800781c 	.word	0x0800781c
 8001db0:	200006f4 	.word	0x200006f4

08001db4 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001db4:	4a5b      	ldr	r2, [pc, #364]	; (8001f24 <RCM_RegisterRegConv+0x170>)
 8001db6:	6813      	ldr	r3, [r2, #0]
{
 8001db8:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d079      	beq.n	8001eb2 <RCM_RegisterRegConv+0xfe>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dbe:	7919      	ldrb	r1, [r3, #4]
 8001dc0:	7904      	ldrb	r4, [r0, #4]
 8001dc2:	42a1      	cmp	r1, r4
 8001dc4:	d01e      	beq.n	8001e04 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dc6:	6851      	ldr	r1, [r2, #4]
 8001dc8:	2900      	cmp	r1, #0
 8001dca:	f000 8085 	beq.w	8001ed8 <RCM_RegisterRegConv+0x124>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dce:	790d      	ldrb	r5, [r1, #4]
 8001dd0:	42ac      	cmp	r4, r5
  uint8_t handle=255;
 8001dd2:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dd6:	d073      	beq.n	8001ec0 <RCM_RegisterRegConv+0x10c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dd8:	6895      	ldr	r5, [r2, #8]
 8001dda:	2d00      	cmp	r5, #0
 8001ddc:	f000 8093 	beq.w	8001f06 <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001de0:	7929      	ldrb	r1, [r5, #4]
 8001de2:	42a1      	cmp	r1, r4
 8001de4:	d072      	beq.n	8001ecc <RCM_RegisterRegConv+0x118>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001de6:	68d1      	ldr	r1, [r2, #12]
 8001de8:	2900      	cmp	r1, #0
 8001dea:	f000 8087 	beq.w	8001efc <RCM_RegisterRegConv+0x148>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dee:	790d      	ldrb	r5, [r1, #4]
 8001df0:	42a5      	cmp	r5, r4
 8001df2:	d07c      	beq.n	8001eee <RCM_RegisterRegConv+0x13a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	bf88      	it	hi
 8001df8:	23ff      	movhi	r3, #255	; 0xff
 8001dfa:	f240 8089 	bls.w	8001f10 <RCM_RegisterRegConv+0x15c>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bcf0      	pop	{r4, r5, r6, r7}
 8001e02:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6801      	ldr	r1, [r0, #0]
 8001e08:	4299      	cmp	r1, r3
 8001e0a:	d1dc      	bne.n	8001dc6 <RCM_RegisterRegConv+0x12>
  uint8_t i=0;
 8001e0c:	2300      	movs	r3, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001e0e:	688c      	ldr	r4, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001e10:	4d45      	ldr	r5, [pc, #276]	; (8001f28 <RCM_RegisterRegConv+0x174>)
      RCM_handle_array [handle] = regConv;
 8001e12:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001e16:	2200      	movs	r2, #0
 8001e18:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001e1c:	07e2      	lsls	r2, r4, #31
 8001e1e:	d411      	bmi.n	8001e44 <RCM_RegisterRegConv+0x90>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001e20:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001e22:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001e26:	f022 0220 	bic.w	r2, r2, #32
 8001e2a:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001e2c:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001e2e:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001e30:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e38:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001e3a:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001e3c:	688a      	ldr	r2, [r1, #8]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001e44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001e46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e4a:	62ca      	str	r2, [r1, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001e4c:	7902      	ldrb	r2, [r0, #4]
 8001e4e:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8001e52:	2a09      	cmp	r2, #9
 8001e54:	bf94      	ite	ls
 8001e56:	f042 7200 	orrls.w	r2, r2, #33554432	; 0x2000000
 8001e5a:	3c1e      	subhi	r4, #30
 8001e5c:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001e64:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001e68:	fab7 f487 	clz	r4, r7
 8001e6c:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001e70:	40e7      	lsrs	r7, r4
 8001e72:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8001e74:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001e78:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
 8001e7c:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001e80:	fa94 f6a4 	rbit	r6, r4
 8001e84:	fab6 f686 	clz	r6, r6
 8001e88:	fa94 f4a4 	rbit	r4, r4
 8001e8c:	f04f 0c07 	mov.w	ip, #7
 8001e90:	fab4 f484 	clz	r4, r4
 8001e94:	fa22 f606 	lsr.w	r6, r2, r6
 8001e98:	6880      	ldr	r0, [r0, #8]
 8001e9a:	40e2      	lsrs	r2, r4
 8001e9c:	fa0c f606 	lsl.w	r6, ip, r6
 8001ea0:	4090      	lsls	r0, r2
 8001ea2:	ea25 0206 	bic.w	r2, r5, r6
 8001ea6:	4302      	orrs	r2, r0
 8001ea8:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bcf0      	pop	{r4, r5, r6, r7}
 8001eb0:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001eb2:	6851      	ldr	r1, [r2, #4]
 8001eb4:	2900      	cmp	r1, #0
 8001eb6:	d02d      	beq.n	8001f14 <RCM_RegisterRegConv+0x160>
 8001eb8:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001eba:	790d      	ldrb	r5, [r1, #4]
 8001ebc:	42ac      	cmp	r4, r5
 8001ebe:	d18b      	bne.n	8001dd8 <RCM_RegisterRegConv+0x24>
 8001ec0:	680d      	ldr	r5, [r1, #0]
 8001ec2:	6801      	ldr	r1, [r0, #0]
 8001ec4:	428d      	cmp	r5, r1
 8001ec6:	d187      	bne.n	8001dd8 <RCM_RegisterRegConv+0x24>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e7a0      	b.n	8001e0e <RCM_RegisterRegConv+0x5a>
 8001ecc:	682d      	ldr	r5, [r5, #0]
 8001ece:	6801      	ldr	r1, [r0, #0]
 8001ed0:	428d      	cmp	r5, r1
 8001ed2:	d188      	bne.n	8001de6 <RCM_RegisterRegConv+0x32>
      i++;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e79a      	b.n	8001e0e <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ed8:	6895      	ldr	r5, [r2, #8]
      i++;
 8001eda:	2301      	movs	r3, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	f47f af7f 	bne.w	8001de0 <RCM_RegisterRegConv+0x2c>
 8001ee2:	68d1      	ldr	r1, [r2, #12]
 8001ee4:	b1a1      	cbz	r1, 8001f10 <RCM_RegisterRegConv+0x15c>
 8001ee6:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ee8:	790d      	ldrb	r5, [r1, #4]
 8001eea:	42a5      	cmp	r5, r4
 8001eec:	d182      	bne.n	8001df4 <RCM_RegisterRegConv+0x40>
 8001eee:	680c      	ldr	r4, [r1, #0]
 8001ef0:	6801      	ldr	r1, [r0, #0]
 8001ef2:	428c      	cmp	r4, r1
 8001ef4:	f47f af7e 	bne.w	8001df4 <RCM_RegisterRegConv+0x40>
      i++;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e788      	b.n	8001e0e <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	f67f af79 	bls.w	8001df4 <RCM_RegisterRegConv+0x40>
 8001f02:	6801      	ldr	r1, [r0, #0]
 8001f04:	e7f8      	b.n	8001ef8 <RCM_RegisterRegConv+0x144>
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf8c      	ite	hi
 8001f0a:	2302      	movhi	r3, #2
 8001f0c:	2300      	movls	r3, #0
 8001f0e:	e7e8      	b.n	8001ee2 <RCM_RegisterRegConv+0x12e>
 8001f10:	6801      	ldr	r1, [r0, #0]
 8001f12:	e77c      	b.n	8001e0e <RCM_RegisterRegConv+0x5a>
 8001f14:	6895      	ldr	r5, [r2, #8]
 8001f16:	b115      	cbz	r5, 8001f1e <RCM_RegisterRegConv+0x16a>
 8001f18:	460b      	mov	r3, r1
 8001f1a:	7904      	ldrb	r4, [r0, #4]
 8001f1c:	e760      	b.n	8001de0 <RCM_RegisterRegConv+0x2c>
 8001f1e:	462b      	mov	r3, r5
 8001f20:	e7df      	b.n	8001ee2 <RCM_RegisterRegConv+0x12e>
 8001f22:	bf00      	nop
 8001f24:	20000a2c 	.word	0x20000a2c
 8001f28:	20000a08 	.word	0x20000a08

08001f2c <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001f2c:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <RCM_ExecRegularConv+0x64>)
 8001f30:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001f34:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001f3c:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001f3e:	bf8c      	ite	hi
 8001f40:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001f42:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001f46:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001f4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f4e:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f52:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001f56:	fab1 f181 	clz	r1, r1
 8001f5a:	40cd      	lsrs	r5, r1
 8001f5c:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001f68:	f020 001f 	bic.w	r0, r0, #31
 8001f6c:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001f6e:	0151      	lsls	r1, r2, #5
 8001f70:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8001f74:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001f78:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f7a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001f7c:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001f80:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001f82:	079b      	lsls	r3, r3, #30
 8001f84:	d5fc      	bpl.n	8001f80 <RCM_ExecRegularConv+0x54>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f86:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001f88:	bc30      	pop	{r4, r5}
 8001f8a:	b280      	uxth	r0, r0
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000a2c 	.word	0x20000a2c

08001f94 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001f94:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001f96:	4c23      	ldr	r4, [pc, #140]	; (8002024 <RCM_ExecUserConv+0x90>)
 8001f98:	7823      	ldrb	r3, [r4, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa0:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <RCM_ExecUserConv+0x94>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <RCM_ExecUserConv+0x98>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001fa6:	7810      	ldrb	r0, [r2, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001fa8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001fac:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001fb4:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001fb6:	bf8c      	ite	hi
 8001fb8:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001fba:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001fc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001fc6:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001fca:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001fce:	fab1 f181 	clz	r1, r1
 8001fd2:	40cf      	lsrs	r7, r1
 8001fd4:	f102 062c 	add.w	r6, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8001fe0:	f025 051f 	bic.w	r5, r5, #31
 8001fe4:	432b      	orrs	r3, r5
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001fe6:	0151      	lsls	r1, r2, #5
 8001fe8:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 8001fec:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001ff0:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001ff2:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8001ff4:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001ff8:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001ffa:	079b      	lsls	r3, r3, #30
 8001ffc:	d5fc      	bpl.n	8001ff8 <RCM_ExecUserConv+0x64>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <RCM_ExecUserConv+0x9c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002000:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002002:	4e0c      	ldr	r6, [pc, #48]	; (8002034 <RCM_ExecUserConv+0xa0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002004:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8002008:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 800200a:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800200c:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800200e:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002010:	2d00      	cmp	r5, #0
 8002012:	d0c4      	beq.n	8001f9e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002014:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002018:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800201a:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800201c:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800201e:	462b      	mov	r3, r5
}
 8002020:	bcf0      	pop	{r4, r5, r6, r7}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002022:	4718      	bx	r3
 8002024:	20000a28 	.word	0x20000a28
 8002028:	20000a04 	.word	0x20000a04
 800202c:	20000a2c 	.word	0x20000a2c
 8002030:	20000a08 	.word	0x20000a08
 8002034:	20000a3c 	.word	0x20000a3c

08002038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002038:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_MspInit+0x38>)
 800203c:	2100      	movs	r1, #0
 800203e:	9100      	str	r1, [sp, #0]
 8002040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
 8002048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800204a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	9101      	str	r1, [sp, #4]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002066:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002068:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800206a:	f001 bc41 	b.w	80038f0 <HAL_NVIC_SetPriorityGrouping>
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002074:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002076:	6803      	ldr	r3, [r0, #0]
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <HAL_ADC_MspInit+0xe8>)
{
 800207a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800207e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002084:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002088:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 800208a:	d023      	beq.n	80020d4 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800208c:	4a34      	ldr	r2, [pc, #208]	; (8002160 <HAL_ADC_MspInit+0xec>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d001      	beq.n	8002096 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002092:	b00d      	add	sp, #52	; 0x34
 8002094:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_ADC_MspInit+0xf0>)
 8002098:	9405      	str	r4, [sp, #20]
 800209a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800209c:	4832      	ldr	r0, [pc, #200]	; (8002168 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
 80020a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020a6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80020aa:	9205      	str	r2, [sp, #20]
 80020ac:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	9406      	str	r4, [sp, #24]
 80020b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80020c0:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80020c4:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	9c06      	ldr	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c8:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f001 fcc0 	bl	8003a50 <HAL_GPIO_Init>
}
 80020d0:	b00d      	add	sp, #52	; 0x34
 80020d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_ADC_MspInit+0xf0>)
 80020d6:	9401      	str	r4, [sp, #4]
 80020d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80020da:	4823      	ldr	r0, [pc, #140]	; (8002168 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
 80020e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80020e8:	9201      	str	r2, [sp, #4]
 80020ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	9402      	str	r4, [sp, #8]
 80020ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	f002 0201 	and.w	r2, r2, #1
 80020fc:	9202      	str	r2, [sp, #8]
 80020fe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002100:	9403      	str	r4, [sp, #12]
 8002102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002104:	f042 0204 	orr.w	r2, r2, #4
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
 800210a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210c:	f002 0204 	and.w	r2, r2, #4
 8002110:	9203      	str	r2, [sp, #12]
 8002112:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	9404      	str	r4, [sp, #16]
 8002116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002118:	f042 0202 	orr.w	r2, r2, #2
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002126:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002128:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 800212a:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212c:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002132:	f001 fc8d 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002136:	2320      	movs	r3, #32
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002138:	a907      	add	r1, sp, #28
 800213a:	480c      	ldr	r0, [pc, #48]	; (800216c <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 800213c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002142:	f001 fc85 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002146:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	a907      	add	r1, sp, #28
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <HAL_ADC_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800214c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f001 fc7d 	bl	8003a50 <HAL_GPIO_Init>
}
 8002156:	b00d      	add	sp, #52	; 0x34
 8002158:	bd30      	pop	{r4, r5, pc}
 800215a:	bf00      	nop
 800215c:	40012000 	.word	0x40012000
 8002160:	40012100 	.word	0x40012100
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020800 	.word	0x40020800
 8002170:	40020400 	.word	0x40020400

08002174 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002174:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002176:	6801      	ldr	r1, [r0, #0]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_DAC_MspInit+0x5c>)
{
 800217a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 800217e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002184:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002188:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 800218a:	d001      	beq.n	8002190 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800218c:	b008      	add	sp, #32
 800218e:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8002190:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002198:	480e      	ldr	r0, [pc, #56]	; (80021d4 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800219a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800219e:	6411      	str	r1, [r2, #64]	; 0x40
 80021a0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80021a2:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 80021a6:	9101      	str	r1, [sp, #4]
 80021a8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 80021bc:	2220      	movs	r2, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021be:	2303      	movs	r3, #3
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 80021c0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f001 fc42 	bl	8003a50 <HAL_GPIO_Init>
}
 80021cc:	b008      	add	sp, #32
 80021ce:	bd10      	pop	{r4, pc}
 80021d0:	40007400 	.word	0x40007400
 80021d4:	40020000 	.word	0x40020000

080021d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80021da:	6803      	ldr	r3, [r0, #0]
 80021dc:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
{
 80021de:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 80021e2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80021e8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80021ec:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 80021ee:	d03d      	beq.n	800226c <HAL_TIM_Base_MspInit+0x94>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d001      	beq.n	80021fa <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021f6:	b00a      	add	sp, #40	; 0x28
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021fa:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80021fe:	9402      	str	r4, [sp, #8]
 8002200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	482c      	ldr	r0, [pc, #176]	; (80022b4 <HAL_TIM_Base_MspInit+0xdc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
 800220a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220c:	f002 0201 	and.w	r2, r2, #1
 8002210:	9202      	str	r2, [sp, #8]
 8002212:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	9403      	str	r4, [sp, #12]
 8002216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002218:	f042 0202 	orr.w	r2, r2, #2
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
 800221e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002220:	f002 0202 	and.w	r2, r2, #2
 8002224:	9203      	str	r2, [sp, #12]
 8002226:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	9404      	str	r4, [sp, #16]
 800222a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800223c:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 800223e:	f44f 6381 	mov.w	r3, #1032	; 0x408
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800224a:	e9cd 5608 	strd	r5, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f001 fbff 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002256:	a905      	add	r1, sp, #20
 8002258:	4817      	ldr	r0, [pc, #92]	; (80022b8 <HAL_TIM_Base_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225c:	e9cd 5608 	strd	r5, r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002262:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002264:	f001 fbf4 	bl	8003a50 <HAL_GPIO_Init>
}
 8002268:	b00a      	add	sp, #40	; 0x28
 800226a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_TIM_Base_MspInit+0xe4>)
 800226e:	9400      	str	r4, [sp, #0]
 8002270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002272:	4811      	ldr	r0, [pc, #68]	; (80022b8 <HAL_TIM_Base_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
 800227a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227c:	f002 0201 	and.w	r2, r2, #1
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	9401      	str	r4, [sp, #4]
 8002286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002296:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800229a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800229c:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022a6:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f001 fbd2 	bl	8003a50 <HAL_GPIO_Init>
}
 80022ac:	b00a      	add	sp, #40	; 0x28
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80022c2:	6801      	ldr	r1, [r0, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_TIM_MspPostInit+0x7c>)
{
 80022c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80022ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80022d0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80022d4:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80022d6:	d001      	beq.n	80022dc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022d8:	b009      	add	sp, #36	; 0x24
 80022da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	f041 0102 	orr.w	r1, r1, #2
 80022ea:	6311      	str	r1, [r2, #48]	; 0x30
 80022ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022ee:	f001 0102 	and.w	r1, r1, #2
 80022f2:	9101      	str	r1, [sp, #4]
 80022f4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002300:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800230a:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800230c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002314:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f001 fb97 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002322:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	a903      	add	r1, sp, #12
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800232a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800232c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002330:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f001 fb8c 	bl	8003a50 <HAL_GPIO_Init>
}
 8002338:	b009      	add	sp, #36	; 0x24
 800233a:	bd30      	pop	{r4, r5, pc}
 800233c:	40010000 	.word	0x40010000
 8002340:	40020400 	.word	0x40020400
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800234a:	6801      	ldr	r1, [r0, #0]
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_UART_MspInit+0x60>)
{
 800234e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002352:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002358:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800235c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002360:	b009      	add	sp, #36	; 0x24
 8002362:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002364:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	480f      	ldr	r0, [pc, #60]	; (80023ac <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800236e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002372:	6411      	str	r1, [r2, #64]	; 0x40
 8002374:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002376:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800237a:	9101      	str	r1, [sp, #4]
 800237c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
 8002388:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002392:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002396:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f001 fb56 	bl	8003a50 <HAL_GPIO_Init>
}
 80023a4:	b009      	add	sp, #36	; 0x24
 80023a6:	bd30      	pop	{r4, r5, pc}
 80023a8:	40004400 	.word	0x40004400
 80023ac:	40020000 	.word	0x40020000

080023b0 <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 80023b0:	b508      	push	{r3, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <ADC_IRQHandler+0x34>)
 80023b4:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80023b6:	0752      	lsls	r2, r2, #29
 80023b8:	d40a      	bmi.n	80023d0 <ADC_IRQHandler+0x20>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80023ba:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <ADC_IRQHandler+0x38>)
 80023bc:	6813      	ldr	r3, [r2, #0]
 80023be:	f023 030c 	bic.w	r3, r3, #12
 80023c2:	6013      	str	r3, [r2, #0]

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80023c4:	f7fe ffcc 	bl	8001360 <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80023cc:	f000 b98c 	b.w	80026e8 <UI_DACUpdate>
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f022 020c 	bic.w	r2, r2, #12
 80023d6:	601a      	str	r2, [r3, #0]
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80023d8:	f7fe ffc2 	bl	8001360 <TSK_HighFrequencyTask>
}
 80023dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80023e0:	f000 b982 	b.w	80026e8 <UI_DACUpdate>
 80023e4:	40012000 	.word	0x40012000
 80023e8:	40012200 	.word	0x40012200

080023ec <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023ee:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80023f0:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80023f2:	f06f 0201 	mvn.w	r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80023f8:	f003 bb7e 	b.w	8005af8 <ICS_TIMx_UP_IRQHandler>
 80023fc:	20000350 	.word	0x20000350

08002400 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002402:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002404:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002406:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	0612      	lsls	r2, r2, #24
 800240c:	d504      	bpl.n	8002418 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800240e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002412:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8002414:	f003 fbba 	bl	8005b8c <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800241c:	f7fe bf72 	b.w	8001304 <MC_Scheduler>
 8002420:	20000350 	.word	0x20000350

08002424 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002424:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8002426:	4c0c      	ldr	r4, [pc, #48]	; (8002458 <TIM2_IRQHandler+0x34>)
 8002428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	07d1      	lsls	r1, r2, #31
 800242e:	d40b      	bmi.n	8002448 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	0792      	lsls	r2, r2, #30
 8002434:	d400      	bmi.n	8002438 <TIM2_IRQHandler+0x14>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002436:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002438:	f06f 0202 	mvn.w	r2, #2
 800243c:	611a      	str	r2, [r3, #16]
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <TIM2_IRQHandler+0x34>)
}
 8002440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002444:	f002 bf46 	b.w	80052d4 <HALL_TIMx_CC_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002448:	f06f 0201 	mvn.w	r2, #1
 800244c:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 800244e:	4620      	mov	r0, r4
 8002450:	f003 f8e4 	bl	800561c <HALL_TIMx_UP_IRQHandler>
 8002454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002456:	e7eb      	b.n	8002430 <TIM2_IRQHandler+0xc>
 8002458:	200000f0 	.word	0x200000f0

0800245c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 800245c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800245e:	4c1d      	ldr	r4, [pc, #116]	; (80024d4 <USART2_IRQHandler+0x78>)
 8002460:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	0691      	lsls	r1, r2, #26
{
 8002468:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800246a:	d41d      	bmi.n	80024a8 <USART2_IRQHandler+0x4c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800246c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800246e:	0612      	lsls	r2, r2, #24
 8002470:	d414      	bmi.n	800249c <USART2_IRQHandler+0x40>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002472:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	d401      	bmi.n	800247c <USART2_IRQHandler+0x20>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002478:	b002      	add	sp, #8
 800247a:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 800247c:	4815      	ldr	r0, [pc, #84]	; (80024d4 <USART2_IRQHandler+0x78>)
 800247e:	f004 f9c3 	bl	8006808 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002482:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800248a:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002490:	9b01      	ldr	r3, [sp, #4]
}
 8002492:	b002      	add	sp, #8
 8002494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002498:	f000 b936 	b.w	8002708 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <USART2_IRQHandler+0x78>)
 800249e:	f004 f87d 	bl	800659c <UFCP_TX_IRQ_Handler>
 80024a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024a6:	e7e4      	b.n	8002472 <USART2_IRQHandler+0x16>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80024a8:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80024aa:	4620      	mov	r0, r4
 80024ac:	b2c9      	uxtb	r1, r1
 80024ae:	f004 f949 	bl	8006744 <UFCP_RX_IRQ_Handler>
 80024b2:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d007      	beq.n	80024c8 <USART2_IRQHandler+0x6c>
    if (retVal == 2)
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d002      	beq.n	80024c2 <USART2_IRQHandler+0x66>
 80024bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024c0:	e7d4      	b.n	800246c <USART2_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 80024c2:	f000 f921 	bl	8002708 <UI_SerialCommunicationTimeOutStop>
 80024c6:	e7f9      	b.n	80024bc <USART2_IRQHandler+0x60>
      UI_SerialCommunicationTimeOutStart();
 80024c8:	f000 f924 	bl	8002714 <UI_SerialCommunicationTimeOutStart>
 80024cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024d0:	e7cc      	b.n	800246c <USART2_IRQHandler+0x10>
 80024d2:	bf00      	nop
 80024d4:	200005b8 	.word	0x200005b8

080024d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80024d8:	b530      	push	{r4, r5, lr}
 80024da:	b083      	sub	sp, #12
 80024dc:	4c1c      	ldr	r4, [pc, #112]	; (8002550 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80024de:	f7ff f839 	bl	8001554 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80024e2:	4625      	mov	r5, r4
 80024e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80024e8:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80024ea:	0712      	lsls	r2, r2, #28
 80024ec:	d41d      	bmi.n	800252a <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80024ee:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80024f0:	0610      	lsls	r0, r2, #24
 80024f2:	d40f      	bmi.n	8002514 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80024f4:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80024f6:	0692      	lsls	r2, r2, #26
 80024f8:	d5f6      	bpl.n	80024e8 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80024fa:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80024fc:	4628      	mov	r0, r5
 80024fe:	b2c9      	uxtb	r1, r1
 8002500:	f004 f920 	bl	8006744 <UFCP_RX_IRQ_Handler>
 8002504:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002506:	2b01      	cmp	r3, #1
 8002508:	d01f      	beq.n	800254a <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 800250a:	2b02      	cmp	r3, #2
 800250c:	d1ea      	bne.n	80024e4 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 800250e:	f000 f8fb 	bl	8002708 <UI_SerialCommunicationTimeOutStop>
 8002512:	e7e7      	b.n	80024e4 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 8002514:	4628      	mov	r0, r5
 8002516:	f004 f841 	bl	800659c <UFCP_TX_IRQ_Handler>
 800251a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800251e:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002520:	0691      	lsls	r1, r2, #26
 8002522:	d4ea      	bmi.n	80024fa <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002524:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002526:	0712      	lsls	r2, r2, #28
 8002528:	d5e1      	bpl.n	80024ee <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 800252a:	4628      	mov	r0, r5
 800252c:	f004 f96c 	bl	8006808 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002530:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002538:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800253e:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002540:	f000 f8e2 	bl	8002708 <UI_SerialCommunicationTimeOutStop>
 8002544:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002548:	e7d1      	b.n	80024ee <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 800254a:	f000 f8e3 	bl	8002714 <UI_SerialCommunicationTimeOutStart>
 800254e:	e7c9      	b.n	80024e4 <HardFault_Handler+0xc>
 8002550:	200005b8 	.word	0x200005b8

08002554 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002554:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002556:	4c0a      	ldr	r4, [pc, #40]	; (8002580 <SysTick_Handler+0x2c>)
 8002558:	7823      	ldrb	r3, [r4, #0]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d006      	beq.n	800256c <SysTick_Handler+0x18>
 800255e:	3301      	adds	r3, #1
 8002560:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002562:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002568:	f7fe bfe4 	b.w	8001534 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800256c:	f000 fe8c 	bl	8003288 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002570:	f001 fa30 	bl	80039d4 <HAL_SYSTICK_IRQHandler>
 8002574:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002576:	7023      	strb	r3, [r4, #0]
}
 8002578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800257c:	f7fe bfda 	b.w	8001534 <MC_RunMotorControlTasks>
 8002580:	200006f8 	.word	0x200006f8

08002584 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	490c      	ldr	r1, [pc, #48]	; (80025b8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002588:	680b      	ldr	r3, [r1, #0]
{
 800258a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4c0c      	ldr	r4, [pc, #48]	; (80025c0 <_sbrk+0x3c>)
 800258e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002590:	b12b      	cbz	r3, 800259e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4418      	add	r0, r3
 8002594:	4290      	cmp	r0, r2
 8002596:	d807      	bhi.n	80025a8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002598:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_sbrk+0x40>)
 80025a0:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80025a2:	4418      	add	r0, r3
 80025a4:	4290      	cmp	r0, r2
 80025a6:	d9f7      	bls.n	8002598 <_sbrk+0x14>
    errno = ENOMEM;
 80025a8:	f004 fbd8 	bl	8006d5c <__errno>
 80025ac:	230c      	movs	r3, #12
 80025ae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd10      	pop	{r4, pc}
 80025b8:	20000798 	.word	0x20000798
 80025bc:	20020000 	.word	0x20020000
 80025c0:	00000400 	.word	0x00000400
 80025c4:	20000b18 	.word	0x20000b18

080025c8 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 80025ce:	4d2d      	ldr	r5, [pc, #180]	; (8002684 <UI_TaskInit+0xbc>)
{
 80025d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80025d2:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 80025d4:	462c      	mov	r4, r5
{
 80025d6:	4682      	mov	sl, r0
 80025d8:	460f      	mov	r7, r1
 80025da:	4690      	mov	r8, r2
 80025dc:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 80025de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 80025e0:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 800269c <UI_TaskInit+0xd4>
 80025e4:	4e28      	ldr	r6, [pc, #160]	; (8002688 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 80025e6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80026a0 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 80025ea:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 80025ee:	46f4      	mov	ip, lr
 80025f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80025f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80025fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80025fe:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 8002602:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002606:	464b      	mov	r3, r9
 8002608:	4670      	mov	r0, lr
 800260a:	4642      	mov	r2, r8
 800260c:	4639      	mov	r1, r7
 800260e:	f000 f887 	bl	8002720 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002612:	6830      	ldr	r0, [r6, #0]
 8002614:	f000 faae 	bl	8002b74 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 8002618:	6830      	ldr	r0, [r6, #0]
 800261a:	2230      	movs	r2, #48	; 0x30
 800261c:	2100      	movs	r1, #0
 800261e:	f000 fab1 	bl	8002b84 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 8002622:	6830      	ldr	r0, [r6, #0]
 8002624:	2230      	movs	r2, #48	; 0x30
 8002626:	2101      	movs	r1, #1
 8002628:	f000 faac 	bl	8002b84 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 800262c:	46ae      	mov	lr, r5
 800262e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8002632:	f8df c070 	ldr.w	ip, [pc, #112]	; 80026a4 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 8002636:	4665      	mov	r5, ip
 8002638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800263a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800263e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002640:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8002644:	4c11      	ldr	r4, [pc, #68]	; (800268c <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 8002646:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 800264a:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 800264c:	f8c4 c000 	str.w	ip, [r4]
    UFCP_Init( & pUSART );
 8002650:	f003 ffa2 	bl	8006598 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002654:	6832      	ldr	r2, [r6, #0]
 8002656:	9905      	ldr	r1, [sp, #20]
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <UI_TaskInit+0xc8>)
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <UI_TaskInit+0xcc>)
 8002664:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <UI_TaskInit+0xd0>)
 8002666:	4659      	mov	r1, fp
 8002668:	f7ff fb52 	bl	8001d10 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800266c:	6820      	ldr	r0, [r4, #0]
 800266e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002672:	464b      	mov	r3, r9
 8002674:	4642      	mov	r2, r8
 8002676:	4639      	mov	r1, r7

}
 8002678:	b007      	add	sp, #28
 800267a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800267e:	f000 b84f 	b.w	8002720 <UI_Init>
 8002682:	bf00      	nop
 8002684:	20000588 	.word	0x20000588
 8002688:	200007a0 	.word	0x200007a0
 800268c:	200007a4 	.word	0x200007a4
 8002690:	08006825 	.word	0x08006825
 8002694:	080065fd 	.word	0x080065fd
 8002698:	08006621 	.word	0x08006621
 800269c:	200000b4 	.word	0x200000b4
 80026a0:	200005b8 	.word	0x200005b8
 80026a4:	20000a40 	.word	0x20000a40

080026a8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80026a8:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <UI_Scheduler+0x34>)
 80026aa:	8813      	ldrh	r3, [r2, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b11b      	cbz	r3, 80026b8 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80026b0:	8813      	ldrh	r3, [r2, #0]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80026b8:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <UI_Scheduler+0x38>)
 80026ba:	8813      	ldrh	r3, [r2, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d903      	bls.n	80026c8 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 80026c0:	8813      	ldrh	r3, [r2, #0]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <UI_Scheduler+0x3c>)
 80026ca:	8813      	ldrh	r3, [r2, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d903      	bls.n	80026d8 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 80026d0:	8813      	ldrh	r3, [r2, #0]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
  }
}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000079e 	.word	0x2000079e
 80026e0:	2000079c 	.word	0x2000079c
 80026e4:	200006fa 	.word	0x200006fa

080026e8 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80026e8:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80026ea:	4c06      	ldr	r4, [pc, #24]	; (8002704 <UI_DACUpdate+0x1c>)
{
 80026ec:	4605      	mov	r5, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f000 f82a 	bl	8002748 <UI_GetSelectedMC>
 80026f4:	42a8      	cmp	r0, r5
 80026f6:	d000      	beq.n	80026fa <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80026fa:	6820      	ldr	r0, [r4, #0]
}
 80026fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002700:	f000 ba3c 	b.w	8002b7c <UI_DACExec>
 8002704:	200007a0 	.word	0x200007a0

08002708 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002708:	4b01      	ldr	r3, [pc, #4]	; (8002710 <UI_SerialCommunicationTimeOutStop+0x8>)
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
}
 800270e:	4770      	bx	lr
 8002710:	2000079c 	.word	0x2000079c

08002714 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <UI_SerialCommunicationTimeOutStart+0x8>)
 8002716:	224f      	movs	r2, #79	; 0x4f
 8002718:	801a      	strh	r2, [r3, #0]
}
 800271a:	4770      	bx	lr
 800271c:	2000079c 	.word	0x2000079c

08002720 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002720:	b430      	push	{r4, r5}
 8002722:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002724:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8002726:	2500      	movs	r5, #0
 8002728:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->bDriveNum = bMCNum;
 800272c:	7701      	strb	r1, [r0, #28]
  pHandle->pMCT = pMCT;
 800272e:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8002732:	bc30      	pop	{r4, r5}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002738:	7f03      	ldrb	r3, [r0, #28]
 800273a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800273c:	bf86      	itte	hi
 800273e:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002742:	2001      	movhi	r0, #1
    retVal = false;
 8002744:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002746:	4770      	bx	lr

08002748 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002748:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop

08002750 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002750:	b530      	push	{r4, r5, lr}
 8002752:	4614      	mov	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002754:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002758:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800275c:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800275e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002762:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002766:	295b      	cmp	r1, #91	; 0x5b
 8002768:	f200 8139 	bhi.w	80029de <UI_SetReg+0x28e>
 800276c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002770:	01370069 	.word	0x01370069
 8002774:	006d0137 	.word	0x006d0137
 8002778:	00770137 	.word	0x00770137
 800277c:	0083007d 	.word	0x0083007d
 8002780:	00950089 	.word	0x00950089
 8002784:	00a1009b 	.word	0x00a1009b
 8002788:	00b300a7 	.word	0x00b300a7
 800278c:	00bf00b9 	.word	0x00bf00b9
 8002790:	00df00c5 	.word	0x00df00c5
 8002794:	01370137 	.word	0x01370137
 8002798:	011500f9 	.word	0x011500f9
 800279c:	01370137 	.word	0x01370137
 80027a0:	01370137 	.word	0x01370137
 80027a4:	01370137 	.word	0x01370137
 80027a8:	01370137 	.word	0x01370137
 80027ac:	01370137 	.word	0x01370137
 80027b0:	01370137 	.word	0x01370137
 80027b4:	01370137 	.word	0x01370137
 80027b8:	01370137 	.word	0x01370137
 80027bc:	01370137 	.word	0x01370137
 80027c0:	01370137 	.word	0x01370137
 80027c4:	01370137 	.word	0x01370137
 80027c8:	01370137 	.word	0x01370137
 80027cc:	01370137 	.word	0x01370137
 80027d0:	01370137 	.word	0x01370137
 80027d4:	01370137 	.word	0x01370137
 80027d8:	01370137 	.word	0x01370137
 80027dc:	01370137 	.word	0x01370137
 80027e0:	01370137 	.word	0x01370137
 80027e4:	01370137 	.word	0x01370137
 80027e8:	01370137 	.word	0x01370137
 80027ec:	01370137 	.word	0x01370137
 80027f0:	01310137 	.word	0x01310137
 80027f4:	01370137 	.word	0x01370137
 80027f8:	01370137 	.word	0x01370137
 80027fc:	01370137 	.word	0x01370137
 8002800:	01370137 	.word	0x01370137
 8002804:	01370137 	.word	0x01370137
 8002808:	01370137 	.word	0x01370137
 800280c:	01370137 	.word	0x01370137
 8002810:	01370137 	.word	0x01370137
 8002814:	01370137 	.word	0x01370137
 8002818:	01370137 	.word	0x01370137
 800281c:	01370137 	.word	0x01370137
 8002820:	01370137 	.word	0x01370137
 8002824:	005c0137 	.word	0x005c0137
    }
    break;

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002828:	4980      	ldr	r1, [pc, #512]	; (8002a2c <UI_SetReg+0x2dc>)
 800282a:	fb81 3104 	smull	r3, r1, r1, r4
 800282e:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002832:	4628      	mov	r0, r5
 8002834:	b209      	sxth	r1, r1
 8002836:	2200      	movs	r2, #0
 8002838:	f7fe f9a6 	bl	8000b88 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800283c:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 800283e:	b003      	add	sp, #12
 8002840:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002842:	b2e1      	uxtb	r1, r4
 8002844:	f7ff ff78 	bl	8002738 <UI_SelectMC>
    break;
 8002848:	e7f9      	b.n	800283e <UI_SetReg+0xee>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800284a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800284e:	f000 80d8 	beq.w	8002a02 <UI_SetReg+0x2b2>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002852:	2c01      	cmp	r4, #1
 8002854:	f000 80df 	beq.w	8002a16 <UI_SetReg+0x2c6>
  bool retVal = true;
 8002858:	2001      	movs	r0, #1
}
 800285a:	b003      	add	sp, #12
 800285c:	bd30      	pop	{r4, r5, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800285e:	6810      	ldr	r0, [r2, #0]
 8002860:	b221      	sxth	r1, r4
 8002862:	f003 fa47 	bl	8005cf4 <PID_SetKP>
  bool retVal = true;
 8002866:	2001      	movs	r0, #1
    break;
 8002868:	e7e9      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800286a:	6810      	ldr	r0, [r2, #0]
 800286c:	b221      	sxth	r1, r4
 800286e:	f003 fa43 	bl	8005cf8 <PID_SetKI>
  bool retVal = true;
 8002872:	2001      	movs	r0, #1
    break;
 8002874:	e7e3      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002876:	6810      	ldr	r0, [r2, #0]
 8002878:	b221      	sxth	r1, r4
 800287a:	f003 fa4d 	bl	8005d18 <PID_SetKD>
  bool retVal = true;
 800287e:	2001      	movs	r0, #1
    break;
 8002880:	e7dd      	b.n	800283e <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 8002882:	4628      	mov	r0, r5
 8002884:	f7fe fa28 	bl	8000cd8 <MCI_GetIqdref>
 8002888:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 800288a:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800288e:	4628      	mov	r0, r5
 8002890:	9901      	ldr	r1, [sp, #4]
 8002892:	f7fe f98d 	bl	8000bb0 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002896:	2001      	movs	r0, #1
    break;
 8002898:	e7d1      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 800289a:	6850      	ldr	r0, [r2, #4]
 800289c:	b221      	sxth	r1, r4
 800289e:	f003 fa29 	bl	8005cf4 <PID_SetKP>
  bool retVal = true;
 80028a2:	2001      	movs	r0, #1
    break;
 80028a4:	e7cb      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80028a6:	6850      	ldr	r0, [r2, #4]
 80028a8:	b221      	sxth	r1, r4
 80028aa:	f003 fa25 	bl	8005cf8 <PID_SetKI>
  bool retVal = true;
 80028ae:	2001      	movs	r0, #1
    break;
 80028b0:	e7c5      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80028b2:	6850      	ldr	r0, [r2, #4]
 80028b4:	b221      	sxth	r1, r4
 80028b6:	f003 fa2f 	bl	8005d18 <PID_SetKD>
  bool retVal = true;
 80028ba:	2001      	movs	r0, #1
    break;
 80028bc:	e7bf      	b.n	800283e <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 80028be:	4628      	mov	r0, r5
 80028c0:	f7fe fa0a 	bl	8000cd8 <MCI_GetIqdref>
 80028c4:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80028c6:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80028ca:	4628      	mov	r0, r5
 80028cc:	9901      	ldr	r1, [sp, #4]
 80028ce:	f7fe f96f 	bl	8000bb0 <MCI_SetCurrentReferences>
  bool retVal = true;
 80028d2:	2001      	movs	r0, #1
    break;
 80028d4:	e7b3      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80028d6:	6890      	ldr	r0, [r2, #8]
 80028d8:	b221      	sxth	r1, r4
 80028da:	f003 fa0b 	bl	8005cf4 <PID_SetKP>
  bool retVal = true;
 80028de:	2001      	movs	r0, #1
    break;
 80028e0:	e7ad      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80028e2:	6890      	ldr	r0, [r2, #8]
 80028e4:	b221      	sxth	r1, r4
 80028e6:	f003 fa07 	bl	8005cf8 <PID_SetKI>
  bool retVal = true;
 80028ea:	2001      	movs	r0, #1
    break;
 80028ec:	e7a7      	b.n	800283e <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80028ee:	6890      	ldr	r0, [r2, #8]
 80028f0:	b221      	sxth	r1, r4
 80028f2:	f003 fa11 	bl	8005d18 <PID_SetKD>
  bool retVal = true;
 80028f6:	2001      	movs	r0, #1
    break;
 80028f8:	e7a1      	b.n	800283e <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80028fa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80028fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002900:	0f19      	lsrs	r1, r3, #28
 8002902:	2909      	cmp	r1, #9
 8002904:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002908:	d06f      	beq.n	80029ea <UI_SetReg+0x29a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800290a:	2b09      	cmp	r3, #9
 800290c:	d1a4      	bne.n	8002858 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 800290e:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002910:	2d00      	cmp	r5, #0
 8002912:	d0a1      	beq.n	8002858 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002914:	aa01      	add	r2, sp, #4
 8002916:	f10d 0102 	add.w	r1, sp, #2
 800291a:	4628      	mov	r0, r5
 800291c:	f004 f9ee 	bl	8006cfc <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002920:	b221      	sxth	r1, r4
 8002922:	4628      	mov	r0, r5
 8002924:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002928:	f004 f9f0 	bl	8006d0c <STO_PLL_SetObserverGains>
 800292c:	e794      	b.n	8002858 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800292e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002930:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002934:	0f19      	lsrs	r1, r3, #28
 8002936:	2909      	cmp	r1, #9
 8002938:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800293c:	d051      	beq.n	80029e2 <UI_SetReg+0x292>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800293e:	2b09      	cmp	r3, #9
 8002940:	d18a      	bne.n	8002858 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002942:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002944:	2d00      	cmp	r5, #0
 8002946:	d087      	beq.n	8002858 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002948:	aa01      	add	r2, sp, #4
 800294a:	f10d 0102 	add.w	r1, sp, #2
 800294e:	4628      	mov	r0, r5
 8002950:	f004 f9d4 	bl	8006cfc <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002954:	b222      	sxth	r2, r4
 8002956:	4628      	mov	r0, r5
 8002958:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800295c:	f004 f9d6 	bl	8006d0c <STO_PLL_SetObserverGains>
 8002960:	e77a      	b.n	8002858 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002962:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002968:	0f19      	lsrs	r1, r3, #28
 800296a:	2909      	cmp	r1, #9
 800296c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002970:	d03f      	beq.n	80029f2 <UI_SetReg+0x2a2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002972:	2b09      	cmp	r3, #9
 8002974:	f47f af70 	bne.w	8002858 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002978:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 800297a:	2d00      	cmp	r5, #0
 800297c:	f43f af6c 	beq.w	8002858 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002980:	aa01      	add	r2, sp, #4
 8002982:	f10d 0102 	add.w	r1, sp, #2
 8002986:	4628      	mov	r0, r5
 8002988:	f004 f9c4 	bl	8006d14 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 800298c:	b222      	sxth	r2, r4
 800298e:	4628      	mov	r0, r5
 8002990:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002994:	f004 f9cc 	bl	8006d30 <STO_SetPLLGains>
 8002998:	e75e      	b.n	8002858 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800299a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800299c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029a0:	0f19      	lsrs	r1, r3, #28
 80029a2:	2909      	cmp	r1, #9
 80029a4:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80029a8:	d027      	beq.n	80029fa <UI_SetReg+0x2aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	f47f af54 	bne.w	8002858 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 80029b0:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	f43f af50 	beq.w	8002858 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80029b8:	aa01      	add	r2, sp, #4
 80029ba:	f10d 0102 	add.w	r1, sp, #2
 80029be:	4628      	mov	r0, r5
 80029c0:	f004 f9a8 	bl	8006d14 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 80029c4:	b221      	sxth	r1, r4
 80029c6:	4628      	mov	r0, r5
 80029c8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80029cc:	f004 f9b0 	bl	8006d30 <STO_SetPLLGains>
 80029d0:	e742      	b.n	8002858 <UI_SetReg+0x108>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80029d2:	4628      	mov	r0, r5
 80029d4:	b221      	sxth	r1, r4
 80029d6:	f7fe f99f 	bl	8000d18 <MCI_SetIdref>
  bool retVal = true;
 80029da:	2001      	movs	r0, #1
    break;
 80029dc:	e72f      	b.n	800283e <UI_SetReg+0xee>
    retVal = false;
 80029de:	2000      	movs	r0, #0
 80029e0:	e72d      	b.n	800283e <UI_SetReg+0xee>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029e2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80029e4:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029e6:	d1ad      	bne.n	8002944 <UI_SetReg+0x1f4>
 80029e8:	e7ab      	b.n	8002942 <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ea:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80029ec:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ee:	d18f      	bne.n	8002910 <UI_SetReg+0x1c0>
 80029f0:	e78d      	b.n	800290e <UI_SetReg+0x1be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029f2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80029f4:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029f6:	d1c0      	bne.n	800297a <UI_SetReg+0x22a>
 80029f8:	e7be      	b.n	8002978 <UI_SetReg+0x228>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029fa:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80029fc:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029fe:	d1d8      	bne.n	80029b2 <UI_SetReg+0x262>
 8002a00:	e7d6      	b.n	80029b0 <UI_SetReg+0x260>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002a02:	4628      	mov	r0, r5
 8002a04:	f7fe f984 	bl	8000d10 <MCI_GetTeref>
 8002a08:	4622      	mov	r2, r4
 8002a0a:	4601      	mov	r1, r0
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f7fe f8c3 	bl	8000b98 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002a12:	2001      	movs	r0, #1
 8002a14:	e713      	b.n	800283e <UI_SetReg+0xee>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002a16:	4628      	mov	r0, r5
 8002a18:	f7fe f942 	bl	8000ca0 <MCI_GetMecSpeedRefUnit>
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4628      	mov	r0, r5
 8002a22:	f7fe f8b1 	bl	8000b88 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002a26:	4620      	mov	r0, r4
 8002a28:	e709      	b.n	800283e <UI_SetReg+0xee>
 8002a2a:	bf00      	nop
 8002a2c:	2aaaaaab 	.word	0x2aaaaaab

08002a30 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002a30:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a32:	6a03      	ldr	r3, [r0, #32]
 8002a34:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8002a38:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a3a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002a3e:	290d      	cmp	r1, #13
 8002a40:	d82c      	bhi.n	8002a9c <UI_ExecCmd+0x6c>
 8002a42:	e8df f001 	tbb	[pc, r1]
 8002a46:	1217      	.short	0x1217
 8002a48:	0e0c0c07 	.word	0x0e0c0c07
 8002a4c:	2b21261c 	.word	0x2b21261c
 8002a50:	122b2b2b 	.word	0x122b2b2b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7fe f909 	bl	8000c6c <MCI_GetSTMState>
 8002a5a:	2806      	cmp	r0, #6
 8002a5c:	d020      	beq.n	8002aa0 <UI_ExecCmd+0x70>
  bool retVal = true;
 8002a5e:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002a60:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002a62:	4620      	mov	r0, r4
 8002a64:	f7fe f902 	bl	8000c6c <MCI_GetSTMState>
 8002a68:	b120      	cbz	r0, 8002a74 <UI_ExecCmd+0x44>
        MCI_StopMotor(pMCI);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7fe f8b8 	bl	8000be0 <MCI_StopMotor>
  bool retVal = true;
 8002a70:	2001      	movs	r0, #1
}
 8002a72:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7fe f8a9 	bl	8000bcc <MCI_StartMotor>
  bool retVal = true;
 8002a7a:	2001      	movs	r0, #1
}
 8002a7c:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7fe f8b2 	bl	8000be8 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002a84:	2001      	movs	r0, #1
}
 8002a86:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7fe f949 	bl	8000d20 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002a8e:	2001      	movs	r0, #1
}
 8002a90:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002a92:	4620      	mov	r0, r4
 8002a94:	f7fe f8ac 	bl	8000bf0 <MCI_EncoderAlign>
  bool retVal = true;
 8002a98:	2001      	movs	r0, #1
}
 8002a9a:	bd10      	pop	{r4, pc}
    retVal = false;
 8002a9c:	2000      	movs	r0, #0
}
 8002a9e:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7fe f8f1 	bl	8000c88 <MCI_StopRamp>
  bool retVal = true;
 8002aa6:	2001      	movs	r0, #1
}
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	bf00      	nop

08002aac <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002aac:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ab0:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002ab4:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002ab6:	fb83 c301 	smull	ip, r3, r3, r1
 8002aba:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002abe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002ac2:	b209      	sxth	r1, r1
 8002ac4:	f7fe f860 	bl	8000b88 <MCI_ExecSpeedRamp>
  return true;
}
 8002ac8:	2001      	movs	r0, #1
 8002aca:	bd10      	pop	{r4, pc}
 8002acc:	2aaaaaab 	.word	0x2aaaaaab

08002ad0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002ad0:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ad2:	6a03      	ldr	r3, [r0, #32]
 8002ad4:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002ad8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002adc:	f7fe f85c 	bl	8000b98 <MCI_ExecTorqueRamp>
  return true;
}
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	bd10      	pop	{r4, pc}

08002ae4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002ae6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002aea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002aec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002af0:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002af2:	b194      	cbz	r4, 8002b1a <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002af4:	4620      	mov	r0, r4
 8002af6:	461e      	mov	r6, r3
 8002af8:	4617      	mov	r7, r2
 8002afa:	460d      	mov	r5, r1
 8002afc:	f003 fea8 	bl	8006850 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002b00:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002b02:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002b04:	4620      	mov	r0, r4
 8002b06:	f003 fea9 	bl	800685c <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002b0a:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002b0c:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f003 feac 	bl	800686c <RUC_GetPhaseFinalTorque>
 8002b14:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 8002b16:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002b18:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b1e:	bf00      	nop

08002b20 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002b24:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002b28:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002b2a:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002b2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002b32:	695c      	ldr	r4, [r3, #20]
{
 8002b34:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f003 fe78 	bl	800682c <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002b3c:	463a      	mov	r2, r7
 8002b3e:	4629      	mov	r1, r5
 8002b40:	4620      	mov	r0, r4
 8002b42:	f003 fe79 	bl	8006838 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002b46:	4620      	mov	r0, r4
 8002b48:	4632      	mov	r2, r6
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f003 fe7a 	bl	8006844 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002b50:	2001      	movs	r0, #1
 8002b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b54 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002b54:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b56:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002b58:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b5c:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
  currComp.d = hIdRef;
 8002b60:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b64:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002b68:	9901      	ldr	r1, [sp, #4]
}
 8002b6a:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002b6c:	f7fe b820 	b.w	8000bb0 <MCI_SetCurrentReferences>

08002b70 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002b70:	2000      	movs	r0, #0
 8002b72:	4770      	bx	lr

08002b74 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002b74:	6943      	ldr	r3, [r0, #20]
 8002b76:	b103      	cbz	r3, 8002b7a <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002b78:	4718      	bx	r3
  }
}
 8002b7a:	4770      	bx	lr

08002b7c <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002b7c:	6983      	ldr	r3, [r0, #24]
 8002b7e:	b103      	cbz	r3, 8002b82 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002b80:	4718      	bx	r3
  }
}
 8002b82:	4770      	bx	lr

08002b84 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002b84:	6843      	ldr	r3, [r0, #4]
 8002b86:	b103      	cbz	r3, 8002b8a <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002b88:	4718      	bx	r3
  }
}
 8002b8a:	4770      	bx	lr

08002b8c <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002b8c:	6883      	ldr	r3, [r0, #8]
 8002b8e:	b103      	cbz	r3, 8002b92 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002b90:	4718      	bx	r3
  }
  return retVal;
}
 8002b92:	2089      	movs	r0, #137	; 0x89
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <UI_GetReg>:
{
 8002b98:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b9a:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002b9e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002ba2:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002ba4:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ba8:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 )
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	f000 8089 	beq.w	8002cc4 <UI_GetReg+0x12c>
    *success = true;
 8002bb2:	2401      	movs	r4, #1
 8002bb4:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 8002bb6:	2981      	cmp	r1, #129	; 0x81
 8002bb8:	f200 82bb 	bhi.w	8003132 <UI_GetReg+0x59a>
 8002bbc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bc0:	01a1018a 	.word	0x01a1018a
 8002bc4:	0199019d 	.word	0x0199019d
 8002bc8:	01a90192 	.word	0x01a90192
 8002bcc:	01f901a5 	.word	0x01f901a5
 8002bd0:	028e010e 	.word	0x028e010e
 8002bd4:	0286028a 	.word	0x0286028a
 8002bd8:	02800109 	.word	0x02800109
 8002bdc:	0278027c 	.word	0x0278027c
 8002be0:	024b01fd 	.word	0x024b01fd
 8002be4:	02b902b9 	.word	0x02b902b9
 8002be8:	0229023c 	.word	0x0229023c
 8002bec:	02b902b9 	.word	0x02b902b9
 8002bf0:	022502b9 	.word	0x022502b9
 8002bf4:	025e0262 	.word	0x025e0262
 8002bf8:	02210266 	.word	0x02210266
 8002bfc:	02ad02b2 	.word	0x02ad02b2
 8002c00:	02b902a8 	.word	0x02b902a8
 8002c04:	029c02a1 	.word	0x029c02a1
 8002c08:	02920297 	.word	0x02920297
 8002c0c:	02ad018d 	.word	0x02ad018d
 8002c10:	010e02a8 	.word	0x010e02a8
 8002c14:	020c0109 	.word	0x020c0109
 8002c18:	01e601ef 	.word	0x01e601ef
 8002c1c:	00f801f4 	.word	0x00f801f4
 8002c20:	01780211 	.word	0x01780211
 8002c24:	01550167 	.word	0x01550167
 8002c28:	01310143 	.word	0x01310143
 8002c2c:	02b9011f 	.word	0x02b9011f
 8002c30:	02b902b9 	.word	0x02b902b9
 8002c34:	02b902b9 	.word	0x02b902b9
 8002c38:	011902b9 	.word	0x011902b9
 8002c3c:	02710113 	.word	0x02710113
 8002c40:	0109026a 	.word	0x0109026a
 8002c44:	01ba01ce 	.word	0x01ba01ce
 8002c48:	02b902b9 	.word	0x02b902b9
 8002c4c:	02b902b9 	.word	0x02b902b9
 8002c50:	02b902b9 	.word	0x02b902b9
 8002c54:	02b902b9 	.word	0x02b902b9
 8002c58:	02b902b9 	.word	0x02b902b9
 8002c5c:	02b902b9 	.word	0x02b902b9
 8002c60:	02b902b9 	.word	0x02b902b9
 8002c64:	02b902b9 	.word	0x02b902b9
 8002c68:	02b902b9 	.word	0x02b902b9
 8002c6c:	02b902b9 	.word	0x02b902b9
 8002c70:	02b902b9 	.word	0x02b902b9
 8002c74:	01ad02b9 	.word	0x01ad02b9
 8002c78:	02b902b9 	.word	0x02b902b9
 8002c7c:	02b902b9 	.word	0x02b902b9
 8002c80:	02b902b9 	.word	0x02b902b9
 8002c84:	02b902b9 	.word	0x02b902b9
 8002c88:	02b902b9 	.word	0x02b902b9
 8002c8c:	02b902b9 	.word	0x02b902b9
 8002c90:	02b902b9 	.word	0x02b902b9
 8002c94:	02b902b9 	.word	0x02b902b9
 8002c98:	02b902b9 	.word	0x02b902b9
 8002c9c:	01e201eb 	.word	0x01e201eb
 8002ca0:	02b90284 	.word	0x02b90284
 8002ca4:	01060106 	.word	0x01060106
 8002ca8:	02b902b9 	.word	0x02b902b9
 8002cac:	02b902b9 	.word	0x02b902b9
 8002cb0:	02b902b9 	.word	0x02b902b9
 8002cb4:	02b902b9 	.word	0x02b902b9
 8002cb8:	02b902b9 	.word	0x02b902b9
 8002cbc:	02b902b9 	.word	0x02b902b9
 8002cc0:	010602b9 	.word	0x010602b9
 8002cc4:	2970      	cmp	r1, #112	; 0x70
 8002cc6:	f200 8081 	bhi.w	8002dcc <UI_GetReg+0x234>
 8002cca:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002cce:	0103      	.short	0x0103
 8002cd0:	0116011a 	.word	0x0116011a
 8002cd4:	010b0112 	.word	0x010b0112
 8002cd8:	011e0122 	.word	0x011e0122
 8002cdc:	00870172 	.word	0x00870172
 8002ce0:	02030207 	.word	0x02030207
 8002ce4:	008201ff 	.word	0x008201ff
 8002ce8:	01f501f9 	.word	0x01f501f9
 8002cec:	017601f1 	.word	0x017601f1
 8002cf0:	007f01c4 	.word	0x007f01c4
 8002cf4:	01b5007f 	.word	0x01b5007f
 8002cf8:	007f01a2 	.word	0x007f01a2
 8002cfc:	007f007f 	.word	0x007f007f
 8002d00:	01db019e 	.word	0x01db019e
 8002d04:	01df01d7 	.word	0x01df01d7
 8002d08:	022b019a 	.word	0x022b019a
 8002d0c:	02210226 	.word	0x02210226
 8002d10:	021a007f 	.word	0x021a007f
 8002d14:	02100215 	.word	0x02100215
 8002d18:	0106020b 	.word	0x0106020b
 8002d1c:	02210226 	.word	0x02210226
 8002d20:	00820087 	.word	0x00820087
 8002d24:	01680185 	.word	0x01680185
 8002d28:	016d015f 	.word	0x016d015f
 8002d2c:	018a0071 	.word	0x018a0071
 8002d30:	00e000f1 	.word	0x00e000f1
 8002d34:	00bc00ce 	.word	0x00bc00ce
 8002d38:	009800aa 	.word	0x009800aa
 8002d3c:	007f007f 	.word	0x007f007f
 8002d40:	007f007f 	.word	0x007f007f
 8002d44:	007f007f 	.word	0x007f007f
 8002d48:	008c0092 	.word	0x008c0092
 8002d4c:	01e301ea 	.word	0x01e301ea
 8002d50:	01470082 	.word	0x01470082
 8002d54:	007f0133 	.word	0x007f0133
 8002d58:	007f007f 	.word	0x007f007f
 8002d5c:	007f007f 	.word	0x007f007f
 8002d60:	007f007f 	.word	0x007f007f
 8002d64:	007f007f 	.word	0x007f007f
 8002d68:	007f007f 	.word	0x007f007f
 8002d6c:	007f007f 	.word	0x007f007f
 8002d70:	007f007f 	.word	0x007f007f
 8002d74:	007f007f 	.word	0x007f007f
 8002d78:	007f007f 	.word	0x007f007f
 8002d7c:	007f007f 	.word	0x007f007f
 8002d80:	007f007f 	.word	0x007f007f
 8002d84:	007f0126 	.word	0x007f0126
 8002d88:	007f007f 	.word	0x007f007f
 8002d8c:	007f007f 	.word	0x007f007f
 8002d90:	007f007f 	.word	0x007f007f
 8002d94:	007f007f 	.word	0x007f007f
 8002d98:	007f007f 	.word	0x007f007f
 8002d9c:	007f007f 	.word	0x007f007f
 8002da0:	007f007f 	.word	0x007f007f
 8002da4:	007f007f 	.word	0x007f007f
 8002da8:	0164007f 	.word	0x0164007f
 8002dac:	01fd015b 	.word	0x01fd015b
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002db0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002db6:	0f1a      	lsrs	r2, r3, #28
 8002db8:	3a01      	subs	r2, #1
 8002dba:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002dbe:	2a01      	cmp	r2, #1
 8002dc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8002dc4:	f240 81bd 	bls.w	8003142 <UI_GetReg+0x5aa>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d97c      	bls.n	8002ec6 <UI_GetReg+0x32e>
  int32_t bRetVal = 0;
 8002dcc:	2000      	movs	r0, #0
}
 8002dce:	b010      	add	sp, #64	; 0x40
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f7fd ff80 	bl	8000cd8 <MCI_GetIqdref>
 8002dd8:	1400      	asrs	r0, r0, #16
    break;
 8002dda:	e7f8      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002ddc:	4630      	mov	r0, r6
 8002dde:	f7fd ff7b 	bl	8000cd8 <MCI_GetIqdref>
 8002de2:	b200      	sxth	r0, r0
    break;
 8002de4:	e7f3      	b.n	8002dce <UI_GetReg+0x236>
      if (pHandle->pFctDACGetUserChannelValue)
 8002de6:	6903      	ldr	r3, [r0, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002dec:	2101      	movs	r1, #1
 8002dee:	4798      	blx	r3
 8002df0:	e7ed      	b.n	8002dce <UI_GetReg+0x236>
      if (pHandle->pFctDACGetUserChannelValue)
 8002df2:	6903      	ldr	r3, [r0, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0e9      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4798      	blx	r3
 8002dfc:	e7e7      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002dfe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e04:	0f1a      	lsrs	r2, r3, #28
 8002e06:	2a09      	cmp	r2, #9
 8002e08:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002e0c:	f000 81a3 	beq.w	8003156 <UI_GetReg+0x5be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d1db      	bne.n	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002e14:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d0d8      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8002e1a:	f003 ff4f 	bl	8006cbc <STO_PLL_GetEstimatedBemf>
 8002e1e:	1400      	asrs	r0, r0, #16
 8002e20:	e7d5      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e22:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e28:	0f1a      	lsrs	r2, r3, #28
 8002e2a:	2a09      	cmp	r2, #9
 8002e2c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002e30:	f000 8196 	beq.w	8003160 <UI_GetReg+0x5c8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	d1c9      	bne.n	8002dcc <UI_GetReg+0x234>
        pSPD =  pMCT->pSpeedSensorAux;
 8002e38:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d0c6      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8002e3e:	f003 ff3d 	bl	8006cbc <STO_PLL_GetEstimatedBemf>
 8002e42:	b200      	sxth	r0, r0
 8002e44:	e7c3      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e4c:	0f1a      	lsrs	r2, r3, #28
 8002e4e:	2a09      	cmp	r2, #9
 8002e50:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002e54:	f000 818e 	beq.w	8003174 <UI_GetReg+0x5dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	d1b7      	bne.n	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002e5c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0b4      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8002e62:	f003 ff37 	bl	8006cd4 <STO_PLL_GetEstimatedCurrent>
 8002e66:	1400      	asrs	r0, r0, #16
 8002e68:	e7b1      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e70:	0f1a      	lsrs	r2, r3, #28
 8002e72:	2a09      	cmp	r2, #9
 8002e74:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002e78:	f000 819c 	beq.w	80031b4 <UI_GetReg+0x61c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e7c:	2b09      	cmp	r3, #9
 8002e7e:	d1a5      	bne.n	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002e80:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d0a2      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8002e86:	f003 ff25 	bl	8006cd4 <STO_PLL_GetEstimatedCurrent>
 8002e8a:	b200      	sxth	r0, r0
 8002e8c:	e79f      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e94:	0f1a      	lsrs	r2, r3, #28
 8002e96:	2a09      	cmp	r2, #9
 8002e98:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002e9c:	f000 8174 	beq.w	8003188 <UI_GetReg+0x5f0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	d193      	bne.n	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002ea4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d090      	beq.n	8002dcc <UI_GetReg+0x234>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002eaa:	f003 f9f5 	bl	8006298 <SPD_GetS16Speed>
 8002eae:	e78e      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002eb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002eb6:	0f1a      	lsrs	r2, r3, #28
 8002eb8:	2a09      	cmp	r2, #9
 8002eba:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002ebe:	f000 815e 	beq.w	800317e <UI_GetReg+0x5e6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d182      	bne.n	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002ec6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	f43f af7f 	beq.w	8002dcc <UI_GetReg+0x234>
        bRetVal = SPD_GetElAngle(pSPD);
 8002ece:	f003 f9a7 	bl	8006220 <SPD_GetElAngle>
 8002ed2:	e77c      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002ed4:	f7ff fc38 	bl	8002748 <UI_GetSelectedMC>
    break;
 8002ed8:	e779      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7fd feec 	bl	8000cb8 <MCI_GetIalphabeta>
 8002ee0:	1400      	asrs	r0, r0, #16
    break;
 8002ee2:	e774      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f7fd fedb 	bl	8000ca0 <MCI_GetMecSpeedRefUnit>
 8002eea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002eee:	0040      	lsls	r0, r0, #1
    break;
 8002ef0:	e76d      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7fd febe 	bl	8000c74 <MCI_GetControlMode>
    break;
 8002ef8:	e769      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002efa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002efc:	f003 fb38 	bl	8006570 <STM_GetState>
	break;
 8002f00:	e765      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002f02:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002f04:	f003 fb42 	bl	800658c <STM_GetFaultState>
	break;
 8002f08:	e761      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002f0a:	6828      	ldr	r0, [r5, #0]
 8002f0c:	f002 fefa 	bl	8005d04 <PID_GetKI>
    break;
 8002f10:	e75d      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002f12:	6828      	ldr	r0, [r5, #0]
 8002f14:	f002 fef2 	bl	8005cfc <PID_GetKP>
    break;
 8002f18:	e759      	b.n	8002dce <UI_GetReg+0x236>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f7fd feaa 	bl	8000c74 <MCI_GetControlMode>
 8002f20:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f22:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002f24:	f000 814b 	beq.w	80031be <UI_GetReg+0x626>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f28:	f7fd feba 	bl	8000ca0 <MCI_GetMecSpeedRefUnit>
 8002f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f30:	0040      	lsls	r0, r0, #1
 8002f32:	e74c      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f34:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3a:	0f1a      	lsrs	r2, r3, #28
 8002f3c:	2a09      	cmp	r2, #9
 8002f3e:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002f42:	f000 8103 	beq.w	800314c <UI_GetReg+0x5b4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f46:	2b09      	cmp	r3, #9
 8002f48:	f47f af40 	bne.w	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002f4c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	f43f af3c 	beq.w	8002dcc <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002f54:	f003 fefe 	bl	8006d54 <STO_PLL_GetObservedBemfLevel>
 8002f58:	1400      	asrs	r0, r0, #16
 8002f5a:	e738      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f62:	0f1a      	lsrs	r2, r3, #28
 8002f64:	2a09      	cmp	r2, #9
 8002f66:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002f6a:	f000 812e 	beq.w	80031ca <UI_GetReg+0x632>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	f47f af2c 	bne.w	8002dcc <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002f74:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f76:	2800      	cmp	r0, #0
 8002f78:	f43f af28 	beq.w	8002dcc <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002f7c:	f003 fee6 	bl	8006d4c <STO_PLL_GetEstimatedBemfLevel>
 8002f80:	1400      	asrs	r0, r0, #16
 8002f82:	e724      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002f84:	6828      	ldr	r0, [r5, #0]
 8002f86:	f002 fec5 	bl	8005d14 <PID_GetKIDivisor>
    break;
 8002f8a:	e720      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f7fd feb5 	bl	8000cfc <MCI_GetValphabeta>
 8002f92:	b200      	sxth	r0, r0
    break;
 8002f94:	e71b      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002f96:	6828      	ldr	r0, [r5, #0]
 8002f98:	f002 feba 	bl	8005d10 <PID_GetKPDivisor>
    break;
 8002f9c:	e717      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f7fd fea2 	bl	8000ce8 <MCI_GetVqd>
 8002fa4:	1400      	asrs	r0, r0, #16
    break;
 8002fa6:	e712      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f7fd fea7 	bl	8000cfc <MCI_GetValphabeta>
 8002fae:	1400      	asrs	r0, r0, #16
    break;
 8002fb0:	e70d      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002fb2:	6828      	ldr	r0, [r5, #0]
 8002fb4:	f002 feb2 	bl	8005d1c <PID_GetKD>
    break;
 8002fb8:	e709      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fc0:	0f1a      	lsrs	r2, r3, #28
 8002fc2:	2a09      	cmp	r2, #9
 8002fc4:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002fc8:	f000 8104 	beq.w	80031d4 <UI_GetReg+0x63c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	f000 8104 	beq.w	80031da <UI_GetReg+0x642>
      bRetVal = (int32_t)hPgain;
 8002fd2:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8002fd6:	e6fa      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f7fd fe85 	bl	8000ce8 <MCI_GetVqd>
 8002fde:	b200      	sxth	r0, r0
    break;
 8002fe0:	e6f5      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fe2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fe8:	0f1a      	lsrs	r2, r3, #28
 8002fea:	3a01      	subs	r2, #1
 8002fec:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002ff0:	2a01      	cmp	r2, #1
 8002ff2:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ff6:	f240 809f 	bls.w	8003138 <UI_GetReg+0x5a0>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	f63f aee6 	bhi.w	8002dcc <UI_GetReg+0x234>
 8003000:	e750      	b.n	8002ea4 <UI_GetReg+0x30c>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8003002:	2101      	movs	r1, #1
 8003004:	f7ff fdc2 	bl	8002b8c <UI_GetDAC>
    break;
 8003008:	e6e1      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 800300a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800300c:	f001 ff56 	bl	8004ebc <VBS_GetAvBusVoltage_V>
    break;
 8003010:	e6dd      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003012:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003018:	0f1a      	lsrs	r2, r3, #28
 800301a:	2a09      	cmp	r2, #9
 800301c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003020:	f000 80c3 	beq.w	80031aa <UI_GetReg+0x612>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003024:	2b09      	cmp	r3, #9
 8003026:	d1d4      	bne.n	8002fd2 <UI_GetReg+0x43a>
        pSPD = pMCT->pSpeedSensorAux;
 8003028:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800302a:	2800      	cmp	r0, #0
 800302c:	d0d1      	beq.n	8002fd2 <UI_GetReg+0x43a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800302e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003030:	a90e      	add	r1, sp, #56	; 0x38
 8003032:	f003 fe6f 	bl	8006d14 <STO_GetPLLGains>
 8003036:	e7cc      	b.n	8002fd2 <UI_GetReg+0x43a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003038:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800303e:	0f1a      	lsrs	r2, r3, #28
 8003040:	2a09      	cmp	r2, #9
 8003042:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003046:	f000 80a4 	beq.w	8003192 <UI_GetReg+0x5fa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800304a:	2b09      	cmp	r3, #9
 800304c:	f000 80a4 	beq.w	8003198 <UI_GetReg+0x600>
      bRetVal = (int32_t)hIgain;
 8003050:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8003054:	e6bb      	b.n	8002dce <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003056:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800305c:	0f1a      	lsrs	r2, r3, #28
 800305e:	2a09      	cmp	r2, #9
 8003060:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003064:	f000 8081 	beq.w	800316a <UI_GetReg+0x5d2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003068:	2b09      	cmp	r3, #9
 800306a:	d1f1      	bne.n	8003050 <UI_GetReg+0x4b8>
        pSPD = pMCT->pSpeedSensorAux;
 800306c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800306e:	2800      	cmp	r0, #0
 8003070:	d0ee      	beq.n	8003050 <UI_GetReg+0x4b8>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003072:	aa0f      	add	r2, sp, #60	; 0x3c
 8003074:	a90e      	add	r1, sp, #56	; 0x38
 8003076:	f003 fe41 	bl	8006cfc <STO_PLL_GetObserverGains>
 800307a:	e7e9      	b.n	8003050 <UI_GetReg+0x4b8>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800307c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800307e:	f002 fdd5 	bl	8005c2c <MPM_GetAvrgElMotorPowerW>
    break;
 8003082:	e6a4      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003084:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003086:	f002 fe17 	bl	8005cb8 <NTC_GetAvTemp_C>
    break;
 800308a:	e6a0      	b.n	8002dce <UI_GetReg+0x236>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 800308c:	2100      	movs	r1, #0
 800308e:	f7ff fd7d 	bl	8002b8c <UI_GetDAC>
    break;
 8003092:	e69c      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003094:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003096:	f003 f9bf 	bl	8006418 <STC_GetMinAppNegativeMecSpeedUnit>
 800309a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800309e:	0040      	lsls	r0, r0, #1
    break;
 80030a0:	e695      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80030a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80030a4:	f003 f9b6 	bl	8006414 <STC_GetMaxAppPositiveMecSpeedUnit>
 80030a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030ac:	0040      	lsls	r0, r0, #1
    break;
 80030ae:	e68e      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80030b0:	68a8      	ldr	r0, [r5, #8]
 80030b2:	f002 fe33 	bl	8005d1c <PID_GetKD>
    break;
 80030b6:	e68a      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80030b8:	68a8      	ldr	r0, [r5, #8]
 80030ba:	f002 fe23 	bl	8005d04 <PID_GetKI>
    break;
 80030be:	e686      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80030c0:	68a8      	ldr	r0, [r5, #8]
 80030c2:	f002 fe1b 	bl	8005cfc <PID_GetKP>
    break;
 80030c6:	e682      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)(MC_UID);
 80030c8:	4848      	ldr	r0, [pc, #288]	; (80031ec <UI_GetReg+0x654>)
 80030ca:	e680      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80030cc:	6868      	ldr	r0, [r5, #4]
 80030ce:	f002 fe25 	bl	8005d1c <PID_GetKD>
    break;
 80030d2:	e67c      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80030d4:	6868      	ldr	r0, [r5, #4]
 80030d6:	f002 fe15 	bl	8005d04 <PID_GetKI>
    break;
 80030da:	e678      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80030dc:	6868      	ldr	r0, [r5, #4]
 80030de:	f002 fe0d 	bl	8005cfc <PID_GetKP>
    break;
 80030e2:	e674      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7fd fde7 	bl	8000cb8 <MCI_GetIalphabeta>
 80030ea:	b200      	sxth	r0, r0
    break;
 80030ec:	e66f      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIab(pMCI).b;
 80030ee:	4630      	mov	r0, r6
 80030f0:	f7fd fdda 	bl	8000ca8 <MCI_GetIab>
 80030f4:	1400      	asrs	r0, r0, #16
    break;
 80030f6:	e66a      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIab(pMCI).a;
 80030f8:	4630      	mov	r0, r6
 80030fa:	f7fd fdd5 	bl	8000ca8 <MCI_GetIab>
 80030fe:	b200      	sxth	r0, r0
    break;
 8003100:	e665      	b.n	8002dce <UI_GetReg+0x236>
      if (pMCT->pRevupCtrl)
 8003102:	6968      	ldr	r0, [r5, #20]
 8003104:	2800      	cmp	r0, #0
 8003106:	f43f ae61 	beq.w	8002dcc <UI_GetReg+0x234>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 800310a:	f003 fbb7 	bl	800687c <RUC_GetNumberOfPhases>
 800310e:	e65e      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003110:	4630      	mov	r0, r6
 8003112:	f7fd fdd9 	bl	8000cc8 <MCI_GetIqd>
 8003116:	1400      	asrs	r0, r0, #16
    break;
 8003118:	e659      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = MCI_GetIqd(pMCI).q;
 800311a:	4630      	mov	r0, r6
 800311c:	f7fd fdd4 	bl	8000cc8 <MCI_GetIqd>
 8003120:	b200      	sxth	r0, r0
    break;
 8003122:	e654      	b.n	8002dce <UI_GetReg+0x236>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003124:	4630      	mov	r0, r6
 8003126:	f7fd fdb3 	bl	8000c90 <MCI_GetAvrgMecSpeedUnit>
 800312a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800312e:	0040      	lsls	r0, r0, #1
    break;
 8003130:	e64d      	b.n	8002dce <UI_GetReg+0x236>
        *success = false;
 8003132:	2000      	movs	r0, #0
 8003134:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8003136:	e64a      	b.n	8002dce <UI_GetReg+0x236>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003138:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800313a:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800313c:	f63f aeb3 	bhi.w	8002ea6 <UI_GetReg+0x30e>
 8003140:	e6b0      	b.n	8002ea4 <UI_GetReg+0x30c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003142:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003144:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003146:	f63f aebf 	bhi.w	8002ec8 <UI_GetReg+0x330>
 800314a:	e6bc      	b.n	8002ec6 <UI_GetReg+0x32e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800314c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800314e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003150:	f47f aefd 	bne.w	8002f4e <UI_GetReg+0x3b6>
 8003154:	e6fa      	b.n	8002f4c <UI_GetReg+0x3b4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003156:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8003158:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800315a:	f47f ae5c 	bne.w	8002e16 <UI_GetReg+0x27e>
 800315e:	e659      	b.n	8002e14 <UI_GetReg+0x27c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003160:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003162:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003164:	f47f ae69 	bne.w	8002e3a <UI_GetReg+0x2a2>
 8003168:	e666      	b.n	8002e38 <UI_GetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800316a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800316c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800316e:	f47f af7e 	bne.w	800306e <UI_GetReg+0x4d6>
 8003172:	e77b      	b.n	800306c <UI_GetReg+0x4d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003174:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003176:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003178:	f47f ae71 	bne.w	8002e5e <UI_GetReg+0x2c6>
 800317c:	e66e      	b.n	8002e5c <UI_GetReg+0x2c4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800317e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003180:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003182:	f47f aea1 	bne.w	8002ec8 <UI_GetReg+0x330>
 8003186:	e69e      	b.n	8002ec6 <UI_GetReg+0x32e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003188:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800318a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800318c:	f47f ae8b 	bne.w	8002ea6 <UI_GetReg+0x30e>
 8003190:	e688      	b.n	8002ea4 <UI_GetReg+0x30c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003192:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003194:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003196:	d100      	bne.n	800319a <UI_GetReg+0x602>
        pSPD = pMCT->pSpeedSensorAux;
 8003198:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800319a:	2800      	cmp	r0, #0
 800319c:	f43f af58 	beq.w	8003050 <UI_GetReg+0x4b8>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80031a0:	aa0f      	add	r2, sp, #60	; 0x3c
 80031a2:	a90e      	add	r1, sp, #56	; 0x38
 80031a4:	f003 fdb6 	bl	8006d14 <STO_GetPLLGains>
 80031a8:	e752      	b.n	8003050 <UI_GetReg+0x4b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031aa:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80031ac:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ae:	f47f af3c 	bne.w	800302a <UI_GetReg+0x492>
 80031b2:	e739      	b.n	8003028 <UI_GetReg+0x490>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80031b6:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031b8:	f47f ae63 	bne.w	8002e82 <UI_GetReg+0x2ea>
 80031bc:	e660      	b.n	8002e80 <UI_GetReg+0x2e8>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80031be:	f7fd fd5b 	bl	8000c78 <MCI_GetLastRampFinalSpeed>
 80031c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031c6:	0040      	lsls	r0, r0, #1
 80031c8:	e601      	b.n	8002dce <UI_GetReg+0x236>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ca:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80031cc:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031ce:	f47f aed2 	bne.w	8002f76 <UI_GetReg+0x3de>
 80031d2:	e6cf      	b.n	8002f74 <UI_GetReg+0x3dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031d4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80031d6:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80031d8:	d100      	bne.n	80031dc <UI_GetReg+0x644>
        pSPD = pMCT->pSpeedSensorAux;
 80031da:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80031dc:	2800      	cmp	r0, #0
 80031de:	f43f aef8 	beq.w	8002fd2 <UI_GetReg+0x43a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80031e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80031e4:	a90e      	add	r1, sp, #56	; 0x38
 80031e6:	f003 fd89 	bl	8006cfc <STO_PLL_GetObserverGains>
 80031ea:	e6f2      	b.n	8002fd2 <UI_GetReg+0x43a>
 80031ec:	34a6847a 	.word	0x34a6847a

080031f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <SystemInit+0x18>)
 80031f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80031fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003202:	6099      	str	r1, [r3, #8]
#endif
}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800320e:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <HAL_InitTick+0x3c>)
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_InitTick+0x40>)
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
{
 8003216:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800321c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003220:	fbb3 f0f0 	udiv	r0, r3, r0
 8003224:	f000 fbba 	bl	800399c <HAL_SYSTICK_Config>
 8003228:	b908      	cbnz	r0, 800322e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322a:	2d0f      	cmp	r5, #15
 800322c:	d901      	bls.n	8003232 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800322e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003230:	bd38      	pop	{r3, r4, r5, pc}
 8003232:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003234:	4602      	mov	r2, r0
 8003236:	4629      	mov	r1, r5
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f000 fb6a 	bl	8003914 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_InitTick+0x44>)
 8003242:	4620      	mov	r0, r4
 8003244:	601d      	str	r5, [r3, #0]
}
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000700 	.word	0x20000700
 800324c:	200006fc 	.word	0x200006fc
 8003250:	20000704 	.word	0x20000704

08003254 <HAL_Init>:
{
 8003254:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_Init+0x30>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003266:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003270:	2003      	movs	r0, #3
 8003272:	f000 fb3d 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003276:	2004      	movs	r0, #4
 8003278:	f7ff ffc8 	bl	800320c <HAL_InitTick>
  HAL_MspInit();
 800327c:	f7fe fedc 	bl	8002038 <HAL_MspInit>
}
 8003280:	2000      	movs	r0, #0
 8003282:	bd08      	pop	{r3, pc}
 8003284:	40023c00 	.word	0x40023c00

08003288 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003288:	4a03      	ldr	r2, [pc, #12]	; (8003298 <HAL_IncTick+0x10>)
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <HAL_IncTick+0x14>)
 800328c:	6811      	ldr	r1, [r2, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	440b      	add	r3, r1
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000b0c 	.word	0x20000b0c
 800329c:	20000700 	.word	0x20000700

080032a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <HAL_GetTick+0x8>)
 80032a2:	6818      	ldr	r0, [r3, #0]
}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000b0c 	.word	0x20000b0c

080032ac <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032ac:	2800      	cmp	r0, #0
 80032ae:	f000 8091 	beq.w	80033d4 <HAL_ADC_Init+0x128>
{
 80032b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80032b6:	4604      	mov	r4, r0
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	f000 8081 	beq.w	80033c0 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032c0:	06db      	lsls	r3, r3, #27
 80032c2:	d504      	bpl.n	80032ce <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032c4:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80032c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80032ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032d2:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032d4:	4d4d      	ldr	r5, [pc, #308]	; (800340c <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 80032d6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80032da:	f022 0202 	bic.w	r2, r2, #2
 80032de:	f042 0202 	orr.w	r2, r2, #2
 80032e2:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032e4:	684a      	ldr	r2, [r1, #4]
 80032e6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80032ea:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032ec:	684a      	ldr	r2, [r1, #4]
 80032ee:	6860      	ldr	r0, [r4, #4]
 80032f0:	4302      	orrs	r2, r0
 80032f2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032f4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032f6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032f8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032fa:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032fc:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003300:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330a:	6858      	ldr	r0, [r3, #4]
 800330c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8003310:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003312:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003314:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003316:	4339      	orrs	r1, r7
 8003318:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003320:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003322:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003324:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003326:	ea42 0206 	orr.w	r2, r2, r6
 800332a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332c:	d054      	beq.n	80033d8 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800332e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003330:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003332:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8003336:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	4310      	orrs	r0, r2
 800333c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003344:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	432a      	orrs	r2, r5
 800334a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800334c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800334e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003350:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003354:	f021 0102 	bic.w	r1, r1, #2
 8003358:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8003360:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003362:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003364:	2800      	cmp	r0, #0
 8003366:	d140      	bne.n	80033ea <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003370:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003372:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003376:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003378:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800337e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003380:	3d01      	subs	r5, #1
 8003382:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8003386:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003388:	6898      	ldr	r0, [r3, #8]
 800338a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800338e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8003396:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800339e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80033a2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80033a8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80033ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80033b8:	2300      	movs	r3, #0
 80033ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80033be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80033c0:	f7fe fe58 	bl	8002074 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80033c8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033cc:	06db      	lsls	r3, r3, #27
 80033ce:	f53f af79 	bmi.w	80032c4 <HAL_ADC_Init+0x18>
 80033d2:	e77c      	b.n	80032ce <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
}
 80033d6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	e7b0      	b.n	800334c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033f0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033f8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	3901      	subs	r1, #1
 80033fe:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	e7b3      	b.n	800336e <HAL_ADC_Init+0xc2>
 8003406:	bf00      	nop
 8003408:	40012300 	.word	0x40012300
 800340c:	0f000001 	.word	0x0f000001

08003410 <HAL_ADC_Start>:
{
 8003410:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 8003412:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003416:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003418:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800341a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800341c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800341e:	d05c      	beq.n	80034da <HAL_ADC_Start+0xca>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003420:	6802      	ldr	r2, [r0, #0]
 8003422:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8003424:	2101      	movs	r1, #1
 8003426:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800342a:	07d9      	lsls	r1, r3, #31
 800342c:	d414      	bmi.n	8003458 <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_ADC_Start+0xe8>)
 8003430:	4c32      	ldr	r4, [pc, #200]	; (80034fc <HAL_ADC_Start+0xec>)
 8003432:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8003434:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003436:	fba4 4303 	umull	r4, r3, r4, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8003440:	f041 0101 	orr.w	r1, r1, #1
 8003444:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003446:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8003448:	9b01      	ldr	r3, [sp, #4]
 800344a:	b12b      	cbz	r3, 8003458 <HAL_ADC_Start+0x48>
      counter--;
 800344c:	9b01      	ldr	r3, [sp, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8003452:	9b01      	ldr	r3, [sp, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f9      	bne.n	800344c <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003458:	6893      	ldr	r3, [r2, #8]
 800345a:	07db      	lsls	r3, r3, #31
 800345c:	d52c      	bpl.n	80034b8 <HAL_ADC_Start+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 800345e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003460:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800346e:	6853      	ldr	r3, [r2, #4]
 8003470:	055c      	lsls	r4, r3, #21
 8003472:	d505      	bpl.n	8003480 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003474:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003476:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800347a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800347e:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003480:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003482:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003486:	bf1c      	itt	ne
 8003488:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800348a:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800348e:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003490:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8003494:	2400      	movs	r4, #0
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_ADC_Start+0xf0>)
    __HAL_UNLOCK(hadc);
 8003498:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800349c:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	06c9      	lsls	r1, r1, #27
 80034a2:	d10e      	bne.n	80034c2 <HAL_ADC_Start+0xb2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034a4:	4917      	ldr	r1, [pc, #92]	; (8003504 <HAL_ADC_Start+0xf4>)
 80034a6:	428a      	cmp	r2, r1
 80034a8:	d00e      	beq.n	80034c8 <HAL_ADC_Start+0xb8>
 80034aa:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80034ae:	428a      	cmp	r2, r1
 80034b0:	d01e      	beq.n	80034f0 <HAL_ADC_Start+0xe0>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034b2:	4915      	ldr	r1, [pc, #84]	; (8003508 <HAL_ADC_Start+0xf8>)
 80034b4:	428a      	cmp	r2, r1
 80034b6:	d015      	beq.n	80034e4 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 80034b8:	2000      	movs	r0, #0
}
 80034ba:	b003      	add	sp, #12
 80034bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034c0:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_ADC_Start+0xf4>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1f7      	bne.n	80034b8 <HAL_ADC_Start+0xa8>
 80034c8:	6890      	ldr	r0, [r2, #8]
 80034ca:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80034ce:	d1f3      	bne.n	80034b8 <HAL_ADC_Start+0xa8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d0:	6893      	ldr	r3, [r2, #8]
 80034d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	e7ef      	b.n	80034ba <HAL_ADC_Start+0xaa>
  __HAL_LOCK(hadc);
 80034da:	2002      	movs	r0, #2
}
 80034dc:	b003      	add	sp, #12
 80034de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e2:	4770      	bx	lr
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d9ec      	bls.n	80034c8 <HAL_ADC_Start+0xb8>
 80034ee:	e7e3      	b.n	80034b8 <HAL_ADC_Start+0xa8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	06db      	lsls	r3, r3, #27
 80034f4:	d0e8      	beq.n	80034c8 <HAL_ADC_Start+0xb8>
 80034f6:	e7df      	b.n	80034b8 <HAL_ADC_Start+0xa8>
 80034f8:	200006fc 	.word	0x200006fc
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	40012300 	.word	0x40012300
 8003504:	40012000 	.word	0x40012000
 8003508:	40012200 	.word	0x40012200

0800350c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800350c:	6803      	ldr	r3, [r0, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	0552      	lsls	r2, r2, #21
 8003512:	d502      	bpl.n	800351a <HAL_ADC_PollForConversion+0xe>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003514:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003516:	05da      	lsls	r2, r3, #23
 8003518:	d440      	bmi.n	800359c <HAL_ADC_PollForConversion+0x90>
{
 800351a:	b570      	push	{r4, r5, r6, lr}
 800351c:	460d      	mov	r5, r1
 800351e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003520:	f7ff febe 	bl	80032a0 <HAL_GetTick>
 8003524:	4606      	mov	r6, r0
 8003526:	1c6b      	adds	r3, r5, #1
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	d125      	bne.n	8003578 <HAL_ADC_PollForConversion+0x6c>
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	0798      	lsls	r0, r3, #30
 8003530:	d5fc      	bpl.n	800352c <HAL_ADC_PollForConversion+0x20>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003532:	f06f 0312 	mvn.w	r3, #18
 8003536:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800353a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353e:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003540:	6893      	ldr	r3, [r2, #8]
 8003542:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8003546:	d115      	bne.n	8003574 <HAL_ADC_PollForConversion+0x68>
 8003548:	7e23      	ldrb	r3, [r4, #24]
 800354a:	b99b      	cbnz	r3, 8003574 <HAL_ADC_PollForConversion+0x68>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800354c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800354e:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8003552:	d002      	beq.n	800355a <HAL_ADC_PollForConversion+0x4e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003554:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003556:	055b      	lsls	r3, r3, #21
 8003558:	d40c      	bmi.n	8003574 <HAL_ADC_PollForConversion+0x68>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800355a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800355c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003560:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003562:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003564:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8003568:	d104      	bne.n	8003574 <HAL_ADC_PollForConversion+0x68>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003572:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003574:	2000      	movs	r0, #0
}
 8003576:	bd70      	pop	{r4, r5, r6, pc}
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	0799      	lsls	r1, r3, #30
 800357c:	d4d9      	bmi.n	8003532 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800357e:	b125      	cbz	r5, 800358a <HAL_ADC_PollForConversion+0x7e>
 8003580:	f7ff fe8e 	bl	80032a0 <HAL_GetTick>
 8003584:	1b80      	subs	r0, r0, r6
 8003586:	42a8      	cmp	r0, r5
 8003588:	d9cd      	bls.n	8003526 <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800358a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800358c:	2200      	movs	r2, #0
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8003594:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003598:	2003      	movs	r0, #3
 800359a:	e7ea      	b.n	8003572 <HAL_ADC_PollForConversion+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800359c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800359e:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80035a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80035aa:	2001      	movs	r0, #1
}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80035b0:	6803      	ldr	r3, [r0, #0]
 80035b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <HAL_ADC_ConfigChannel>:
{
 80035b8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80035ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80035be:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80035c0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80035c2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80035c4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80035c6:	f000 8094 	beq.w	80036f2 <HAL_ADC_ConfigChannel+0x13a>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035ca:	680d      	ldr	r5, [r1, #0]
 80035cc:	688a      	ldr	r2, [r1, #8]
 80035ce:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80035d0:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035d2:	2d09      	cmp	r5, #9
 80035d4:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 80035d6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035da:	d829      	bhi.n	8003630 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035dc:	691c      	ldr	r4, [r3, #16]
 80035de:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80035e2:	f04f 0c07 	mov.w	ip, #7
 80035e6:	fa0c fc06 	lsl.w	ip, ip, r6
 80035ea:	ea24 040c 	bic.w	r4, r4, ip
 80035ee:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035f0:	691c      	ldr	r4, [r3, #16]
 80035f2:	fa02 f606 	lsl.w	r6, r2, r6
 80035f6:	4326      	orrs	r6, r4
 80035f8:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 80035fa:	684e      	ldr	r6, [r1, #4]
 80035fc:	2e06      	cmp	r6, #6
 80035fe:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003602:	d82a      	bhi.n	800365a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003604:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003606:	3a05      	subs	r2, #5
 8003608:	241f      	movs	r4, #31
 800360a:	4094      	lsls	r4, r2
 800360c:	ea21 0104 	bic.w	r1, r1, r4
 8003610:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003612:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003614:	fa07 f202 	lsl.w	r2, r7, r2
 8003618:	430a      	orrs	r2, r1
 800361a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800361c:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <HAL_ADC_ConfigChannel+0x15c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02d      	beq.n	800367e <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 8003622:	2300      	movs	r3, #0
 8003624:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003628:	4618      	mov	r0, r3
}
 800362a:	b002      	add	sp, #8
 800362c:	bcf0      	pop	{r4, r5, r6, r7}
 800362e:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003630:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8003634:	68dc      	ldr	r4, [r3, #12]
 8003636:	3e1e      	subs	r6, #30
 8003638:	f04f 0c07 	mov.w	ip, #7
 800363c:	fa0c fc06 	lsl.w	ip, ip, r6
 8003640:	ea24 040c 	bic.w	r4, r4, ip
 8003644:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003646:	68dc      	ldr	r4, [r3, #12]
 8003648:	fa02 f606 	lsl.w	r6, r2, r6
 800364c:	4326      	orrs	r6, r4
 800364e:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8003650:	684e      	ldr	r6, [r1, #4]
 8003652:	2e06      	cmp	r6, #6
 8003654:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003658:	d9d4      	bls.n	8003604 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800365a:	2e0c      	cmp	r6, #12
 800365c:	d831      	bhi.n	80036c2 <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800365e:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8003662:	211f      	movs	r1, #31
 8003664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003666:	40a1      	lsls	r1, r4
 8003668:	ea22 0201 	bic.w	r2, r2, r1
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800366e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003670:	fa07 f204 	lsl.w	r2, r7, r4
 8003674:	430a      	orrs	r2, r1
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003678:	4a26      	ldr	r2, [pc, #152]	; (8003714 <HAL_ADC_ConfigChannel+0x15c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d1d1      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
 800367e:	2d12      	cmp	r5, #18
 8003680:	d02d      	beq.n	80036de <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_ADC_ConfigChannel+0x160>)
 8003684:	429d      	cmp	r5, r3
 8003686:	d138      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x142>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003688:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_ADC_ConfigChannel+0x164>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800368c:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800368e:	4c25      	ldr	r4, [pc, #148]	; (8003724 <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003690:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8003694:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003696:	6851      	ldr	r1, [r2, #4]
 8003698:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800369c:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	fba4 2303 	umull	r2, r3, r4, r3
 80036a4:	0c9b      	lsrs	r3, r3, #18
 80036a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80036ae:	9b01      	ldr	r3, [sp, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0b6      	beq.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80036b4:	9b01      	ldr	r3, [sp, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80036ba:	9b01      	ldr	r3, [sp, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f9      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0xfc>
 80036c0:	e7af      	b.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036c2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80036c6:	241f      	movs	r4, #31
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	408c      	lsls	r4, r1
 80036cc:	ea22 0204 	bic.w	r2, r2, r4
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80036d4:	fa07 f201 	lsl.w	r2, r7, r1
 80036d8:	4322      	orrs	r2, r4
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
 80036dc:	e79e      	b.n	800361c <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_ADC_ConfigChannel+0x164>)
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80036e6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	e797      	b.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80036f2:	2002      	movs	r0, #2
}
 80036f4:	b002      	add	sp, #8
 80036f6:	bcf0      	pop	{r4, r5, r6, r7}
 80036f8:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036fa:	2d11      	cmp	r5, #17
 80036fc:	d191      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_ADC_ConfigChannel+0x164>)
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003706:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	e787      	b.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
 8003712:	bf00      	nop
 8003714:	40012000 	.word	0x40012000
 8003718:	10000012 	.word	0x10000012
 800371c:	40012300 	.word	0x40012300
 8003720:	200006fc 	.word	0x200006fc
 8003724:	431bde83 	.word	0x431bde83

08003728 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003728:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	f000 80d5 	beq.w	80038dc <HAL_ADCEx_InjectedConfigChannel+0x1b4>
{
 8003732:	b4f0      	push	{r4, r5, r6, r7}
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003734:	680d      	ldr	r5, [r1, #0]
 8003736:	688e      	ldr	r6, [r1, #8]
 8003738:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800373a:	2201      	movs	r2, #1
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800373c:	2d09      	cmp	r5, #9
 800373e:	b2ac      	uxth	r4, r5
  __HAL_LOCK(hadc);
 8003740:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003744:	d86b      	bhi.n	800381e <HAL_ADCEx_InjectedConfigChannel+0xf6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003746:	691f      	ldr	r7, [r3, #16]
 8003748:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800374c:	f04f 0c07 	mov.w	ip, #7
 8003750:	fa0c fc02 	lsl.w	ip, ip, r2
 8003754:	ea27 070c 	bic.w	r7, r7, ip
 8003758:	611f      	str	r7, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800375a:	691f      	ldr	r7, [r3, #16]
 800375c:	fa06 f202 	lsl.w	r2, r6, r2
 8003760:	433a      	orrs	r2, r7
 8003762:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003764:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003766:	f8d1 c010 	ldr.w	ip, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800376a:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800376c:	f427 1740 	bic.w	r7, r7, #3145728	; 0x300000
 8003770:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003772:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003774:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003778:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800377c:	1cf2      	adds	r2, r6, #3
 800377e:	eba2 020c 	sub.w	r2, r2, ip
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003782:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003788:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800378c:	f04f 0c1f 	mov.w	ip, #31
 8003790:	fa0c fc02 	lsl.w	ip, ip, r2
 8003794:	ea27 070c 	bic.w	r7, r7, ip
 8003798:	639f      	str	r7, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800379a:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800379e:	698f      	ldr	r7, [r1, #24]
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80037a0:	fa04 f202 	lsl.w	r2, r4, r2
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80037a4:	4c4e      	ldr	r4, [pc, #312]	; (80038e0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80037a6:	ea42 020c 	orr.w	r2, r2, ip
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80037aa:	42a7      	cmp	r7, r4
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80037ae:	d071      	beq.n	8003894 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80037b0:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80037b2:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80037b6:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 80037ba:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4317      	orrs	r7, r2
 80037c0:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80037c2:	689c      	ldr	r4, [r3, #8]
 80037c4:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80037c8:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	ea42 020c 	orr.w	r2, r2, ip
 80037d0:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80037d2:	7d4a      	ldrb	r2, [r1, #21]
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	d058      	beq.n	800388a <HAL_ADCEx_InjectedConfigChannel+0x162>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037de:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80037e0:	7d0a      	ldrb	r2, [r1, #20]
 80037e2:	b36a      	cbz	r2, 8003840 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ea:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80037ec:	2e02      	cmp	r6, #2
 80037ee:	68ca      	ldr	r2, [r1, #12]
 80037f0:	d02d      	beq.n	800384e <HAL_ADCEx_InjectedConfigChannel+0x126>
 80037f2:	2e03      	cmp	r6, #3
 80037f4:	d061      	beq.n	80038ba <HAL_ADCEx_InjectedConfigChannel+0x192>
 80037f6:	2e01      	cmp	r6, #1
 80037f8:	d055      	beq.n	80038a6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80037fa:	6a19      	ldr	r1, [r3, #32]
 80037fc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003800:	f021 010f 	bic.w	r1, r1, #15
 8003804:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003806:	6a19      	ldr	r1, [r3, #32]
 8003808:	430a      	orrs	r2, r1
 800380a:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800380c:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d029      	beq.n	8003866 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003812:	2300      	movs	r3, #0
 8003814:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 8003818:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800381a:	4618      	mov	r0, r3
}
 800381c:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800381e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003822:	68df      	ldr	r7, [r3, #12]
 8003824:	3a1e      	subs	r2, #30
 8003826:	f04f 0c07 	mov.w	ip, #7
 800382a:	fa0c fc02 	lsl.w	ip, ip, r2
 800382e:	ea27 070c 	bic.w	r7, r7, ip
 8003832:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003834:	68df      	ldr	r7, [r3, #12]
 8003836:	fa06 f202 	lsl.w	r2, r6, r2
 800383a:	433a      	orrs	r2, r7
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	e791      	b.n	8003764 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003846:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003848:	2e02      	cmp	r6, #2
 800384a:	68ca      	ldr	r2, [r1, #12]
 800384c:	d1d1      	bne.n	80037f2 <HAL_ADCEx_InjectedConfigChannel+0xca>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800384e:	6999      	ldr	r1, [r3, #24]
 8003850:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003854:	f021 010f 	bic.w	r1, r1, #15
 8003858:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	430a      	orrs	r2, r1
 800385e:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d1d5      	bne.n	8003812 <HAL_ADCEx_InjectedConfigChannel+0xea>
 8003866:	2d12      	cmp	r5, #18
 8003868:	d031      	beq.n	80038ce <HAL_ADCEx_InjectedConfigChannel+0x1a6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <HAL_ADCEx_InjectedConfigChannel+0x1c0>)
 800386c:	429d      	cmp	r5, r3
 800386e:	d001      	beq.n	8003874 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003870:	2d11      	cmp	r5, #17
 8003872:	d1ce      	bne.n	8003812 <HAL_ADCEx_InjectedConfigChannel+0xea>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8003876:	6853      	ldr	r3, [r2, #4]
 8003878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800387c:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 800387e:	2300      	movs	r3, #0
 8003880:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003884:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003886:	4618      	mov	r0, r3
}
 8003888:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e7a5      	b.n	80037e0 <HAL_ADCEx_InjectedConfigChannel+0xb8>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800389a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	e795      	b.n	80037d2 <HAL_ADCEx_InjectedConfigChannel+0xaa>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80038a6:	6959      	ldr	r1, [r3, #20]
 80038a8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80038ac:	f021 010f 	bic.w	r1, r1, #15
 80038b0:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80038b2:	6959      	ldr	r1, [r3, #20]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	615a      	str	r2, [r3, #20]
      break;
 80038b8:	e7a8      	b.n	800380c <HAL_ADCEx_InjectedConfigChannel+0xe4>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80038c0:	f021 010f 	bic.w	r1, r1, #15
 80038c4:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80038c6:	69d9      	ldr	r1, [r3, #28]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]
      break;
 80038cc:	e79e      	b.n	800380c <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038ce:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80038d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038d6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80038da:	e79a      	b.n	8003812 <HAL_ADCEx_InjectedConfigChannel+0xea>
  __HAL_LOCK(hadc);
 80038dc:	2002      	movs	r0, #2
}
 80038de:	4770      	bx	lr
 80038e0:	000f0001 	.word	0x000f0001
 80038e4:	40012000 	.word	0x40012000
 80038e8:	10000012 	.word	0x10000012
 80038ec:	40012300 	.word	0x40012300

080038f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80038f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80038f8:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038fa:	0200      	lsls	r0, r0, #8
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003900:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003908:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800390a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <HAL_NVIC_SetPriority+0x64>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800391c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391e:	f1c3 0507 	rsb	r5, r3, #7
 8003922:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003924:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003928:	bf28      	it	cs
 800392a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392c:	2c06      	cmp	r4, #6
 800392e:	d919      	bls.n	8003964 <HAL_NVIC_SetPriority+0x50>
 8003930:	3b03      	subs	r3, #3
 8003932:	f04f 34ff 	mov.w	r4, #4294967295
 8003936:	409c      	lsls	r4, r3
 8003938:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	40aa      	lsls	r2, r5
 8003942:	ea21 0102 	bic.w	r1, r1, r2
 8003946:	fa01 f203 	lsl.w	r2, r1, r3
 800394a:	4322      	orrs	r2, r4
 800394c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800394e:	2800      	cmp	r0, #0
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	db0a      	blt.n	800396a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003958:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800395c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003960:	bc30      	pop	{r4, r5}
 8003962:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003964:	2400      	movs	r4, #0
 8003966:	4623      	mov	r3, r4
 8003968:	e7e8      	b.n	800393c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_NVIC_SetPriority+0x68>)
 800396c:	f000 000f 	and.w	r0, r0, #15
 8003970:	4403      	add	r3, r0
 8003972:	761a      	strb	r2, [r3, #24]
 8003974:	bc30      	pop	{r4, r5}
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	e000ecfc 	.word	0xe000ecfc

08003980 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003980:	2800      	cmp	r0, #0
 8003982:	db07      	blt.n	8003994 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003984:	f000 011f 	and.w	r1, r0, #31
 8003988:	2301      	movs	r3, #1
 800398a:	0940      	lsrs	r0, r0, #5
 800398c:	4a02      	ldr	r2, [pc, #8]	; (8003998 <HAL_NVIC_EnableIRQ+0x18>)
 800398e:	408b      	lsls	r3, r1
 8003990:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800399c:	3801      	subs	r0, #1
 800399e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80039a2:	d20e      	bcs.n	80039c2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	4c08      	ldr	r4, [pc, #32]	; (80039cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ac:	20f0      	movs	r0, #240	; 0xf0
 80039ae:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80039bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2001      	movs	r0, #1
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000e010 	.word	0xe000e010
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop

080039d4 <HAL_SYSTICK_IRQHandler>:
{
 80039d4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80039d6:	f7ff fffb 	bl	80039d0 <HAL_SYSTICK_Callback>
}
 80039da:	bd08      	pop	{r3, pc}

080039dc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80039dc:	b188      	cbz	r0, 8003a02 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80039de:	7903      	ldrb	r3, [r0, #4]
{ 
 80039e0:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 80039e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039e6:	4604      	mov	r4, r0
 80039e8:	b13b      	cbz	r3, 80039fa <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80039ec:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039ee:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80039f0:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80039f2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039f4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80039f6:	7122      	strb	r2, [r4, #4]
}
 80039f8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80039fa:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80039fc:	f7fe fbba 	bl	8002174 <HAL_DAC_MspInit>
 8003a00:	e7f3      	b.n	80039ea <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8003a02:	2001      	movs	r0, #1
}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop

08003a08 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003a08:	7943      	ldrb	r3, [r0, #5]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d01d      	beq.n	8003a4a <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a0e:	2302      	movs	r3, #2
{
 8003a10:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a12:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a14:	6804      	ldr	r4, [r0, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a16:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003a1a:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8003a1e:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003a20:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a22:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003a24:	ea21 0105 	bic.w	r1, r1, r5
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a2c:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	21c0      	movs	r1, #192	; 0xc0
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a3a:	2101      	movs	r1, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a3c:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003a3e:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003a40:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 8003a42:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 8003a44:	bc70      	pop	{r4, r5, r6}
 8003a46:	4618      	mov	r0, r3
 8003a48:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003a4a:	2202      	movs	r2, #2
}
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4770      	bx	lr

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a54:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a58:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8003c38 <HAL_GPIO_Init+0x1e8>
{
 8003a5c:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5e:	2400      	movs	r4, #0
 8003a60:	e003      	b.n	8003a6a <HAL_GPIO_Init+0x1a>
 8003a62:	3401      	adds	r4, #1
 8003a64:	2c10      	cmp	r4, #16
 8003a66:	f000 8086 	beq.w	8003b76 <HAL_GPIO_Init+0x126>
    ioposition = 0x01U << position;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6e:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d1f5      	bne.n	8003a62 <HAL_GPIO_Init+0x12>
 8003a76:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a7a:	f026 0910 	bic.w	r9, r6, #16
 8003a7e:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8003a82:	2303      	movs	r3, #3
 8003a84:	f109 37ff 	add.w	r7, r9, #4294967295
 8003a88:	fa03 f30c 	lsl.w	r3, r3, ip
 8003a8c:	2f01      	cmp	r7, #1
 8003a8e:	ea6f 0303 	mvn.w	r3, r3
 8003a92:	fa05 f50c 	lsl.w	r5, r5, ip
 8003a96:	d971      	bls.n	8003b7c <HAL_GPIO_Init+0x12c>
      temp = GPIOx->PUPDR;
 8003a98:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8003a9e:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8003aa0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa2:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aa6:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa8:	fa05 f30c 	lsl.w	r3, r5, ip
 8003aac:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8003aae:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ab0:	00f3      	lsls	r3, r6, #3
 8003ab2:	d5d6      	bpl.n	8003a62 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab4:	4d59      	ldr	r5, [pc, #356]	; (8003c1c <HAL_GPIO_Init+0x1cc>)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac0:	646b      	str	r3, [r5, #68]	; 0x44
 8003ac2:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8003ac4:	f024 0303 	bic.w	r3, r4, #3
 8003ac8:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8003acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ad0:	9501      	str	r5, [sp, #4]
 8003ad2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ad6:	f004 0503 	and.w	r5, r4, #3
 8003ada:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ade:	4d50      	ldr	r5, [pc, #320]	; (8003c20 <HAL_GPIO_Init+0x1d0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae0:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae2:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ae6:	270f      	movs	r7, #15
 8003ae8:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aec:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aee:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003af2:	d019      	beq.n	8003b28 <HAL_GPIO_Init+0xd8>
 8003af4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003af8:	42a8      	cmp	r0, r5
 8003afa:	d070      	beq.n	8003bde <HAL_GPIO_Init+0x18e>
 8003afc:	4d49      	ldr	r5, [pc, #292]	; (8003c24 <HAL_GPIO_Init+0x1d4>)
 8003afe:	42a8      	cmp	r0, r5
 8003b00:	d073      	beq.n	8003bea <HAL_GPIO_Init+0x19a>
 8003b02:	4d49      	ldr	r5, [pc, #292]	; (8003c28 <HAL_GPIO_Init+0x1d8>)
 8003b04:	42a8      	cmp	r0, r5
 8003b06:	d076      	beq.n	8003bf6 <HAL_GPIO_Init+0x1a6>
 8003b08:	4d48      	ldr	r5, [pc, #288]	; (8003c2c <HAL_GPIO_Init+0x1dc>)
 8003b0a:	42a8      	cmp	r0, r5
 8003b0c:	d079      	beq.n	8003c02 <HAL_GPIO_Init+0x1b2>
 8003b0e:	4d48      	ldr	r5, [pc, #288]	; (8003c30 <HAL_GPIO_Init+0x1e0>)
 8003b10:	42a8      	cmp	r0, r5
 8003b12:	d07c      	beq.n	8003c0e <HAL_GPIO_Init+0x1be>
 8003b14:	4d47      	ldr	r5, [pc, #284]	; (8003c34 <HAL_GPIO_Init+0x1e4>)
 8003b16:	42a8      	cmp	r0, r5
 8003b18:	bf0c      	ite	eq
 8003b1a:	f04f 0c06 	moveq.w	ip, #6
 8003b1e:	f04f 0c07 	movne.w	ip, #7
 8003b22:	fa0c f509 	lsl.w	r5, ip, r9
 8003b26:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b28:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8003b2a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b30:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8003b32:	bf54      	ite	pl
 8003b34:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003b36:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8003b38:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003b3c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b40:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8003b42:	bf54      	ite	pl
 8003b44:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003b46:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8003b48:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b4c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b50:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8003b52:	bf54      	ite	pl
 8003b54:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003b56:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8003b58:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003b5c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b60:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8003b66:	bf54      	ite	pl
 8003b68:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003b6a:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6c:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8003b6e:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	f47f af7a 	bne.w	8003a6a <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8003b76:	b003      	add	sp, #12
 8003b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003b7c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7e:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b82:	68cf      	ldr	r7, [r1, #12]
 8003b84:	fa07 f70c 	lsl.w	r7, r7, ip
 8003b88:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003b8c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b8e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b92:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b96:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b9a:	40a7      	lsls	r7, r4
 8003b9c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8003ba0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003ba2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba4:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba6:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ba8:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8003bac:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bae:	f47f af77 	bne.w	8003aa0 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8003bb2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8003bb6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bba:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8003bbe:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc2:	00bf      	lsls	r7, r7, #2
 8003bc4:	f04f 0b0f 	mov.w	fp, #15
 8003bc8:	fa0b fb07 	lsl.w	fp, fp, r7
 8003bcc:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd0:	690d      	ldr	r5, [r1, #16]
 8003bd2:	40bd      	lsls	r5, r7
 8003bd4:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003bd8:	f8c9 5020 	str.w	r5, [r9, #32]
 8003bdc:	e760      	b.n	8003aa0 <HAL_GPIO_Init+0x50>
 8003bde:	f04f 0c01 	mov.w	ip, #1
 8003be2:	fa0c f509 	lsl.w	r5, ip, r9
 8003be6:	432f      	orrs	r7, r5
 8003be8:	e79e      	b.n	8003b28 <HAL_GPIO_Init+0xd8>
 8003bea:	f04f 0c02 	mov.w	ip, #2
 8003bee:	fa0c f509 	lsl.w	r5, ip, r9
 8003bf2:	432f      	orrs	r7, r5
 8003bf4:	e798      	b.n	8003b28 <HAL_GPIO_Init+0xd8>
 8003bf6:	f04f 0c03 	mov.w	ip, #3
 8003bfa:	fa0c f509 	lsl.w	r5, ip, r9
 8003bfe:	432f      	orrs	r7, r5
 8003c00:	e792      	b.n	8003b28 <HAL_GPIO_Init+0xd8>
 8003c02:	f04f 0c04 	mov.w	ip, #4
 8003c06:	fa0c f509 	lsl.w	r5, ip, r9
 8003c0a:	432f      	orrs	r7, r5
 8003c0c:	e78c      	b.n	8003b28 <HAL_GPIO_Init+0xd8>
 8003c0e:	f04f 0c05 	mov.w	ip, #5
 8003c12:	fa0c f509 	lsl.w	r5, ip, r9
 8003c16:	432f      	orrs	r7, r5
 8003c18:	e786      	b.n	8003b28 <HAL_GPIO_Init+0xd8>
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40020000 	.word	0x40020000
 8003c24:	40020800 	.word	0x40020800
 8003c28:	40020c00 	.word	0x40020c00
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40021400 	.word	0x40021400
 8003c34:	40021800 	.word	0x40021800
 8003c38:	40013c00 	.word	0x40013c00

08003c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c3c:	b530      	push	{r4, r5, lr}
 8003c3e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c42:	491a      	ldr	r1, [pc, #104]	; (8003cac <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c44:	4c1a      	ldr	r4, [pc, #104]	; (8003cb0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	2200      	movs	r2, #0
 8003c48:	9201      	str	r2, [sp, #4]
 8003c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c5a:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c5e:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8003c60:	f7ff fb1e 	bl	80032a0 <HAL_GetTick>
 8003c64:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c66:	e005      	b.n	8003c74 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c68:	f7ff fb1a 	bl	80032a0 <HAL_GetTick>
 8003c6c:	1b40      	subs	r0, r0, r5
 8003c6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c72:	d816      	bhi.n	8003ca2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	03da      	lsls	r2, r3, #15
 8003c78:	d5f6      	bpl.n	8003c68 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c7c:	4c0c      	ldr	r4, [pc, #48]	; (8003cb0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003c82:	f7ff fb0d 	bl	80032a0 <HAL_GetTick>
 8003c86:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c88:	e005      	b.n	8003c96 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c8a:	f7ff fb09 	bl	80032a0 <HAL_GetTick>
 8003c8e:	1b40      	subs	r0, r0, r5
 8003c90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c94:	d805      	bhi.n	8003ca2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	039b      	lsls	r3, r3, #14
 8003c9a:	d5f6      	bpl.n	8003c8a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003c9c:	2000      	movs	r0, #0
}
 8003c9e:	b003      	add	sp, #12
 8003ca0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003ca2:	2003      	movs	r0, #3
}
 8003ca4:	b003      	add	sp, #12
 8003ca6:	bd30      	pop	{r4, r5, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	420e0040 	.word	0x420e0040
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	420e0044 	.word	0x420e0044

08003cb8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb8:	b160      	cbz	r0, 8003cd4 <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cba:	4a49      	ldr	r2, [pc, #292]	; (8003de0 <HAL_RCC_ClockConfig+0x128>)
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	428b      	cmp	r3, r1
 8003cc4:	d208      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	b2cb      	uxtb	r3, r1
 8003cc8:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003cd4:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003cd6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	6803      	ldr	r3, [r0, #0]
{
 8003cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cde:	079d      	lsls	r5, r3, #30
 8003ce0:	d514      	bpl.n	8003d0c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce2:	075c      	lsls	r4, r3, #29
 8003ce4:	d504      	bpl.n	8003cf0 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce6:	4c3f      	ldr	r4, [pc, #252]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003ce8:	68a2      	ldr	r2, [r4, #8]
 8003cea:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003cee:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	071a      	lsls	r2, r3, #28
 8003cf2:	d504      	bpl.n	8003cfe <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4c3b      	ldr	r4, [pc, #236]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003cf6:	68a2      	ldr	r2, [r4, #8]
 8003cf8:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003cfc:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfe:	4c39      	ldr	r4, [pc, #228]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003d00:	6885      	ldr	r5, [r0, #8]
 8003d02:	68a2      	ldr	r2, [r4, #8]
 8003d04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d08:	432a      	orrs	r2, r5
 8003d0a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0c:	07df      	lsls	r7, r3, #31
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460d      	mov	r5, r1
 8003d12:	d522      	bpl.n	8003d5a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d14:	6842      	ldr	r2, [r0, #4]
 8003d16:	2a01      	cmp	r2, #1
 8003d18:	d057      	beq.n	8003dca <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1a:	1e93      	subs	r3, r2, #2
 8003d1c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	d959      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	0799      	lsls	r1, r3, #30
 8003d26:	d525      	bpl.n	8003d74 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d28:	4e2e      	ldr	r6, [pc, #184]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003d2a:	68b3      	ldr	r3, [r6, #8]
 8003d2c:	f023 0303 	bic.w	r3, r3, #3
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003d34:	f7ff fab4 	bl	80032a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d38:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003d3c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	e005      	b.n	8003d4c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d40:	f7ff faae 	bl	80032a0 <HAL_GetTick>
 8003d44:	eba0 0008 	sub.w	r0, r0, r8
 8003d48:	42b8      	cmp	r0, r7
 8003d4a:	d843      	bhi.n	8003dd4 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4c:	68b3      	ldr	r3, [r6, #8]
 8003d4e:	6862      	ldr	r2, [r4, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d58:	d1f2      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5a:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <HAL_RCC_ClockConfig+0x128>)
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	42ab      	cmp	r3, r5
 8003d64:	d909      	bls.n	8003d7a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	b2eb      	uxtb	r3, r5
 8003d68:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	d002      	beq.n	8003d7a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	075a      	lsls	r2, r3, #29
 8003d7e:	d506      	bpl.n	8003d8e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4918      	ldr	r1, [pc, #96]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003d82:	68e0      	ldr	r0, [r4, #12]
 8003d84:	688a      	ldr	r2, [r1, #8]
 8003d86:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003d8a:	4302      	orrs	r2, r0
 8003d8c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	071b      	lsls	r3, r3, #28
 8003d90:	d412      	bmi.n	8003db8 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d92:	f000 f855 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003d98:	4c13      	ldr	r4, [pc, #76]	; (8003de8 <HAL_RCC_ClockConfig+0x130>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8003d9c:	4913      	ldr	r1, [pc, #76]	; (8003dec <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_RCC_ClockConfig+0x138>)
 8003da0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003da4:	5ce3      	ldrb	r3, [r4, r3]
 8003da6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8003daa:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dac:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8003dae:	f7ff fa2d 	bl	800320c <HAL_InitTick>
  return HAL_OK;
 8003db2:	2000      	movs	r0, #0
}
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db8:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003dba:	6921      	ldr	r1, [r4, #16]
 8003dbc:	6893      	ldr	r3, [r2, #8]
 8003dbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003dc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003dc6:	6093      	str	r3, [r2, #8]
 8003dc8:	e7e3      	b.n	8003d92 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_ClockConfig+0x12c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	039e      	lsls	r6, r3, #14
 8003dd0:	d4aa      	bmi.n	8003d28 <HAL_RCC_ClockConfig+0x70>
 8003dd2:	e7cf      	b.n	8003d74 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	e7ed      	b.n	8003db4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd8:	0198      	lsls	r0, r3, #6
 8003dda:	d4a5      	bmi.n	8003d28 <HAL_RCC_ClockConfig+0x70>
 8003ddc:	e7ca      	b.n	8003d74 <HAL_RCC_ClockConfig+0xbc>
 8003dde:	bf00      	nop
 8003de0:	40023c00 	.word	0x40023c00
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0800783c 	.word	0x0800783c
 8003dec:	20000704 	.word	0x20000704
 8003df0:	200006fc 	.word	0x200006fc

08003df4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003df4:	4b01      	ldr	r3, [pc, #4]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200006fc 	.word	0x200006fc

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e02:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e04:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003e06:	4905      	ldr	r1, [pc, #20]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e08:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003e0c:	6808      	ldr	r0, [r1, #0]
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e10:	40d8      	lsrs	r0, r3
 8003e12:	4770      	bx	lr
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800784c 	.word	0x0800784c
 8003e1c:	200006fc 	.word	0x200006fc

08003e20 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e22:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e24:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003e26:	4905      	ldr	r1, [pc, #20]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e28:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003e2c:	6808      	ldr	r0, [r1, #0]
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e30:	40d8      	lsrs	r0, r3
 8003e32:	4770      	bx	lr
 8003e34:	40023800 	.word	0x40023800
 8003e38:	0800784c 	.word	0x0800784c
 8003e3c:	200006fc 	.word	0x200006fc

08003e40 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e40:	4928      	ldr	r1, [pc, #160]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8003e42:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e44:	688b      	ldr	r3, [r1, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x1e>
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	d01d      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e52:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e54:	4825      	ldr	r0, [pc, #148]	; (8003eec <HAL_RCC_GetSysClockFreq+0xac>)
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	bf18      	it	ne
 8003e5a:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003e5c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e5e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e60:	684b      	ldr	r3, [r1, #4]
 8003e62:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6a:	d130      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6c:	6849      	ldr	r1, [r1, #4]
 8003e6e:	481e      	ldr	r0, [pc, #120]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003e74:	fba1 0100 	umull	r0, r1, r1, r0
 8003e78:	f7fc fa22 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003e84:	3301      	adds	r3, #1
 8003e86:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003e88:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003e8c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e90:	684b      	ldr	r3, [r1, #4]
 8003e92:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9a:	d10e      	bne.n	8003eba <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9c:	6849      	ldr	r1, [r1, #4]
 8003e9e:	4812      	ldr	r0, [pc, #72]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ea0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003ea4:	fba1 0100 	umull	r0, r1, r1, r0
 8003ea8:	f7fc fa0a 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003eb4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003eb8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	684b      	ldr	r3, [r1, #4]
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <HAL_RCC_GetSysClockFreq+0xac>)
 8003ebe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003ec2:	fba3 0100 	umull	r0, r1, r3, r0
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f7fc f9fa 	bl	80002c0 <__aeabi_uldivmod>
 8003ecc:	e7ee      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ece:	684b      	ldr	r3, [r1, #4]
 8003ed0:	4806      	ldr	r0, [pc, #24]	; (8003eec <HAL_RCC_GetSysClockFreq+0xac>)
 8003ed2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003ed6:	fba3 0100 	umull	r0, r1, r3, r0
 8003eda:	2300      	movs	r3, #0
 8003edc:	f7fc f9f0 	bl	80002c0 <__aeabi_uldivmod>
 8003ee0:	e7cc      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x3c>
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef4:	6803      	ldr	r3, [r0, #0]
 8003ef6:	07da      	lsls	r2, r3, #31
{
 8003ef8:	b082      	sub	sp, #8
 8003efa:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efc:	d536      	bpl.n	8003f6c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003efe:	49ae      	ldr	r1, [pc, #696]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8003f00:	688a      	ldr	r2, [r1, #8]
 8003f02:	f002 020c 	and.w	r2, r2, #12
 8003f06:	2a04      	cmp	r2, #4
 8003f08:	f000 80d2 	beq.w	80040b0 <HAL_RCC_OscConfig+0x1c0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f0c:	688a      	ldr	r2, [r1, #8]
 8003f0e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f12:	2a08      	cmp	r2, #8
 8003f14:	f000 80c8 	beq.w	80040a8 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f18:	49a7      	ldr	r1, [pc, #668]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8003f1a:	688a      	ldr	r2, [r1, #8]
 8003f1c:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f20:	2a0c      	cmp	r2, #12
 8003f22:	f000 8104 	beq.w	800412e <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	f000 8104 	beq.w	8004138 <HAL_RCC_OscConfig+0x248>
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	f000 8160 	beq.w	80041f8 <HAL_RCC_OscConfig+0x308>
 8003f38:	4d9f      	ldr	r5, [pc, #636]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8003f3a:	682a      	ldr	r2, [r5, #0]
 8003f3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	682a      	ldr	r2, [r5, #0]
 8003f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f48:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 80f9 	bne.w	8004142 <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7ff f9a6 	bl	80032a0 <HAL_GetTick>
 8003f54:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	e005      	b.n	8003f64 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f58:	f7ff f9a2 	bl	80032a0 <HAL_GetTick>
 8003f5c:	1b80      	subs	r0, r0, r6
 8003f5e:	2864      	cmp	r0, #100	; 0x64
 8003f60:	f200 810d 	bhi.w	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	0399      	lsls	r1, r3, #14
 8003f68:	d4f6      	bmi.n	8003f58 <HAL_RCC_OscConfig+0x68>
 8003f6a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6c:	079a      	lsls	r2, r3, #30
 8003f6e:	d52f      	bpl.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f70:	4a91      	ldr	r2, [pc, #580]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8003f72:	6891      	ldr	r1, [r2, #8]
 8003f74:	f011 0f0c 	tst.w	r1, #12
 8003f78:	f000 80ab 	beq.w	80040d2 <HAL_RCC_OscConfig+0x1e2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f7c:	6891      	ldr	r1, [r2, #8]
 8003f7e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f82:	2908      	cmp	r1, #8
 8003f84:	f000 80a1 	beq.w	80040ca <HAL_RCC_OscConfig+0x1da>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f88:	498b      	ldr	r1, [pc, #556]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8003f8a:	688a      	ldr	r2, [r1, #8]
 8003f8c:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f90:	2a0c      	cmp	r2, #12
 8003f92:	f000 812c 	beq.w	80041ee <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f96:	68e3      	ldr	r3, [r4, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8117 	beq.w	80041cc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9e:	4b87      	ldr	r3, [pc, #540]	; (80041bc <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa0:	4d85      	ldr	r5, [pc, #532]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fa6:	f7ff f97b 	bl	80032a0 <HAL_GetTick>
 8003faa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e005      	b.n	8003fba <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7ff f977 	bl	80032a0 <HAL_GetTick>
 8003fb2:	1b80      	subs	r0, r0, r6
 8003fb4:	2802      	cmp	r0, #2
 8003fb6:	f200 80e2 	bhi.w	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	0798      	lsls	r0, r3, #30
 8003fbe:	d5f6      	bpl.n	8003fae <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	6922      	ldr	r2, [r4, #16]
 8003fc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003fc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003fcc:	602b      	str	r3, [r5, #0]
 8003fce:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd0:	071a      	lsls	r2, r3, #28
 8003fd2:	d515      	bpl.n	8004000 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fd4:	6963      	ldr	r3, [r4, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 808d 	beq.w	80040f6 <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fdc:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <HAL_RCC_OscConfig+0x2d0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	4d76      	ldr	r5, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003fe4:	f7ff f95c 	bl	80032a0 <HAL_GetTick>
 8003fe8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	e005      	b.n	8003ff8 <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fec:	f7ff f958 	bl	80032a0 <HAL_GetTick>
 8003ff0:	1b80      	subs	r0, r0, r6
 8003ff2:	2802      	cmp	r0, #2
 8003ff4:	f200 80c3 	bhi.w	800417e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003ffa:	079b      	lsls	r3, r3, #30
 8003ffc:	d5f6      	bpl.n	8003fec <HAL_RCC_OscConfig+0xfc>
 8003ffe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004000:	0758      	lsls	r0, r3, #29
 8004002:	d531      	bpl.n	8004068 <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004004:	4a6c      	ldr	r2, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8004006:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004008:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800400c:	f000 8083 	beq.w	8004116 <HAL_RCC_OscConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 8004010:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4d6c      	ldr	r5, [pc, #432]	; (80041c4 <HAL_RCC_OscConfig+0x2d4>)
 8004014:	682a      	ldr	r2, [r5, #0]
 8004016:	05d1      	lsls	r1, r2, #23
 8004018:	f140 80a1 	bpl.w	800415e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401c:	68a3      	ldr	r3, [r4, #8]
 800401e:	2b01      	cmp	r3, #1
 8004020:	f000 80b1 	beq.w	8004186 <HAL_RCC_OscConfig+0x296>
 8004024:	2b05      	cmp	r3, #5
 8004026:	f000 80f7 	beq.w	8004218 <HAL_RCC_OscConfig+0x328>
 800402a:	4d63      	ldr	r5, [pc, #396]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 800402c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	672a      	str	r2, [r5, #112]	; 0x70
 8004034:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 80a7 	bne.w	8004190 <HAL_RCC_OscConfig+0x2a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7ff f92d 	bl	80032a0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800404a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	e006      	b.n	800405c <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7ff f927 	bl	80032a0 <HAL_GetTick>
 8004052:	eba0 0008 	sub.w	r0, r0, r8
 8004056:	42b8      	cmp	r0, r7
 8004058:	f200 8091 	bhi.w	800417e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800405e:	0798      	lsls	r0, r3, #30
 8004060:	d4f5      	bmi.n	800404e <HAL_RCC_OscConfig+0x15e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004062:	2e00      	cmp	r6, #0
 8004064:	f040 80d2 	bne.w	800420c <HAL_RCC_OscConfig+0x31c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004068:	69a2      	ldr	r2, [r4, #24]
 800406a:	b1ca      	cbz	r2, 80040a0 <HAL_RCC_OscConfig+0x1b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800406c:	4d52      	ldr	r5, [pc, #328]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 800406e:	68a9      	ldr	r1, [r5, #8]
 8004070:	f001 010c 	and.w	r1, r1, #12
 8004074:	2908      	cmp	r1, #8
 8004076:	d024      	beq.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004078:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4a53      	ldr	r2, [pc, #332]	; (80041c8 <HAL_RCC_OscConfig+0x2d8>)
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004082:	f000 80d3 	beq.w	800422c <HAL_RCC_OscConfig+0x33c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7ff f90b 	bl	80032a0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800408c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	e004      	b.n	800409a <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7ff f906 	bl	80032a0 <HAL_GetTick>
 8004094:	1b40      	subs	r0, r0, r5
 8004096:	2802      	cmp	r0, #2
 8004098:	d871      	bhi.n	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	d4f7      	bmi.n	8004090 <HAL_RCC_OscConfig+0x1a0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80040a0:	2000      	movs	r0, #0
}
 80040a2:	b002      	add	sp, #8
 80040a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a8:	684a      	ldr	r2, [r1, #4]
 80040aa:	0257      	lsls	r7, r2, #9
 80040ac:	f57f af34 	bpl.w	8003f18 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	4a41      	ldr	r2, [pc, #260]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	0395      	lsls	r5, r2, #14
 80040b6:	f57f af59 	bpl.w	8003f6c <HAL_RCC_OscConfig+0x7c>
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	2a00      	cmp	r2, #0
 80040be:	f47f af55 	bne.w	8003f6c <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 80040c2:	2001      	movs	r0, #1
}
 80040c4:	b002      	add	sp, #8
 80040c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ca:	6852      	ldr	r2, [r2, #4]
 80040cc:	0257      	lsls	r7, r2, #9
 80040ce:	f53f af5b 	bmi.w	8003f88 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	4a39      	ldr	r2, [pc, #228]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	0795      	lsls	r5, r2, #30
 80040d8:	d502      	bpl.n	80040e0 <HAL_RCC_OscConfig+0x1f0>
 80040da:	68e2      	ldr	r2, [r4, #12]
 80040dc:	2a01      	cmp	r2, #1
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e0:	4935      	ldr	r1, [pc, #212]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 80040e2:	6920      	ldr	r0, [r4, #16]
 80040e4:	680a      	ldr	r2, [r1, #0]
 80040e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80040ea:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80040ee:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f0:	071a      	lsls	r2, r3, #28
 80040f2:	d585      	bpl.n	8004000 <HAL_RCC_OscConfig+0x110>
 80040f4:	e76e      	b.n	8003fd4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 80040f6:	4a32      	ldr	r2, [pc, #200]	; (80041c0 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f8:	4d2f      	ldr	r5, [pc, #188]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80040fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80040fc:	f7ff f8d0 	bl	80032a0 <HAL_GetTick>
 8004100:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004102:	e004      	b.n	800410e <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004104:	f7ff f8cc 	bl	80032a0 <HAL_GetTick>
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	2802      	cmp	r0, #2
 800410c:	d837      	bhi.n	800417e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004110:	079f      	lsls	r7, r3, #30
 8004112:	d4f7      	bmi.n	8004104 <HAL_RCC_OscConfig+0x214>
 8004114:	e773      	b.n	8003ffe <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6413      	str	r3, [r2, #64]	; 0x40
 8004120:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800412a:	2601      	movs	r6, #1
 800412c:	e771      	b.n	8004012 <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412e:	684a      	ldr	r2, [r1, #4]
 8004130:	0256      	lsls	r6, r2, #9
 8004132:	f57f aef8 	bpl.w	8003f26 <HAL_RCC_OscConfig+0x36>
 8004136:	e7bb      	b.n	80040b0 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004142:	f7ff f8ad 	bl	80032a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4d1c      	ldr	r5, [pc, #112]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004148:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	e004      	b.n	8004156 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f7ff f8a8 	bl	80032a0 <HAL_GetTick>
 8004150:	1b80      	subs	r0, r0, r6
 8004152:	2864      	cmp	r0, #100	; 0x64
 8004154:	d813      	bhi.n	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	0398      	lsls	r0, r3, #14
 800415a:	d5f7      	bpl.n	800414c <HAL_RCC_OscConfig+0x25c>
 800415c:	e705      	b.n	8003f6a <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415e:	682a      	ldr	r2, [r5, #0]
 8004160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004164:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8004166:	f7ff f89b 	bl	80032a0 <HAL_GetTick>
 800416a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	05da      	lsls	r2, r3, #23
 8004170:	f53f af54 	bmi.w	800401c <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7ff f894 	bl	80032a0 <HAL_GetTick>
 8004178:	1bc0      	subs	r0, r0, r7
 800417a:	2802      	cmp	r0, #2
 800417c:	d9f6      	bls.n	800416c <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 800417e:	2003      	movs	r0, #3
}
 8004180:	b002      	add	sp, #8
 8004182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
 8004188:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004190:	f7ff f886 	bl	80032a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	4d08      	ldr	r5, [pc, #32]	; (80041b8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8004196:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e005      	b.n	80041aa <HAL_RCC_OscConfig+0x2ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7ff f87f 	bl	80032a0 <HAL_GetTick>
 80041a2:	eba0 0008 	sub.w	r0, r0, r8
 80041a6:	42b8      	cmp	r0, r7
 80041a8:	d8e9      	bhi.n	800417e <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80041ac:	079b      	lsls	r3, r3, #30
 80041ae:	d5f6      	bpl.n	800419e <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 80041b0:	2e00      	cmp	r6, #0
 80041b2:	f43f af59 	beq.w	8004068 <HAL_RCC_OscConfig+0x178>
 80041b6:	e029      	b.n	800420c <HAL_RCC_OscConfig+0x31c>
 80041b8:	40023800 	.word	0x40023800
 80041bc:	42470000 	.word	0x42470000
 80041c0:	42470e80 	.word	0x42470e80
 80041c4:	40007000 	.word	0x40007000
 80041c8:	42470060 	.word	0x42470060
        __HAL_RCC_HSI_DISABLE();
 80041cc:	4a2f      	ldr	r2, [pc, #188]	; (800428c <HAL_RCC_OscConfig+0x39c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	4d30      	ldr	r5, [pc, #192]	; (8004290 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_HSI_DISABLE();
 80041d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041d2:	f7ff f865 	bl	80032a0 <HAL_GetTick>
 80041d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d8:	e004      	b.n	80041e4 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7ff f861 	bl	80032a0 <HAL_GetTick>
 80041de:	1b80      	subs	r0, r0, r6
 80041e0:	2802      	cmp	r0, #2
 80041e2:	d8cc      	bhi.n	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	0799      	lsls	r1, r3, #30
 80041e8:	d4f7      	bmi.n	80041da <HAL_RCC_OscConfig+0x2ea>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	e6f0      	b.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	684a      	ldr	r2, [r1, #4]
 80041f0:	0256      	lsls	r6, r2, #9
 80041f2:	f53f aed0 	bmi.w	8003f96 <HAL_RCC_OscConfig+0xa6>
 80041f6:	e76c      	b.n	80040d2 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCC_OscConfig+0x3a0>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e79a      	b.n	8004142 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_PWR_CLK_DISABLE();
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <HAL_RCC_OscConfig+0x3a0>)
 800420e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
 8004216:	e727      	b.n	8004068 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <HAL_RCC_OscConfig+0x3a0>)
 800421a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800421c:	f042 0204 	orr.w	r2, r2, #4
 8004220:	671a      	str	r2, [r3, #112]	; 0x70
 8004222:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	671a      	str	r2, [r3, #112]	; 0x70
 800422a:	e7b1      	b.n	8004190 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 800422c:	f7ff f838 	bl	80032a0 <HAL_GetTick>
 8004230:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e004      	b.n	800423e <HAL_RCC_OscConfig+0x34e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7ff f834 	bl	80032a0 <HAL_GetTick>
 8004238:	1b80      	subs	r0, r0, r6
 800423a:	2802      	cmp	r0, #2
 800423c:	d89f      	bhi.n	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	682b      	ldr	r3, [r5, #0]
 8004240:	0199      	lsls	r1, r3, #6
 8004242:	d4f7      	bmi.n	8004234 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004244:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800424a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800424c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800424e:	4313      	orrs	r3, r2
 8004250:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4c0f      	ldr	r4, [pc, #60]	; (8004290 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004254:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004258:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800425c:	0852      	lsrs	r2, r2, #1
 800425e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004262:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004264:	490b      	ldr	r1, [pc, #44]	; (8004294 <HAL_RCC_OscConfig+0x3a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800426a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800426c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800426e:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004270:	f7ff f816 	bl	80032a0 <HAL_GetTick>
 8004274:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	e005      	b.n	8004284 <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7ff f812 	bl	80032a0 <HAL_GetTick>
 800427c:	1b40      	subs	r0, r0, r5
 800427e:	2802      	cmp	r0, #2
 8004280:	f63f af7d 	bhi.w	800417e <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	d5f6      	bpl.n	8004278 <HAL_RCC_OscConfig+0x388>
 800428a:	e709      	b.n	80040a0 <HAL_RCC_OscConfig+0x1b0>
 800428c:	42470000 	.word	0x42470000
 8004290:	40023800 	.word	0x40023800
 8004294:	42470060 	.word	0x42470060

08004298 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004298:	2800      	cmp	r0, #0
 800429a:	d05c      	beq.n	8004356 <HAL_TIM_Base_Init+0xbe>
{
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042a2:	4604      	mov	r4, r0
 80042a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042a8:	b3bb      	cbz	r3, 800431a <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042aa:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ac:	4e3a      	ldr	r6, [pc, #232]	; (8004398 <HAL_TIM_Base_Init+0x100>)
 80042ae:	69a5      	ldr	r5, [r4, #24]
 80042b0:	68e0      	ldr	r0, [r4, #12]
 80042b2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ba:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80042bc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042be:	d04c      	beq.n	800435a <HAL_TIM_Base_Init+0xc2>
 80042c0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80042c4:	d058      	beq.n	8004378 <HAL_TIM_Base_Init+0xe0>
 80042c6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80042ca:	42b2      	cmp	r2, r6
 80042cc:	d02a      	beq.n	8004324 <HAL_TIM_Base_Init+0x8c>
 80042ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042d2:	42b2      	cmp	r2, r6
 80042d4:	d026      	beq.n	8004324 <HAL_TIM_Base_Init+0x8c>
 80042d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042da:	42b2      	cmp	r2, r6
 80042dc:	d022      	beq.n	8004324 <HAL_TIM_Base_Init+0x8c>
 80042de:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80042e2:	42b2      	cmp	r2, r6
 80042e4:	d01e      	beq.n	8004324 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80042ea:	42b2      	cmp	r2, r6
 80042ec:	d013      	beq.n	8004316 <HAL_TIM_Base_Init+0x7e>
 80042ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042f2:	42b2      	cmp	r2, r6
 80042f4:	d00f      	beq.n	8004316 <HAL_TIM_Base_Init+0x7e>
 80042f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042fa:	42b2      	cmp	r2, r6
 80042fc:	d00b      	beq.n	8004316 <HAL_TIM_Base_Init+0x7e>
 80042fe:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8004302:	42b2      	cmp	r2, r6
 8004304:	d007      	beq.n	8004316 <HAL_TIM_Base_Init+0x7e>
 8004306:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800430a:	42b2      	cmp	r2, r6
 800430c:	d003      	beq.n	8004316 <HAL_TIM_Base_Init+0x7e>
 800430e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004312:	42b2      	cmp	r2, r6
 8004314:	d138      	bne.n	8004388 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004316:	6926      	ldr	r6, [r4, #16]
 8004318:	e033      	b.n	8004382 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800431a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800431e:	f7fd ff5b 	bl	80021d8 <HAL_TIM_Base_MspInit>
 8004322:	e7c2      	b.n	80042aa <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8004324:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004326:	4f1d      	ldr	r7, [pc, #116]	; (800439c <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800432c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004334:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800433e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004340:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004342:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004344:	d101      	bne.n	800434a <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004346:	6963      	ldr	r3, [r4, #20]
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800434a:	2301      	movs	r3, #1
 800434c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800434e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004356:	2001      	movs	r0, #1
}
 8004358:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800435a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004362:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004368:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004370:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004372:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004374:	6291      	str	r1, [r2, #40]	; 0x28
 8004376:	e7e6      	b.n	8004346 <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8004378:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800437c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004380:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800438e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004390:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004392:	6291      	str	r1, [r2, #40]	; 0x28
 8004394:	e7d9      	b.n	800434a <HAL_TIM_Base_Init+0xb2>
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	40010400 	.word	0x40010400

080043a0 <HAL_TIM_PWM_MspInit>:
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop

080043a4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d05c      	beq.n	8004462 <HAL_TIM_PWM_Init+0xbe>
{
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043ae:	4604      	mov	r4, r0
 80043b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043b4:	b3bb      	cbz	r3, 8004426 <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	4e3a      	ldr	r6, [pc, #232]	; (80044a4 <HAL_TIM_PWM_Init+0x100>)
 80043ba:	69a5      	ldr	r5, [r4, #24]
 80043bc:	68e0      	ldr	r0, [r4, #12]
 80043be:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c6:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80043c8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ca:	d04c      	beq.n	8004466 <HAL_TIM_PWM_Init+0xc2>
 80043cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80043d0:	d058      	beq.n	8004484 <HAL_TIM_PWM_Init+0xe0>
 80043d2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80043d6:	42b2      	cmp	r2, r6
 80043d8:	d02a      	beq.n	8004430 <HAL_TIM_PWM_Init+0x8c>
 80043da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043de:	42b2      	cmp	r2, r6
 80043e0:	d026      	beq.n	8004430 <HAL_TIM_PWM_Init+0x8c>
 80043e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043e6:	42b2      	cmp	r2, r6
 80043e8:	d022      	beq.n	8004430 <HAL_TIM_PWM_Init+0x8c>
 80043ea:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80043ee:	42b2      	cmp	r2, r6
 80043f0:	d01e      	beq.n	8004430 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80043f6:	42b2      	cmp	r2, r6
 80043f8:	d013      	beq.n	8004422 <HAL_TIM_PWM_Init+0x7e>
 80043fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043fe:	42b2      	cmp	r2, r6
 8004400:	d00f      	beq.n	8004422 <HAL_TIM_PWM_Init+0x7e>
 8004402:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004406:	42b2      	cmp	r2, r6
 8004408:	d00b      	beq.n	8004422 <HAL_TIM_PWM_Init+0x7e>
 800440a:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800440e:	42b2      	cmp	r2, r6
 8004410:	d007      	beq.n	8004422 <HAL_TIM_PWM_Init+0x7e>
 8004412:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004416:	42b2      	cmp	r2, r6
 8004418:	d003      	beq.n	8004422 <HAL_TIM_PWM_Init+0x7e>
 800441a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800441e:	42b2      	cmp	r2, r6
 8004420:	d138      	bne.n	8004494 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	6926      	ldr	r6, [r4, #16]
 8004424:	e033      	b.n	800448e <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8004426:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800442a:	f7ff ffb9 	bl	80043a0 <HAL_TIM_PWM_MspInit>
 800442e:	e7c2      	b.n	80043b6 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8004430:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004432:	4f1d      	ldr	r7, [pc, #116]	; (80044a8 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004438:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004440:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004446:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004448:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800444a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800444e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	d101      	bne.n	8004456 <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8004452:	6963      	ldr	r3, [r4, #20]
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004456:	2301      	movs	r3, #1
 8004458:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800445a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800445c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004462:	2001      	movs	r0, #1
}
 8004464:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004466:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004468:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800446e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004474:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800447c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004480:	6291      	str	r1, [r2, #40]	; 0x28
 8004482:	e7e6      	b.n	8004452 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8004484:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004486:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800448c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004498:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800449a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800449e:	6291      	str	r1, [r2, #40]	; 0x28
 80044a0:	e7d9      	b.n	8004456 <HAL_TIM_PWM_Init+0xb2>
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80044ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f000 80cc 	beq.w	800464e <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 80044b6:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80044ba:	2401      	movs	r4, #1
 80044bc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80044c4:	2a0c      	cmp	r2, #12
 80044c6:	d835      	bhi.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x88>
 80044c8:	e8df f002 	tbb	[pc, r2]
 80044cc:	34343407 	.word	0x34343407
 80044d0:	3434346a 	.word	0x3434346a
 80044d4:	34343496 	.word	0x34343496
 80044d8:	3d          	.byte	0x3d
 80044d9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044da:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044dc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80044e2:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e4:	4e74      	ldr	r6, [pc, #464]	; (80046b8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	f025 0501 	bic.w	r5, r5, #1
 80044ea:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80044ec:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80044ee:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80044f0:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80044f2:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fa:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 80044fc:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8004500:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004504:	f000 80bb 	beq.w	800467e <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8004508:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800450c:	42b3      	cmp	r3, r6
 800450e:	f000 80b6 	beq.w	800467e <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004512:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004514:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004516:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004518:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800451c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800451e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004520:	f044 0408 	orr.w	r4, r4, #8
 8004524:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004526:	6999      	ldr	r1, [r3, #24]
 8004528:	f021 0104 	bic.w	r1, r1, #4
 800452c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	432a      	orrs	r2, r5
 8004532:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004534:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004536:	2201      	movs	r2, #1
 8004538:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800453c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004540:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004542:	4618      	mov	r0, r3
}
 8004544:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004546:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800454c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454e:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004550:	4e59      	ldr	r6, [pc, #356]	; (80046b8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004552:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004556:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004558:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800455a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800455c:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800455e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004562:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004566:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004568:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004570:	d06f      	beq.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004572:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004576:	42b3      	cmp	r3, r6
 8004578:	d06b      	beq.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800457a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800457c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800457e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004580:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004584:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004586:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004588:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800458c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004594:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800459c:	61da      	str	r2, [r3, #28]
      break;
 800459e:	e7c9      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a2:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a8:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80046b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ac:	f025 0510 	bic.w	r5, r5, #16
 80045b0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80045b2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80045b4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80045b6:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80045b8:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045bc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045c0:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ca:	d065      	beq.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 80045cc:	4f3b      	ldr	r7, [pc, #236]	; (80046bc <HAL_TIM_PWM_ConfigChannel+0x210>)
 80045ce:	42bb      	cmp	r3, r7
 80045d0:	d062      	beq.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 80045d2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045d4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045d8:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80045da:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045dc:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045de:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80045e4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e6:	6999      	ldr	r1, [r3, #24]
 80045e8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80045ec:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80045f4:	619a      	str	r2, [r3, #24]
      break;
 80045f6:	e79d      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045fa:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045fc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80045fe:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004600:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80046b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004604:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004608:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800460a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800460c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800460e:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004614:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004618:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800461e:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004622:	d01c      	beq.n	800465e <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8004624:	4f25      	ldr	r7, [pc, #148]	; (80046bc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004626:	42bb      	cmp	r3, r7
 8004628:	d019      	beq.n	800465e <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 800462a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800462c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800462e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004630:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004632:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004634:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004636:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004638:	f044 0408 	orr.w	r4, r4, #8
 800463c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	f021 0104 	bic.w	r1, r1, #4
 8004644:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	432a      	orrs	r2, r5
 800464a:	61da      	str	r2, [r3, #28]
      break;
 800464c:	e772      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 800464e:	2002      	movs	r0, #2
}
 8004650:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004652:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004654:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800465c:	e78d      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800465e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004664:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004668:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466c:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004670:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004678:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 800467c:	e7d5      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 800467e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004680:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004684:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004686:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800468a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800468e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8004690:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004694:	4335      	orrs	r5, r6
 8004696:	e73c      	b.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004698:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800469a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800469e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a6:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046aa:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b2:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80046b6:	e78c      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x126>
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80046c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d05a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80046ca:	6803      	ldr	r3, [r0, #0]
{
 80046cc:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80046d2:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80046d4:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046da:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 80046de:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 80046e0:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80046e2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80046e6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80046e8:	d074      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0x114>
 80046ea:	d94a      	bls.n	8004782 <HAL_TIM_ConfigClockSource+0xc2>
 80046ec:	2c60      	cmp	r4, #96	; 0x60
 80046ee:	d02d      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x8c>
 80046f0:	d956      	bls.n	80047a0 <HAL_TIM_ConfigClockSource+0xe0>
 80046f2:	2c70      	cmp	r4, #112	; 0x70
 80046f4:	d01a      	beq.n	800472c <HAL_TIM_ConfigClockSource+0x6c>
 80046f6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80046fa:	d10e      	bne.n	800471a <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046fc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004700:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004702:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004704:	432a      	orrs	r2, r5
 8004706:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004710:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004718:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800471a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800471c:	2201      	movs	r2, #1
 800471e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004722:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004726:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004728:	4618      	mov	r0, r3
}
 800472a:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800472c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004730:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004732:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004734:	432a      	orrs	r2, r5
 8004736:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800473e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004740:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004742:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004744:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004748:	609a      	str	r2, [r3, #8]
      break;
 800474a:	e7e6      	b.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800474c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474e:	684d      	ldr	r5, [r1, #4]
 8004750:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	f024 0410 	bic.w	r4, r4, #16
 8004756:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004758:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800475a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800475c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004760:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004764:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004768:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800476c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800476e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004770:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004772:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004776:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	e7cd      	b.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800477e:	2002      	movs	r0, #2
}
 8004780:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004782:	2c10      	cmp	r4, #16
 8004784:	d004      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xd0>
 8004786:	d93d      	bls.n	8004804 <HAL_TIM_ConfigClockSource+0x144>
 8004788:	2c20      	cmp	r4, #32
 800478a:	d001      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xd0>
 800478c:	2c30      	cmp	r4, #48	; 0x30
 800478e:	d1c4      	bne.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8004790:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004792:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479a:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 800479c:	609c      	str	r4, [r3, #8]
 800479e:	e7bc      	b.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80047a0:	2c50      	cmp	r4, #80	; 0x50
 80047a2:	d1ba      	bne.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80047a4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a8:	684c      	ldr	r4, [r1, #4]
 80047aa:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ac:	f026 0601 	bic.w	r6, r6, #1
 80047b0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047b4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047bc:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80047c0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80047c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80047c6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047cc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	e7a2      	b.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80047d4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d8:	684c      	ldr	r4, [r1, #4]
 80047da:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047dc:	f026 0601 	bic.w	r6, r6, #1
 80047e0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80047f0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80047f6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	e78a      	b.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004804:	2c00      	cmp	r4, #0
 8004806:	d0c3      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xd0>
 8004808:	e787      	b.n	800471a <HAL_TIM_ConfigClockSource+0x5a>
 800480a:	bf00      	nop

0800480c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800480c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d047      	beq.n	80048a4 <HAL_TIM_SlaveConfigSynchro+0x98>
  tmpsmcr = htim->Instance->SMCR;
 8004814:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	2302      	movs	r3, #2
{
 8004818:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800481e:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8004822:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004828:	432b      	orrs	r3, r5
 800482a:	4604      	mov	r4, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800482c:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004830:	4333      	orrs	r3, r6
  __HAL_LOCK(htim);
 8004832:	2001      	movs	r0, #1
  switch (sSlaveConfig->InputTrigger)
 8004834:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 8004836:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800483a:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800483c:	d04e      	beq.n	80048dc <HAL_TIM_SlaveConfigSynchro+0xd0>
 800483e:	d91f      	bls.n	8004880 <HAL_TIM_SlaveConfigSynchro+0x74>
 8004840:	2d60      	cmp	r5, #96	; 0x60
 8004842:	d038      	beq.n	80048b6 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8004844:	2d70      	cmp	r5, #112	; 0x70
 8004846:	d10a      	bne.n	800485e <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004848:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800484c:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 800484e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004850:	432b      	orrs	r3, r5
 8004852:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004856:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800485a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800485c:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800485e:	68d3      	ldr	r3, [r2, #12]
 8004860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004864:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004866:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004868:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 800486a:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800486c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004870:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004872:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8004874:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004878:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 800487c:	bcf0      	pop	{r4, r5, r6, r7}
 800487e:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004880:	2d40      	cmp	r5, #64	; 0x40
 8004882:	d1ec      	bne.n	800485e <HAL_TIM_SlaveConfigSynchro+0x52>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004884:	2e05      	cmp	r6, #5
 8004886:	d00f      	beq.n	80048a8 <HAL_TIM_SlaveConfigSynchro+0x9c>
      tmpccer = htim->Instance->CCER;
 8004888:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800488a:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800488c:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800488e:	f020 0001 	bic.w	r0, r0, #1
 8004892:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004894:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800489a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800489e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80048a0:	6215      	str	r5, [r2, #32]
 80048a2:	e7dc      	b.n	800485e <HAL_TIM_SlaveConfigSynchro+0x52>
  __HAL_LOCK(htim);
 80048a4:	2002      	movs	r0, #2
}
 80048a6:	4770      	bx	lr
    __HAL_UNLOCK(htim);
 80048a8:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80048aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80048ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80048b2:	bcf0      	pop	{r4, r5, r6, r7}
 80048b4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b6:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b8:	688d      	ldr	r5, [r1, #8]
 80048ba:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048bc:	f020 0010 	bic.w	r0, r0, #16
 80048c0:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c2:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80048c4:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80048d6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80048d8:	6213      	str	r3, [r2, #32]
 80048da:	e7c0      	b.n	800485e <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpccer = TIMx->CCER;
 80048dc:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048de:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e0:	6888      	ldr	r0, [r1, #8]
 80048e2:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e4:	f026 0601 	bic.w	r6, r6, #1
 80048e8:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ea:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ec:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80048f4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80048fa:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80048fc:	6211      	str	r1, [r2, #32]
 80048fe:	e7ae      	b.n	800485e <HAL_TIM_SlaveConfigSynchro+0x52>

08004900 <TIM_Base_SetConfig>:
{
 8004900:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004902:	4e36      	ldr	r6, [pc, #216]	; (80049dc <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8004904:	6803      	ldr	r3, [r0, #0]
 8004906:	694d      	ldr	r5, [r1, #20]
 8004908:	688c      	ldr	r4, [r1, #8]
 800490a:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800490c:	42b0      	cmp	r0, r6
 800490e:	d055      	beq.n	80049bc <TIM_Base_SetConfig+0xbc>
 8004910:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004914:	d029      	beq.n	800496a <TIM_Base_SetConfig+0x6a>
 8004916:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800491a:	42b0      	cmp	r0, r6
 800491c:	d037      	beq.n	800498e <TIM_Base_SetConfig+0x8e>
 800491e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004922:	42b0      	cmp	r0, r6
 8004924:	d033      	beq.n	800498e <TIM_Base_SetConfig+0x8e>
 8004926:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800492a:	42b0      	cmp	r0, r6
 800492c:	d02f      	beq.n	800498e <TIM_Base_SetConfig+0x8e>
 800492e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8004932:	42b0      	cmp	r0, r6
 8004934:	d02b      	beq.n	800498e <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800493a:	42b0      	cmp	r0, r6
 800493c:	d013      	beq.n	8004966 <TIM_Base_SetConfig+0x66>
 800493e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004942:	42b0      	cmp	r0, r6
 8004944:	d00f      	beq.n	8004966 <TIM_Base_SetConfig+0x66>
 8004946:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800494a:	42b0      	cmp	r0, r6
 800494c:	d00b      	beq.n	8004966 <TIM_Base_SetConfig+0x66>
 800494e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8004952:	42b0      	cmp	r0, r6
 8004954:	d007      	beq.n	8004966 <TIM_Base_SetConfig+0x66>
 8004956:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800495a:	42b0      	cmp	r0, r6
 800495c:	d003      	beq.n	8004966 <TIM_Base_SetConfig+0x66>
 800495e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004962:	42b0      	cmp	r0, r6
 8004964:	d109      	bne.n	800497a <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004966:	68c9      	ldr	r1, [r1, #12]
 8004968:	e004      	b.n	8004974 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 800496a:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496c:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004972:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004978:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004980:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004982:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004984:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004986:	2301      	movs	r3, #1
 8004988:	6143      	str	r3, [r0, #20]
}
 800498a:	bcf0      	pop	{r4, r5, r6, r7}
 800498c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800498e:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004990:	4f13      	ldr	r7, [pc, #76]	; (80049e0 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004996:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004998:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a4:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a6:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 80049a8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049aa:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049ac:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ae:	d1ea      	bne.n	8004986 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 80049b0:	690b      	ldr	r3, [r1, #16]
 80049b2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80049b4:	2301      	movs	r3, #1
 80049b6:	6143      	str	r3, [r0, #20]
}
 80049b8:	bcf0      	pop	{r4, r5, r6, r7}
 80049ba:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80049bc:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049c4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ca:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80049d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049d6:	6282      	str	r2, [r0, #40]	; 0x28
 80049d8:	e7ea      	b.n	80049b0 <TIM_Base_SetConfig+0xb0>
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400

080049e4 <TIM_OC2_SetConfig>:
{
 80049e4:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e8:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ea:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ec:	4d15      	ldr	r5, [pc, #84]	; (8004a44 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	f024 0410 	bic.w	r4, r4, #16
 80049f2:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80049f4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80049f6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80049f8:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80049fa:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a02:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a04:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a08:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a0c:	d00a      	beq.n	8004a24 <TIM_OC2_SetConfig+0x40>
 8004a0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a12:	42a8      	cmp	r0, r5
 8004a14:	d006      	beq.n	8004a24 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8004a16:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a18:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a1a:	6182      	str	r2, [r0, #24]
}
 8004a1c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004a1e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004a20:	6203      	str	r3, [r0, #32]
}
 8004a22:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a24:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a2a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a2e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a32:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a36:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a3c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004a40:	e7e9      	b.n	8004a16 <TIM_OC2_SetConfig+0x32>
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000

08004a48 <TIM_TI1_SetConfig>:
{
 8004a48:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a4c:	4e1b      	ldr	r6, [pc, #108]	; (8004abc <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4e:	f024 0401 	bic.w	r4, r4, #1
 8004a52:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a54:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004a58:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a5a:	d01d      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004a60:	d01a      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a62:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8004a66:	42b0      	cmp	r0, r6
 8004a68:	d016      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a6e:	42b0      	cmp	r0, r6
 8004a70:	d012      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a76:	42b0      	cmp	r0, r6
 8004a78:	d00e      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a7a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8004a7e:	42b0      	cmp	r0, r6
 8004a80:	d00a      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a82:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8004a86:	42b0      	cmp	r0, r6
 8004a88:	d006      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
 8004a8a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8004a8e:	42b0      	cmp	r0, r6
 8004a90:	d002      	beq.n	8004a98 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a92:	f044 0201 	orr.w	r2, r4, #1
 8004a96:	e002      	b.n	8004a9e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a98:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004a9c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a9e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa0:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004aa4:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004aaa:	f001 010a 	and.w	r1, r1, #10
 8004aae:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ab0:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8004ab2:	6183      	str	r3, [r0, #24]
}
 8004ab4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004ab6:	6201      	str	r1, [r0, #32]
}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40010000 	.word	0x40010000

08004ac0 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop

08004ac4 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d054      	beq.n	8004b72 <HAL_TIMEx_HallSensor_Init+0xae>
{
 8004ac8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004ace:	b088      	sub	sp, #32
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d045      	beq.n	8004b68 <HAL_TIMEx_HallSensor_Init+0xa4>
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae2:	1d21      	adds	r1, r4, #4
 8004ae4:	6820      	ldr	r0, [r4, #0]
 8004ae6:	f7ff ff0b 	bl	8004900 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004aea:	68ab      	ldr	r3, [r5, #8]
 8004aec:	6829      	ldr	r1, [r5, #0]
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f7ff ffa9 	bl	8004a48 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004af6:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004af8:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004afa:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004afc:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004afe:	f022 020c 	bic.w	r2, r2, #12
 8004b02:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004b04:	6983      	ldr	r3, [r0, #24]
 8004b06:	4333      	orrs	r3, r6
 8004b08:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004b0a:	6843      	ldr	r3, [r0, #4]
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b10:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004b12:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004b14:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004b1c:	6883      	ldr	r3, [r0, #8]
 8004b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b22:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004b24:	6883      	ldr	r3, [r0, #8]
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004b2c:	6883      	ldr	r3, [r0, #8]
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004b34:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004b36:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004b38:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004b3a:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b3c:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b40:	9507      	str	r5, [sp, #28]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b42:	e9cd 5503 	strd	r5, r5, [sp, #12]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004b46:	f7ff ff4d 	bl	80049e4 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b52:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004b54:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004b56:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004b58:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 8004b5c:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004b5e:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004b64:	b008      	add	sp, #32
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004b6c:	f7ff ffa8 	bl	8004ac0 <HAL_TIMEx_HallSensor_MspInit>
 8004b70:	e7b4      	b.n	8004adc <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004b72:	2001      	movs	r0, #1
}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop

08004b78 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d03a      	beq.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b80:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b82:	2202      	movs	r2, #2
{
 8004b84:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004b8a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b8c:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	4d1b      	ldr	r5, [pc, #108]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b96:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8004b9a:	f04f 0601 	mov.w	r6, #1
 8004b9e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8004ba2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	d019      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d016      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00f      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004bc2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d007      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004bca:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004bd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d104      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bdc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004be4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	2201      	movs	r2, #1
 8004be8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004bec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004bf0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004bf2:	4618      	mov	r0, r3
}
 8004bf4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004bf6:	2002      	movs	r0, #2
}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400

08004c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d021      	beq.n	8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8004c0c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c0e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c12:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c20:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c26:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c30:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c36:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c38:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c3a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c40:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8004c42:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004c44:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 8004c46:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8004c48:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004c50:	2302      	movs	r3, #2
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f000 8093 	beq.w	8004d84 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8004c62:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c68:	4604      	mov	r4, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8085 	beq.w	8004d7a <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c70:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c72:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c74:	2224      	movs	r2, #36	; 0x24
 8004c76:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004c7a:	68d8      	ldr	r0, [r3, #12]
 8004c7c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c80:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004c84:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c86:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c88:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004c8e:	4329      	orrs	r1, r5
 8004c90:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004c92:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c94:	6965      	ldr	r5, [r4, #20]
 8004c96:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004c98:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c9c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004c9e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ca2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	69a1      	ldr	r1, [r4, #24]
 8004cac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cb0:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cb6:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb8:	4a36      	ldr	r2, [pc, #216]	; (8004d94 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	d034      	beq.n	8004d26 <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d063      	beq.n	8004d88 <HAL_UART_Init+0x130>
 8004cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d05f      	beq.n	8004d88 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cc8:	f7ff f89a 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	4d32      	ldr	r5, [pc, #200]	; (8004d98 <HAL_UART_Init+0x140>)
 8004cd0:	2219      	movs	r2, #25
 8004cd2:	fba0 0102 	umull	r0, r1, r0, r2
 8004cd6:	009a      	lsls	r2, r3, #2
 8004cd8:	0f9b      	lsrs	r3, r3, #30
 8004cda:	f7fb faf1 	bl	80002c0 <__aeabi_uldivmod>
 8004cde:	fba5 2100 	umull	r2, r1, r5, r0
 8004ce2:	0949      	lsrs	r1, r1, #5
 8004ce4:	2264      	movs	r2, #100	; 0x64
 8004ce6:	fb02 0211 	mls	r2, r2, r1, r0
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	3232      	adds	r2, #50	; 0x32
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	fba5 0202 	umull	r0, r2, r5, r2
 8004cf4:	0109      	lsls	r1, r1, #4
 8004cf6:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8004cfa:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d0a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004d0c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d16:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8004d18:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004d24:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d031      	beq.n	8004d8e <HAL_UART_Init+0x136>
 8004d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02d      	beq.n	8004d8e <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d32:	f7ff f865 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	2600      	movs	r6, #0
 8004d3a:	1892      	adds	r2, r2, r2
 8004d3c:	f04f 0119 	mov.w	r1, #25
 8004d40:	eb46 0306 	adc.w	r3, r6, r6
 8004d44:	fba0 0101 	umull	r0, r1, r0, r1
 8004d48:	f7fb faba 	bl	80002c0 <__aeabi_uldivmod>
 8004d4c:	4e12      	ldr	r6, [pc, #72]	; (8004d98 <HAL_UART_Init+0x140>)
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	fba6 2100 	umull	r2, r1, r6, r0
 8004d54:	094d      	lsrs	r5, r1, #5
 8004d56:	2264      	movs	r2, #100	; 0x64
 8004d58:	fb02 0215 	mls	r2, r2, r5, r0
 8004d5c:	00d2      	lsls	r2, r2, #3
 8004d5e:	3232      	adds	r2, #50	; 0x32
 8004d60:	fba6 1202 	umull	r1, r2, r6, r2
 8004d64:	0952      	lsrs	r2, r2, #5
 8004d66:	f002 0107 	and.w	r1, r2, #7
 8004d6a:	0052      	lsls	r2, r2, #1
 8004d6c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004d70:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004d74:	440a      	add	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	e7c0      	b.n	8004cfc <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004d7a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004d7e:	f7fd fae3 	bl	8002348 <HAL_UART_MspInit>
 8004d82:	e775      	b.n	8004c70 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004d84:	2001      	movs	r0, #1
}
 8004d86:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7ff f84a 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	e79e      	b.n	8004ccc <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8e:	f7ff f847 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8004d92:	e7d0      	b.n	8004d36 <HAL_UART_Init+0xde>
 8004d94:	40011000 	.word	0x40011000
 8004d98:	51eb851f 	.word	0x51eb851f

08004d9c <HAL_UART_Transmit>:
{
 8004d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da0:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004da2:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8004da6:	2920      	cmp	r1, #32
{
 8004da8:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8004daa:	d132      	bne.n	8004e12 <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 8004dac:	2e00      	cmp	r6, #0
 8004dae:	d034      	beq.n	8004e1a <HAL_UART_Transmit+0x7e>
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	2a00      	cmp	r2, #0
 8004db4:	d031      	beq.n	8004e1a <HAL_UART_Transmit+0x7e>
 8004db6:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8004db8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	d027      	beq.n	8004e12 <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc2:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8004dc6:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8004dce:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004dd6:	f7fe fa63 	bl	80032a0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8004dda:	9a01      	ldr	r2, [sp, #4]
 8004ddc:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dde:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004de0:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 8004de2:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8004de6:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8004de8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d03b      	beq.n	8004e68 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 8004df0:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004df2:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8004df4:	3801      	subs	r0, #1
 8004df6:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004df8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8004dfc:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004dfe:	d01b      	beq.n	8004e38 <HAL_UART_Transmit+0x9c>
 8004e00:	1c78      	adds	r0, r7, #1
 8004e02:	d13b      	bne.n	8004e7c <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	6810      	ldr	r0, [r2, #0]
 8004e06:	0601      	lsls	r1, r0, #24
 8004e08:	d5fc      	bpl.n	8004e04 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e0a:	7833      	ldrb	r3, [r6, #0]
 8004e0c:	6053      	str	r3, [r2, #4]
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ea      	b.n	8004de8 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 8004e12:	2002      	movs	r0, #2
}
 8004e14:	b002      	add	sp, #8
 8004e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004e1a:	2001      	movs	r0, #1
}
 8004e1c:	b002      	add	sp, #8
 8004e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	d40c      	bmi.n	8004e42 <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	d031      	beq.n	8004e90 <HAL_UART_Transmit+0xf4>
 8004e2c:	f7fe fa38 	bl	80032a0 <HAL_GetTick>
 8004e30:	1b40      	subs	r0, r0, r5
 8004e32:	4287      	cmp	r7, r0
 8004e34:	6822      	ldr	r2, [r4, #0]
 8004e36:	d32b      	bcc.n	8004e90 <HAL_UART_Transmit+0xf4>
 8004e38:	1c78      	adds	r0, r7, #1
 8004e3a:	d1f2      	bne.n	8004e22 <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3c:	6810      	ldr	r0, [r2, #0]
 8004e3e:	0601      	lsls	r1, r0, #24
 8004e40:	d5fc      	bpl.n	8004e3c <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e42:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e44:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d1de      	bne.n	8004e0e <HAL_UART_Transmit+0x72>
          pData += 2U;
 8004e50:	3602      	adds	r6, #2
 8004e52:	e7c9      	b.n	8004de8 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	065b      	lsls	r3, r3, #25
 8004e58:	d40b      	bmi.n	8004e72 <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e5a:	b1cf      	cbz	r7, 8004e90 <HAL_UART_Transmit+0xf4>
 8004e5c:	f7fe fa20 	bl	80032a0 <HAL_GetTick>
 8004e60:	1b40      	subs	r0, r0, r5
 8004e62:	4287      	cmp	r7, r0
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	d313      	bcc.n	8004e90 <HAL_UART_Transmit+0xf4>
 8004e68:	1c78      	adds	r0, r7, #1
 8004e6a:	d1f3      	bne.n	8004e54 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6c:	6813      	ldr	r3, [r2, #0]
 8004e6e:	0659      	lsls	r1, r3, #25
 8004e70:	d5fc      	bpl.n	8004e6c <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 8004e72:	2320      	movs	r3, #32
 8004e74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e7cb      	b.n	8004e14 <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	6813      	ldr	r3, [r2, #0]
 8004e7e:	061b      	lsls	r3, r3, #24
 8004e80:	d4c3      	bmi.n	8004e0a <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e82:	b12f      	cbz	r7, 8004e90 <HAL_UART_Transmit+0xf4>
 8004e84:	f7fe fa0c 	bl	80032a0 <HAL_GetTick>
 8004e88:	1b40      	subs	r0, r0, r5
 8004e8a:	4287      	cmp	r7, r0
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	d2b7      	bcs.n	8004e00 <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e90:	68d3      	ldr	r3, [r2, #12]
 8004e92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e96:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004e9a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8004ea0:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8004ea2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea4:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004ea6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8004eaa:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8004eae:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004eb2:	b002      	add	sp, #8
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004eb8 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8004eb8:	88c0      	ldrh	r0, [r0, #6]
 8004eba:	4770      	bx	lr

08004ebc <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004ebc:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004ebe:	8840      	ldrh	r0, [r0, #2]
 8004ec0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004ec4:	0c00      	lsrs	r0, r0, #16
 8004ec6:	4770      	bx	lr

08004ec8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8004ec8:	b410      	push	{r4}
 8004eca:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004ecc:	8802      	ldrh	r2, [r0, #0]
 8004ece:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004ed0:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004ed4:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004ed8:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004edc:	42a2      	cmp	r2, r4
{
 8004ede:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004ee0:	d219      	bcs.n	8004f16 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004ee2:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8004ee6:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004eea:	b2e4      	uxtb	r4, r4
 8004eec:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004ef0:	8882      	ldrh	r2, [r0, #4]
 8004ef2:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004ef6:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8004ef8:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004efc:	bfbc      	itt	lt
 8004efe:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004f02:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bfbc      	itt	lt
 8004f08:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004f0c:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004f0e:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004f12:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8004f16:	b289      	uxth	r1, r1
 8004f18:	2000      	movs	r0, #0
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f361 000f 	bfi	r0, r1, #0, #16
 8004f20:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004f24:	b005      	add	sp, #20
 8004f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8004f2c:	4401      	add	r1, r0
 8004f2e:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8004f32:	4770      	bx	lr

08004f34 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8004f34:	4401      	add	r1, r0
}
 8004f36:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004f3a:	4770      	bx	lr

08004f3c <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8004f3c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8004f40:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8004f42:	4770      	bx	lr

08004f44 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8004f44:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8004f48:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop

08004f50 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	8243      	strh	r3, [r0, #18]
 8004f54:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004f56:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004f5a:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004f5e:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004f62:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8004f66:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8004f6a:	4770      	bx	lr

08004f6c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004f6c:	b120      	cbz	r0, 8004f78 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004f6e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004f72:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	60c3      	str	r3, [r0, #12]
  }
}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004f7c:	b190      	cbz	r0, 8004fa4 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004f7e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004f80:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8004f82:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f84:	b151      	cbz	r1, 8004f9c <FCP_CalcCRC+0x20>
 8004f86:	1e4a      	subs	r2, r1, #1
 8004f88:	1c81      	adds	r1, r0, #2
 8004f8a:	fa51 f282 	uxtab	r2, r1, r2
 8004f8e:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8004f90:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8004f94:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f96:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 8004f98:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f9a:	d1f9      	bne.n	8004f90 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004f9c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8004fa0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004fa8:	b4f0      	push	{r4, r5, r6, r7}
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8004faa:	8a85      	ldrh	r5, [r0, #20]
                                     pHandle->_Super.bElToMecRatio;
 8004fac:	7842      	ldrb	r2, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004fae:	8ac6      	ldrh	r6, [r0, #22]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004fb0:	e9d0 430a 	ldrd	r4, r3, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004fb4:	fb16 f602 	smulbb	r6, r6, r2
  hMaxReliableElSpeedUnit *= 2u;
 8004fb8:	006d      	lsls	r5, r5, #1
 8004fba:	fb15 f502 	smulbb	r5, r5, r2
  hMinReliableElSpeedUnit /= 4u;
 8004fbe:	f3c6 068d 	ubfx	r6, r6, #2, #14

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004fc2:	0c22      	lsrs	r2, r4, #16
  hMaxReliableElSpeedUnit *= 2u;
 8004fc4:	b2ad      	uxth	r5, r5
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004fc6:	f8a0 20c2 	strh.w	r2, [r0, #194]	; 0xc2

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	d069      	beq.n	80050a2 <HALL_Init+0xfa>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8004fce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004fd2:	0076      	lsls	r6, r6, #1
 8004fd4:	f242 7110 	movw	r1, #10000	; 0x2710
 8004fd8:	fbb1 f1f6 	udiv	r1, r1, r6
 8004fdc:	b28f      	uxth	r7, r1
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004fde:	4e32      	ldr	r6, [pc, #200]	; (80050a8 <HALL_Init+0x100>)
 8004fe0:	f8a0 70c0 	strh.w	r7, [r0, #192]	; 0xc0
 8004fe4:	fb01 f202 	mul.w	r2, r1, r2
 8004fe8:	fba6 6202 	umull	r6, r2, r6, r2
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004fec:	492f      	ldr	r1, [pc, #188]	; (80050ac <HALL_Init+0x104>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004fee:	69c6      	ldr	r6, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004ff0:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004ff4:	0992      	lsrs	r2, r2, #6
 8004ff6:	f8a0 20ae 	strh.w	r2, [r0, #174]	; 0xae
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004ffa:	fba1 4104 	umull	r4, r1, r1, r4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004ffe:	b292      	uxth	r2, r2
 8005000:	0414      	lsls	r4, r2, #16
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005002:	0889      	lsrs	r1, r1, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005004:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005008:	eb01 0781 	add.w	r7, r1, r1, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800500c:	8b44      	ldrh	r4, [r0, #26]
 800500e:	fbb1 f1f4 	udiv	r1, r1, r4
 8005012:	fb06 f101 	mul.w	r1, r6, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005016:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800501a:	007f      	lsls	r7, r7, #1
                       / hMaxReliableElSpeedUnit);
 800501c:	fbb7 f5f5 	udiv	r5, r7, r5
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005020:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005024:	6999      	ldr	r1, [r3, #24]

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005026:	f890 50c6 	ldrb.w	r5, [r0, #198]	; 0xc6

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 800502a:	f890 7048 	ldrb.w	r7, [r0, #72]	; 0x48
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800502e:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8005030:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005034:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005038:	fb04 f405 	mul.w	r4, r4, r5
  pHandle->SensorIsReliable = true;
 800503c:	2501      	movs	r5, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800503e:	fb94 f4f6 	sdiv	r4, r4, r6
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005042:	3c01      	subs	r4, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005044:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
  pHandle->SensorIsReliable = true;
 8005048:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 800504c:	6199      	str	r1, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005050:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8005052:	2100      	movs	r1, #0
 8005054:	432a      	orrs	r2, r5
 8005056:	615a      	str	r2, [r3, #20]
 8005058:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f042 0204 	orr.w	r2, r2, #4
 8005060:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	f042 0202 	orr.w	r2, r2, #2
 8005068:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	432a      	orrs	r2, r5
 800506e:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8005070:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	432a      	orrs	r2, r5
 8005076:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	432a      	orrs	r2, r5
 800507c:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800507e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005082:	b163      	cbz	r3, 800509e <HALL_Init+0xf6>
 8005084:	3b01      	subs	r3, #1
 8005086:	b2d9      	uxtb	r1, r3
 8005088:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800508c:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8005090:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005094:	304c      	adds	r0, #76	; 0x4c
 8005096:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800509a:	4298      	cmp	r0, r3
 800509c:	d1fb      	bne.n	8005096 <HALL_Init+0xee>
  }
}
 800509e:	bcf0      	pop	{r4, r5, r6, r7}
 80050a0:	4770      	bx	lr
 80050a2:	2196      	movs	r1, #150	; 0x96
    pHandle->HallTimeout = 150u;
 80050a4:	460f      	mov	r7, r1
 80050a6:	e79a      	b.n	8004fde <HALL_Init+0x36>
 80050a8:	10624dd3 	.word	0x10624dd3
 80050ac:	aaaaaaab 	.word	0xaaaaaaab

080050b0 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80050b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80050b2:	f8b0 c0ae 	ldrh.w	ip, [r0, #174]	; 0xae
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80050b6:	68d1      	ldr	r1, [r2, #12]
 80050b8:	f021 0102 	bic.w	r1, r1, #2
  pHandle->RatioDec = false;
 80050bc:	2300      	movs	r3, #0
{
 80050be:	b4f0      	push	{r4, r5, r6, r7}
 80050c0:	e9d0 740e 	ldrd	r7, r4, [r0, #56]	; 0x38
 80050c4:	e9d0 6510 	ldrd	r6, r5, [r0, #64]	; 0x40
 80050c8:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 80050ca:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 80050cc:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 80050d0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 80050d4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 80050d8:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 80050dc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 80050e0:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 80050e2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 80050e6:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 80050e8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 80050ec:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 80050f0:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 80050f4:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80050f8:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	e9d0 c10c 	ldrd	ip, r1, [r0, #48]	; 0x30
 8005104:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005106:	68d3      	ldr	r3, [r2, #12]
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 800510e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005112:	b9e3      	cbnz	r3, 800514e <HALL_Clear+0x9e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005114:	6933      	ldr	r3, [r6, #16]
 8005116:	693e      	ldr	r6, [r7, #16]
 8005118:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800511c:	ea35 0303 	bics.w	r3, r5, r3
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005120:	bf0c      	ite	eq
 8005122:	2304      	moveq	r3, #4
 8005124:	2300      	movne	r3, #0
 8005126:	43b4      	bics	r4, r6
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005128:	bf0c      	ite	eq
 800512a:	2402      	moveq	r4, #2
 800512c:	2400      	movne	r4, #0
 800512e:	4323      	orrs	r3, r4
 8005130:	ea31 0202 	bics.w	r2, r1, r2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005134:	bf08      	it	eq
 8005136:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8005140:	2a05      	cmp	r2, #5
 8005142:	d854      	bhi.n	80051ee <HALL_Clear+0x13e>
 8005144:	e8df f002 	tbb	[pc, r2]
 8005148:	3f352b21 	.word	0x3f352b21
 800514c:	1749      	.short	0x1749
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	6933      	ldr	r3, [r6, #16]
 8005152:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8005156:	ea35 0303 	bics.w	r3, r5, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800515a:	bf0c      	ite	eq
 800515c:	2302      	moveq	r3, #2
 800515e:	2300      	movne	r3, #0
 8005160:	43b1      	bics	r1, r6
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005162:	bf08      	it	eq
 8005164:	f043 0301 	orreq.w	r3, r3, #1
 8005168:	ea34 0202 	bics.w	r2, r4, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800516c:	bf14      	ite	ne
 800516e:	2204      	movne	r2, #4
 8005170:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005172:	4313      	orrs	r3, r2
 8005174:	e7e1      	b.n	800513a <HALL_Clear+0x8a>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8005176:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005178:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 800517c:	3b3f      	subs	r3, #63	; 0x3f
 800517e:	b21b      	sxth	r3, r3
 8005180:	8083      	strh	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005182:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005186:	bcf0      	pop	{r4, r5, r6, r7}
 8005188:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800518a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800518c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005190:	333f      	adds	r3, #63	; 0x3f
 8005192:	b21b      	sxth	r3, r3
 8005194:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005196:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800519a:	bcf0      	pop	{r4, r5, r6, r7}
 800519c:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 800519e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80051a0:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80051a4:	3b2a      	subs	r3, #42	; 0x2a
 80051a6:	b21b      	sxth	r3, r3
 80051a8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80051aa:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80051ae:	bcf0      	pop	{r4, r5, r6, r7}
 80051b0:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80051b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80051b4:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80051b8:	332a      	adds	r3, #42	; 0x2a
 80051ba:	b21b      	sxth	r3, r3
 80051bc:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80051be:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80051c2:	bcf0      	pop	{r4, r5, r6, r7}
 80051c4:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80051c6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80051c8:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80051cc:	3b15      	subs	r3, #21
 80051ce:	b21b      	sxth	r3, r3
 80051d0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80051d2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80051d6:	bcf0      	pop	{r4, r5, r6, r7}
 80051d8:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80051da:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80051dc:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80051e0:	3315      	adds	r3, #21
 80051e2:	b21b      	sxth	r3, r3
 80051e4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80051e6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80051ea:	bcf0      	pop	{r4, r5, r6, r7}
 80051ec:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 80051ee:	2200      	movs	r2, #0
 80051f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80051f4:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80051f8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80051fc:	bcf0      	pop	{r4, r5, r6, r7}
 80051fe:	4770      	bx	lr

08005200 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005200:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005204:	8883      	ldrh	r3, [r0, #4]
 8005206:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800520a:	428a      	cmp	r2, r1
 800520c:	d011      	beq.n	8005232 <HALL_CalcElAngle+0x32>
{
 800520e:	b430      	push	{r4, r5}
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005210:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005212:	f8b0 50ac 	ldrh.w	r5, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005216:	f8b0 40aa 	ldrh.w	r4, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800521a:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800521e:	440b      	add	r3, r1
 8005220:	442b      	add	r3, r5
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005222:	4421      	add	r1, r4
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005224:	b21b      	sxth	r3, r3
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005226:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 800522a:	8083      	strh	r3, [r0, #4]
}
 800522c:	bc30      	pop	{r4, r5}
 800522e:	4618      	mov	r0, r3
 8005230:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8005232:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8005236:	4413      	add	r3, r2
 8005238:	b21b      	sxth	r3, r3
 800523a:	8083      	strh	r3, [r0, #4]
}
 800523c:	4618      	mov	r0, r3
 800523e:	4770      	bx	lr

08005240 <HALL_CalcAvrgMecSpeedUnit>:
{
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005244:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8005248:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 800524a:	b180      	cbz	r0, 800526e <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800524c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 800524e:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	429a      	cmp	r2, r3
 8005256:	d811      	bhi.n	800527c <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 800525c:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 800525e:	4629      	mov	r1, r5
 8005260:	4620      	mov	r0, r4
 8005262:	f000 ffe9 	bl	8006238 <SPD_IsMecSpeedReliable>
 8005266:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800526a:	81a3      	strh	r3, [r4, #12]
}
 800526c:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800526e:	78e3      	ldrb	r3, [r4, #3]
 8005270:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8005272:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8005274:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8005276:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005278:	81a3      	strh	r3, [r4, #12]
}
 800527a:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800527c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8005280:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8005282:	b1cb      	cbz	r3, 80052b8 <HALL_CalcAvrgMecSpeedUnit+0x78>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005284:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HALL_CalcAvrgMecSpeedUnit+0x74>
          if (pHandle->HallMtpa == true)
 800528c:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8005290:	b1a2      	cbz	r2, 80052bc <HALL_CalcAvrgMecSpeedUnit+0x7c>
            pHandle->CompSpeed = 0;
 8005292:	2200      	movs	r2, #0
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005294:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005296:	7861      	ldrb	r1, [r4, #1]
 8005298:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800529c:	fb03 f300 	mul.w	r3, r3, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80052a0:	69e2      	ldr	r2, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80052a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052a6:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80052a8:	fb02 f201 	mul.w	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80052ac:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80052b0:	802b      	strh	r3, [r5, #0]
 80052b2:	e7d4      	b.n	800525e <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80052b4:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 80052b8:	802b      	strh	r3, [r5, #0]
 80052ba:	e7d0      	b.n	800525e <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80052bc:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 80052c0:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80052c2:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80052c6:	1a12      	subs	r2, r2, r0
 80052c8:	b212      	sxth	r2, r2
 80052ca:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80052ce:	fb92 f2f1 	sdiv	r2, r2, r1
 80052d2:	e7df      	b.n	8005294 <HALL_CalcAvrgMecSpeedUnit+0x54>

080052d4 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80052d4:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d042      	beq.n	8005362 <HALL_TIMx_CC_IRQHandler+0x8e>
{
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80052de:	f890 e020 	ldrb.w	lr, [r0, #32]
    bPrevHallState = pHandle->HallState;
 80052e2:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 80052e6:	f990 50a2 	ldrsb.w	r5, [r0, #162]	; 0xa2
 80052ea:	e9d0 c20e 	ldrd	ip, r2, [r0, #56]	; 0x38
 80052ee:	e9d0 7310 	ldrd	r7, r3, [r0, #64]	; 0x40
 80052f2:	e9d0 640c 	ldrd	r6, r4, [r0, #48]	; 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80052f6:	f1be 0f00 	cmp.w	lr, #0
 80052fa:	d01d      	beq.n	8005338 <HALL_TIMx_CC_IRQHandler+0x64>
 80052fc:	f8dc c010 	ldr.w	ip, [ip, #16]
 8005300:	693f      	ldr	r7, [r7, #16]
 8005302:	6936      	ldr	r6, [r6, #16]
 8005304:	43bb      	bics	r3, r7
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005306:	bf0c      	ite	eq
 8005308:	2302      	moveq	r3, #2
 800530a:	2300      	movne	r3, #0
 800530c:	43b4      	bics	r4, r6
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800530e:	bf08      	it	eq
 8005310:	f043 0301 	orreq.w	r3, r3, #1
 8005314:	ea32 020c 	bics.w	r2, r2, ip
 8005318:	bf14      	ite	ne
 800531a:	2204      	movne	r2, #4
 800531c:	2200      	moveq	r2, #0
 800531e:	4313      	orrs	r3, r2
    switch ( pHandle->HallState )
 8005320:	1e5a      	subs	r2, r3, #1
 8005322:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005326:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8005328:	2a05      	cmp	r2, #5
 800532a:	f200 8102 	bhi.w	8005532 <HALL_TIMx_CC_IRQHandler+0x25e>
 800532e:	e8df f002 	tbb	[pc, r2]
 8005332:	c1d3      	.short	0xc1d3
 8005334:	1a8fa0af 	.word	0x1a8fa0af
 8005338:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800533c:	f8dc 7010 	ldr.w	r7, [ip, #16]
 8005340:	6936      	ldr	r6, [r6, #16]
 8005342:	ea33 030e 	bics.w	r3, r3, lr
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005346:	bf0c      	ite	eq
 8005348:	2304      	moveq	r3, #4
 800534a:	2300      	movne	r3, #0
 800534c:	43ba      	bics	r2, r7
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800534e:	bf0c      	ite	eq
 8005350:	2202      	moveq	r2, #2
 8005352:	2200      	movne	r2, #0
 8005354:	4313      	orrs	r3, r2
 8005356:	ea34 0206 	bics.w	r2, r4, r6
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800535a:	bf08      	it	eq
 800535c:	f043 0301 	orreq.w	r3, r3, #1
 8005360:	e7de      	b.n	8005320 <HALL_TIMx_CC_IRQHandler+0x4c>
}
 8005362:	2000      	movs	r0, #0
 8005364:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8005366:	2902      	cmp	r1, #2
 8005368:	f000 8127 	beq.w	80055ba <HALL_TIMx_CC_IRQHandler+0x2e6>
        else if ( bPrevHallState == STATE_4 )
 800536c:	2904      	cmp	r1, #4
 800536e:	f000 8111 	beq.w	8005594 <HALL_TIMx_CC_IRQHandler+0x2c0>
    PrevDirection = pHandle->Direction;
 8005372:	4629      	mov	r1, r5
    if (pHandle->HallMtpa == true)
 8005374:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8005378:	b113      	cbz	r3, 8005380 <HALL_TIMx_CC_IRQHandler+0xac>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800537a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
 800537e:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8005380:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80c1 	beq.w	800550c <HALL_TIMx_CC_IRQHandler+0x238>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800538a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800538e:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
 8005392:	42ab      	cmp	r3, r5
 8005394:	d205      	bcs.n	80053a2 <HALL_TIMx_CC_IRQHandler+0xce>
        pHandle->BufferFilled++;
 8005396:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800539a:	3301      	adds	r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80053a2:	6b67      	ldr	r7, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80053a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80053a6:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 80053aa:	f890 604e 	ldrb.w	r6, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80053ae:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 80053b0:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80053b2:	fa13 f387 	uxtah	r3, r3, r7
      if ( pHandle->OVFCounter != 0u )
 80053b6:	f006 0cff 	and.w	ip, r6, #255	; 0xff
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	f000 80af 	beq.w	800551e <HALL_TIMx_CC_IRQHandler+0x24a>
        hAux = hPrscBuf + 1u;
 80053c0:	3201      	adds	r2, #1
        if ( pHandle->RatioInc )
 80053c2:	f890 604b 	ldrb.w	r6, [r0, #75]	; 0x4b
        wCaptBuf *= hAux;
 80053c6:	b292      	uxth	r2, r2
 80053c8:	fb03 f302 	mul.w	r3, r3, r2
        if ( pHandle->RatioInc )
 80053cc:	2e00      	cmp	r6, #0
 80053ce:	f000 80b7 	beq.w	8005540 <HALL_TIMx_CC_IRQHandler+0x26c>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80053d2:	2200      	movs	r2, #0
 80053d4:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 80053d8:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 80053dc:	429a      	cmp	r2, r3
 80053de:	d832      	bhi.n	8005446 <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80053e0:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80053e4:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80053e8:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80053ec:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80053f0:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80053f2:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80053f6:	bf88      	it	hi
 80053f8:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80053fc:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 8005400:	f102 0201 	add.w	r2, r2, #1
 8005404:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005406:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800540a:	bf8a      	itet	hi
 800540c:	19a4      	addhi	r4, r4, r6
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 800540e:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8005410:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8005414:	4295      	cmp	r5, r2
 8005416:	f8cc 6050 	str.w	r6, [ip, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 800541a:	bf08      	it	eq
 800541c:	2200      	moveq	r2, #0
 800541e:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8005422:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 8005426:	2a00      	cmp	r2, #0
 8005428:	f000 8087 	beq.w	800553a <HALL_TIMx_CC_IRQHandler+0x266>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800542c:	f890 404d 	ldrb.w	r4, [r0, #77]	; 0x4d
 8005430:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8005434:	42a5      	cmp	r5, r4
 8005436:	f240 80a4 	bls.w	8005582 <HALL_TIMx_CC_IRQHandler+0x2ae>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	fb13 f101 	smulbb	r1, r3, r1
 8005442:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 8005446:	2300      	movs	r3, #0
 8005448:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 800544c:	2000      	movs	r0, #0
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8005450:	2904      	cmp	r1, #4
 8005452:	f000 80ab 	beq.w	80055ac <HALL_TIMx_CC_IRQHandler+0x2d8>
        else if ( bPrevHallState == STATE_1 )
 8005456:	2901      	cmp	r1, #1
 8005458:	d18b      	bne.n	8005372 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800545a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800545c:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005460:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8005462:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005464:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005468:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 800546c:	f04f 31ff 	mov.w	r1, #4294967295
 8005470:	e043      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_6 )
 8005472:	2906      	cmp	r1, #6
 8005474:	f000 80b4 	beq.w	80055e0 <HALL_TIMx_CC_IRQHandler+0x30c>
        else if ( bPrevHallState == STATE_5 )
 8005478:	2905      	cmp	r1, #5
 800547a:	f47f af7a 	bne.w	8005372 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->Direction = NEGATIVE;
 800547e:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005480:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = NEGATIVE;
 8005482:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005486:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 800548a:	f04f 31ff 	mov.w	r1, #4294967295
 800548e:	e034      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_1 )
 8005490:	2901      	cmp	r1, #1
 8005492:	f000 809c 	beq.w	80055ce <HALL_TIMx_CC_IRQHandler+0x2fa>
        else if ( bPrevHallState == STATE_2 )
 8005496:	2902      	cmp	r1, #2
 8005498:	f47f af6b 	bne.w	8005372 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800549c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800549e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80054a2:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80054a4:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80054a6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80054aa:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80054ae:	f04f 31ff 	mov.w	r1, #4294967295
 80054b2:	e022      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_3 )
 80054b4:	2903      	cmp	r1, #3
 80054b6:	f000 80a7 	beq.w	8005608 <HALL_TIMx_CC_IRQHandler+0x334>
        else if ( bPrevHallState == STATE_6 )
 80054ba:	2906      	cmp	r1, #6
 80054bc:	f47f af59 	bne.w	8005372 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80054c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054c2:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80054c6:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80054c8:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80054ca:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80054ce:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80054d2:	f04f 31ff 	mov.w	r1, #4294967295
 80054d6:	e010      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_5 )
 80054d8:	2905      	cmp	r1, #5
 80054da:	f000 808b 	beq.w	80055f4 <HALL_TIMx_CC_IRQHandler+0x320>
        else if ( bPrevHallState == STATE_3 )
 80054de:	2903      	cmp	r1, #3
 80054e0:	f47f af47 	bne.w	8005372 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80054e4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054e6:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80054ea:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80054ec:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80054ee:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80054f2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80054f6:	f04f 31ff 	mov.w	r1, #4294967295
    if (pHandle->Direction != PrevDirection)
 80054fa:	428d      	cmp	r5, r1
 80054fc:	f43f af3a 	beq.w	8005374 <HALL_TIMx_CC_IRQHandler+0xa0>
      pHandle->BufferFilled = 0 ;
 8005500:	2300      	movs	r3, #0
 8005502:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005506:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 800550a:	e733      	b.n	8005374 <HALL_TIMx_CC_IRQHandler+0xa0>
      pHandle->FirstCapt++;
 800550c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005510:	3301      	adds	r3, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8005518:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800551a:	2000      	movs	r0, #0
 800551c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 800551e:	f890 604a 	ldrb.w	r6, [r0, #74]	; 0x4a
 8005522:	b1d6      	cbz	r6, 800555a <HALL_TIMx_CC_IRQHandler+0x286>
          hAux = hPrscBuf + 2u;
 8005524:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8005526:	b292      	uxth	r2, r2
 8005528:	fb03 f302 	mul.w	r3, r3, r2
          pHandle->RatioDec = false;
 800552c:	f880 c04a 	strb.w	ip, [r0, #74]	; 0x4a
 8005530:	e752      	b.n	80053d8 <HALL_TIMx_CC_IRQHandler+0x104>
        pHandle->SensorIsReliable = false;
 8005532:	2300      	movs	r3, #0
 8005534:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8005538:	e71b      	b.n	8005372 <HALL_TIMx_CC_IRQHandler+0x9e>
            pHandle->AvrElSpeedDpp = 0;
 800553a:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 800553e:	e782      	b.n	8005446 <HALL_TIMx_CC_IRQHandler+0x172>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005540:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8005542:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	; 0xae
 8005546:	4296      	cmp	r6, r2
 8005548:	f67f af46 	bls.w	80053d8 <HALL_TIMx_CC_IRQHandler+0x104>
 800554c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800554e:	2601      	movs	r6, #1
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8005550:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005552:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8005554:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
 8005558:	e73e      	b.n	80053d8 <HALL_TIMx_CC_IRQHandler+0x104>
          uint16_t hAux = hPrscBuf + 1u;
 800555a:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800555c:	b2bf      	uxth	r7, r7
          wCaptBuf *= hAux;
 800555e:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005560:	f5b7 4faa 	cmp.w	r7, #21760	; 0x5500
          wCaptBuf *= hAux;
 8005564:	fb03 f302 	mul.w	r3, r3, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005568:	f4bf af36 	bcs.w	80053d8 <HALL_TIMx_CC_IRQHandler+0x104>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800556c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800556e:	2a00      	cmp	r2, #0
 8005570:	f43f af32 	beq.w	80053d8 <HALL_TIMx_CC_IRQHandler+0x104>
 8005574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8005576:	2601      	movs	r6, #1
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8005578:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800557a:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800557c:	f880 604a 	strb.w	r6, [r0, #74]	; 0x4a
 8005580:	e72a      	b.n	80053d8 <HALL_TIMx_CC_IRQHandler+0x104>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8005582:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005586:	fb93 f5f5 	sdiv	r5, r3, r5
 800558a:	fb92 f2f5 	sdiv	r2, r2, r5
 800558e:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 8005592:	e758      	b.n	8005446 <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005594:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005596:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800559a:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800559c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800559e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80055a2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80055a6:	f04f 31ff 	mov.w	r1, #4294967295
 80055aa:	e7a6      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->Direction = POSITIVE;
 80055ac:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80055ae:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80055b0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80055b4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80055b8:	e79f      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80055ba:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80055bc:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80055c0:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80055c2:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80055c4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80055c8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 80055cc:	e795      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80055ce:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80055d0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80055d4:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80055d8:	3355      	adds	r3, #85	; 0x55
 80055da:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80055de:	e78c      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80055e0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80055e2:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80055e6:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80055e8:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80055ea:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80055ee:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 80055f2:	e782      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80055f4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80055f6:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 80055fa:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80055fc:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80055fe:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005602:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 8005606:	e778      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>
                                                  + S16_60_PHASE_SHIFT );
 8005608:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800560a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800560e:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8005610:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8005612:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005616:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 800561a:	e76e      	b.n	80054fa <HALL_TIMx_CC_IRQHandler+0x226>

0800561c <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800561c:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005620:	b1e3      	cbz	r3, 800565c <HALL_TIMx_UP_IRQHandler+0x40>
{
 8005622:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 8005624:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005628:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 800562a:	f8b0 40c0 	ldrh.w	r4, [r0, #192]	; 0xc0
 800562e:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
    pHandle->OVFCounter++;
 8005632:	3201      	adds	r2, #1
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 800563a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 800563c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8005640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005644:	fb05 2202 	mla	r2, r5, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005648:	fb03 f304 	mul.w	r3, r3, r4
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 800564c:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005650:	b29b      	uxth	r3, r3
 8005652:	4299      	cmp	r1, r3
 8005654:	d204      	bcs.n	8005660 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8005656:	2000      	movs	r0, #0
 8005658:	bcf0      	pop	{r4, r5, r6, r7}
 800565a:	4770      	bx	lr
 800565c:	2000      	movs	r0, #0
 800565e:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005660:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8005664:	f04f 0c00 	mov.w	ip, #0
 8005668:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	; 0x38
 800566c:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	; 0x40
 8005670:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	; 0x30
 8005674:	f8a0 c00e 	strh.w	ip, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005678:	b9d7      	cbnz	r7, 80056b0 <HALL_TIMx_UP_IRQHandler+0x94>
 800567a:	692f      	ldr	r7, [r5, #16]
 800567c:	6935      	ldr	r5, [r6, #16]
 800567e:	6924      	ldr	r4, [r4, #16]
 8005680:	43bb      	bics	r3, r7
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005682:	bf0c      	ite	eq
 8005684:	2304      	moveq	r3, #4
 8005686:	4663      	movne	r3, ip
 8005688:	43aa      	bics	r2, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800568a:	bf0c      	ite	eq
 800568c:	2202      	moveq	r2, #2
 800568e:	4662      	movne	r2, ip
 8005690:	4313      	orrs	r3, r2
 8005692:	ea31 0204 	bics.w	r2, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005696:	bf08      	it	eq
 8005698:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80056a2:	2a05      	cmp	r2, #5
 80056a4:	d864      	bhi.n	8005770 <HALL_TIMx_UP_IRQHandler+0x154>
 80056a6:	e8df f002 	tbb	[pc, r2]
 80056aa:	555c      	.short	0x555c
 80056ac:	1440474e 	.word	0x1440474e
 80056b0:	6936      	ldr	r6, [r6, #16]
 80056b2:	692d      	ldr	r5, [r5, #16]
 80056b4:	6924      	ldr	r4, [r4, #16]
 80056b6:	43ab      	bics	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80056b8:	bf0c      	ite	eq
 80056ba:	2302      	moveq	r3, #2
 80056bc:	2300      	movne	r3, #0
 80056be:	43a1      	bics	r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80056c0:	bf08      	it	eq
 80056c2:	f043 0301 	orreq.w	r3, r3, #1
 80056c6:	43b2      	bics	r2, r6
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80056c8:	bf14      	ite	ne
 80056ca:	2204      	movne	r2, #4
 80056cc:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80056ce:	4313      	orrs	r3, r2
 80056d0:	e7e4      	b.n	800569c <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80056d2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056d4:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80056d8:	3b3f      	subs	r3, #63	; 0x3f
 80056da:	b21b      	sxth	r3, r3
 80056dc:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80056de:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80056e2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 80056e6:	2300      	movs	r3, #0
 80056e8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
 80056ec:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
      pHandle->FirstCapt = 0u;
 80056f0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80056f4:	b16c      	cbz	r4, 8005712 <HALL_TIMx_UP_IRQHandler+0xf6>
 80056f6:	1e62      	subs	r2, r4, #1
 80056f8:	b2d3      	uxtb	r3, r2
 80056fa:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80056fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005702:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005706:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800570a:	429a      	cmp	r2, r3
 800570c:	d1fb      	bne.n	8005706 <HALL_TIMx_UP_IRQHandler+0xea>
 800570e:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8005712:	2300      	movs	r3, #0
 8005714:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005718:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800571c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8005720:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8005724:	bcf0      	pop	{r4, r5, r6, r7}
 8005726:	2000      	movs	r0, #0
 8005728:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800572a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800572c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005730:	3315      	adds	r3, #21
 8005732:	b21b      	sxth	r3, r3
 8005734:	8083      	strh	r3, [r0, #4]
 8005736:	e7d2      	b.n	80056de <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005738:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800573a:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 800573e:	3b15      	subs	r3, #21
 8005740:	b21b      	sxth	r3, r3
 8005742:	8083      	strh	r3, [r0, #4]
 8005744:	e7cb      	b.n	80056de <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005746:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005748:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800574c:	332a      	adds	r3, #42	; 0x2a
 800574e:	b21b      	sxth	r3, r3
 8005750:	8083      	strh	r3, [r0, #4]
 8005752:	e7c4      	b.n	80056de <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005754:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005756:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 800575a:	3b2a      	subs	r3, #42	; 0x2a
 800575c:	b21b      	sxth	r3, r3
 800575e:	8083      	strh	r3, [r0, #4]
 8005760:	e7bd      	b.n	80056de <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005762:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005764:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005768:	333f      	adds	r3, #63	; 0x3f
 800576a:	b21b      	sxth	r3, r3
 800576c:	8083      	strh	r3, [r0, #4]
 800576e:	e7b6      	b.n	80056de <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->SensorIsReliable = false;
 8005770:	2200      	movs	r2, #0
 8005772:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8005776:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 800577a:	e7b0      	b.n	80056de <HALL_TIMx_UP_IRQHandler+0xc2>

0800577c <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800577c:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 800577e:	4b21      	ldr	r3, [pc, #132]	; (8005804 <ICS_GetPhaseCurrents+0x88>)
{
 8005780:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005782:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8005784:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 8005786:	6a22      	ldr	r2, [r4, #32]
 8005788:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800578c:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 800578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8005792:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8005794:	b29b      	uxth	r3, r3
 8005796:	1b5b      	subs	r3, r3, r5
  if ( aux < -INT16_MAX )
 8005798:	4293      	cmp	r3, r2
 800579a:	da1c      	bge.n	80057d6 <ICS_GetPhaseCurrents+0x5a>
  {
    pStator_Currents->a = -INT16_MAX;
 800579c:	800a      	strh	r2, [r1, #0]
 800579e:	4615      	mov	r5, r2
 80057a0:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <ICS_GetPhaseCurrents+0x90>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80057a6:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 80057aa:	4c17      	ldr	r4, [pc, #92]	; (8005808 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80057ac:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	db21      	blt.n	80057fa <ICS_GetPhaseCurrents+0x7e>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ba:	da19      	bge.n	80057f0 <ICS_GetPhaseCurrents+0x74>
  {
    pStator_Currents->b = INT16_MAX;
  }
  else
  {
    pStator_Currents->b = ( int16_t )aux;
 80057bc:	b21c      	sxth	r4, r3
 80057be:	804c      	strh	r4, [r1, #2]
 80057c0:	b29b      	uxth	r3, r3
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80057c2:	4413      	add	r3, r2
 80057c4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80057c6:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80057ca:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80057ce:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 80057d2:	bc70      	pop	{r4, r5, r6}
 80057d4:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 80057d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057da:	db05      	blt.n	80057e8 <ICS_GetPhaseCurrents+0x6c>
    pStator_Currents->a = INT16_MAX;
 80057dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80057e0:	461a      	mov	r2, r3
 80057e2:	800b      	strh	r3, [r1, #0]
 80057e4:	461d      	mov	r5, r3
 80057e6:	e7dd      	b.n	80057a4 <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->a = ( int16_t )aux;
 80057e8:	b21d      	sxth	r5, r3
 80057ea:	800d      	strh	r5, [r1, #0]
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	e7d9      	b.n	80057a4 <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->b = INT16_MAX;
 80057f0:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80057f4:	4623      	mov	r3, r4
 80057f6:	804c      	strh	r4, [r1, #2]
 80057f8:	e7e3      	b.n	80057c2 <ICS_GetPhaseCurrents+0x46>
    pStator_Currents->b = -INT16_MAX;
 80057fa:	804c      	strh	r4, [r1, #2]
 80057fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8005800:	e7df      	b.n	80057c2 <ICS_GetPhaseCurrents+0x46>
 8005802:	bf00      	nop
 8005804:	40012000 	.word	0x40012000
 8005808:	ffff8001 	.word	0xffff8001
 800580c:	40012100 	.word	0x40012100

08005810 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005810:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	6a13      	ldr	r3, [r2, #32]
 8005816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581a:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800581c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8005820:	2b0f      	cmp	r3, #15
 8005822:	d814      	bhi.n	800584e <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005824:	4a0b      	ldr	r2, [pc, #44]	; (8005854 <ICS_HFCurrentsCalibration+0x44>)
 8005826:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8005828:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 800582a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 800582c:	4c0a      	ldr	r4, [pc, #40]	; (8005858 <ICS_HFCurrentsCalibration+0x48>)
 800582e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005830:	442b      	add	r3, r5
 8005832:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005834:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 8005836:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800583a:	3301      	adds	r3, #1
 800583c:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 800583e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005840:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005844:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005846:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8005848:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 800584a:	600b      	str	r3, [r1, #0]
}
 800584c:	4770      	bx	lr
  pStator_Currents->a = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	600b      	str	r3, [r1, #0]
 8005852:	4770      	bx	lr
 8005854:	40012000 	.word	0x40012000
 8005858:	40012100 	.word	0x40012100

0800585c <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800585c:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800585e:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005860:	681a      	ldr	r2, [r3, #0]
{
 8005862:	b410      	push	{r4}
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8005864:	f891 402c 	ldrb.w	r4, [r1, #44]	; 0x2c
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	b134      	cbz	r4, 800587e <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005874:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800587c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 8005886:	790a      	ldrb	r2, [r1, #4]
 8005888:	2a02      	cmp	r2, #2
 800588a:	d036      	beq.n	80058fa <ICS_Init+0x9e>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 800588c:	780a      	ldrb	r2, [r1, #0]
 800588e:	2a01      	cmp	r2, #1
 8005890:	d03f      	beq.n	8005912 <ICS_Init+0xb6>
  SET_BIT(TIMx->CCER, Channels);
 8005892:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8005894:	4921      	ldr	r1, [pc, #132]	; (800591c <ICS_Init+0xc0>)
}
 8005896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800589a:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 800589e:	f042 0205 	orr.w	r2, r2, #5
 80058a2:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80058a4:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <ICS_Init+0xc4>)
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80058a6:	428b      	cmp	r3, r1
 80058a8:	68d3      	ldr	r3, [r2, #12]
 80058aa:	bf0c      	ite	eq
 80058ac:	f043 0301 	orreq.w	r3, r3, #1
 80058b0:	f043 0302 	orrne.w	r3, r3, #2
 80058b4:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80058b6:	bf08      	it	eq
 80058b8:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <ICS_Init+0xc8>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 80058be:	bf18      	it	ne
 80058c0:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 80058c4:	6681      	str	r1, [r0, #104]	; 0x68
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	4917      	ldr	r1, [pc, #92]	; (8005928 <ICS_Init+0xcc>)
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	688a      	ldr	r2, [r1, #8]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80058da:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80058de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058e2:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80058e4:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80058e6:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 80058e8:	2100      	movs	r1, #0
 80058ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 80058f4:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 80058f8:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80058fa:	794a      	ldrb	r2, [r1, #5]
 80058fc:	2a01      	cmp	r2, #1
 80058fe:	d108      	bne.n	8005912 <ICS_Init+0xb6>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8005900:	7a09      	ldrb	r1, [r1, #8]
 8005902:	2903      	cmp	r1, #3
 8005904:	d105      	bne.n	8005912 <ICS_Init+0xb6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005910:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005912:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8005916:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005918:	625a      	str	r2, [r3, #36]	; 0x24
 800591a:	e7ba      	b.n	8005892 <ICS_Init+0x36>
 800591c:	40010000 	.word	0x40010000
 8005920:	e0042000 	.word	0xe0042000
 8005924:	40012000 	.word	0x40012000
 8005928:	40012100 	.word	0x40012100

0800592c <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800592c:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 800592e:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005930:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005932:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005936:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005938:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800593c:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005942:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	07d2      	lsls	r2, r2, #31
 8005948:	d5fc      	bpl.n	8005944 <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800594a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800594c:	7c08      	ldrb	r0, [r1, #16]
 800594e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005952:	2802      	cmp	r0, #2
 8005954:	645a      	str	r2, [r3, #68]	; 0x44
 8005956:	d000      	beq.n	800595a <ICS_TurnOnLowSides+0x2e>
 8005958:	4770      	bx	lr
{
 800595a:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800595c:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800595e:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005960:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005962:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005964:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005966:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005968:	61ae      	str	r6, [r5, #24]
 800596a:	6184      	str	r4, [r0, #24]
 800596c:	619a      	str	r2, [r3, #24]
  }
}
 800596e:	bc70      	pop	{r4, r5, r6}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005974:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8005976:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800597a:	68cb      	ldr	r3, [r1, #12]
{
 800597c:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 800597e:	2400      	movs	r4, #0
 8005980:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8005984:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005986:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800598a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800598c:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800598e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005990:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005994:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	07d2      	lsls	r2, r2, #31
 800599a:	d5fc      	bpl.n	8005996 <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800599c:	f06f 0201 	mvn.w	r2, #1
 80059a0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80059a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80059a4:	7c08      	ldrb	r0, [r1, #16]
 80059a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059aa:	2802      	cmp	r0, #2
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
 80059ae:	d112      	bne.n	80059d6 <ICS_SwitchOnPWM+0x62>
 80059b0:	e9d1 7405 	ldrd	r7, r4, [r1, #20]
 80059b4:	e9d1 6007 	ldrd	r6, r0, [r1, #28]
 80059b8:	e9d1 5209 	ldrd	r5, r2, [r1, #36]	; 0x24
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80059bc:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80059c0:	f240 5155 	movw	r1, #1365	; 0x555
 80059c4:	ea31 010c 	bics.w	r1, r1, ip
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80059c8:	bf1e      	ittt	ne
 80059ca:	0424      	lslne	r4, r4, #16
 80059cc:	0400      	lslne	r0, r0, #16
 80059ce:	0412      	lslne	r2, r2, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 80059d0:	61bc      	str	r4, [r7, #24]
 80059d2:	61b0      	str	r0, [r6, #24]
 80059d4:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80059d6:	f06f 0201 	mvn.w	r2, #1
 80059da:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 80059e4:	bcf0      	pop	{r4, r5, r6, r7}
 80059e6:	4770      	bx	lr

080059e8 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059e8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80059ea:	68d3      	ldr	r3, [r2, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80059ec:	68d9      	ldr	r1, [r3, #12]
 80059ee:	f021 0101 	bic.w	r1, r1, #1
{
 80059f2:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80059f4:	7c14      	ldrb	r4, [r2, #16]
 80059f6:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80059f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80059fa:	2500      	movs	r5, #0
 80059fc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005a00:	2c02      	cmp	r4, #2
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005a02:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8005a06:	6459      	str	r1, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005a08:	d10b      	bne.n	8005a22 <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005a0a:	6994      	ldr	r4, [r2, #24]
 8005a0c:	6a10      	ldr	r0, [r2, #32]
 8005a0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005a10:	6957      	ldr	r7, [r2, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005a12:	69d6      	ldr	r6, [r2, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005a14:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005a16:	0424      	lsls	r4, r4, #16
 8005a18:	0400      	lsls	r0, r0, #16
 8005a1a:	0409      	lsls	r1, r1, #16
 8005a1c:	61bc      	str	r4, [r7, #24]
 8005a1e:	61b0      	str	r0, [r6, #24]
 8005a20:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005a22:	f06f 0201 	mvn.w	r2, #1
 8005a26:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	07d2      	lsls	r2, r2, #31
 8005a2c:	d5fc      	bpl.n	8005a28 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005a2e:	f06f 0201 	mvn.w	r2, #1
 8005a32:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8005a34:	bcf0      	pop	{r4, r5, r6, r7}
 8005a36:	4770      	bx	lr

08005a38 <ICS_CurrentReadingCalibration>:
{
 8005a38:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a3a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8005a3c:	4924      	ldr	r1, [pc, #144]	; (8005ad0 <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a3e:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 8005a40:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 8005a42:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a46:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 8005a48:	65c2      	str	r2, [r0, #92]	; 0x5c
 8005a4a:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8005a4e:	4605      	mov	r5, r0
 8005a50:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 8005a54:	6602      	str	r2, [r0, #96]	; 0x60
 8005a56:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8005a58:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 8005a5a:	f7ff ff8b 	bl	8005974 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005a5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005a60:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8005a64:	7a1a      	ldrb	r2, [r3, #8]
 8005a66:	4620      	mov	r0, r4
 8005a68:	f105 0366 	add.w	r3, r5, #102	; 0x66
 8005a6c:	f000 fa06 	bl	8005e7c <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff ffb9 	bl	80059e8 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 8005a76:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 8005a7a:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 8005a7c:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 8005a7e:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005a82:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8005a84:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8005a88:	4912      	ldr	r1, [pc, #72]	; (8005ad4 <ICS_CurrentReadingCalibration+0x9c>)
 8005a8a:	f022 0208 	bic.w	r2, r2, #8
 8005a8e:	61a2      	str	r2, [r4, #24]
 8005a90:	69a2      	ldr	r2, [r4, #24]
 8005a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a96:	61a2      	str	r2, [r4, #24]
 8005a98:	69e2      	ldr	r2, [r4, #28]
 8005a9a:	f022 0208 	bic.w	r2, r2, #8
 8005a9e:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005aa0:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005aa2:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005aa4:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005aa6:	69a3      	ldr	r3, [r4, #24]
 8005aa8:	f043 0308 	orr.w	r3, r3, #8
 8005aac:	61a3      	str	r3, [r4, #24]
 8005aae:	69a3      	ldr	r3, [r4, #24]
 8005ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ab4:	61a3      	str	r3, [r4, #24]
 8005ab6:	69e3      	ldr	r3, [r4, #28]
 8005ab8:	f043 0308 	orr.w	r3, r3, #8
 8005abc:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005abe:	6a23      	ldr	r3, [r4, #32]
 8005ac0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8005ac4:	f043 0305 	orr.w	r3, r3, #5
 8005ac8:	6223      	str	r3, [r4, #32]
 8005aca:	6069      	str	r1, [r5, #4]
}
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
 8005ace:	bf00      	nop
 8005ad0:	08005811 	.word	0x08005811
 8005ad4:	0800577d 	.word	0x0800577d

08005ad8 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ad8:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8005ada:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005adc:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8005ade:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8005ae0:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8005ae2:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005ae4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005ae6:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005ae8:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005aea:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8005aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af0:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop

08005af8 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005af8:	4a22      	ldr	r2, [pc, #136]	; (8005b84 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005afa:	6813      	ldr	r3, [r2, #0]
{
 8005afc:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005afe:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b02:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8005b04:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b06:	68e9      	ldr	r1, [r5, #12]
  if ( adcinjflags == CONV_STARTED )
 8005b08:	d026      	beq.n	8005b58 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8005b0a:	b94b      	cbnz	r3, 8005b20 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8005b0c:	886a      	ldrh	r2, [r5, #2]
 8005b0e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d3fc      	bcc.n	8005b0e <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b14:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d026      	beq.n	8005b6e <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8005b20:	4f18      	ldr	r7, [pc, #96]	; (8005b84 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005b22:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	4e18      	ldr	r6, [pc, #96]	; (8005b88 <ICS_TIMx_UP_IRQHandler+0x90>)
 8005b28:	f403 2470 	and.w	r4, r3, #983040	; 0xf0000
 8005b2c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005b30:	4322      	orrs	r2, r4
 8005b32:	60ba      	str	r2, [r7, #8]
 8005b34:	68b3      	ldr	r3, [r6, #8]
 8005b36:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005b3a:	4323      	orrs	r3, r4
 8005b3c:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8005b3e:	79ab      	ldrb	r3, [r5, #6]
 8005b40:	03db      	lsls	r3, r3, #15
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8005b44:	79eb      	ldrb	r3, [r5, #7]
 8005b46:	03db      	lsls	r3, r3, #15
 8005b48:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8005b4a:	6a0b      	ldr	r3, [r1, #32]
 8005b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8005b50:	3046      	adds	r0, #70	; 0x46
 8005b52:	620b      	str	r3, [r1, #32]
 8005b54:	bcf0      	pop	{r4, r5, r6, r7}
 8005b56:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b58:	6813      	ldr	r3, [r2, #0]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d0de      	beq.n	8005b20 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b62:	6813      	ldr	r3, [r2, #0]
 8005b64:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	d1f5      	bne.n	8005b58 <ICS_TIMx_UP_IRQHandler+0x60>
 8005b6c:	e7d8      	b.n	8005b20 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d0d3      	beq.n	8005b20 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b78:	6813      	ldr	r3, [r2, #0]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d1f5      	bne.n	8005b6e <ICS_TIMx_UP_IRQHandler+0x76>
 8005b82:	e7cd      	b.n	8005b20 <ICS_TIMx_UP_IRQHandler+0x28>
 8005b84:	40012000 	.word	0x40012000
 8005b88:	40012100 	.word	0x40012100

08005b8c <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005b8c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005b8e:	7c1a      	ldrb	r2, [r3, #16]
 8005b90:	2a02      	cmp	r2, #2
 8005b92:	d004      	beq.n	8005b9e <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 8005b9a:	3046      	adds	r0, #70	; 0x46
 8005b9c:	4770      	bx	lr
{
 8005b9e:	b4f0      	push	{r4, r5, r6, r7}
 8005ba0:	6a19      	ldr	r1, [r3, #32]
 8005ba2:	699c      	ldr	r4, [r3, #24]
 8005ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005ba6:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005ba8:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005baa:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005bac:	0424      	lsls	r4, r4, #16
 8005bae:	0409      	lsls	r1, r1, #16
 8005bb0:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61bc      	str	r4, [r7, #24]
}
 8005bb6:	3046      	adds	r0, #70	; 0x46
 8005bb8:	61b1      	str	r1, [r6, #24]
 8005bba:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8005bbc:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8005bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8005bc2:	4770      	bx	lr

08005bc4 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8005bc4:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005bc8:	b90b      	cbnz	r3, 8005bce <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8005bca:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8005bcc:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8005bd4:	2040      	movs	r0, #64	; 0x40
 8005bd6:	4770      	bx	lr

08005bd8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005bd8:	b508      	push	{r3, lr}
 8005bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bde:	2100      	movs	r1, #0
 8005be0:	f001 f8e6 	bl	8006db0 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8005bea:	bd08      	pop	{r3, pc}

08005bec <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005bec:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005bf0:	1c53      	adds	r3, r2, #1
 8005bf2:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005bf4:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005bf6:	bf88      	it	hi
 8005bf8:	2300      	movhi	r3, #0
{
 8005bfa:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005bfc:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8005c00:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005c04:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005c08:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005c10:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005c14:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005c16:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005c18:	d1fa      	bne.n	8005c10 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	bfb8      	it	lt
 8005c1e:	327f      	addlt	r2, #127	; 0x7f
 8005c20:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005c22:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005c26:	bc30      	pop	{r4, r5}
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4770      	bx	lr

08005c2c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005c2c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop

08005c34 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005c34:	8a03      	ldrh	r3, [r0, #16]
 8005c36:	8b42      	ldrh	r2, [r0, #26]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d306      	bcc.n	8005c4a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005c3c:	8b82      	ldrh	r2, [r0, #28]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d801      	bhi.n	8005c46 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 8005c42:	8ac0      	ldrh	r0, [r0, #22]
 8005c44:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 8005c46:	2000      	movs	r0, #0
  }
  return hFault;
}
 8005c48:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8005c4a:	2008      	movs	r0, #8
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005c50:	2300      	movs	r3, #0
 8005c52:	8203      	strh	r3, [r0, #16]
}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005c58:	7803      	ldrb	r3, [r0, #0]
 8005c5a:	b123      	cbz	r3, 8005c66 <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 8005c5c:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005c5e:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8005c60:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005c62:	8203      	strh	r3, [r0, #16]
 8005c64:	4770      	bx	lr
{
 8005c66:	b510      	push	{r4, lr}
 8005c68:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005c6a:	3004      	adds	r0, #4
 8005c6c:	f7fc f8a2 	bl	8001db4 <RCM_RegisterRegConv>
 8005c70:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7ff ffeb 	bl	8005c50 <NTC_Clear>
}
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005c7c:	7803      	ldrb	r3, [r0, #0]
 8005c7e:	b11b      	cbz	r3, 8005c88 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005c80:	2300      	movs	r3, #0
 8005c82:	82c3      	strh	r3, [r0, #22]
 8005c84:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 8005c86:	4770      	bx	lr
{
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005c8c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005c90:	f7fc f94c 	bl	8001f2c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	d007      	beq.n	8005cac <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005c9c:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8005c9e:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005ca0:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8005ca2:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005ca6:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8005caa:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8005cac:	4620      	mov	r0, r4
 8005cae:	f7ff ffc1 	bl	8005c34 <NTC_SetFaultState>
 8005cb2:	82e0      	strh	r0, [r4, #22]
}
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop

08005cb8 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005cb8:	7803      	ldrb	r3, [r0, #0]
 8005cba:	b113      	cbz	r3, 8005cc2 <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8005cbc:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 8005cbe:	b200      	sxth	r0, r0
 8005cc0:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005cc2:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005cc4:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005cc6:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005cca:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005ccc:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8005cce:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bfbc      	itt	lt
 8005cd6:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005cda:	33ff      	addlt	r3, #255	; 0xff
 8005cdc:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8005ce0:	b200      	sxth	r0, r0
 8005ce2:	4770      	bx	lr

08005ce4 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005ce4:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005ce6:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005ce8:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005cea:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005cec:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8005cee:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8005cf0:	6283      	str	r3, [r0, #40]	; 0x28
}
 8005cf2:	4770      	bx	lr

08005cf4 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005cf4:	8081      	strh	r1, [r0, #4]
}
 8005cf6:	4770      	bx	lr

08005cf8 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005cf8:	80c1      	strh	r1, [r0, #6]
}
 8005cfa:	4770      	bx	lr

08005cfc <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005cfc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop

08005d04 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005d04:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop

08005d0c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005d0c:	6081      	str	r1, [r0, #8]

  return;
}
 8005d0e:	4770      	bx	lr

08005d10 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8005d10:	8b00      	ldrh	r0, [r0, #24]
 8005d12:	4770      	bx	lr

08005d14 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005d14:	8b40      	ldrh	r0, [r0, #26]
 8005d16:	4770      	bx	lr

08005d18 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005d18:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8005d1a:	4770      	bx	lr

08005d1c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005d1c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop

08005d24 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005d24:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005d28:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8005d2c:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005d2e:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005d32:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005d36:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005d3a:	b18b      	cbz	r3, 8005d60 <PI_Controller+0x3c>
 8005d3c:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005d40:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	d424      	bmi.n	8005d92 <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	da04      	bge.n	8005d56 <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 8005d4c:	4f16      	ldr	r7, [pc, #88]	; (8005da8 <PI_Controller+0x84>)
 8005d4e:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8005d52:	bf28      	it	cs
 8005d54:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	dc03      	bgt.n	8005d62 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8005d5a:	6904      	ldr	r4, [r0, #16]
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	dc00      	bgt.n	8005d62 <PI_Controller+0x3e>
 8005d60:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005d62:	8b81      	ldrh	r1, [r0, #28]
 8005d64:	8bc3      	ldrh	r3, [r0, #30]
 8005d66:	410a      	asrs	r2, r1
 8005d68:	fa44 f303 	asr.w	r3, r4, r3
 8005d6c:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	db08      	blt.n	8005d84 <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8005d72:	429e      	cmp	r6, r3
 8005d74:	dd02      	ble.n	8005d7c <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8005d76:	1af3      	subs	r3, r6, r3
 8005d78:	441c      	add	r4, r3
 8005d7a:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8005d7c:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 8005d7e:	b218      	sxth	r0, r3
}
 8005d80:	bcf0      	pop	{r4, r5, r6, r7}
 8005d82:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8005d84:	1aeb      	subs	r3, r5, r3
 8005d86:	441c      	add	r4, r3
 8005d88:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 8005d8a:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 8005d8c:	b218      	sxth	r0, r3
}
 8005d8e:	bcf0      	pop	{r4, r5, r6, r7}
 8005d90:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8005d92:	2f00      	cmp	r7, #0
 8005d94:	dddf      	ble.n	8005d56 <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 8005d96:	2900      	cmp	r1, #0
 8005d98:	dddd      	ble.n	8005d56 <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005d9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005d9e:	429c      	cmp	r4, r3
 8005da0:	d1df      	bne.n	8005d62 <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8005da2:	4623      	mov	r3, r4
 8005da4:	e7dc      	b.n	8005d60 <PI_Controller+0x3c>
 8005da6:	bf00      	nop
 8005da8:	80000001 	.word	0x80000001

08005dac <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005dac:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8005db0:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005db2:	8b0c      	ldrh	r4, [r1, #24]
 8005db4:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005db6:	898a      	ldrh	r2, [r1, #12]
 8005db8:	8acb      	ldrh	r3, [r1, #22]
{
 8005dba:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005dbc:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005dc0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8005dc4:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005dc8:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005dcc:	f7ff f876 	bl	8004ebc <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8005dd0:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8005dd4:	490f      	ldr	r1, [pc, #60]	; (8005e14 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005dd6:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8005dda:	bfb8      	it	lt
 8005ddc:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005de0:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 8005de4:	bfb8      	it	lt
 8005de6:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005de8:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8005dea:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005dec:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8005df0:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005df8:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8005dfa:	fb81 2103 	smull	r2, r1, r1, r3
 8005dfe:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005e00:	4630      	mov	r0, r6
 8005e02:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8005e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005e0a:	f7ff beef 	b.w	8005bec <MPM_CalcElMotorPower>
 8005e0e:	bf00      	nop
 8005e10:	1b4e81b5 	.word	0x1b4e81b5
 8005e14:	66666667 	.word	0x66666667

08005e18 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005e18:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <startTimers+0x60>)
 8005e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005e1c:	07d2      	lsls	r2, r2, #31
 8005e1e:	d514      	bpl.n	8005e4a <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e24:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005e26:	6859      	ldr	r1, [r3, #4]
 8005e28:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005e2c:	f041 0120 	orr.w	r1, r1, #32
 8005e30:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005e32:	6959      	ldr	r1, [r3, #20]
 8005e34:	f041 0101 	orr.w	r1, r1, #1
 8005e38:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005e3a:	6859      	ldr	r1, [r3, #4]
 8005e3c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005e40:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 8005e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005e54:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005e56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e5a:	f002 0201 	and.w	r2, r2, #1
 8005e5e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005e60:	9a01      	ldr	r2, [sp, #4]
 8005e62:	694a      	ldr	r2, [r1, #20]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8005e72:	b002      	add	sp, #8
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40023800 	.word	0x40023800

08005e7c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8005e7c:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8005e7e:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005e80:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8005e84:	3201      	adds	r2, #1
 8005e86:	2c60      	cmp	r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8005e88:	bf18      	it	ne
 8005e8a:	0852      	lsrne	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005e8c:	f06f 0602 	mvn.w	r6, #2
 8005e90:	0155      	lsls	r5, r2, #5
 8005e92:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8005e94:	2400      	movs	r4, #0
  while (*cnt < NB_CONVERSIONS)
 8005e96:	e002      	b.n	8005e9e <waitForPolarizationEnd+0x22>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005e98:	6902      	ldr	r2, [r0, #16]
 8005e9a:	0792      	lsls	r2, r2, #30
 8005e9c:	d404      	bmi.n	8005ea8 <waitForPolarizationEnd+0x2c>
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	2a0f      	cmp	r2, #15
 8005ea2:	d9f9      	bls.n	8005e98 <waitForPolarizationEnd+0x1c>
          break;
        }
      }
    }
  }
}
 8005ea4:	bc70      	pop	{r4, r5, r6}
 8005ea6:	4770      	bx	lr
      hCalibrationPeriodCounter++;
 8005ea8:	3401      	adds	r4, #1
 8005eaa:	b2a4      	uxth	r4, r4
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005eac:	42a5      	cmp	r5, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005eae:	6106      	str	r6, [r0, #16]
 8005eb0:	d8f5      	bhi.n	8005e9e <waitForPolarizationEnd+0x22>
        if (*cnt < NB_CONVERSIONS)
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	2a0f      	cmp	r2, #15
 8005eb6:	d8f2      	bhi.n	8005e9e <waitForPolarizationEnd+0x22>
          *SWerror = 1u;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	800b      	strh	r3, [r1, #0]
          break;
 8005ebc:	e7f2      	b.n	8005ea4 <waitForPolarizationEnd+0x28>
 8005ebe:	bf00      	nop

08005ec0 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8005ec0:	6843      	ldr	r3, [r0, #4]
 8005ec2:	4718      	bx	r3

08005ec4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8005ec4:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005ec6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005eca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005ecc:	140c      	asrs	r4, r1, #16
{
 8005ece:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005ed0:	fb02 f404 	mul.w	r4, r2, r4
{
 8005ed4:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005ed6:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005eda:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005edc:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005ede:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005ee2:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005ee4:	4421      	add	r1, r4
 8005ee6:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005eea:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005eee:	106d      	asrs	r5, r5, #1
 8005ef0:	ea4f 0292 	mov.w	r2, r2, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005ef4:	ea4f 0666 	mov.w	r6, r6, asr #1
  if ( wY < 0 )
 8005ef8:	d46e      	bmi.n	8005fd8 <PWMC_SetPhaseVoltage+0x114>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	db4c      	blt.n	8005f98 <PWMC_SetPhaseVoltage+0xd4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005efe:	1bad      	subs	r5, r5, r6
 8005f00:	bf44      	itt	mi
 8005f02:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005f06:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bfbc      	itt	lt
 8005f0e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8005f12:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005f16:	2900      	cmp	r1, #0
 8005f18:	bfb8      	it	lt
 8005f1a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005f1e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005f22:	bfb8      	it	lt
 8005f24:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8005f28:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8005f2a:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005f2e:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 8005f32:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005f36:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8005f3a:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005f3c:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005f3e:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005f42:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f4a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b289      	uxth	r1, r1
 8005f54:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005f56:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005f58:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005f5a:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8005f5c:	d118      	bne.n	8005f90 <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8005f5e:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
 8005f62:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8005f66:	2d00      	cmp	r5, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005f68:	bfcc      	ite	gt
 8005f6a:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8005f6c:	1b12      	suble	r2, r2, r4
 8005f6e:	b292      	uxth	r2, r2
    }

    if ( pHandle->Ib > 0 )
 8005f70:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
 8005f74:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005f76:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8005f7a:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8005f7c:	bfcc      	ite	gt
 8005f7e:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005f80:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8005f82:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005f84:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005f86:	bfcc      	ite	gt
 8005f88:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8005f8a:	1b09      	suble	r1, r1, r4
 8005f8c:	8683      	strh	r3, [r0, #52]	; 0x34
 8005f8e:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005f90:	6983      	ldr	r3, [r0, #24]
}
 8005f92:	b003      	add	sp, #12
 8005f94:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005f96:	4718      	bx	r3
      if ( wX <= 0 )
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	dd3c      	ble.n	8006016 <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bfb8      	it	lt
 8005fa0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005fa4:	f04f 0100 	mov.w	r1, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005fa8:	bfb8      	it	lt
 8005faa:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005fae:	1ba5      	subs	r5, r4, r6
        pHandle->Sector = SECTOR_1;
 8005fb0:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8005fb4:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005fb6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005fba:	bfb8      	it	lt
 8005fbc:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005fc0:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005fc4:	bfb8      	it	lt
 8005fc6:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005fca:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhC;
 8005fce:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005fd2:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005fd4:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8005fd6:	e7b2      	b.n	8005f3e <PWMC_SetPhaseVoltage+0x7a>
    if ( wZ < 0 )
 8005fd8:	2e00      	cmp	r6, #0
 8005fda:	db5d      	blt.n	8006098 <PWMC_SetPhaseVoltage+0x1d4>
      if ( wX <= 0 )
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	dd38      	ble.n	8006052 <PWMC_SetPhaseVoltage+0x18e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005fe0:	1b2d      	subs	r5, r5, r4
 8005fe2:	bf44      	itt	mi
 8005fe4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005fe8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005fec:	2900      	cmp	r1, #0
 8005fee:	bfb8      	it	lt
 8005ff0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005ff4:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005ff8:	bfb8      	it	lt
 8005ffa:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_3;
 8005ffe:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 8006000:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_3;
 8006004:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006008:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 800600c:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800600e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006010:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006014:	e793      	b.n	8005f3e <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 8006016:	2900      	cmp	r1, #0
 8006018:	bfb8      	it	lt
 800601a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800601e:	f04f 0305 	mov.w	r3, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006022:	bfb8      	it	lt
 8006024:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006028:	1b2d      	subs	r5, r5, r4
        pHandle->Sector = SECTOR_6;
 800602a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800602e:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006030:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006034:	bfb8      	it	lt
 8006036:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800603a:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800603e:	bfb8      	it	lt
 8006040:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006044:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhB;
 8006048:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800604c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800604e:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8006050:	e775      	b.n	8005f3e <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006052:	1ba5      	subs	r5, r4, r6
 8006054:	bf44      	itt	mi
 8006056:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800605a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfb8      	it	lt
 8006062:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006066:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 800606a:	bfb8      	it	lt
 800606c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006070:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8006074:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006076:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800607a:	bfb8      	it	lt
 800607c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006080:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006084:	bfb8      	it	lt
 8006086:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800608a:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhC;
 800608e:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006090:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006092:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006096:	e752      	b.n	8005f3e <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006098:	1bad      	subs	r5, r5, r6
 800609a:	bf44      	itt	mi
 800609c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80060a0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bfbc      	itt	lt
 80060a8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80060ac:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80060b0:	2900      	cmp	r1, #0
 80060b2:	bfb8      	it	lt
 80060b4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80060b8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80060bc:	bfb8      	it	lt
 80060be:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 80060c2:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 80060c4:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80060c8:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_5;
 80060cc:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 80060d0:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80060d2:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 80060d4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80060d8:	e731      	b.n	8005f3e <PWMC_SetPhaseVoltage+0x7a>
 80060da:	bf00      	nop

080060dc <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80060dc:	6883      	ldr	r3, [r0, #8]
 80060de:	4718      	bx	r3

080060e0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4604      	mov	r4, r0
 80060e4:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80060e6:	b1a1      	cbz	r1, 8006112 <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80060e8:	2901      	cmp	r1, #1
 80060ea:	d002      	beq.n	80060f2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80060ec:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80060ee:	b002      	add	sp, #8
 80060f0:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80060f2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80060f6:	b1d3      	cbz	r3, 800612e <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	9101      	str	r1, [sp, #4]
 80060fe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f2      	bne.n	80060ec <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006106:	6903      	ldr	r3, [r0, #16]
 8006108:	4798      	blx	r3
        retVal = true;
 800610a:	9901      	ldr	r1, [sp, #4]
 800610c:	4608      	mov	r0, r1
}
 800610e:	b002      	add	sp, #8
 8006110:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 8006112:	f7ff ffe3 	bl	80060dc <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006116:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800611a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e4      	bne.n	80060ec <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006122:	4620      	mov	r0, r4
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	4798      	blx	r3
      retVal = true;
 8006128:	2001      	movs	r0, #1
}
 800612a:	b002      	add	sp, #8
 800612c:	bd10      	pop	{r4, pc}
      retVal = true;
 800612e:	4608      	mov	r0, r1
}
 8006130:	b002      	add	sp, #8
 8006132:	bd10      	pop	{r4, pc}

08006134 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006134:	69c3      	ldr	r3, [r0, #28]
 8006136:	4718      	bx	r3

08006138 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006138:	8b42      	ldrh	r2, [r0, #26]
 800613a:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800613c:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800613e:	440a      	add	r2, r1
 8006140:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006142:	b18b      	cbz	r3, 8006168 <RVBS_Clear+0x30>
{
 8006144:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 8006146:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006148:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 800614a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800614e:	3301      	adds	r3, #1
 8006150:	8b01      	ldrh	r1, [r0, #24]
 8006152:	b29b      	uxth	r3, r3
 8006154:	4299      	cmp	r1, r3
 8006156:	d8f8      	bhi.n	800614a <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006158:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 800615a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800615c:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 800615e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8006162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006166:	4770      	bx	lr
  pHandle->index = 0;
 8006168:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 800616a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800616c:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 800616e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8006172:	4770      	bx	lr

08006174 <RVBS_Init>:
{
 8006174:	b510      	push	{r4, lr}
 8006176:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006178:	300c      	adds	r0, #12
 800617a:	f7fb fe1b 	bl	8001db4 <RCM_RegisterRegConv>
 800617e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff ffd8 	bl	8006138 <RVBS_Clear>
}
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop

0800618c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800618c:	88c3      	ldrh	r3, [r0, #6]
 800618e:	8b42      	ldrh	r2, [r0, #26]
 8006190:	429a      	cmp	r2, r3
 8006192:	d305      	bcc.n	80061a0 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006194:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8006196:	4298      	cmp	r0, r3
 8006198:	bf8c      	ite	hi
 800619a:	2004      	movhi	r0, #4
 800619c:	2000      	movls	r0, #0
 800619e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80061a0:	2002      	movs	r0, #2
  }
  return fault;
}
 80061a2:	4770      	bx	lr

080061a4 <RVBS_CalcAvVbus>:
{
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80061a8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80061ac:	f7fb febe 	bl	8001f2c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80061b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b4:	4298      	cmp	r0, r3
 80061b6:	d01b      	beq.n	80061f0 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 80061b8:	6a26      	ldr	r6, [r4, #32]
 80061ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80061be:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80061c2:	8b25      	ldrh	r5, [r4, #24]
 80061c4:	b1cd      	cbz	r5, 80061fa <RVBS_CalcAvVbus+0x56>
 80061c6:	2300      	movs	r3, #0
    wtemp = 0;
 80061c8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80061ca:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80061ce:	3301      	adds	r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 80061d4:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80061d6:	d3f8      	bcc.n	80061ca <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80061d8:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80061dc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80061e0:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80061e2:	3d01      	subs	r5, #1
 80061e4:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 80061e6:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80061e8:	da09      	bge.n	80061fe <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 80061ea:	3301      	adds	r3, #1
 80061ec:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7ff ffcb 	bl	800618c <RVBS_CheckFaultState>
 80061f6:	8120      	strh	r0, [r4, #8]
}
 80061f8:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80061fa:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 80061fc:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff ffc1 	bl	800618c <RVBS_CheckFaultState>
 800620a:	8120      	strh	r0, [r4, #8]
}
 800620c:	bd70      	pop	{r4, r5, r6, pc}
 800620e:	bf00      	nop

08006210 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006210:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006212:	2201      	movs	r2, #1
 8006214:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 8006216:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800621a:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800621e:	4770      	bx	lr

08006220 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006220:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop

08006228 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006228:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006230:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006238:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 800623c:	b430      	push	{r4, r5}
 800623e:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 8006240:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 8006242:	bfb8      	it	lt
 8006244:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006246:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006248:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800624a:	7803      	ldrb	r3, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800624c:	8a81      	ldrh	r1, [r0, #20]
    hAux = -( *pMecSpeedUnit );
 800624e:	bfb8      	it	lt
 8006250:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006252:	4295      	cmp	r5, r2
 8006254:	d819      	bhi.n	800628a <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006256:	4291      	cmp	r1, r2
 8006258:	bf2c      	ite	cs
 800625a:	2200      	movcs	r2, #0
 800625c:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800625e:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 8006262:	b2a9      	uxth	r1, r5
 8006264:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8006266:	bfb8      	it	lt
 8006268:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800626a:	8b05      	ldrh	r5, [r0, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 800626c:	bfb8      	it	lt
 800626e:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006270:	428d      	cmp	r5, r1
 8006272:	d300      	bcc.n	8006276 <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006274:	b15a      	cbz	r2, 800628e <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006276:	429c      	cmp	r4, r3
 8006278:	d901      	bls.n	800627e <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 800627a:	3301      	adds	r3, #1
 800627c:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800627e:	7003      	strb	r3, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006280:	1b18      	subs	r0, r3, r4
 8006282:	bf18      	it	ne
 8006284:	2001      	movne	r0, #1
 8006286:	bc30      	pop	{r4, r5}
 8006288:	4770      	bx	lr
    SpeedError = true;
 800628a:	2201      	movs	r2, #1
 800628c:	e7e7      	b.n	800625e <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 800628e:	429c      	cmp	r4, r3
 8006290:	bf88      	it	hi
 8006292:	2300      	movhi	r3, #0
 8006294:	e7f3      	b.n	800627e <SPD_IsMecSpeedReliable+0x46>
 8006296:	bf00      	nop

08006298 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006298:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800629c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80062a0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80062a4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80062a8:	b200      	sxth	r0, r0
 80062aa:	4770      	bx	lr

080062ac <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80062ac:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80062ae:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80062b2:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 80062b6:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 80062b8:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80062ba:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80062bc:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 80062be:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 80062c2:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80062c4:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80062c8:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 80062ca:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80062cc:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80062ce:	6183      	str	r3, [r0, #24]
}
 80062d0:	bc30      	pop	{r4, r5}
 80062d2:	4770      	bx	lr

080062d4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80062d4:	6940      	ldr	r0, [r0, #20]
 80062d6:	4770      	bx	lr

080062d8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80062d8:	7803      	ldrb	r3, [r0, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d000      	beq.n	80062e0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80062de:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80062e0:	6900      	ldr	r0, [r0, #16]
 80062e2:	2100      	movs	r1, #0
 80062e4:	f7ff bd12 	b.w	8005d0c <PID_SetIntegralTerm>

080062e8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80062e8:	6840      	ldr	r0, [r0, #4]
 80062ea:	2800      	cmp	r0, #0
 80062ec:	bfbc      	itt	lt
 80062ee:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80062f2:	30ff      	addlt	r0, #255	; 0xff
}
 80062f4:	1400      	asrs	r0, r0, #16
 80062f6:	4770      	bx	lr

080062f8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80062f8:	6880      	ldr	r0, [r0, #8]
 80062fa:	2800      	cmp	r0, #0
 80062fc:	bfbc      	itt	lt
 80062fe:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006302:	30ff      	addlt	r0, #255	; 0xff
}
 8006304:	1400      	asrs	r0, r0, #16
 8006306:	4770      	bx	lr

08006308 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006308:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800630a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800630c:	60c3      	str	r3, [r0, #12]
}
 800630e:	4770      	bx	lr

08006310 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006310:	7803      	ldrb	r3, [r0, #0]
{
 8006312:	b570      	push	{r4, r5, r6, lr}
 8006314:	4604      	mov	r4, r0
 8006316:	460d      	mov	r5, r1
 8006318:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800631a:	b313      	cbz	r3, 8006362 <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800631c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800631e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006320:	2800      	cmp	r0, #0
 8006322:	bfbc      	itt	lt
 8006324:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006328:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800632a:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800632c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006330:	db1c      	blt.n	800636c <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006332:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006336:	428b      	cmp	r3, r1
 8006338:	dc18      	bgt.n	800636c <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800633a:	8c23      	ldrh	r3, [r4, #32]
 800633c:	428b      	cmp	r3, r1
 800633e:	dd03      	ble.n	8006348 <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006340:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006344:	428b      	cmp	r3, r1
 8006346:	db11      	blt.n	800636c <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8006348:	b9c6      	cbnz	r6, 800637c <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800634a:	7823      	ldrb	r3, [r4, #0]
 800634c:	042d      	lsls	r5, r5, #16
 800634e:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 8006350:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006354:	bf0c      	ite	eq
 8006356:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006358:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800635a:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800635c:	61a3      	str	r3, [r4, #24]
 800635e:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006360:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006362:	f7ff ffc9 	bl	80062f8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006366:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006368:	42ab      	cmp	r3, r5
 800636a:	da01      	bge.n	8006370 <STC_ExecRamp+0x60>
      AllowedRange = false;
 800636c:	2000      	movs	r0, #0
}
 800636e:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006370:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006374:	42ab      	cmp	r3, r5
 8006376:	dcf9      	bgt.n	800636c <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 8006378:	2e00      	cmp	r6, #0
 800637a:	d0e6      	beq.n	800634a <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800637c:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800637e:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 8006380:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006382:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800638c:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800638e:	1a2d      	subs	r5, r5, r0
 8006390:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8006392:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006394:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8006398:	2001      	movs	r0, #1
 800639a:	61a5      	str	r5, [r4, #24]
}
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	bf00      	nop
 80063a0:	10624dd3 	.word	0x10624dd3

080063a4 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80063a8:	6183      	str	r3, [r0, #24]
}
 80063aa:	4770      	bx	lr

080063ac <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80063ac:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80063ae:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80063b2:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80063b4:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	bf18      	it	ne
 80063ba:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d910      	bls.n	80063e2 <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80063c0:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80063c2:	3b01      	subs	r3, #1
 80063c4:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 80063c6:	440d      	add	r5, r1
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	4629      	mov	r1, r5
 80063cc:	bfbc      	itt	lt
 80063ce:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 80063d2:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80063d4:	2a01      	cmp	r2, #1
 80063d6:	ea4f 4621 	mov.w	r6, r1, asr #16
 80063da:	d009      	beq.n	80063f0 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80063dc:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80063de:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80063e2:	d1f1      	bne.n	80063c8 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80063e4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80063e8:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80063ea:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 80063ec:	60c3      	str	r3, [r0, #12]
 80063ee:	e7eb      	b.n	80063c8 <STC_CalcTorqueReference+0x1c>
 80063f0:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80063f2:	6940      	ldr	r0, [r0, #20]
 80063f4:	f7ff ff18 	bl	8006228 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80063f8:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80063fa:	b201      	sxth	r1, r0
 80063fc:	6920      	ldr	r0, [r4, #16]
 80063fe:	f7ff fc91 	bl	8005d24 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006402:	0403      	lsls	r3, r0, #16
 8006404:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	bf00      	nop

0800640c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800640c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop

08006414 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8006414:	8bc0      	ldrh	r0, [r0, #30]
 8006416:	4770      	bx	lr

08006418 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006418:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop

08006420 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006420:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006424:	2000      	movs	r0, #0
 8006426:	b29a      	uxth	r2, r3
 8006428:	f362 000f 	bfi	r0, r2, #0, #16
 800642c:	0c1b      	lsrs	r3, r3, #16
{
 800642e:	b082      	sub	sp, #8
  return IqdRefDefault;
 8006430:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006434:	b002      	add	sp, #8
 8006436:	4770      	bx	lr

08006438 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006438:	b510      	push	{r4, lr}
 800643a:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800643c:	6940      	ldr	r0, [r0, #20]
 800643e:	f7ff fef3 	bl	8006228 <SPD_GetAvrgMecSpeedUnit>
 8006442:	0400      	lsls	r0, r0, #16
 8006444:	6060      	str	r0, [r4, #4]
}
 8006446:	bd10      	pop	{r4, pc}

08006448 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006448:	2300      	movs	r3, #0
 800644a:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800644c:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006454:	8843      	ldrh	r3, [r0, #2]
{
 8006456:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 8006458:	8885      	ldrh	r5, [r0, #4]
{
 800645a:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 800645c:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800645e:	430b      	orrs	r3, r1
 8006460:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006464:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8006466:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 8006468:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800646a:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 800646c:	d006      	beq.n	800647c <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800646e:	b90a      	cbnz	r2, 8006474 <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006470:	bc30      	pop	{r4, r5}
 8006472:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8006474:	200a      	movs	r0, #10
 8006476:	7020      	strb	r0, [r4, #0]
}
 8006478:	bc30      	pop	{r4, r5}
 800647a:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800647c:	2a00      	cmp	r2, #0
 800647e:	d1f7      	bne.n	8006470 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8006480:	200b      	movs	r0, #11
 8006482:	7020      	strb	r0, [r4, #0]
}
 8006484:	bc30      	pop	{r4, r5}
 8006486:	4770      	bx	lr

08006488 <STM_NextState>:
{
 8006488:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 800648a:	7803      	ldrb	r3, [r0, #0]
 800648c:	2b14      	cmp	r3, #20
 800648e:	d819      	bhi.n	80064c4 <STM_NextState+0x3c>
 8006490:	e8df f003 	tbb	[pc, r3]
 8006494:	240d1257 	.word	0x240d1257
 8006498:	3c0d352e 	.word	0x3c0d352e
 800649c:	1818423f 	.word	0x1818423f
 80064a0:	4a650b47 	.word	0x4a650b47
 80064a4:	53505e4d 	.word	0x53505e4d
 80064a8:	39          	.byte	0x39
 80064a9:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80064aa:	290e      	cmp	r1, #14
 80064ac:	d001      	beq.n	80064b2 <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 80064ae:	2907      	cmp	r1, #7
 80064b0:	d108      	bne.n	80064c4 <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 80064b2:	7001      	strb	r1, [r0, #0]
 80064b4:	2001      	movs	r0, #1
}
 80064b6:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80064b8:	2907      	cmp	r1, #7
 80064ba:	d0fa      	beq.n	80064b2 <STM_NextState+0x2a>
 80064bc:	f1a1 030d 	sub.w	r3, r1, #13
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d9f6      	bls.n	80064b2 <STM_NextState+0x2a>
 80064c4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d00f      	beq.n	80064ec <STM_NextState+0x64>
 80064cc:	2907      	cmp	r1, #7
 80064ce:	d00d      	beq.n	80064ec <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	f7ff ffbe 	bl	8006454 <STM_FaultProcessing>
 80064d8:	2000      	movs	r0, #0
}
 80064da:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80064dc:	2911      	cmp	r1, #17
 80064de:	d8f7      	bhi.n	80064d0 <STM_NextState+0x48>
 80064e0:	4b21      	ldr	r3, [pc, #132]	; (8006568 <STM_NextState+0xe0>)
 80064e2:	40cb      	lsrs	r3, r1
 80064e4:	07da      	lsls	r2, r3, #31
 80064e6:	d4e4      	bmi.n	80064b2 <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80064e8:	2903      	cmp	r1, #3
 80064ea:	d1f1      	bne.n	80064d0 <STM_NextState+0x48>
 80064ec:	2000      	movs	r0, #0
}
 80064ee:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80064f0:	2913      	cmp	r1, #19
 80064f2:	d0de      	beq.n	80064b2 <STM_NextState+0x2a>
 80064f4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	d1e5      	bne.n	80064c8 <STM_NextState+0x40>
 80064fc:	e7d9      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80064fe:	1f8b      	subs	r3, r1, #6
 8006500:	2b01      	cmp	r3, #1
 8006502:	d8df      	bhi.n	80064c4 <STM_NextState+0x3c>
 8006504:	e7d5      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006506:	2912      	cmp	r1, #18
 8006508:	d1d1      	bne.n	80064ae <STM_NextState+0x26>
 800650a:	e7d2      	b.n	80064b2 <STM_NextState+0x2a>
      if ( bState == STOP )
 800650c:	2908      	cmp	r1, #8
 800650e:	d1d9      	bne.n	80064c4 <STM_NextState+0x3c>
 8006510:	e7cf      	b.n	80064b2 <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 8006512:	2909      	cmp	r1, #9
 8006514:	d1d6      	bne.n	80064c4 <STM_NextState+0x3c>
 8006516:	e7cc      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006518:	2900      	cmp	r1, #0
 800651a:	d0ca      	beq.n	80064b2 <STM_NextState+0x2a>
 800651c:	290c      	cmp	r1, #12
 800651e:	d1d1      	bne.n	80064c4 <STM_NextState+0x3c>
 8006520:	e7c7      	b.n	80064b2 <STM_NextState+0x2a>
      if ( bState == IDLE )
 8006522:	2900      	cmp	r1, #0
 8006524:	d1ce      	bne.n	80064c4 <STM_NextState+0x3c>
 8006526:	e7c4      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006528:	2902      	cmp	r1, #2
 800652a:	d1c0      	bne.n	80064ae <STM_NextState+0x26>
 800652c:	e7c1      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800652e:	2911      	cmp	r1, #17
 8006530:	d1bd      	bne.n	80064ae <STM_NextState+0x26>
 8006532:	e7be      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006534:	2904      	cmp	r1, #4
 8006536:	d1ba      	bne.n	80064ae <STM_NextState+0x26>
 8006538:	e7bb      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800653a:	1f0b      	subs	r3, r1, #4
 800653c:	2b01      	cmp	r3, #1
 800653e:	d8b6      	bhi.n	80064ae <STM_NextState+0x26>
 8006540:	e7b7      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006542:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006546:	2b01      	cmp	r3, #1
 8006548:	d0b3      	beq.n	80064b2 <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 800654a:	290c      	cmp	r1, #12
 800654c:	d1be      	bne.n	80064cc <STM_NextState+0x44>
 800654e:	e7b0      	b.n	80064b2 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006550:	2914      	cmp	r1, #20
 8006552:	d8b7      	bhi.n	80064c4 <STM_NextState+0x3c>
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <STM_NextState+0xe4>)
 8006556:	40cb      	lsrs	r3, r1
 8006558:	07db      	lsls	r3, r3, #31
 800655a:	d4aa      	bmi.n	80064b2 <STM_NextState+0x2a>
 800655c:	e7b2      	b.n	80064c4 <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800655e:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8006562:	2b07      	cmp	r3, #7
 8006564:	d1ae      	bne.n	80064c4 <STM_NextState+0x3c>
 8006566:	e7a4      	b.n	80064b2 <STM_NextState+0x2a>
 8006568:	00030092 	.word	0x00030092
 800656c:	00140080 	.word	0x00140080

08006570 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006570:	7800      	ldrb	r0, [r0, #0]
 8006572:	4770      	bx	lr

08006574 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8006574:	7803      	ldrb	r3, [r0, #0]
 8006576:	2b0b      	cmp	r3, #11
 8006578:	d001      	beq.n	800657e <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800657a:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800657c:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800657e:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006580:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006582:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006584:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006586:	2001      	movs	r0, #1
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop

0800658c <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800658c:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800658e:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006590:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop

08006598 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006598:	f7fe bcda 	b.w	8004f50 <FCP_Init>

0800659c <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800659c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 80065a0:	b192      	cbz	r2, 80065c8 <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80065a2:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 80065a6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80065aa:	4603      	mov	r3, r0
 80065ac:	b199      	cbz	r1, 80065d6 <UFCP_TX_IRQ_Handler+0x3a>
 80065ae:	2901      	cmp	r1, #1
 80065b0:	d00b      	beq.n	80065ca <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80065b2:	7d40      	ldrb	r0, [r0, #21]
 80065b4:	3001      	adds	r0, #1
 80065b6:	4281      	cmp	r1, r0
 80065b8:	dc0f      	bgt.n	80065da <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80065ba:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80065bc:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80065be:	7d00      	ldrb	r0, [r0, #20]
 80065c0:	6050      	str	r0, [r2, #4]
 80065c2:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80065c6:	4770      	bx	lr
 80065c8:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80065ca:	7d40      	ldrb	r0, [r0, #21]
 80065cc:	6050      	str	r0, [r2, #4]
      pBaseHandle->TxFrameLevel++;
 80065ce:	3101      	adds	r1, #1
 80065d0:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 80065d4:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80065d6:	7d00      	ldrb	r0, [r0, #20]
        break;
 80065d8:	e7f8      	b.n	80065cc <UFCP_TX_IRQ_Handler+0x30>
{
 80065da:	b430      	push	{r4, r5}
 80065dc:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 80065e0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80065e2:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80065e4:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80065e8:	2500      	movs	r5, #0
 80065ea:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065ee:	60d1      	str	r1, [r2, #12]
 80065f0:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80065f4:	4623      	mov	r3, r4
}
 80065f6:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80065f8:	4718      	bx	r3
 80065fa:	bf00      	nop

080065fc <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 80065fc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006600:	b10b      	cbz	r3, 8006606 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006602:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006604:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8006606:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 800660a:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800660e:	68d3      	ldr	r3, [r2, #12]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006610:	2101      	movs	r1, #1
 8006612:	f043 0320 	orr.w	r3, r3, #32
 8006616:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800661a:	2002      	movs	r0, #2
 800661c:	60d3      	str	r3, [r2, #12]
 800661e:	4770      	bx	lr

08006620 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006624:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006626:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800662a:	b110      	cbz	r0, 8006632 <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800662c:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 8006632:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8006634:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8006636:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006638:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800663a:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 800663e:	2b00      	cmp	r3, #0
 8006640:	d05d      	beq.n	80066fe <UFCP_Send+0xde>
 8006642:	1d10      	adds	r0, r2, #4
 8006644:	f104 051a 	add.w	r5, r4, #26
 8006648:	4295      	cmp	r5, r2
 800664a:	bf88      	it	hi
 800664c:	42b8      	cmphi	r0, r7
 800664e:	d86b      	bhi.n	8006728 <UFCP_Send+0x108>
 8006650:	2b0b      	cmp	r3, #11
 8006652:	d969      	bls.n	8006728 <UFCP_Send+0x108>
 8006654:	4250      	negs	r0, r2
 8006656:	f000 0003 	and.w	r0, r0, #3
 800665a:	1cc5      	adds	r5, r0, #3
 800665c:	42a9      	cmp	r1, r5
 800665e:	d339      	bcc.n	80066d4 <UFCP_Send+0xb4>
 8006660:	2800      	cmp	r0, #0
 8006662:	d06c      	beq.n	800673e <UFCP_Send+0x11e>
 8006664:	7811      	ldrb	r1, [r2, #0]
 8006666:	75a1      	strb	r1, [r4, #22]
 8006668:	2801      	cmp	r0, #1
 800666a:	f1a3 0102 	sub.w	r1, r3, #2
 800666e:	b2c9      	uxtb	r1, r1
 8006670:	f102 0c01 	add.w	ip, r2, #1
 8006674:	f104 0717 	add.w	r7, r4, #23
 8006678:	d012      	beq.n	80066a0 <UFCP_Send+0x80>
 800667a:	7851      	ldrb	r1, [r2, #1]
 800667c:	75e1      	strb	r1, [r4, #23]
 800667e:	2803      	cmp	r0, #3
 8006680:	f1a3 0103 	sub.w	r1, r3, #3
 8006684:	b2c9      	uxtb	r1, r1
 8006686:	f102 0c02 	add.w	ip, r2, #2
 800668a:	f104 0718 	add.w	r7, r4, #24
 800668e:	d107      	bne.n	80066a0 <UFCP_Send+0x80>
 8006690:	7891      	ldrb	r1, [r2, #2]
 8006692:	7621      	strb	r1, [r4, #24]
 8006694:	1f19      	subs	r1, r3, #4
 8006696:	b2c9      	uxtb	r1, r1
 8006698:	f102 0c03 	add.w	ip, r2, #3
 800669c:	f104 0719 	add.w	r7, r4, #25
 80066a0:	1a1b      	subs	r3, r3, r0
 80066a2:	b2dd      	uxtb	r5, r3
 80066a4:	f100 0316 	add.w	r3, r0, #22
 80066a8:	4402      	add	r2, r0
 80066aa:	ea4f 0895 	mov.w	r8, r5, lsr #2
 80066ae:	18e0      	adds	r0, r4, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	3301      	adds	r3, #1
 80066b4:	b2de      	uxtb	r6, r3
 80066b6:	f852 eb04 	ldr.w	lr, [r2], #4
 80066ba:	f840 eb04 	str.w	lr, [r0], #4
 80066be:	45b0      	cmp	r8, r6
 80066c0:	d8f7      	bhi.n	80066b2 <UFCP_Send+0x92>
 80066c2:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 80066c6:	1ac9      	subs	r1, r1, r3
 80066c8:	429d      	cmp	r5, r3
 80066ca:	b2c9      	uxtb	r1, r1
 80066cc:	eb0c 0203 	add.w	r2, ip, r3
 80066d0:	441f      	add	r7, r3
 80066d2:	d014      	beq.n	80066fe <UFCP_Send+0xde>
 80066d4:	7813      	ldrb	r3, [r2, #0]
 80066d6:	703b      	strb	r3, [r7, #0]
 80066d8:	b189      	cbz	r1, 80066fe <UFCP_Send+0xde>
 80066da:	7853      	ldrb	r3, [r2, #1]
 80066dc:	707b      	strb	r3, [r7, #1]
 80066de:	2901      	cmp	r1, #1
 80066e0:	d00d      	beq.n	80066fe <UFCP_Send+0xde>
 80066e2:	7893      	ldrb	r3, [r2, #2]
 80066e4:	70bb      	strb	r3, [r7, #2]
 80066e6:	2902      	cmp	r1, #2
 80066e8:	d009      	beq.n	80066fe <UFCP_Send+0xde>
 80066ea:	78d3      	ldrb	r3, [r2, #3]
 80066ec:	70fb      	strb	r3, [r7, #3]
 80066ee:	2903      	cmp	r1, #3
 80066f0:	d005      	beq.n	80066fe <UFCP_Send+0xde>
 80066f2:	7913      	ldrb	r3, [r2, #4]
 80066f4:	713b      	strb	r3, [r7, #4]
 80066f6:	2904      	cmp	r1, #4
 80066f8:	d001      	beq.n	80066fe <UFCP_Send+0xde>
 80066fa:	7953      	ldrb	r3, [r2, #5]
 80066fc:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80066fe:	f104 0014 	add.w	r0, r4, #20
 8006702:	f7fe fc3b 	bl	8004f7c <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006706:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800670a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006714:	68d3      	ldr	r3, [r2, #12]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006716:	2101      	movs	r1, #1
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8006720:	2002      	movs	r0, #2
 8006722:	60d3      	str	r3, [r2, #12]
}
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	3101      	adds	r1, #1
 800672a:	4411      	add	r1, r2
 800672c:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8006730:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006734:	f803 0f01 	strb.w	r0, [r3, #1]!
 8006738:	428a      	cmp	r2, r1
 800673a:	d1f9      	bne.n	8006730 <UFCP_Send+0x110>
 800673c:	e7df      	b.n	80066fe <UFCP_Send+0xde>
 800673e:	4694      	mov	ip, r2
 8006740:	e7ae      	b.n	80066a0 <UFCP_Send+0x80>
 8006742:	bf00      	nop

08006744 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8006744:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006748:	b1b3      	cbz	r3, 8006778 <UFCP_RX_IRQ_Handler+0x34>
{
 800674a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800674c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 8006750:	4604      	mov	r4, r0
{
 8006752:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 8006754:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006756:	b1e3      	cbz	r3, 8006792 <UFCP_RX_IRQ_Handler+0x4e>
 8006758:	2b01      	cmp	r3, #1
 800675a:	d00f      	beq.n	800677c <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800675c:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 8006760:	3101      	adds	r1, #1
 8006762:	428b      	cmp	r3, r1
 8006764:	dc1f      	bgt.n	80067a6 <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006766:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 8006768:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800676a:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800676e:	4823      	ldr	r0, [pc, #140]	; (80067fc <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 8006770:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006774:	b003      	add	sp, #12
 8006776:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006778:	4820      	ldr	r0, [pc, #128]	; (80067fc <UFCP_RX_IRQ_Handler+0xb8>)
}
 800677a:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800677c:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 800677e:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006782:	481e      	ldr	r0, [pc, #120]	; (80067fc <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 8006784:	bf54      	ite	pl
 8006786:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8006788:	2300      	movmi	r3, #0
 800678a:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800678e:	b003      	add	sp, #12
 8006790:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006792:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8006794:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006798:	4819      	ldr	r0, [pc, #100]	; (8006800 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800679a:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 800679c:	2301      	movs	r3, #1
 800679e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80067a2:	b003      	add	sp, #12
 80067a4:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80067a6:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80067aa:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80067ae:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 80067b0:	2200      	movs	r2, #0
 80067b2:	f023 0320 	bic.w	r3, r3, #32
 80067b6:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80067b8:	f104 0099 	add.w	r0, r4, #153	; 0x99
 80067bc:	60cb      	str	r3, [r1, #12]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80067be:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80067c2:	f7fe fbdb 	bl	8004f7c <FCP_CalcCRC>
 80067c6:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80067ca:	4283      	cmp	r3, r0
 80067cc:	d10a      	bne.n	80067e4 <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	68a5      	ldr	r5, [r4, #8]
 80067d2:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80067d6:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80067da:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80067de:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80067e0:	4808      	ldr	r0, [pc, #32]	; (8006804 <UFCP_RX_IRQ_Handler+0xc0>)
 80067e2:	e7c7      	b.n	8006774 <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 80067e4:	aa02      	add	r2, sp, #8
 80067e6:	230a      	movs	r3, #10
 80067e8:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80067ec:	4620      	mov	r0, r4
 80067ee:	2301      	movs	r3, #1
 80067f0:	21ff      	movs	r1, #255	; 0xff
 80067f2:	f7ff ff15 	bl	8006620 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80067f6:	4803      	ldr	r0, [pc, #12]	; (8006804 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 80067f8:	e7bc      	b.n	8006774 <UFCP_RX_IRQ_Handler+0x30>
 80067fa:	bf00      	nop
 80067fc:	08007854 	.word	0x08007854
 8006800:	08007856 	.word	0x08007856
 8006804:	08007858 	.word	0x08007858

08006808 <UFCP_OVR_IRQ_Handler>:
{
 8006808:	b500      	push	{lr}
 800680a:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 800680c:	aa02      	add	r2, sp, #8
 800680e:	2308      	movs	r3, #8
 8006810:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006814:	21ff      	movs	r1, #255	; 0xff
 8006816:	2301      	movs	r3, #1
 8006818:	f7ff ff02 	bl	8006620 <UFCP_Send>
}
 800681c:	b003      	add	sp, #12
 800681e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006822:	bf00      	nop

08006824 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006824:	2300      	movs	r3, #0
 8006826:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800682a:	4770      	bx	lr

0800682c <RUC_SetPhaseDurationms>:
 800682c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006830:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006834:	818a      	strh	r2, [r1, #12]
 8006836:	4770      	bx	lr

08006838 <RUC_SetPhaseFinalMecSpeedUnit>:
 8006838:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800683c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006840:	81ca      	strh	r2, [r1, #14]
 8006842:	4770      	bx	lr

08006844 <RUC_SetPhaseFinalTorque>:
 8006844:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800684c:	820a      	strh	r2, [r1, #16]
 800684e:	4770      	bx	lr

08006850 <RUC_GetPhaseDurationms>:
 8006850:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006854:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006858:	8988      	ldrh	r0, [r1, #12]
 800685a:	4770      	bx	lr

0800685c <RUC_GetPhaseFinalMecSpeedUnit>:
 800685c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006860:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006864:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <RUC_GetPhaseFinalTorque>:
 800686c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006870:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006874:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop

0800687c <RUC_GetNumberOfPhases>:
 800687c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <STO_PLL_CalcElAngle>:
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800688c:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8006890:	4604      	mov	r4, r0
 8006892:	03d8      	lsls	r0, r3, #15
 8006894:	1ac2      	subs	r2, r0, r3
 8006896:	4596      	cmp	lr, r2
 8006898:	b089      	sub	sp, #36	; 0x24
 800689a:	f340 80c1 	ble.w	8006a20 <STO_PLL_CalcElAngle+0x19c>
 800689e:	66a2      	str	r2, [r4, #104]	; 0x68
 80068a0:	4696      	mov	lr, r2
 80068a2:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 80068a6:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 80068aa:	fa4e f605 	asr.w	r6, lr, r5
 80068ae:	9603      	str	r6, [sp, #12]
 80068b0:	4562      	cmp	r2, ip
 80068b2:	b236      	sxth	r6, r6
 80068b4:	9601      	str	r6, [sp, #4]
 80068b6:	f280 80c8 	bge.w	8006a4a <STO_PLL_CalcElAngle+0x1c6>
 80068ba:	66e2      	str	r2, [r4, #108]	; 0x6c
 80068bc:	4694      	mov	ip, r2
 80068be:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80068c2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80068c4:	03de      	lsls	r6, r3, #15
 80068c6:	fa4c f205 	asr.w	r2, ip, r5
 80068ca:	1af5      	subs	r5, r6, r3
 80068cc:	9204      	str	r2, [sp, #16]
 80068ce:	42a8      	cmp	r0, r5
 80068d0:	b212      	sxth	r2, r2
 80068d2:	9202      	str	r2, [sp, #8]
 80068d4:	f340 80b3 	ble.w	8006a3e <STO_PLL_CalcElAngle+0x1ba>
 80068d8:	6625      	str	r5, [r4, #96]	; 0x60
 80068da:	4628      	mov	r0, r5
 80068dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068de:	4295      	cmp	r5, r2
 80068e0:	f280 80a7 	bge.w	8006a32 <STO_PLL_CalcElAngle+0x1ae>
 80068e4:	6665      	str	r5, [r4, #100]	; 0x64
 80068e6:	462a      	mov	r2, r5
 80068e8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 80068ec:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80068f0:	890d      	ldrh	r5, [r1, #8]
 80068f2:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 80068f6:	888e      	ldrh	r6, [r1, #4]
 80068f8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80068fc:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8006900:	9901      	ldr	r1, [sp, #4]
 8006902:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8006906:	fa40 f103 	asr.w	r1, r0, r3
 800690a:	fa42 f303 	asr.w	r3, r2, r3
 800690e:	1b8e      	subs	r6, r1, r6
 8006910:	fb11 f109 	smulbb	r1, r1, r9
 8006914:	fb13 f909 	smulbb	r9, r3, r9
 8006918:	eba3 030a 	sub.w	r3, r3, sl
 800691c:	9305      	str	r3, [sp, #20]
 800691e:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8006922:	9b02      	ldr	r3, [sp, #8]
 8006924:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8006928:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800692c:	b236      	sxth	r6, r6
 800692e:	1a41      	subs	r1, r0, r1
 8006930:	fb05 f707 	mul.w	r7, r5, r7
 8006934:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006938:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800693a:	eba2 0209 	sub.w	r2, r2, r9
 800693e:	fb0b 1106 	mla	r1, fp, r6, r1
 8006942:	143f      	asrs	r7, r7, #16
 8006944:	fb0b 2b03 	mla	fp, fp, r3, r2
 8006948:	fb0a 1107 	mla	r1, sl, r7, r1
 800694c:	fb05 f508 	mul.w	r5, r5, r8
 8006950:	9a01      	ldr	r2, [sp, #4]
 8006952:	9f02      	ldr	r7, [sp, #8]
 8006954:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8006958:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800695c:	142d      	asrs	r5, r5, #16
 800695e:	fb0a b505 	mla	r5, sl, r5, fp
 8006962:	4107      	asrs	r7, r0
 8006964:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8006968:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 800696c:	fa42 f000 	asr.w	r0, r2, r0
 8006970:	fb06 e609 	mla	r6, r6, r9, lr
 8006974:	fb09 c303 	mla	r3, r9, r3, ip
 8006978:	fb07 f708 	mul.w	r7, r7, r8
 800697c:	fb00 f008 	mul.w	r0, r0, r8
 8006980:	fb07 670a 	mla	r7, r7, sl, r6
 8006984:	fb00 361a 	mls	r6, r0, sl, r3
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 800698e:	fb0b 1813 	mls	r8, fp, r3, r1
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	fb0b 5513 	mls	r5, fp, r3, r5
 8006998:	2a00      	cmp	r2, #0
 800699a:	d147      	bne.n	8006a2c <STO_PLL_CalcElAngle+0x1a8>
 800699c:	f1ba 0f00 	cmp.w	sl, #0
 80069a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069a4:	bfb4      	ite	lt
 80069a6:	4691      	movlt	r9, r2
 80069a8:	f04f 0901 	movge.w	r9, #1
 80069ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80069b0:	f7fa f9e6 	bl	8000d80 <MCM_Trig_Functions>
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	9a03      	ldr	r2, [sp, #12]
 80069b8:	fb13 f309 	smulbb	r3, r3, r9
 80069bc:	fb12 f109 	smulbb	r1, r2, r9
 80069c0:	425b      	negs	r3, r3
 80069c2:	fb10 f303 	smulbb	r3, r0, r3
 80069c6:	fb10 f021 	smultb	r0, r0, r1
 80069ca:	f343 33cf 	sbfx	r3, r3, #15, #16
 80069ce:	f340 31cf 	sbfx	r1, r0, #15, #16
 80069d2:	1a59      	subs	r1, r3, r1
 80069d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80069d8:	f7ff f9a4 	bl	8005d24 <PI_Controller>
 80069dc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80069e0:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 80069e4:	8220      	strh	r0, [r4, #16]
 80069e6:	3301      	adds	r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf0a      	itet	eq
 80069ee:	2200      	moveq	r2, #0
 80069f0:	461a      	movne	r2, r3
 80069f2:	4613      	moveq	r3, r2
 80069f4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80069f8:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80069fc:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8006a00:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8006a04:	88a2      	ldrh	r2, [r4, #4]
 8006a06:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8006a0a:	4410      	add	r0, r2
 8006a0c:	b200      	sxth	r0, r0
 8006a0e:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8006a12:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8006a16:	66e6      	str	r6, [r4, #108]	; 0x6c
 8006a18:	80a0      	strh	r0, [r4, #4]
 8006a1a:	b009      	add	sp, #36	; 0x24
 8006a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a20:	1a1d      	subs	r5, r3, r0
 8006a22:	45ae      	cmp	lr, r5
 8006a24:	bfdc      	itt	le
 8006a26:	66a5      	strle	r5, [r4, #104]	; 0x68
 8006a28:	46ae      	movle	lr, r5
 8006a2a:	e73a      	b.n	80068a2 <STO_PLL_CalcElAngle+0x1e>
 8006a2c:	fa1f f982 	uxth.w	r9, r2
 8006a30:	e7bc      	b.n	80069ac <STO_PLL_CalcElAngle+0x128>
 8006a32:	1b9b      	subs	r3, r3, r6
 8006a34:	429a      	cmp	r2, r3
 8006a36:	bfdc      	itt	le
 8006a38:	6663      	strle	r3, [r4, #100]	; 0x64
 8006a3a:	461a      	movle	r2, r3
 8006a3c:	e754      	b.n	80068e8 <STO_PLL_CalcElAngle+0x64>
 8006a3e:	1b9a      	subs	r2, r3, r6
 8006a40:	4290      	cmp	r0, r2
 8006a42:	bfdc      	itt	le
 8006a44:	6622      	strle	r2, [r4, #96]	; 0x60
 8006a46:	4610      	movle	r0, r2
 8006a48:	e748      	b.n	80068dc <STO_PLL_CalcElAngle+0x58>
 8006a4a:	1a1b      	subs	r3, r3, r0
 8006a4c:	459c      	cmp	ip, r3
 8006a4e:	bfdc      	itt	le
 8006a50:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8006a52:	469c      	movle	ip, r3
 8006a54:	e733      	b.n	80068be <STO_PLL_CalcElAngle+0x3a>
 8006a56:	bf00      	nop

08006a58 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8006a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5a:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8006a5e:	f1bc 0f00 	cmp.w	ip, #0
 8006a62:	f000 8095 	beq.w	8006b90 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8006a66:	f10c 37ff 	add.w	r7, ip, #4294967295
 8006a6a:	b2fb      	uxtb	r3, r7
 8006a6c:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8006a70:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8006a74:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8006a78:	4632      	mov	r2, r6
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8006a80:	4297      	cmp	r7, r2
 8006a82:	442b      	add	r3, r5
 8006a84:	d1fa      	bne.n	8006a7c <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 8006a86:	fb93 f5fc 	sdiv	r5, r3, ip
 8006a8a:	2400      	movs	r4, #0
 8006a8c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8006a90:	1b5b      	subs	r3, r3, r5
 8006a92:	42b2      	cmp	r2, r6
 8006a94:	fb03 4403 	mla	r4, r3, r3, r4
 8006a98:	d1f8      	bne.n	8006a8c <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 8006a9a:	fb94 f4fc 	sdiv	r4, r4, ip
 8006a9e:	fb05 fc05 	mul.w	ip, r5, r5
 8006aa2:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8006aa6:	8b43      	ldrh	r3, [r0, #26]
 8006aa8:	7887      	ldrb	r7, [r0, #2]
 8006aaa:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8006aae:	fb0c fc02 	mul.w	ip, ip, r2
 8006ab2:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8006ab6:	fb05 f303 	mul.w	r3, r5, r3
 8006aba:	45a4      	cmp	ip, r4
 8006abc:	69c2      	ldr	r2, [r0, #28]
 8006abe:	bfd4      	ite	le
 8006ac0:	2500      	movle	r5, #0
 8006ac2:	2501      	movgt	r5, #1
 8006ac4:	fb03 f307 	mul.w	r3, r3, r7
 8006ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006acc:	7842      	ldrb	r2, [r0, #1]
 8006ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ad2:	b21a      	sxth	r2, r3
 8006ad4:	800a      	strh	r2, [r1, #0]
 8006ad6:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8006ada:	8182      	strh	r2, [r0, #12]
 8006adc:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8006ae0:	b99e      	cbnz	r6, 8006b0a <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8006ae2:	b355      	cbz	r5, 8006b3a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8006ae4:	45a4      	cmp	ip, r4
 8006ae6:	dc25      	bgt.n	8006b34 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8006ae8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8006aec:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8006af0:	3301      	adds	r3, #1
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	429a      	cmp	r2, r3
 8006af6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8006afa:	d81e      	bhi.n	8006b3a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8006afc:	2300      	movs	r3, #0
 8006afe:	78c2      	ldrb	r2, [r0, #3]
 8006b00:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8006b04:	7002      	strb	r2, [r0, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8006b10:	bfb8      	it	lt
 8006b12:	425b      	neglt	r3, r3
 8006b14:	429a      	cmp	r2, r3
 8006b16:	dc14      	bgt.n	8006b42 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8006b22:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8006b26:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8006b2a:	b135      	cbz	r5, 8006b3a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8006b2c:	45a4      	cmp	ip, r4
 8006b2e:	dddb      	ble.n	8006ae8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	d0d9      	beq.n	8006ae8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8006b34:	2300      	movs	r3, #0
 8006b36:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8006b3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006b3e:	f7ff bb7b 	b.w	8006238 <SPD_IsMecSpeedReliable>
 8006b42:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8006b46:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8006b4a:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8006b4e:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8006b52:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8006b56:	fb93 f3fe 	sdiv	r3, r3, lr
 8006b5a:	fb03 f202 	mul.w	r2, r3, r2
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	bfb8      	it	lt
 8006b62:	323f      	addlt	r2, #63	; 0x3f
 8006b64:	1192      	asrs	r2, r2, #6
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	fb07 f707 	mul.w	r7, r7, r7
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	fb06 7606 	mla	r6, r6, r6, r7
 8006b74:	461a      	mov	r2, r3
 8006b76:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8006b7a:	bfb8      	it	lt
 8006b7c:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8006b80:	1192      	asrs	r2, r2, #6
 8006b82:	fb07 3212 	mls	r2, r7, r2, r3
 8006b86:	4296      	cmp	r6, r2
 8006b88:	bfd4      	ite	le
 8006b8a:	2200      	movle	r2, #0
 8006b8c:	2201      	movgt	r2, #1
 8006b8e:	e7c6      	b.n	8006b1e <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8006b90:	4664      	mov	r4, ip
 8006b92:	4665      	mov	r5, ip
 8006b94:	e785      	b.n	8006aa2 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8006b96:	bf00      	nop

08006b98 <STO_PLL_CalcAvrgElSpeedDpp>:
 8006b98:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8006b9c:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8006ba0:	b470      	push	{r4, r5, r6}
 8006ba2:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8006ba6:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8006baa:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8006bae:	b2a6      	uxth	r6, r4
 8006bb0:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8006bb4:	1af3      	subs	r3, r6, r3
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	442a      	add	r2, r5
 8006bba:	b19b      	cbz	r3, 8006be4 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8006bbc:	440b      	add	r3, r1
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	b219      	sxth	r1, r3
 8006bc2:	428c      	cmp	r4, r1
 8006bc4:	bfdc      	itt	le
 8006bc6:	1b9b      	suble	r3, r3, r6
 8006bc8:	b219      	sxthle	r1, r3
 8006bca:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8006bce:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8006bd8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8006bdc:	4113      	asrs	r3, r2
 8006bde:	81c3      	strh	r3, [r0, #14]
 8006be0:	bc70      	pop	{r4, r5, r6}
 8006be2:	4770      	bx	lr
 8006be4:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	e7f3      	b.n	8006bd4 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08006bec <STO_PLL_Clear>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8006bfa:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8006bfe:	8081      	strh	r1, [r0, #4]
 8006c00:	81c1      	strh	r1, [r0, #14]
 8006c02:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8006c06:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8006c0a:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8006c0e:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8006c12:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8006c16:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8006c1a:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 8006c1e:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8006c22:	b132      	cbz	r2, 8006c32 <STO_PLL_Clear+0x46>
 8006c24:	3a01      	subs	r2, #1
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	3201      	adds	r2, #1
 8006c2a:	0052      	lsls	r2, r2, #1
 8006c2c:	3074      	adds	r0, #116	; 0x74
 8006c2e:	f000 f8bf 	bl	8006db0 <memset>
 8006c32:	2100      	movs	r1, #0
 8006c34:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8006c38:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8006c3c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f7ff b862 	b.w	8005d0c <PID_SetIntegralTerm>

08006c48 <STO_PLL_Init>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8006c50:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <STO_PLL_Init+0x6c>)
 8006c52:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8006c56:	fb93 f3f5 	sdiv	r3, r3, r5
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	b21b      	sxth	r3, r3
 8006c60:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8006c64:	8662      	strh	r2, [r4, #50]	; 0x32
 8006c66:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8006c6a:	b303      	cbz	r3, 8006cae <STO_PLL_Init+0x66>
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	e000      	b.n	8006c72 <STO_PLL_Init+0x2a>
 8006c70:	4611      	mov	r1, r2
 8006c72:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006c76:	1c4a      	adds	r2, r1, #1
 8006c78:	105b      	asrs	r3, r3, #1
 8006c7a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8006c7e:	b292      	uxth	r2, r2
 8006c80:	d1f6      	bne.n	8006c70 <STO_PLL_Init+0x28>
 8006c82:	b200      	sxth	r0, r0
 8006c84:	fb05 f200 	mul.w	r2, r5, r0
 8006c88:	8661      	strh	r1, [r4, #50]	; 0x32
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <STO_PLL_Init+0x70>)
 8006c8c:	8620      	strh	r0, [r4, #48]	; 0x30
 8006c8e:	fb83 1302 	smull	r1, r3, r3, r2
 8006c92:	17d2      	asrs	r2, r2, #31
 8006c94:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8006c98:	8562      	strh	r2, [r4, #42]	; 0x2a
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7ff ffa6 	bl	8006bec <STO_PLL_Clear>
 8006ca0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006ca4:	f7ff f81e 	bl	8005ce4 <PID_HandleInit>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	8263      	strh	r3, [r4, #18]
 8006cac:	bd38      	pop	{r3, r4, r5, pc}
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	e7ea      	b.n	8006c8a <STO_PLL_Init+0x42>
 8006cb4:	000fea5e 	.word	0x000fea5e
 8006cb8:	06488dc5 	.word	0x06488dc5

08006cbc <STO_PLL_GetEstimatedBemf>:
 8006cbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f362 000f 	bfi	r0, r2, #0, #16
 8006cc6:	0c1b      	lsrs	r3, r3, #16
 8006cc8:	b082      	sub	sp, #8
 8006cca:	f363 401f 	bfi	r0, r3, #16, #16
 8006cce:	b002      	add	sp, #8
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop

08006cd4 <STO_PLL_GetEstimatedCurrent>:
 8006cd4:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8006cd8:	b410      	push	{r4}
 8006cda:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8006cde:	4122      	asrs	r2, r4
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	4123      	asrs	r3, r4
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f362 010f 	bfi	r1, r2, #0, #16
 8006cec:	f363 411f 	bfi	r1, r3, #16, #16
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	b003      	add	sp, #12
 8006cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <STO_PLL_GetObserverGains>:
 8006cfc:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8006d00:	800b      	strh	r3, [r1, #0]
 8006d02:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8006d06:	8013      	strh	r3, [r2, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <STO_PLL_SetObserverGains>:
 8006d0c:	8441      	strh	r1, [r0, #34]	; 0x22
 8006d0e:	84c2      	strh	r2, [r0, #38]	; 0x26
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <STO_GetPLLGains>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	4615      	mov	r5, r2
 8006d20:	f7fe ffec 	bl	8005cfc <PID_GetKP>
 8006d24:	8030      	strh	r0, [r6, #0]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7fe ffec 	bl	8005d04 <PID_GetKI>
 8006d2c:	8028      	strh	r0, [r5, #0]
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}

08006d30 <STO_SetPLLGains>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006d36:	4615      	mov	r5, r2
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7fe ffdb 	bl	8005cf4 <PID_SetKP>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4620      	mov	r0, r4
 8006d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d46:	f7fe bfd7 	b.w	8005cf8 <PID_SetKI>
 8006d4a:	bf00      	nop

08006d4c <STO_PLL_GetEstimatedBemfLevel>:
 8006d4c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop

08006d54 <STO_PLL_GetObservedBemfLevel>:
 8006d54:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop

08006d5c <__errno>:
 8006d5c:	4b01      	ldr	r3, [pc, #4]	; (8006d64 <__errno+0x8>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000708 	.word	0x20000708

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4e0d      	ldr	r6, [pc, #52]	; (8006da0 <__libc_init_array+0x38>)
 8006d6c:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d6e:	1ba4      	subs	r4, r4, r6
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	2500      	movs	r5, #0
 8006d74:	42a5      	cmp	r5, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	4e0b      	ldr	r6, [pc, #44]	; (8006da8 <__libc_init_array+0x40>)
 8006d7a:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <__libc_init_array+0x44>)
 8006d7c:	f000 fc26 	bl	80075cc <_init>
 8006d80:	1ba4      	subs	r4, r4, r6
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	2500      	movs	r5, #0
 8006d86:	42a5      	cmp	r5, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d90:	4798      	blx	r3
 8006d92:	3501      	adds	r5, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d9a:	4798      	blx	r3
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	08007898 	.word	0x08007898
 8006da4:	08007898 	.word	0x08007898
 8006da8:	08007898 	.word	0x08007898
 8006dac:	0800789c 	.word	0x0800789c

08006db0 <memset>:
 8006db0:	4402      	add	r2, r0
 8006db2:	4603      	mov	r3, r0
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d100      	bne.n	8006dba <memset+0xa>
 8006db8:	4770      	bx	lr
 8006dba:	f803 1b01 	strb.w	r1, [r3], #1
 8006dbe:	e7f9      	b.n	8006db4 <memset+0x4>

08006dc0 <siprintf>:
 8006dc0:	b40e      	push	{r1, r2, r3}
 8006dc2:	b500      	push	{lr}
 8006dc4:	b09c      	sub	sp, #112	; 0x70
 8006dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8006dc8:	9002      	str	r0, [sp, #8]
 8006dca:	9006      	str	r0, [sp, #24]
 8006dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dd0:	4809      	ldr	r0, [pc, #36]	; (8006df8 <siprintf+0x38>)
 8006dd2:	9107      	str	r1, [sp, #28]
 8006dd4:	9104      	str	r1, [sp, #16]
 8006dd6:	4909      	ldr	r1, [pc, #36]	; (8006dfc <siprintf+0x3c>)
 8006dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ddc:	9105      	str	r1, [sp, #20]
 8006dde:	6800      	ldr	r0, [r0, #0]
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	a902      	add	r1, sp, #8
 8006de4:	f000 f866 	bl	8006eb4 <_svfiprintf_r>
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	b01c      	add	sp, #112	; 0x70
 8006df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df4:	b003      	add	sp, #12
 8006df6:	4770      	bx	lr
 8006df8:	20000708 	.word	0x20000708
 8006dfc:	ffff0208 	.word	0xffff0208

08006e00 <__ssputs_r>:
 8006e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	688e      	ldr	r6, [r1, #8]
 8006e06:	429e      	cmp	r6, r3
 8006e08:	4682      	mov	sl, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	4690      	mov	r8, r2
 8006e0e:	4699      	mov	r9, r3
 8006e10:	d837      	bhi.n	8006e82 <__ssputs_r+0x82>
 8006e12:	898a      	ldrh	r2, [r1, #12]
 8006e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e18:	d031      	beq.n	8006e7e <__ssputs_r+0x7e>
 8006e1a:	6825      	ldr	r5, [r4, #0]
 8006e1c:	6909      	ldr	r1, [r1, #16]
 8006e1e:	1a6f      	subs	r7, r5, r1
 8006e20:	6965      	ldr	r5, [r4, #20]
 8006e22:	2302      	movs	r3, #2
 8006e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e28:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e2c:	f109 0301 	add.w	r3, r9, #1
 8006e30:	443b      	add	r3, r7
 8006e32:	429d      	cmp	r5, r3
 8006e34:	bf38      	it	cc
 8006e36:	461d      	movcc	r5, r3
 8006e38:	0553      	lsls	r3, r2, #21
 8006e3a:	d530      	bpl.n	8006e9e <__ssputs_r+0x9e>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f000 fb2b 	bl	8007498 <_malloc_r>
 8006e42:	4606      	mov	r6, r0
 8006e44:	b950      	cbnz	r0, 8006e5c <__ssputs_r+0x5c>
 8006e46:	230c      	movs	r3, #12
 8006e48:	f8ca 3000 	str.w	r3, [sl]
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	6921      	ldr	r1, [r4, #16]
 8006e60:	f000 faa8 	bl	80073b4 <memcpy>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	6126      	str	r6, [r4, #16]
 8006e72:	6165      	str	r5, [r4, #20]
 8006e74:	443e      	add	r6, r7
 8006e76:	1bed      	subs	r5, r5, r7
 8006e78:	6026      	str	r6, [r4, #0]
 8006e7a:	60a5      	str	r5, [r4, #8]
 8006e7c:	464e      	mov	r6, r9
 8006e7e:	454e      	cmp	r6, r9
 8006e80:	d900      	bls.n	8006e84 <__ssputs_r+0x84>
 8006e82:	464e      	mov	r6, r9
 8006e84:	4632      	mov	r2, r6
 8006e86:	4641      	mov	r1, r8
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	f000 fa9e 	bl	80073ca <memmove>
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	1b9b      	subs	r3, r3, r6
 8006e92:	60a3      	str	r3, [r4, #8]
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	441e      	add	r6, r3
 8006e98:	6026      	str	r6, [r4, #0]
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e7dc      	b.n	8006e58 <__ssputs_r+0x58>
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	f000 fb54 	bl	800754c <_realloc_r>
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d1e2      	bne.n	8006e70 <__ssputs_r+0x70>
 8006eaa:	6921      	ldr	r1, [r4, #16]
 8006eac:	4650      	mov	r0, sl
 8006eae:	f000 faa5 	bl	80073fc <_free_r>
 8006eb2:	e7c8      	b.n	8006e46 <__ssputs_r+0x46>

08006eb4 <_svfiprintf_r>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	461d      	mov	r5, r3
 8006eba:	898b      	ldrh	r3, [r1, #12]
 8006ebc:	061f      	lsls	r7, r3, #24
 8006ebe:	b09d      	sub	sp, #116	; 0x74
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	d50f      	bpl.n	8006ee8 <_svfiprintf_r+0x34>
 8006ec8:	690b      	ldr	r3, [r1, #16]
 8006eca:	b96b      	cbnz	r3, 8006ee8 <_svfiprintf_r+0x34>
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	f000 fae3 	bl	8007498 <_malloc_r>
 8006ed2:	6020      	str	r0, [r4, #0]
 8006ed4:	6120      	str	r0, [r4, #16]
 8006ed6:	b928      	cbnz	r0, 8006ee4 <_svfiprintf_r+0x30>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	f8c8 3000 	str.w	r3, [r8]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	e0c8      	b.n	8007076 <_svfiprintf_r+0x1c2>
 8006ee4:	2340      	movs	r3, #64	; 0x40
 8006ee6:	6163      	str	r3, [r4, #20]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9309      	str	r3, [sp, #36]	; 0x24
 8006eec:	2320      	movs	r3, #32
 8006eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ef2:	2330      	movs	r3, #48	; 0x30
 8006ef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ef8:	9503      	str	r5, [sp, #12]
 8006efa:	f04f 0b01 	mov.w	fp, #1
 8006efe:	4637      	mov	r7, r6
 8006f00:	463d      	mov	r5, r7
 8006f02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f06:	b10b      	cbz	r3, 8006f0c <_svfiprintf_r+0x58>
 8006f08:	2b25      	cmp	r3, #37	; 0x25
 8006f0a:	d13e      	bne.n	8006f8a <_svfiprintf_r+0xd6>
 8006f0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f10:	d00b      	beq.n	8006f2a <_svfiprintf_r+0x76>
 8006f12:	4653      	mov	r3, sl
 8006f14:	4632      	mov	r2, r6
 8006f16:	4621      	mov	r1, r4
 8006f18:	4640      	mov	r0, r8
 8006f1a:	f7ff ff71 	bl	8006e00 <__ssputs_r>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f000 80a4 	beq.w	800706c <_svfiprintf_r+0x1b8>
 8006f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f26:	4453      	add	r3, sl
 8006f28:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2a:	783b      	ldrb	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 809d 	beq.w	800706c <_svfiprintf_r+0x1b8>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	9307      	str	r3, [sp, #28]
 8006f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f44:	931a      	str	r3, [sp, #104]	; 0x68
 8006f46:	462f      	mov	r7, r5
 8006f48:	2205      	movs	r2, #5
 8006f4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f4e:	4850      	ldr	r0, [pc, #320]	; (8007090 <_svfiprintf_r+0x1dc>)
 8006f50:	f7f9 f966 	bl	8000220 <memchr>
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	b9d0      	cbnz	r0, 8006f8e <_svfiprintf_r+0xda>
 8006f58:	06d9      	lsls	r1, r3, #27
 8006f5a:	bf44      	itt	mi
 8006f5c:	2220      	movmi	r2, #32
 8006f5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f62:	071a      	lsls	r2, r3, #28
 8006f64:	bf44      	itt	mi
 8006f66:	222b      	movmi	r2, #43	; 0x2b
 8006f68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f6c:	782a      	ldrb	r2, [r5, #0]
 8006f6e:	2a2a      	cmp	r2, #42	; 0x2a
 8006f70:	d015      	beq.n	8006f9e <_svfiprintf_r+0xea>
 8006f72:	9a07      	ldr	r2, [sp, #28]
 8006f74:	462f      	mov	r7, r5
 8006f76:	2000      	movs	r0, #0
 8006f78:	250a      	movs	r5, #10
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f80:	3b30      	subs	r3, #48	; 0x30
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d94d      	bls.n	8007022 <_svfiprintf_r+0x16e>
 8006f86:	b1b8      	cbz	r0, 8006fb8 <_svfiprintf_r+0x104>
 8006f88:	e00f      	b.n	8006faa <_svfiprintf_r+0xf6>
 8006f8a:	462f      	mov	r7, r5
 8006f8c:	e7b8      	b.n	8006f00 <_svfiprintf_r+0x4c>
 8006f8e:	4a40      	ldr	r2, [pc, #256]	; (8007090 <_svfiprintf_r+0x1dc>)
 8006f90:	1a80      	subs	r0, r0, r2
 8006f92:	fa0b f000 	lsl.w	r0, fp, r0
 8006f96:	4318      	orrs	r0, r3
 8006f98:	9004      	str	r0, [sp, #16]
 8006f9a:	463d      	mov	r5, r7
 8006f9c:	e7d3      	b.n	8006f46 <_svfiprintf_r+0x92>
 8006f9e:	9a03      	ldr	r2, [sp, #12]
 8006fa0:	1d11      	adds	r1, r2, #4
 8006fa2:	6812      	ldr	r2, [r2, #0]
 8006fa4:	9103      	str	r1, [sp, #12]
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	db01      	blt.n	8006fae <_svfiprintf_r+0xfa>
 8006faa:	9207      	str	r2, [sp, #28]
 8006fac:	e004      	b.n	8006fb8 <_svfiprintf_r+0x104>
 8006fae:	4252      	negs	r2, r2
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	9207      	str	r2, [sp, #28]
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	783b      	ldrb	r3, [r7, #0]
 8006fba:	2b2e      	cmp	r3, #46	; 0x2e
 8006fbc:	d10c      	bne.n	8006fd8 <_svfiprintf_r+0x124>
 8006fbe:	787b      	ldrb	r3, [r7, #1]
 8006fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc2:	d133      	bne.n	800702c <_svfiprintf_r+0x178>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	1d1a      	adds	r2, r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	9203      	str	r2, [sp, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bfb8      	it	lt
 8006fd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fd4:	3702      	adds	r7, #2
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	4d2e      	ldr	r5, [pc, #184]	; (8007094 <_svfiprintf_r+0x1e0>)
 8006fda:	7839      	ldrb	r1, [r7, #0]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7f9 f91e 	bl	8000220 <memchr>
 8006fe4:	b138      	cbz	r0, 8006ff6 <_svfiprintf_r+0x142>
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	1b40      	subs	r0, r0, r5
 8006fea:	fa03 f000 	lsl.w	r0, r3, r0
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	4303      	orrs	r3, r0
 8006ff2:	3701      	adds	r7, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	7839      	ldrb	r1, [r7, #0]
 8006ff8:	4827      	ldr	r0, [pc, #156]	; (8007098 <_svfiprintf_r+0x1e4>)
 8006ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ffe:	2206      	movs	r2, #6
 8007000:	1c7e      	adds	r6, r7, #1
 8007002:	f7f9 f90d 	bl	8000220 <memchr>
 8007006:	2800      	cmp	r0, #0
 8007008:	d038      	beq.n	800707c <_svfiprintf_r+0x1c8>
 800700a:	4b24      	ldr	r3, [pc, #144]	; (800709c <_svfiprintf_r+0x1e8>)
 800700c:	bb13      	cbnz	r3, 8007054 <_svfiprintf_r+0x1a0>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	3308      	adds	r3, #8
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	444b      	add	r3, r9
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	e76d      	b.n	8006efe <_svfiprintf_r+0x4a>
 8007022:	fb05 3202 	mla	r2, r5, r2, r3
 8007026:	2001      	movs	r0, #1
 8007028:	460f      	mov	r7, r1
 800702a:	e7a6      	b.n	8006f7a <_svfiprintf_r+0xc6>
 800702c:	2300      	movs	r3, #0
 800702e:	3701      	adds	r7, #1
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	4619      	mov	r1, r3
 8007034:	250a      	movs	r5, #10
 8007036:	4638      	mov	r0, r7
 8007038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800703c:	3a30      	subs	r2, #48	; 0x30
 800703e:	2a09      	cmp	r2, #9
 8007040:	d903      	bls.n	800704a <_svfiprintf_r+0x196>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0c8      	beq.n	8006fd8 <_svfiprintf_r+0x124>
 8007046:	9105      	str	r1, [sp, #20]
 8007048:	e7c6      	b.n	8006fd8 <_svfiprintf_r+0x124>
 800704a:	fb05 2101 	mla	r1, r5, r1, r2
 800704e:	2301      	movs	r3, #1
 8007050:	4607      	mov	r7, r0
 8007052:	e7f0      	b.n	8007036 <_svfiprintf_r+0x182>
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4622      	mov	r2, r4
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <_svfiprintf_r+0x1ec>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4640      	mov	r0, r8
 8007060:	f3af 8000 	nop.w
 8007064:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007068:	4681      	mov	r9, r0
 800706a:	d1d6      	bne.n	800701a <_svfiprintf_r+0x166>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	065b      	lsls	r3, r3, #25
 8007070:	f53f af35 	bmi.w	8006ede <_svfiprintf_r+0x2a>
 8007074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007076:	b01d      	add	sp, #116	; 0x74
 8007078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707c:	ab03      	add	r3, sp, #12
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4622      	mov	r2, r4
 8007082:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <_svfiprintf_r+0x1ec>)
 8007084:	a904      	add	r1, sp, #16
 8007086:	4640      	mov	r0, r8
 8007088:	f000 f882 	bl	8007190 <_printf_i>
 800708c:	e7ea      	b.n	8007064 <_svfiprintf_r+0x1b0>
 800708e:	bf00      	nop
 8007090:	0800785a 	.word	0x0800785a
 8007094:	08007860 	.word	0x08007860
 8007098:	08007864 	.word	0x08007864
 800709c:	00000000 	.word	0x00000000
 80070a0:	08006e01 	.word	0x08006e01

080070a4 <_printf_common>:
 80070a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	4691      	mov	r9, r2
 80070aa:	461f      	mov	r7, r3
 80070ac:	688a      	ldr	r2, [r1, #8]
 80070ae:	690b      	ldr	r3, [r1, #16]
 80070b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bfb8      	it	lt
 80070b8:	4613      	movlt	r3, r2
 80070ba:	f8c9 3000 	str.w	r3, [r9]
 80070be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c2:	4606      	mov	r6, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	b112      	cbz	r2, 80070ce <_printf_common+0x2a>
 80070c8:	3301      	adds	r3, #1
 80070ca:	f8c9 3000 	str.w	r3, [r9]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	0699      	lsls	r1, r3, #26
 80070d2:	bf42      	ittt	mi
 80070d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070d8:	3302      	addmi	r3, #2
 80070da:	f8c9 3000 	strmi.w	r3, [r9]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	f015 0506 	ands.w	r5, r5, #6
 80070e4:	d107      	bne.n	80070f6 <_printf_common+0x52>
 80070e6:	f104 0a19 	add.w	sl, r4, #25
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	f8d9 2000 	ldr.w	r2, [r9]
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	42ab      	cmp	r3, r5
 80070f4:	dc28      	bgt.n	8007148 <_printf_common+0xa4>
 80070f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	3300      	adds	r3, #0
 80070fe:	bf18      	it	ne
 8007100:	2301      	movne	r3, #1
 8007102:	0692      	lsls	r2, r2, #26
 8007104:	d42d      	bmi.n	8007162 <_printf_common+0xbe>
 8007106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800710a:	4639      	mov	r1, r7
 800710c:	4630      	mov	r0, r6
 800710e:	47c0      	blx	r8
 8007110:	3001      	adds	r0, #1
 8007112:	d020      	beq.n	8007156 <_printf_common+0xb2>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	68e5      	ldr	r5, [r4, #12]
 8007118:	f8d9 2000 	ldr.w	r2, [r9]
 800711c:	f003 0306 	and.w	r3, r3, #6
 8007120:	2b04      	cmp	r3, #4
 8007122:	bf08      	it	eq
 8007124:	1aad      	subeq	r5, r5, r2
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	6922      	ldr	r2, [r4, #16]
 800712a:	bf0c      	ite	eq
 800712c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007130:	2500      	movne	r5, #0
 8007132:	4293      	cmp	r3, r2
 8007134:	bfc4      	itt	gt
 8007136:	1a9b      	subgt	r3, r3, r2
 8007138:	18ed      	addgt	r5, r5, r3
 800713a:	f04f 0900 	mov.w	r9, #0
 800713e:	341a      	adds	r4, #26
 8007140:	454d      	cmp	r5, r9
 8007142:	d11a      	bne.n	800717a <_printf_common+0xd6>
 8007144:	2000      	movs	r0, #0
 8007146:	e008      	b.n	800715a <_printf_common+0xb6>
 8007148:	2301      	movs	r3, #1
 800714a:	4652      	mov	r2, sl
 800714c:	4639      	mov	r1, r7
 800714e:	4630      	mov	r0, r6
 8007150:	47c0      	blx	r8
 8007152:	3001      	adds	r0, #1
 8007154:	d103      	bne.n	800715e <_printf_common+0xba>
 8007156:	f04f 30ff 	mov.w	r0, #4294967295
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	3501      	adds	r5, #1
 8007160:	e7c3      	b.n	80070ea <_printf_common+0x46>
 8007162:	18e1      	adds	r1, r4, r3
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	2030      	movs	r0, #48	; 0x30
 8007168:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716c:	4422      	add	r2, r4
 800716e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007172:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007176:	3302      	adds	r3, #2
 8007178:	e7c5      	b.n	8007106 <_printf_common+0x62>
 800717a:	2301      	movs	r3, #1
 800717c:	4622      	mov	r2, r4
 800717e:	4639      	mov	r1, r7
 8007180:	4630      	mov	r0, r6
 8007182:	47c0      	blx	r8
 8007184:	3001      	adds	r0, #1
 8007186:	d0e6      	beq.n	8007156 <_printf_common+0xb2>
 8007188:	f109 0901 	add.w	r9, r9, #1
 800718c:	e7d8      	b.n	8007140 <_printf_common+0x9c>
	...

08007190 <_printf_i>:
 8007190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007194:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007198:	460c      	mov	r4, r1
 800719a:	7e09      	ldrb	r1, [r1, #24]
 800719c:	b085      	sub	sp, #20
 800719e:	296e      	cmp	r1, #110	; 0x6e
 80071a0:	4617      	mov	r7, r2
 80071a2:	4606      	mov	r6, r0
 80071a4:	4698      	mov	r8, r3
 80071a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a8:	f000 80b3 	beq.w	8007312 <_printf_i+0x182>
 80071ac:	d822      	bhi.n	80071f4 <_printf_i+0x64>
 80071ae:	2963      	cmp	r1, #99	; 0x63
 80071b0:	d036      	beq.n	8007220 <_printf_i+0x90>
 80071b2:	d80a      	bhi.n	80071ca <_printf_i+0x3a>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	f000 80b9 	beq.w	800732c <_printf_i+0x19c>
 80071ba:	2958      	cmp	r1, #88	; 0x58
 80071bc:	f000 8083 	beq.w	80072c6 <_printf_i+0x136>
 80071c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071c8:	e032      	b.n	8007230 <_printf_i+0xa0>
 80071ca:	2964      	cmp	r1, #100	; 0x64
 80071cc:	d001      	beq.n	80071d2 <_printf_i+0x42>
 80071ce:	2969      	cmp	r1, #105	; 0x69
 80071d0:	d1f6      	bne.n	80071c0 <_printf_i+0x30>
 80071d2:	6820      	ldr	r0, [r4, #0]
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	0605      	lsls	r5, r0, #24
 80071d8:	f103 0104 	add.w	r1, r3, #4
 80071dc:	d52a      	bpl.n	8007234 <_printf_i+0xa4>
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da03      	bge.n	80071ee <_printf_i+0x5e>
 80071e6:	222d      	movs	r2, #45	; 0x2d
 80071e8:	425b      	negs	r3, r3
 80071ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071ee:	486f      	ldr	r0, [pc, #444]	; (80073ac <_printf_i+0x21c>)
 80071f0:	220a      	movs	r2, #10
 80071f2:	e039      	b.n	8007268 <_printf_i+0xd8>
 80071f4:	2973      	cmp	r1, #115	; 0x73
 80071f6:	f000 809d 	beq.w	8007334 <_printf_i+0x1a4>
 80071fa:	d808      	bhi.n	800720e <_printf_i+0x7e>
 80071fc:	296f      	cmp	r1, #111	; 0x6f
 80071fe:	d020      	beq.n	8007242 <_printf_i+0xb2>
 8007200:	2970      	cmp	r1, #112	; 0x70
 8007202:	d1dd      	bne.n	80071c0 <_printf_i+0x30>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	f043 0320 	orr.w	r3, r3, #32
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	e003      	b.n	8007216 <_printf_i+0x86>
 800720e:	2975      	cmp	r1, #117	; 0x75
 8007210:	d017      	beq.n	8007242 <_printf_i+0xb2>
 8007212:	2978      	cmp	r1, #120	; 0x78
 8007214:	d1d4      	bne.n	80071c0 <_printf_i+0x30>
 8007216:	2378      	movs	r3, #120	; 0x78
 8007218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800721c:	4864      	ldr	r0, [pc, #400]	; (80073b0 <_printf_i+0x220>)
 800721e:	e055      	b.n	80072cc <_printf_i+0x13c>
 8007220:	6813      	ldr	r3, [r2, #0]
 8007222:	1d19      	adds	r1, r3, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6011      	str	r1, [r2, #0]
 8007228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800722c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007230:	2301      	movs	r3, #1
 8007232:	e08c      	b.n	800734e <_printf_i+0x1be>
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6011      	str	r1, [r2, #0]
 8007238:	f010 0f40 	tst.w	r0, #64	; 0x40
 800723c:	bf18      	it	ne
 800723e:	b21b      	sxthne	r3, r3
 8007240:	e7cf      	b.n	80071e2 <_printf_i+0x52>
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	6825      	ldr	r5, [r4, #0]
 8007246:	1d18      	adds	r0, r3, #4
 8007248:	6010      	str	r0, [r2, #0]
 800724a:	0628      	lsls	r0, r5, #24
 800724c:	d501      	bpl.n	8007252 <_printf_i+0xc2>
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	e002      	b.n	8007258 <_printf_i+0xc8>
 8007252:	0668      	lsls	r0, r5, #25
 8007254:	d5fb      	bpl.n	800724e <_printf_i+0xbe>
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	4854      	ldr	r0, [pc, #336]	; (80073ac <_printf_i+0x21c>)
 800725a:	296f      	cmp	r1, #111	; 0x6f
 800725c:	bf14      	ite	ne
 800725e:	220a      	movne	r2, #10
 8007260:	2208      	moveq	r2, #8
 8007262:	2100      	movs	r1, #0
 8007264:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007268:	6865      	ldr	r5, [r4, #4]
 800726a:	60a5      	str	r5, [r4, #8]
 800726c:	2d00      	cmp	r5, #0
 800726e:	f2c0 8095 	blt.w	800739c <_printf_i+0x20c>
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	f021 0104 	bic.w	r1, r1, #4
 8007278:	6021      	str	r1, [r4, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d13d      	bne.n	80072fa <_printf_i+0x16a>
 800727e:	2d00      	cmp	r5, #0
 8007280:	f040 808e 	bne.w	80073a0 <_printf_i+0x210>
 8007284:	4665      	mov	r5, ip
 8007286:	2a08      	cmp	r2, #8
 8007288:	d10b      	bne.n	80072a2 <_printf_i+0x112>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	07db      	lsls	r3, r3, #31
 800728e:	d508      	bpl.n	80072a2 <_printf_i+0x112>
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	bfde      	ittt	le
 8007298:	2330      	movle	r3, #48	; 0x30
 800729a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800729e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072a2:	ebac 0305 	sub.w	r3, ip, r5
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	f8cd 8000 	str.w	r8, [sp]
 80072ac:	463b      	mov	r3, r7
 80072ae:	aa03      	add	r2, sp, #12
 80072b0:	4621      	mov	r1, r4
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff fef6 	bl	80070a4 <_printf_common>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d14d      	bne.n	8007358 <_printf_i+0x1c8>
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	b005      	add	sp, #20
 80072c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c6:	4839      	ldr	r0, [pc, #228]	; (80073ac <_printf_i+0x21c>)
 80072c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	6821      	ldr	r1, [r4, #0]
 80072d0:	1d1d      	adds	r5, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6015      	str	r5, [r2, #0]
 80072d6:	060a      	lsls	r2, r1, #24
 80072d8:	d50b      	bpl.n	80072f2 <_printf_i+0x162>
 80072da:	07ca      	lsls	r2, r1, #31
 80072dc:	bf44      	itt	mi
 80072de:	f041 0120 	orrmi.w	r1, r1, #32
 80072e2:	6021      	strmi	r1, [r4, #0]
 80072e4:	b91b      	cbnz	r3, 80072ee <_printf_i+0x15e>
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	f022 0220 	bic.w	r2, r2, #32
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	2210      	movs	r2, #16
 80072f0:	e7b7      	b.n	8007262 <_printf_i+0xd2>
 80072f2:	064d      	lsls	r5, r1, #25
 80072f4:	bf48      	it	mi
 80072f6:	b29b      	uxthmi	r3, r3
 80072f8:	e7ef      	b.n	80072da <_printf_i+0x14a>
 80072fa:	4665      	mov	r5, ip
 80072fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007300:	fb02 3311 	mls	r3, r2, r1, r3
 8007304:	5cc3      	ldrb	r3, [r0, r3]
 8007306:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800730a:	460b      	mov	r3, r1
 800730c:	2900      	cmp	r1, #0
 800730e:	d1f5      	bne.n	80072fc <_printf_i+0x16c>
 8007310:	e7b9      	b.n	8007286 <_printf_i+0xf6>
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	6825      	ldr	r5, [r4, #0]
 8007316:	6961      	ldr	r1, [r4, #20]
 8007318:	1d18      	adds	r0, r3, #4
 800731a:	6010      	str	r0, [r2, #0]
 800731c:	0628      	lsls	r0, r5, #24
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	d501      	bpl.n	8007326 <_printf_i+0x196>
 8007322:	6019      	str	r1, [r3, #0]
 8007324:	e002      	b.n	800732c <_printf_i+0x19c>
 8007326:	066a      	lsls	r2, r5, #25
 8007328:	d5fb      	bpl.n	8007322 <_printf_i+0x192>
 800732a:	8019      	strh	r1, [r3, #0]
 800732c:	2300      	movs	r3, #0
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	4665      	mov	r5, ip
 8007332:	e7b9      	b.n	80072a8 <_printf_i+0x118>
 8007334:	6813      	ldr	r3, [r2, #0]
 8007336:	1d19      	adds	r1, r3, #4
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	681d      	ldr	r5, [r3, #0]
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	2100      	movs	r1, #0
 8007340:	4628      	mov	r0, r5
 8007342:	f7f8 ff6d 	bl	8000220 <memchr>
 8007346:	b108      	cbz	r0, 800734c <_printf_i+0x1bc>
 8007348:	1b40      	subs	r0, r0, r5
 800734a:	6060      	str	r0, [r4, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	2300      	movs	r3, #0
 8007352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007356:	e7a7      	b.n	80072a8 <_printf_i+0x118>
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	462a      	mov	r2, r5
 800735c:	4639      	mov	r1, r7
 800735e:	4630      	mov	r0, r6
 8007360:	47c0      	blx	r8
 8007362:	3001      	adds	r0, #1
 8007364:	d0aa      	beq.n	80072bc <_printf_i+0x12c>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	079b      	lsls	r3, r3, #30
 800736a:	d413      	bmi.n	8007394 <_printf_i+0x204>
 800736c:	68e0      	ldr	r0, [r4, #12]
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	4298      	cmp	r0, r3
 8007372:	bfb8      	it	lt
 8007374:	4618      	movlt	r0, r3
 8007376:	e7a3      	b.n	80072c0 <_printf_i+0x130>
 8007378:	2301      	movs	r3, #1
 800737a:	464a      	mov	r2, r9
 800737c:	4639      	mov	r1, r7
 800737e:	4630      	mov	r0, r6
 8007380:	47c0      	blx	r8
 8007382:	3001      	adds	r0, #1
 8007384:	d09a      	beq.n	80072bc <_printf_i+0x12c>
 8007386:	3501      	adds	r5, #1
 8007388:	68e3      	ldr	r3, [r4, #12]
 800738a:	9a03      	ldr	r2, [sp, #12]
 800738c:	1a9b      	subs	r3, r3, r2
 800738e:	42ab      	cmp	r3, r5
 8007390:	dcf2      	bgt.n	8007378 <_printf_i+0x1e8>
 8007392:	e7eb      	b.n	800736c <_printf_i+0x1dc>
 8007394:	2500      	movs	r5, #0
 8007396:	f104 0919 	add.w	r9, r4, #25
 800739a:	e7f5      	b.n	8007388 <_printf_i+0x1f8>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1ac      	bne.n	80072fa <_printf_i+0x16a>
 80073a0:	7803      	ldrb	r3, [r0, #0]
 80073a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073aa:	e76c      	b.n	8007286 <_printf_i+0xf6>
 80073ac:	0800786b 	.word	0x0800786b
 80073b0:	0800787c 	.word	0x0800787c

080073b4 <memcpy>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	1e43      	subs	r3, r0, #1
 80073b8:	440a      	add	r2, r1
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d100      	bne.n	80073c0 <memcpy+0xc>
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c8:	e7f7      	b.n	80073ba <memcpy+0x6>

080073ca <memmove>:
 80073ca:	4288      	cmp	r0, r1
 80073cc:	b510      	push	{r4, lr}
 80073ce:	eb01 0302 	add.w	r3, r1, r2
 80073d2:	d807      	bhi.n	80073e4 <memmove+0x1a>
 80073d4:	1e42      	subs	r2, r0, #1
 80073d6:	4299      	cmp	r1, r3
 80073d8:	d00a      	beq.n	80073f0 <memmove+0x26>
 80073da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073e2:	e7f8      	b.n	80073d6 <memmove+0xc>
 80073e4:	4283      	cmp	r3, r0
 80073e6:	d9f5      	bls.n	80073d4 <memmove+0xa>
 80073e8:	1881      	adds	r1, r0, r2
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	42d3      	cmn	r3, r2
 80073ee:	d100      	bne.n	80073f2 <memmove+0x28>
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073fa:	e7f7      	b.n	80073ec <memmove+0x22>

080073fc <_free_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4605      	mov	r5, r0
 8007400:	2900      	cmp	r1, #0
 8007402:	d045      	beq.n	8007490 <_free_r+0x94>
 8007404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007408:	1f0c      	subs	r4, r1, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfb8      	it	lt
 800740e:	18e4      	addlt	r4, r4, r3
 8007410:	f000 f8d2 	bl	80075b8 <__malloc_lock>
 8007414:	4a1f      	ldr	r2, [pc, #124]	; (8007494 <_free_r+0x98>)
 8007416:	6813      	ldr	r3, [r2, #0]
 8007418:	4610      	mov	r0, r2
 800741a:	b933      	cbnz	r3, 800742a <_free_r+0x2e>
 800741c:	6063      	str	r3, [r4, #4]
 800741e:	6014      	str	r4, [r2, #0]
 8007420:	4628      	mov	r0, r5
 8007422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007426:	f000 b8c8 	b.w	80075ba <__malloc_unlock>
 800742a:	42a3      	cmp	r3, r4
 800742c:	d90c      	bls.n	8007448 <_free_r+0x4c>
 800742e:	6821      	ldr	r1, [r4, #0]
 8007430:	1862      	adds	r2, r4, r1
 8007432:	4293      	cmp	r3, r2
 8007434:	bf04      	itt	eq
 8007436:	681a      	ldreq	r2, [r3, #0]
 8007438:	685b      	ldreq	r3, [r3, #4]
 800743a:	6063      	str	r3, [r4, #4]
 800743c:	bf04      	itt	eq
 800743e:	1852      	addeq	r2, r2, r1
 8007440:	6022      	streq	r2, [r4, #0]
 8007442:	6004      	str	r4, [r0, #0]
 8007444:	e7ec      	b.n	8007420 <_free_r+0x24>
 8007446:	4613      	mov	r3, r2
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	b10a      	cbz	r2, 8007450 <_free_r+0x54>
 800744c:	42a2      	cmp	r2, r4
 800744e:	d9fa      	bls.n	8007446 <_free_r+0x4a>
 8007450:	6819      	ldr	r1, [r3, #0]
 8007452:	1858      	adds	r0, r3, r1
 8007454:	42a0      	cmp	r0, r4
 8007456:	d10b      	bne.n	8007470 <_free_r+0x74>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	4401      	add	r1, r0
 800745c:	1858      	adds	r0, r3, r1
 800745e:	4282      	cmp	r2, r0
 8007460:	6019      	str	r1, [r3, #0]
 8007462:	d1dd      	bne.n	8007420 <_free_r+0x24>
 8007464:	6810      	ldr	r0, [r2, #0]
 8007466:	6852      	ldr	r2, [r2, #4]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	4401      	add	r1, r0
 800746c:	6019      	str	r1, [r3, #0]
 800746e:	e7d7      	b.n	8007420 <_free_r+0x24>
 8007470:	d902      	bls.n	8007478 <_free_r+0x7c>
 8007472:	230c      	movs	r3, #12
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	e7d3      	b.n	8007420 <_free_r+0x24>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	1821      	adds	r1, r4, r0
 800747c:	428a      	cmp	r2, r1
 800747e:	bf04      	itt	eq
 8007480:	6811      	ldreq	r1, [r2, #0]
 8007482:	6852      	ldreq	r2, [r2, #4]
 8007484:	6062      	str	r2, [r4, #4]
 8007486:	bf04      	itt	eq
 8007488:	1809      	addeq	r1, r1, r0
 800748a:	6021      	streq	r1, [r4, #0]
 800748c:	605c      	str	r4, [r3, #4]
 800748e:	e7c7      	b.n	8007420 <_free_r+0x24>
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	200007a8 	.word	0x200007a8

08007498 <_malloc_r>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	1ccd      	adds	r5, r1, #3
 800749c:	f025 0503 	bic.w	r5, r5, #3
 80074a0:	3508      	adds	r5, #8
 80074a2:	2d0c      	cmp	r5, #12
 80074a4:	bf38      	it	cc
 80074a6:	250c      	movcc	r5, #12
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	4606      	mov	r6, r0
 80074ac:	db01      	blt.n	80074b2 <_malloc_r+0x1a>
 80074ae:	42a9      	cmp	r1, r5
 80074b0:	d903      	bls.n	80074ba <_malloc_r+0x22>
 80074b2:	230c      	movs	r3, #12
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	2000      	movs	r0, #0
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	f000 f87d 	bl	80075b8 <__malloc_lock>
 80074be:	4a21      	ldr	r2, [pc, #132]	; (8007544 <_malloc_r+0xac>)
 80074c0:	6814      	ldr	r4, [r2, #0]
 80074c2:	4621      	mov	r1, r4
 80074c4:	b991      	cbnz	r1, 80074ec <_malloc_r+0x54>
 80074c6:	4c20      	ldr	r4, [pc, #128]	; (8007548 <_malloc_r+0xb0>)
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	b91b      	cbnz	r3, 80074d4 <_malloc_r+0x3c>
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f863 	bl	8007598 <_sbrk_r>
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	4629      	mov	r1, r5
 80074d6:	4630      	mov	r0, r6
 80074d8:	f000 f85e 	bl	8007598 <_sbrk_r>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d124      	bne.n	800752a <_malloc_r+0x92>
 80074e0:	230c      	movs	r3, #12
 80074e2:	6033      	str	r3, [r6, #0]
 80074e4:	4630      	mov	r0, r6
 80074e6:	f000 f868 	bl	80075ba <__malloc_unlock>
 80074ea:	e7e4      	b.n	80074b6 <_malloc_r+0x1e>
 80074ec:	680b      	ldr	r3, [r1, #0]
 80074ee:	1b5b      	subs	r3, r3, r5
 80074f0:	d418      	bmi.n	8007524 <_malloc_r+0x8c>
 80074f2:	2b0b      	cmp	r3, #11
 80074f4:	d90f      	bls.n	8007516 <_malloc_r+0x7e>
 80074f6:	600b      	str	r3, [r1, #0]
 80074f8:	50cd      	str	r5, [r1, r3]
 80074fa:	18cc      	adds	r4, r1, r3
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 f85c 	bl	80075ba <__malloc_unlock>
 8007502:	f104 000b 	add.w	r0, r4, #11
 8007506:	1d23      	adds	r3, r4, #4
 8007508:	f020 0007 	bic.w	r0, r0, #7
 800750c:	1ac3      	subs	r3, r0, r3
 800750e:	d0d3      	beq.n	80074b8 <_malloc_r+0x20>
 8007510:	425a      	negs	r2, r3
 8007512:	50e2      	str	r2, [r4, r3]
 8007514:	e7d0      	b.n	80074b8 <_malloc_r+0x20>
 8007516:	428c      	cmp	r4, r1
 8007518:	684b      	ldr	r3, [r1, #4]
 800751a:	bf16      	itet	ne
 800751c:	6063      	strne	r3, [r4, #4]
 800751e:	6013      	streq	r3, [r2, #0]
 8007520:	460c      	movne	r4, r1
 8007522:	e7eb      	b.n	80074fc <_malloc_r+0x64>
 8007524:	460c      	mov	r4, r1
 8007526:	6849      	ldr	r1, [r1, #4]
 8007528:	e7cc      	b.n	80074c4 <_malloc_r+0x2c>
 800752a:	1cc4      	adds	r4, r0, #3
 800752c:	f024 0403 	bic.w	r4, r4, #3
 8007530:	42a0      	cmp	r0, r4
 8007532:	d005      	beq.n	8007540 <_malloc_r+0xa8>
 8007534:	1a21      	subs	r1, r4, r0
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f82e 	bl	8007598 <_sbrk_r>
 800753c:	3001      	adds	r0, #1
 800753e:	d0cf      	beq.n	80074e0 <_malloc_r+0x48>
 8007540:	6025      	str	r5, [r4, #0]
 8007542:	e7db      	b.n	80074fc <_malloc_r+0x64>
 8007544:	200007a8 	.word	0x200007a8
 8007548:	200007ac 	.word	0x200007ac

0800754c <_realloc_r>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	4607      	mov	r7, r0
 8007550:	4614      	mov	r4, r2
 8007552:	460e      	mov	r6, r1
 8007554:	b921      	cbnz	r1, 8007560 <_realloc_r+0x14>
 8007556:	4611      	mov	r1, r2
 8007558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800755c:	f7ff bf9c 	b.w	8007498 <_malloc_r>
 8007560:	b922      	cbnz	r2, 800756c <_realloc_r+0x20>
 8007562:	f7ff ff4b 	bl	80073fc <_free_r>
 8007566:	4625      	mov	r5, r4
 8007568:	4628      	mov	r0, r5
 800756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800756c:	f000 f826 	bl	80075bc <_malloc_usable_size_r>
 8007570:	42a0      	cmp	r0, r4
 8007572:	d20f      	bcs.n	8007594 <_realloc_r+0x48>
 8007574:	4621      	mov	r1, r4
 8007576:	4638      	mov	r0, r7
 8007578:	f7ff ff8e 	bl	8007498 <_malloc_r>
 800757c:	4605      	mov	r5, r0
 800757e:	2800      	cmp	r0, #0
 8007580:	d0f2      	beq.n	8007568 <_realloc_r+0x1c>
 8007582:	4631      	mov	r1, r6
 8007584:	4622      	mov	r2, r4
 8007586:	f7ff ff15 	bl	80073b4 <memcpy>
 800758a:	4631      	mov	r1, r6
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff ff35 	bl	80073fc <_free_r>
 8007592:	e7e9      	b.n	8007568 <_realloc_r+0x1c>
 8007594:	4635      	mov	r5, r6
 8007596:	e7e7      	b.n	8007568 <_realloc_r+0x1c>

08007598 <_sbrk_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4c06      	ldr	r4, [pc, #24]	; (80075b4 <_sbrk_r+0x1c>)
 800759c:	2300      	movs	r3, #0
 800759e:	4605      	mov	r5, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	f7fa ffee 	bl	8002584 <_sbrk>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_sbrk_r+0x1a>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_sbrk_r+0x1a>
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000b10 	.word	0x20000b10

080075b8 <__malloc_lock>:
 80075b8:	4770      	bx	lr

080075ba <__malloc_unlock>:
 80075ba:	4770      	bx	lr

080075bc <_malloc_usable_size_r>:
 80075bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c0:	1f18      	subs	r0, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bfbc      	itt	lt
 80075c6:	580b      	ldrlt	r3, [r1, r0]
 80075c8:	18c0      	addlt	r0, r0, r3
 80075ca:	4770      	bx	lr

080075cc <_init>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr

080075d8 <_fini>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr
