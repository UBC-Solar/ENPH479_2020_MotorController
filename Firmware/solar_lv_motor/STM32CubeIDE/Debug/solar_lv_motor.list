
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006044  08006044  00020574  2**0
                  CONTENTS
  4 .ARM          00000008  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800604c  0800604c  00020574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000574  20000000  08006054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000574  080065c8  00020574  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  080065c8  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001f27c  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0003a4f3  00000000  00000000  0003f820  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000060b9  00000000  00000000  00079d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001478  00000000  00000000  0007fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000eb321  00000000  00000000  00081248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002750  00000000  00000000  0016c570  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00029b06  00000000  00000000  0016ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  001987c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b84  00000000  00000000  001988c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00013b67  00000000  00000000  0019c444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000574 	.word	0x20000574
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005dbc 	.word	0x08005dbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000578 	.word	0x20000578
 8000200:	08005dbc 	.word	0x08005dbc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800050a:	e003      	b.n	8000514 <LoopCopyDataInit>

0800050c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000512:	3104      	adds	r1, #4

08000514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800051c:	d3f6      	bcc.n	800050c <CopyDataInit>
  ldr  r2, =_sbss
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000520:	e002      	b.n	8000528 <LoopFillZerobss>

08000522 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000522:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000524:	f842 3b04 	str.w	r3, [r2], #4

08000528 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800052c:	d3f9      	bcc.n	8000522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052e:	f002 fa7f 	bl	8002a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f005 fc17 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f000 f865 	bl	8000604 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000540:	08006054 	.word	0x08006054
  ldr  r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000548:	20000574 	.word	0x20000574
  ldr  r2, =_sbss
 800054c:	20000574 	.word	0x20000574
  ldr  r3, = _ebss
 8000550:	200008f0 	.word	0x200008f0

08000554 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <BusFault_Handler>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2300      	movs	r3, #0
{
 800055c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8000562:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800056a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4923      	ldr	r1, [pc, #140]	; (80005fc <SystemClock_Config+0xa4>)
 8000570:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800057c:	6408      	str	r0, [r1, #64]	; 0x40
 800057e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000580:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	6813      	ldr	r3, [r2, #0]
 800058c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	6813      	ldr	r3, [r2, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a6:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005ac:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	9d01      	ldr	r5, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b8:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ba:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005be:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f002 ffa8 	bl	8003514 <HAL_RCC_OscConfig>
 80005c4:	b108      	cbz	r0, 80005ca <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c6:	b672      	cpsid	i
 80005c8:	e7fe      	b.n	80005c8 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ca:	f002 fe49 	bl	8003260 <HAL_PWREx_EnableOverDrive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b108      	cbz	r0, 80005d6 <SystemClock_Config+0x7e>
 80005d2:	b672      	cpsid	i
 80005d4:	e7fe      	b.n	80005d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	a802      	add	r0, sp, #8
 80005e2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f002 fe75 	bl	80032dc <HAL_RCC_ClockConfig>
 80005f2:	b108      	cbz	r0, 80005f8 <SystemClock_Config+0xa0>
 80005f4:	b672      	cpsid	i
 80005f6:	e7fe      	b.n	80005f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 80005f8:	b014      	add	sp, #80	; 0x50
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <main>:
{
 8000604:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000608:	b09d      	sub	sp, #116	; 0x74
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	f04f 0800 	mov.w	r8, #0
  HAL_Init();
 800060e:	f002 fa41 	bl	8002a94 <HAL_Init>
  SystemClock_Config();
 8000612:	f7ff ffa1 	bl	8000558 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	4ba8      	ldr	r3, [pc, #672]	; (80008b8 <main+0x2b4>)
 8000618:	f8cd 8008 	str.w	r8, [sp, #8]
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 800061e:	4ca7      	ldr	r4, [pc, #668]	; (80008bc <main+0x2b8>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80008d4 <main+0x2d0>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000630:	9202      	str	r2, [sp, #8]
 8000632:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	f8cd 800c 	str.w	r8, [sp, #12]
 8000638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063a:	f042 0201 	orr.w	r2, r2, #1
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f002 0201 	and.w	r2, r2, #1
 8000646:	9203      	str	r2, [sp, #12]
 8000648:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	f8cd 8010 	str.w	r8, [sp, #16]
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	f042 0204 	orr.w	r2, r2, #4
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	f002 0204 	and.w	r2, r2, #4
 800065c:	9204      	str	r2, [sp, #16]
 800065e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	f8cd 8014 	str.w	r8, [sp, #20]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0202 	orr.w	r2, r2, #2
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800066e:	2620      	movs	r6, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	9305      	str	r3, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000676:	4641      	mov	r1, r8
 8000678:	a814      	add	r0, sp, #80	; 0x50
 800067a:	4632      	mov	r2, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	9b05      	ldr	r3, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800067e:	f005 fb95 	bl	8005dac <memset>
  hadc1.Instance = ADC1;
 8000682:	4b8f      	ldr	r3, [pc, #572]	; (80008c0 <main+0x2bc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000684:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hadc1.Init.ScanConvMode = ENABLE;
 8000688:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800068a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800068e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000694:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
 8000698:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	f884 8018 	strb.w	r8, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	f884 8020 	strb.w	r8, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ac:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b0:	e9c4 3b00 	strd	r3, fp, [r4]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b4:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 80006b6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ba:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006be:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	f002 fa14 	bl	8002aec <HAL_ADC_Init>
 80006c4:	b108      	cbz	r0, 80006ca <main+0xc6>
 80006c6:	b672      	cpsid	i
 80006c8:	e7fe      	b.n	80006c8 <main+0xc4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006ca:	2201      	movs	r2, #1
 80006cc:	2301      	movs	r3, #1
 80006ce:	4684      	mov	ip, r0
 80006d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006d4:	f04f 0800 	mov.w	r8, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006d8:	2300      	movs	r3, #0
 80006da:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006dc:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e0:	a914      	add	r1, sp, #80	; 0x50
 80006e2:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006e4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006e8:	9518      	str	r5, [sp, #96]	; 0x60
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006ea:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006ee:	f88d c064 	strb.w	ip, [sp, #100]	; 0x64
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006f2:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006f6:	f002 fb63 	bl	8002dc0 <HAL_ADCEx_InjectedConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b108      	cbz	r0, 8000702 <main+0xfe>
 80006fe:	b672      	cpsid	i
 8000700:	e7fe      	b.n	8000700 <main+0xfc>
  sConfig.Channel = ADC_CHANNEL_15;
 8000702:	220f      	movs	r2, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	4620      	mov	r0, r4
 8000706:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000708:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 800070c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_15;
 800070e:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	f002 fa9e 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8000714:	b108      	cbz	r0, 800071a <main+0x116>
 8000716:	b672      	cpsid	i
 8000718:	e7fe      	b.n	8000718 <main+0x114>
  hadc2.Instance = ADC2;
 800071a:	4c6a      	ldr	r4, [pc, #424]	; (80008c4 <main+0x2c0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800071c:	9001      	str	r0, [sp, #4]
 800071e:	4601      	mov	r1, r0
 8000720:	4632      	mov	r2, r6
 8000722:	a814      	add	r0, sp, #80	; 0x50
 8000724:	f005 fb42 	bl	8005dac <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000728:	9b01      	ldr	r3, [sp, #4]
  hadc2.Instance = ADC2;
 800072a:	4a67      	ldr	r2, [pc, #412]	; (80008c8 <main+0x2c4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800072c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800072e:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000730:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8000734:	9310      	str	r3, [sp, #64]	; 0x40
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000736:	e9c4 b301 	strd	fp, r3, [r4, #4]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800073a:	7623      	strb	r3, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800073c:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	e9c4 a30a 	strd	sl, r3, [r4, #40]	; 0x28
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000744:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.ScanConvMode = ENABLE;
 8000748:	6125      	str	r5, [r4, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800074a:	60e7      	str	r7, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 800074c:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	6165      	str	r5, [r4, #20]
  hadc2.Instance = ADC2;
 8000750:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000752:	f002 f9cb 	bl	8002aec <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	b108      	cbz	r0, 800075e <main+0x15a>
 800075a:	b672      	cpsid	i
 800075c:	e7fe      	b.n	800075c <main+0x158>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800075e:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000762:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000766:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800076a:	2204      	movs	r2, #4
 800076c:	2301      	movs	r3, #1
 800076e:	2701      	movs	r7, #1
 8000770:	f04f 0800 	mov.w	r8, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000774:	a914      	add	r1, sp, #80	; 0x50
 8000776:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000778:	9518      	str	r5, [sp, #96]	; 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800077a:	e9cd 7816 	strd	r7, r8, [sp, #88]	; 0x58
 800077e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000782:	f002 fb1d 	bl	8002dc0 <HAL_ADCEx_InjectedConfigChannel>
 8000786:	b108      	cbz	r0, 800078c <main+0x188>
 8000788:	b672      	cpsid	i
 800078a:	e7fe      	b.n	800078a <main+0x186>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800078c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800078e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000790:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000792:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8000796:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	f002 fa5a 	bl	8002c50 <HAL_ADC_ConfigChannel>
 800079c:	4604      	mov	r4, r0
 800079e:	b108      	cbz	r0, 80007a4 <main+0x1a0>
 80007a0:	b672      	cpsid	i
 80007a2:	e7fe      	b.n	80007a2 <main+0x19e>
  htim1.Instance = TIM1;
 80007a4:	4f49      	ldr	r7, [pc, #292]	; (80008cc <main+0x2c8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007a6:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a8:	4601      	mov	r1, r0
 80007aa:	4632      	mov	r2, r6
 80007ac:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80007b4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80007b8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80007bc:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80007c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c8:	f005 faf0 	bl	8005dac <memset>
  htim1.Instance = TIM1;
 80007cc:	4940      	ldr	r1, [pc, #256]	; (80008d0 <main+0x2cc>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80007ce:	607c      	str	r4, [r7, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80007d0:	f241 1294 	movw	r2, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007d4:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007da:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80007dc:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	61bc      	str	r4, [r7, #24]
  htim1.Instance = TIM1;
 80007e0:	6039      	str	r1, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007e2:	e9c7 2303 	strd	r2, r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e6:	f003 f869 	bl	80038bc <HAL_TIM_Base_Init>
 80007ea:	b108      	cbz	r0, 80007f0 <main+0x1ec>
 80007ec:	b672      	cpsid	i
 80007ee:	e7fe      	b.n	80007ee <main+0x1ea>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f0:	4638      	mov	r0, r7
 80007f2:	f003 f8e9 	bl	80039c8 <HAL_TIM_PWM_Init>
 80007f6:	b108      	cbz	r0, 80007fc <main+0x1f8>
 80007f8:	b672      	cpsid	i
 80007fa:	e7fe      	b.n	80007fa <main+0x1f6>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80007fc:	2310      	movs	r3, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007fe:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000800:	a908      	add	r1, sp, #32
 8000802:	4638      	mov	r0, r7
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000804:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000806:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000808:	f003 fb12 	bl	8003e30 <HAL_TIM_SlaveConfigSynchro>
 800080c:	4603      	mov	r3, r0
 800080e:	b108      	cbz	r0, 8000814 <main+0x210>
 8000810:	b672      	cpsid	i
 8000812:	e7fe      	b.n	8000812 <main+0x20e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	a906      	add	r1, sp, #24
 8000816:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	e9cd 6306 	strd	r6, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	f003 fcbe 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	b108      	cbz	r0, 8000826 <main+0x222>
 8000822:	b672      	cpsid	i
 8000824:	e7fe      	b.n	8000824 <main+0x220>
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000828:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082a:	461a      	mov	r2, r3
 800082c:	a90d      	add	r1, sp, #52	; 0x34
 800082e:	4827      	ldr	r0, [pc, #156]	; (80008cc <main+0x2c8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000836:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	f003 f947 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8000842:	b108      	cbz	r0, 8000848 <main+0x244>
 8000844:	b672      	cpsid	i
 8000846:	e7fe      	b.n	8000846 <main+0x242>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000848:	2204      	movs	r2, #4
 800084a:	a90d      	add	r1, sp, #52	; 0x34
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <main+0x2c8>)
 800084e:	f003 f93f 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8000852:	b108      	cbz	r0, 8000858 <main+0x254>
 8000854:	b672      	cpsid	i
 8000856:	e7fe      	b.n	8000856 <main+0x252>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000858:	2208      	movs	r2, #8
 800085a:	a90d      	add	r1, sp, #52	; 0x34
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <main+0x2c8>)
 800085e:	f003 f937 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	b108      	cbz	r0, 8000868 <main+0x264>
 8000864:	b672      	cpsid	i
 8000866:	e7fe      	b.n	8000866 <main+0x262>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000868:	2070      	movs	r0, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800086a:	f241 1393 	movw	r3, #4499	; 0x1193
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800086e:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000870:	220c      	movs	r2, #12
 8000872:	a90d      	add	r1, sp, #52	; 0x34
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <main+0x2c8>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000876:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000878:	f003 f92a 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 800087c:	b108      	cbz	r0, 8000882 <main+0x27e>
 800087e:	b672      	cpsid	i
 8000880:	e7fe      	b.n	8000880 <main+0x27c>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000886:	f44f 7180 	mov.w	r1, #256	; 0x100
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800088a:	f44f 6400 	mov.w	r4, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800088e:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000890:	2248      	movs	r2, #72	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000892:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000894:	9116      	str	r1, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800089a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089e:	a914      	add	r1, sp, #80	; 0x50
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <main+0x2c8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008a2:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80008a4:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a6:	e9cd 6318 	strd	r6, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008aa:	f003 fcbd 	bl	8004228 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ae:	4604      	mov	r4, r0
 80008b0:	b190      	cbz	r0, 80008d8 <main+0x2d4>
 80008b2:	b672      	cpsid	i
 80008b4:	e7fe      	b.n	80008b4 <main+0x2b0>
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	20000608 	.word	0x20000608
 80008c0:	40012000 	.word	0x40012000
 80008c4:	200005c0 	.word	0x200005c0
 80008c8:	40012100 	.word	0x40012100
 80008cc:	20000650 	.word	0x20000650
 80008d0:	40010000 	.word	0x40010000
 80008d4:	0f000001 	.word	0x0f000001
  htim2.Instance = TIM2;
 80008d8:	4d3d      	ldr	r5, [pc, #244]	; (80009d0 <main+0x3cc>)
  HAL_TIM_MspPostInit(&htim1);
 80008da:	483e      	ldr	r0, [pc, #248]	; (80009d4 <main+0x3d0>)
 80008dc:	f001 fb6c 	bl	8001fb8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80008e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80008e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e8:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80008ee:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80008f2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80008f6:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fa:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8000906:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000908:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090a:	f002 ffd7 	bl	80038bc <HAL_TIM_Base_Init>
 800090e:	b108      	cbz	r0, 8000914 <main+0x310>
 8000910:	b672      	cpsid	i
 8000912:	e7fe      	b.n	8000912 <main+0x30e>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000914:	a90d      	add	r1, sp, #52	; 0x34
 8000916:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091a:	f003 f9e3 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	b108      	cbz	r0, 8000926 <main+0x322>
 8000922:	b672      	cpsid	i
 8000924:	e7fe      	b.n	8000924 <main+0x320>
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000926:	a914      	add	r1, sp, #80	; 0x50
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000928:	240c      	movs	r4, #12
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800092a:	4628      	mov	r0, r5
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800092c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000930:	e9cd 4316 	strd	r4, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000934:	f003 fbd8 	bl	80040e8 <HAL_TIMEx_HallSensor_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	b108      	cbz	r0, 8000940 <main+0x33c>
 800093c:	b672      	cpsid	i
 800093e:	e7fe      	b.n	800093e <main+0x33a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000940:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	a908      	add	r1, sp, #32
 8000944:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000946:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094a:	f003 fc27 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4602      	mov	r2, r0
 8000950:	b108      	cbz	r0, 8000956 <main+0x352>
 8000952:	b672      	cpsid	i
 8000954:	e7fe      	b.n	8000954 <main+0x350>
  huart2.Instance = USART2;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <main+0x3d4>)
 8000958:	4d20      	ldr	r5, [pc, #128]	; (80009dc <main+0x3d8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 115200;
 800095c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000960:	4618      	mov	r0, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	e9c3 2203 	strd	r2, r2, [r3, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	e9c3 4205 	strd	r4, r2, [r3, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096a:	61da      	str	r2, [r3, #28]
  huart2.Init.BaudRate = 115200;
 800096c:	e9c3 5100 	strd	r5, r1, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000970:	f003 fc84 	bl	800427c <HAL_UART_Init>
 8000974:	b108      	cbz	r0, 800097a <main+0x376>
 8000976:	b672      	cpsid	i
 8000978:	e7fe      	b.n	8000978 <main+0x374>
  MX_MotorControl_Init();
 800097a:	f001 f8b7 	bl	8001aec <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	2012      	movs	r0, #18
 8000984:	f002 fb12 	bl	8002fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000988:	2012      	movs	r0, #18
 800098a:	f002 fb45 	bl	8003018 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	4611      	mov	r1, r2
 8000992:	2019      	movs	r0, #25
 8000994:	f002 fb0a 	bl	8002fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000998:	2019      	movs	r0, #25
 800099a:	f002 fb3d 	bl	8003018 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	2104      	movs	r1, #4
 80009a2:	2018      	movs	r0, #24
 80009a4:	f002 fb02 	bl	8002fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009a8:	2018      	movs	r0, #24
 80009aa:	f002 fb35 	bl	8003018 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2103      	movs	r1, #3
 80009b2:	201c      	movs	r0, #28
 80009b4:	f002 fafa 	bl	8002fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009b8:	201c      	movs	r0, #28
 80009ba:	f002 fb2d 	bl	8003018 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80009be:	2026      	movs	r0, #38	; 0x26
 80009c0:	2201      	movs	r2, #1
 80009c2:	2103      	movs	r1, #3
 80009c4:	f002 faf2 	bl	8002fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c8:	2026      	movs	r0, #38	; 0x26
 80009ca:	f002 fb25 	bl	8003018 <HAL_NVIC_EnableIRQ>
 80009ce:	e7fe      	b.n	80009ce <main+0x3ca>
 80009d0:	20000690 	.word	0x20000690
 80009d4:	20000650 	.word	0x20000650
 80009d8:	200006d0 	.word	0x200006d0
 80009dc:	40004400 	.word	0x40004400

080009e0 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80009e0:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80009e2:	2400      	movs	r4, #0
 80009e4:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80009e6:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 80009ea:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80009ec:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 80009ee:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 80009f2:	6083      	str	r3, [r0, #8]
}
 80009f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80009fc:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 80009fe:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000a00:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000a02:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a04:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000a06:	7643      	strb	r3, [r0, #25]
}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000a0c:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000a0e:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a10:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a12:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a14:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a16:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8000a18:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000a1a:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000a1c:	7643      	strb	r3, [r0, #25]
}
 8000a1e:	bc30      	pop	{r4, r5}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000a24:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a26:	2201      	movs	r2, #1
{
 8000a28:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a2a:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000a2c:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 8000a2e:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a32:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a34:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000a36:	7643      	strb	r3, [r0, #25]
}
 8000a38:	b003      	add	sp, #12
 8000a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000a40:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a42:	2103      	movs	r1, #3
{
 8000a44:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a46:	6800      	ldr	r0, [r0, #0]
 8000a48:	f004 ff8e 	bl	8005968 <STM_NextState>

  if ( RetVal == true )
 8000a4c:	b108      	cbz	r0, 8000a52 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000a52:	bd10      	pop	{r4, pc}

08000a54 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000a54:	6800      	ldr	r0, [r0, #0]
 8000a56:	2107      	movs	r1, #7
 8000a58:	f004 bf86 	b.w	8005968 <STM_NextState>

08000a5c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000a5c:	6800      	ldr	r0, [r0, #0]
 8000a5e:	f004 bff9 	b.w	8005a54 <STM_FaultAcknowledged>
 8000a62:	bf00      	nop

08000a64 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000a64:	6800      	ldr	r0, [r0, #0]
 8000a66:	2101      	movs	r1, #1
 8000a68:	f004 bf7e 	b.w	8005968 <STM_NextState>

08000a6c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000a6c:	b110      	cbz	r0, 8000a74 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000a6e:	7e03      	ldrb	r3, [r0, #24]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d000      	beq.n	8000a76 <MCI_ExecBufferedCommands+0xa>
 8000a74:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8000a76:	7b01      	ldrb	r1, [r0, #12]
 8000a78:	2902      	cmp	r1, #2
{
 8000a7a:	b510      	push	{r4, lr}
 8000a7c:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8000a7e:	d01f      	beq.n	8000ac0 <MCI_ExecBufferedCommands+0x54>
 8000a80:	2903      	cmp	r1, #3
 8000a82:	d004      	beq.n	8000a8e <MCI_ExecBufferedCommands+0x22>
 8000a84:	2901      	cmp	r1, #1
 8000a86:	d00b      	beq.n	8000aa0 <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
}
 8000a8c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000a8e:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000a90:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8000a94:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000a96:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	7623      	strb	r3, [r4, #24]
}
 8000a9e:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000aa0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000aaa:	f004 fe9d 	bl	80057e8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000aae:	8ae2      	ldrh	r2, [r4, #22]
 8000ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ab4:	6860      	ldr	r0, [r4, #4]
 8000ab6:	f004 fe9b 	bl	80057f0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d0e4      	beq.n	8000a88 <MCI_ExecBufferedCommands+0x1c>
 8000abe:	e7ec      	b.n	8000a9a <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000ac0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000aca:	f004 fe8d 	bl	80057e8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000ace:	8ae2      	ldrh	r2, [r4, #22]
 8000ad0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000ad4:	6860      	ldr	r0, [r4, #4]
 8000ad6:	f004 fe8b 	bl	80057f0 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d0d4      	beq.n	8000a88 <MCI_ExecBufferedCommands+0x1c>
 8000ade:	e7dc      	b.n	8000a9a <MCI_ExecBufferedCommands+0x2e>

08000ae0 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000ae0:	6800      	ldr	r0, [r0, #0]
 8000ae2:	f004 bfb5 	b.w	8005a50 <STM_GetState>
 8000ae6:	bf00      	nop

08000ae8 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000ae8:	7e40      	ldrb	r0, [r0, #25]
 8000aea:	4770      	bx	lr

08000aec <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000aec:	7b03      	ldrb	r3, [r0, #12]
 8000aee:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000af0:	bf0c      	ite	eq
 8000af2:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000af6:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000afc:	6840      	ldr	r0, [r0, #4]
 8000afe:	f004 bec1 	b.w	8005884 <STC_StopRamp>
 8000b02:	bf00      	nop

08000b04 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000b04:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000b06:	6840      	ldr	r0, [r0, #4]
 8000b08:	f004 fe54 	bl	80057b4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000b10:	f004 bdfa 	b.w	8005708 <SPD_GetAvrgMecSpeedUnit>

08000b14 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000b14:	6840      	ldr	r0, [r0, #4]
 8000b16:	f004 be57 	b.w	80057c8 <STC_GetMecSpeedRefUnit>
 8000b1a:	bf00      	nop

08000b1c <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000b1c:	6883      	ldr	r3, [r0, #8]
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	b283      	uxth	r3, r0
{
 8000b22:	b082      	sub	sp, #8
}
 8000b24:	f363 000f 	bfi	r0, r3, #0, #16
 8000b28:	b002      	add	sp, #8
 8000b2a:	4770      	bx	lr

08000b2c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000b2c:	6883      	ldr	r3, [r0, #8]
 8000b2e:	6858      	ldr	r0, [r3, #4]
 8000b30:	b283      	uxth	r3, r0
{
 8000b32:	b082      	sub	sp, #8
}
 8000b34:	f363 000f 	bfi	r0, r3, #0, #16
 8000b38:	b002      	add	sp, #8
 8000b3a:	4770      	bx	lr

08000b3c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000b3c:	6883      	ldr	r3, [r0, #8]
 8000b3e:	68d8      	ldr	r0, [r3, #12]
 8000b40:	b283      	uxth	r3, r0
{
 8000b42:	b082      	sub	sp, #8
}
 8000b44:	f363 000f 	bfi	r0, r3, #0, #16
 8000b48:	b002      	add	sp, #8
 8000b4a:	4770      	bx	lr

08000b4c <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000b4c:	6883      	ldr	r3, [r0, #8]
 8000b4e:	6918      	ldr	r0, [r3, #16]
 8000b50:	b283      	uxth	r3, r0
{
 8000b52:	b082      	sub	sp, #8
}
 8000b54:	f363 000f 	bfi	r0, r3, #0, #16
 8000b58:	b002      	add	sp, #8
 8000b5a:	4770      	bx	lr

08000b5c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000b5c:	6883      	ldr	r3, [r0, #8]
 8000b5e:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8000b62:	b283      	uxth	r3, r0
{
 8000b64:	b082      	sub	sp, #8
}
 8000b66:	f363 000f 	bfi	r0, r3, #0, #16
 8000b6a:	b002      	add	sp, #8
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000b70:	6883      	ldr	r3, [r0, #8]
 8000b72:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8000b76:	b283      	uxth	r3, r0
{
 8000b78:	b082      	sub	sp, #8
}
 8000b7a:	f363 000f 	bfi	r0, r3, #0, #16
 8000b7e:	b002      	add	sp, #8
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000b84:	6883      	ldr	r3, [r0, #8]
}
 8000b86:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000b8a:	4770      	bx	lr

08000b8c <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000b8c:	6883      	ldr	r3, [r0, #8]
 8000b8e:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000b90:	8299      	strh	r1, [r3, #20]
}
 8000b92:	4770      	bx	lr

08000b94 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000b94:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000b96:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000b9a:	f004 feb1 	bl	8005900 <STC_GetDefaultIqdref>
 8000b9e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000ba2:	8220      	strh	r0, [r4, #16]
 8000ba4:	8263      	strh	r3, [r4, #18]
}
 8000ba6:	bd10      	pop	{r4, pc}

08000ba8 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000ba8:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000bac:	b202      	sxth	r2, r0
 8000bae:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000bb2:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000bb6:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000bc0:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000bc2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8000bc6:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000bc8:	da04      	bge.n	8000bd4 <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000bca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000bce:	da0c      	bge.n	8000bea <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MCM_Clarke+0x48>)
 8000bd2:	e001      	b.n	8000bd8 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8000bd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8000bd8:	b292      	uxth	r2, r2
 8000bda:	2000      	movs	r0, #0
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f362 000f 	bfi	r0, r2, #0, #16
 8000be2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000bea:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8000bec:	d1f4      	bne.n	8000bd8 <MCM_Clarke+0x30>
 8000bee:	e7ef      	b.n	8000bd0 <MCM_Clarke+0x28>
 8000bf0:	ffff8001 	.word	0xffff8001

08000bf4 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000bf4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000bf8:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000bfc:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000c00:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8000c04:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c06:	d031      	beq.n	8000c6c <MCM_Trig_Functions+0x78>
 8000c08:	d921      	bls.n	8000c4e <MCM_Trig_Functions+0x5a>
 8000c0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000c0e:	d015      	beq.n	8000c3c <MCM_Trig_Functions+0x48>
 8000c10:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000c14:	d109      	bne.n	8000c2a <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c16:	b2c0      	uxtb	r0, r0
 8000c18:	491a      	ldr	r1, [pc, #104]	; (8000c84 <MCM_Trig_Functions+0x90>)
 8000c1a:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c1c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c20:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c22:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c24:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c28:	b212      	sxth	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	f362 000f 	bfi	r0, r2, #0, #16
 8000c34:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000c38:	b002      	add	sp, #8
 8000c3a:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c3c:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c3e:	43c3      	mvns	r3, r0
 8000c40:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c42:	4910      	ldr	r1, [pc, #64]	; (8000c84 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c44:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c48:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 8000c4c:	e7ed      	b.n	8000c2a <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d1eb      	bne.n	8000c2a <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c52:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c54:	43c3      	mvns	r3, r0
 8000c56:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c58:	490a      	ldr	r1, [pc, #40]	; (8000c84 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c5a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c5e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c62:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c64:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c66:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c68:	b21b      	sxth	r3, r3
      break;
 8000c6a:	e7de      	b.n	8000c2a <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	43c3      	mvns	r3, r0
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <MCM_Trig_Functions+0x90>)
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c78:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	b21b      	sxth	r3, r3
      break;
 8000c80:	e7d3      	b.n	8000c2a <MCM_Trig_Functions+0x36>
 8000c82:	bf00      	nop
 8000c84:	08005dd4 	.word	0x08005dd4

08000c88 <MCM_Park>:
{
 8000c88:	b530      	push	{r4, r5, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	b204      	sxth	r4, r0
 8000c8e:	9001      	str	r0, [sp, #4]
 8000c90:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c92:	4608      	mov	r0, r1
 8000c94:	f7ff ffae 	bl	8000bf4 <MCM_Trig_Functions>
 8000c98:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000c9a:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c9e:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000ca0:	fb05 3310 	mls	r3, r5, r0, r3
 8000ca4:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000caa:	da04      	bge.n	8000cb6 <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 8000cac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000cb0:	da1e      	bge.n	8000cf0 <MCM_Park+0x68>
    Output.q = -32767;
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <MCM_Park+0x70>)
 8000cb4:	e001      	b.n	8000cba <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8000cb6:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000cba:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000cbe:	fb04 1000 	mla	r0, r4, r0, r1
 8000cc2:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000cc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000cc8:	da04      	bge.n	8000cd4 <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 8000cca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000cce:	da0c      	bge.n	8000cea <MCM_Park+0x62>
    Output.d = -32767;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MCM_Park+0x70>)
 8000cd2:	e001      	b.n	8000cd8 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8000cd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	2000      	movs	r0, #0
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f362 000f 	bfi	r0, r2, #0, #16
 8000ce2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ce6:	b005      	add	sp, #20
 8000ce8:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000cea:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 8000cec:	d1f4      	bne.n	8000cd8 <MCM_Park+0x50>
 8000cee:	e7ef      	b.n	8000cd0 <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000cf0:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8000cf2:	d1e2      	bne.n	8000cba <MCM_Park+0x32>
 8000cf4:	e7dd      	b.n	8000cb2 <MCM_Park+0x2a>
 8000cf6:	bf00      	nop
 8000cf8:	ffff8001 	.word	0xffff8001

08000cfc <MCM_Rev_Park>:
{
 8000cfc:	b530      	push	{r4, r5, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	b204      	sxth	r4, r0
 8000d02:	1405      	asrs	r5, r0, #16
 8000d04:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d06:	4608      	mov	r0, r1
 8000d08:	f7ff ff74 	bl	8000bf4 <MCM_Trig_Functions>
 8000d0c:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000d0e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d12:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000d14:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000d18:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000d1c:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000d20:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000d24:	2000      	movs	r0, #0
 8000d26:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000d2a:	f362 000f 	bfi	r0, r2, #0, #16
 8000d2e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d32:	b005      	add	sp, #20
 8000d34:	bd30      	pop	{r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <FOC_Clear+0x68>)
 8000d40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2400      	movs	r4, #0
 8000d48:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d4a:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8000d4e:	509c      	str	r4, [r3, r2]
{
 8000d50:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d52:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000d56:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8000d58:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000d5a:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d5e:	50b4      	str	r4, [r6, r2]
 8000d60:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d62:	4810      	ldr	r0, [pc, #64]	; (8000da4 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d64:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d66:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000d68:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d6a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d6e:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d70:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d72:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000d74:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d76:	f004 fa39 	bl	80051ec <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <FOC_Clear+0x70>)
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000d82:	f004 fa33 	bl	80051ec <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <FOC_Clear+0x74>)
 8000d88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000d8c:	f004 fd14 	bl	80057b8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <FOC_Clear+0x78>)
 8000d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d9a:	f004 bc0f 	b.w	80055bc <PWMC_SwitchOffPWM>
 8000d9e:	bf00      	nop
 8000da0:	20000740 	.word	0x20000740
 8000da4:	20000734 	.word	0x20000734
 8000da8:	200007f0 	.word	0x200007f0
 8000dac:	200007f4 	.word	0x200007f4
 8000db0:	2000072c 	.word	0x2000072c

08000db4 <MCboot>:
{
 8000db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8000db8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8000f80 <MCboot+0x1cc>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000dbc:	4c5a      	ldr	r4, [pc, #360]	; (8000f28 <MCboot+0x174>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000dbe:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000f84 <MCboot+0x1d0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000dc2:	4d5a      	ldr	r5, [pc, #360]	; (8000f2c <MCboot+0x178>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000dc4:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8000f88 <MCboot+0x1d4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000dc8:	4f59      	ldr	r7, [pc, #356]	; (8000f30 <MCboot+0x17c>)
  NTC_Init(&TempSensorParamsM1);
 8000dca:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000f8c <MCboot+0x1d8>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000dce:	4e59      	ldr	r6, [pc, #356]	; (8000f34 <MCboot+0x180>)
{
 8000dd0:	b087      	sub	sp, #28
 8000dd2:	9002      	str	r0, [sp, #8]
  STM_Init(&STM[M1]);
 8000dd4:	4658      	mov	r0, fp
{
 8000dd6:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000dd8:	f004 fda6 	bl	8005928 <STM_Init>
  bMCBootCompleted = 0;
 8000ddc:	4956      	ldr	r1, [pc, #344]	; (8000f38 <MCboot+0x184>)
  pCLM[M1] = &CircleLimitationM1;
 8000dde:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <MCboot+0x188>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000de0:	4857      	ldr	r0, [pc, #348]	; (8000f40 <MCboot+0x18c>)
  pCLM[M1] = &CircleLimitationM1;
 8000de2:	4a58      	ldr	r2, [pc, #352]	; (8000f44 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000de4:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 8000de6:	2400      	movs	r4, #0
 8000de8:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000dea:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8000dec:	f003 ffa6 	bl	8004d3c <ICS_Init>
  startTimers();
 8000df0:	f004 fa82 	bl	80052f8 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000df4:	4640      	mov	r0, r8
 8000df6:	f004 f9e5 	bl	80051c4 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000dfa:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <MCboot+0x194>)
  HALL_Init (&HALL_M1);
 8000dfc:	4853      	ldr	r0, [pc, #332]	; (8000f4c <MCboot+0x198>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000dfe:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e00:	f8ca 8000 	str.w	r8, [sl]
  HALL_Init (&HALL_M1);
 8000e04:	f003 fb40 	bl	8004488 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000e08:	f8da 1000 	ldr.w	r1, [sl]
 8000e0c:	4a4f      	ldr	r2, [pc, #316]	; (8000f4c <MCboot+0x198>)
 8000e0e:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000e10:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000f90 <MCboot+0x1dc>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000e14:	f004 fcba 	bl	800578c <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000e18:	484d      	ldr	r0, [pc, #308]	; (8000f50 <MCboot+0x19c>)
 8000e1a:	f004 f9d3 	bl	80051c4 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000e1e:	484d      	ldr	r0, [pc, #308]	; (8000f54 <MCboot+0x1a0>)
 8000e20:	f004 f9d0 	bl	80051c4 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000e24:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <MCboot+0x1a4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <MCboot+0x1a8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000e28:	4849      	ldr	r0, [pc, #292]	; (8000f50 <MCboot+0x19c>)
 8000e2a:	6010      	str	r0, [r2, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <MCboot+0x1ac>)
 8000e2e:	4949      	ldr	r1, [pc, #292]	; (8000f54 <MCboot+0x1a0>)
 8000e30:	6011      	str	r1, [r2, #0]
  RVBS_Init(pBusSensorM1);
 8000e32:	4618      	mov	r0, r3
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000e34:	603b      	str	r3, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8000e36:	f004 fc0d 	bl	8005654 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e3a:	494a      	ldr	r1, [pc, #296]	; (8000f64 <MCboot+0x1b0>)
 8000e3c:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <MCboot+0x1b4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000e3e:	683a      	ldr	r2, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e40:	600b      	str	r3, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8000e42:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000e44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e48:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000e4c:	f004 f974 	bl	8005138 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e50:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MCboot+0x1b8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e52:	4847      	ldr	r0, [pc, #284]	; (8000f70 <MCboot+0x1bc>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e54:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <MCboot+0x1c0>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e56:	f8c0 9000 	str.w	r9, [r0]
  REMNG_Init(pREMNG[M1]);
 8000e5a:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e5c:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e5e:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8000e62:	f004 fc45 	bl	80056f0 <REMNG_Init>
  FOC_Clear(M1);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ff66 	bl	8000d38 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e6c:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000e70:	6828      	ldr	r0, [r5, #0]
 8000e72:	f004 fd45 	bl	8005900 <STC_GetDefaultIqdref>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000e7c:	8233      	strh	r3, [r6, #16]
 8000e7e:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e80:	6828      	ldr	r0, [r5, #0]
 8000e82:	f004 fd3d 	bl	8005900 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000e86:	493c      	ldr	r1, [pc, #240]	; (8000f78 <MCboot+0x1c4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e88:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000e8a:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e8e:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e92:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e94:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e98:	4608      	mov	r0, r1
 8000e9a:	4659      	mov	r1, fp
 8000e9c:	f7ff fda0 	bl	80009e0 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000ea0:	6828      	ldr	r0, [r5, #0]
 8000ea2:	f8d8 6000 	ldr.w	r6, [r8]
 8000ea6:	f004 fd21 	bl	80058ec <STC_GetMecSpeedRefUnitDefault>
 8000eaa:	4622      	mov	r2, r4
 8000eac:	4601      	mov	r1, r0
 8000eae:	4630      	mov	r0, r6
 8000eb0:	f7ff fda4 	bl	80009fc <MCI_ExecSpeedRamp>
  MCT[M1].pPIDId = pPIDId[M1];
 8000eb4:	4a2a      	ldr	r2, [pc, #168]	; (8000f60 <MCboot+0x1ac>)
  pMCIList[M1] = oMCInterface[M1];
 8000eb6:	f8d8 6000 	ldr.w	r6, [r8]
  MCT[M1].pPIDId = pPIDId[M1];
 8000eba:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000ebc:	4a1a      	ldr	r2, [pc, #104]	; (8000f28 <MCboot+0x174>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000ebe:	f8da c000 	ldr.w	ip, [sl]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000ec2:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <MCboot+0x1b0>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000ec6:	f8d5 a000 	ldr.w	sl, [r5]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000eca:	f8d2 e000 	ldr.w	lr, [r2]
  pMCIList[M1] = oMCInterface[M1];
 8000ece:	9a02      	ldr	r2, [sp, #8]
 8000ed0:	9601      	str	r6, [sp, #4]
 8000ed2:	4690      	mov	r8, r2
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000ed4:	4e20      	ldr	r6, [pc, #128]	; (8000f58 <MCboot+0x1a4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000ed6:	4d26      	ldr	r5, [pc, #152]	; (8000f70 <MCboot+0x1bc>)
  pMCIList[M1] = oMCInterface[M1];
 8000ed8:	9a01      	ldr	r2, [sp, #4]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MCboot+0x1c8>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000edc:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000ede:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000ee0:	683f      	ldr	r7, [r7, #0]
  pMCIList[M1] = oMCInterface[M1];
 8000ee2:	f8c8 2000 	str.w	r2, [r8]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <MCboot+0x198>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000ee8:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000eea:	e9c3 2406 	strd	r2, r4, [r3, #24]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000eee:	e9c3 c600 	strd	ip, r6, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8000ef2:	6098      	str	r0, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000ef4:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000ef8:	e9c3 570b 	strd	r5, r7, [r3, #44]	; 0x2c
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000efc:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000f00:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000f02:	615c      	str	r4, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000f04:	621c      	str	r4, [r3, #32]
  MCT[M1].pStateMachine = &STM[M1];
 8000f06:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000f0a:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000f0e:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  bMCBootCompleted = 1;
 8000f12:	4909      	ldr	r1, [pc, #36]	; (8000f38 <MCboot+0x184>)
  MCT[M1].pSCC = MC_NULL;
 8000f14:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  pMCTList[M1] = &MCT[M1];
 8000f18:	9a03      	ldr	r2, [sp, #12]
  MCT[M1].pOTT = MC_NULL;
 8000f1a:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000f1c:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000f1e:	f881 9000 	strb.w	r9, [r1]
}
 8000f22:	b007      	add	sp, #28
 8000f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f28:	2000072c 	.word	0x2000072c
 8000f2c:	200007f4 	.word	0x200007f4
 8000f30:	200007c0 	.word	0x200007c0
 8000f34:	20000740 	.word	0x20000740
 8000f38:	200005a8 	.word	0x200005a8
 8000f3c:	200007bc 	.word	0x200007bc
 8000f40:	20000314 	.word	0x20000314
 8000f44:	20000000 	.word	0x20000000
 8000f48:	200003c8 	.word	0x200003c8
 8000f4c:	200000b4 	.word	0x200000b4
 8000f50:	200001a8 	.word	0x200001a8
 8000f54:	2000017c 	.word	0x2000017c
 8000f58:	20000734 	.word	0x20000734
 8000f5c:	200003a0 	.word	0x200003a0
 8000f60:	200007f0 	.word	0x200007f0
 8000f64:	200007ec 	.word	0x200007ec
 8000f68:	20000200 	.word	0x20000200
 8000f6c:	20000388 	.word	0x20000388
 8000f70:	20000728 	.word	0x20000728
 8000f74:	200007e8 	.word	0x200007e8
 8000f78:	200007c4 	.word	0x200007c4
 8000f7c:	20000768 	.word	0x20000768
 8000f80:	200007e0 	.word	0x200007e0
 8000f84:	200001d4 	.word	0x200001d4
 8000f88:	20000730 	.word	0x20000730
 8000f8c:	200003fc 	.word	0x200003fc
 8000f90:	20000738 	.word	0x20000738

08000f94 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <FOC_CalcCurrRef+0x24>)
{
 8000f9a:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f9c:	2426      	movs	r4, #38	; 0x26
 8000f9e:	fb04 3400 	mla	r4, r4, r0, r3
 8000fa2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fa6:	b103      	cbz	r3, 8000faa <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000fa8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <FOC_CalcCurrRef+0x28>)
 8000fac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000fb0:	f004 fc6c 	bl	800588c <STC_CalcTorqueReference>
 8000fb4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000fb6:	8220      	strh	r0, [r4, #16]
}
 8000fb8:	bd10      	pop	{r4, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000740 	.word	0x20000740
 8000fc0:	200007f4 	.word	0x200007f4

08000fc4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <TSK_SetChargeBootCapDelayM1+0x8>)
 8000fc6:	8018      	strh	r0, [r3, #0]
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200005aa 	.word	0x200005aa

08000fd0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8000fd2:	8818      	ldrh	r0, [r3, #0]
 8000fd4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000fd6:	fab0 f080 	clz	r0, r0
 8000fda:	0940      	lsrs	r0, r0, #5
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200005aa 	.word	0x200005aa

08000fe4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <TSK_SetStopPermanencyTimeM1+0x8>)
 8000fe6:	8018      	strh	r0, [r3, #0]
}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200005ae 	.word	0x200005ae

08000ff0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000ff2:	8818      	ldrh	r0, [r3, #0]
 8000ff4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000ff6:	fab0 f080 	clz	r0, r0
 8000ffa:	0940      	lsrs	r0, r0, #5
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200005ae 	.word	0x200005ae

08001004 <TSK_MediumFrequencyTaskM1>:
{
 8001004:	b530      	push	{r4, r5, lr}
 8001006:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001008:	a902      	add	r1, sp, #8
 800100a:	2300      	movs	r3, #0
 800100c:	f821 3d02 	strh.w	r3, [r1, #-2]!
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001010:	484b      	ldr	r0, [pc, #300]	; (8001140 <TSK_MediumFrequencyTaskM1+0x13c>)
  PQD_CalcElMotorPower( pMPM[M1] );
 8001012:	4c4c      	ldr	r4, [pc, #304]	; (8001144 <TSK_MediumFrequencyTaskM1+0x140>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001014:	f003 fb84 	bl	8004720 <HALL_CalcAvrgMecSpeedUnit>
 8001018:	4605      	mov	r5, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	f004 f936 	bl	800528c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001020:	4849      	ldr	r0, [pc, #292]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 8001022:	f004 fd15 	bl	8005a50 <STM_GetState>
  switch ( StateM1 )
 8001026:	3803      	subs	r0, #3
 8001028:	280f      	cmp	r0, #15
 800102a:	d80d      	bhi.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
 800102c:	e8df f000 	tbb	[pc, r0]
 8001030:	43302b1f 	.word	0x43302b1f
 8001034:	0c086552 	.word	0x0c086552
 8001038:	0c0c0c0c 	.word	0x0c0c0c0c
 800103c:	0e7c6e0c 	.word	0x0e7c6e0c
    STM_NextState( &STM[M1], IDLE );
 8001040:	2100      	movs	r1, #0
 8001042:	4841      	ldr	r0, [pc, #260]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 8001044:	f004 fc90 	bl	8005968 <STM_NextState>
}
 8001048:	b003      	add	sp, #12
 800104a:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 800104c:	483c      	ldr	r0, [pc, #240]	; (8001140 <TSK_MediumFrequencyTaskM1+0x13c>)
 800104e:	f003 fa9f 	bl	8004590 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001052:	2104      	movs	r1, #4
 8001054:	483c      	ldr	r0, [pc, #240]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 8001056:	f004 fc87 	bl	8005968 <STM_NextState>
 800105a:	2800      	cmp	r0, #0
 800105c:	d0f4      	beq.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
      FOC_Clear( M1 );
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fe6a 	bl	8000d38 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8001064:	4b39      	ldr	r3, [pc, #228]	; (800114c <TSK_MediumFrequencyTaskM1+0x148>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	f003 fef4 	bl	8004e54 <ICS_SwitchOnPWM>
 800106c:	e7ec      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <TSK_MediumFrequencyTaskM1+0x148>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f003 fecb 	bl	8004e0c <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001076:	2014      	movs	r0, #20
 8001078:	f7ff ffa4 	bl	8000fc4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800107c:	2110      	movs	r1, #16
 800107e:	4832      	ldr	r0, [pc, #200]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 8001080:	f004 fc72 	bl	8005968 <STM_NextState>
    break;
 8001084:	e7e0      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001086:	2105      	movs	r1, #5
 8001088:	482f      	ldr	r0, [pc, #188]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 800108a:	f004 fc6d 	bl	8005968 <STM_NextState>
    break;
 800108e:	e7db      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
	  FOC_InitAdditionalMethods(M1);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff7f 	bl	8000f94 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff7e 	bl	8000f98 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800109c:	2106      	movs	r1, #6
 800109e:	482a      	ldr	r0, [pc, #168]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 80010a0:	f004 fc62 	bl	8005968 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <TSK_MediumFrequencyTaskM1+0x14c>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f004 fc36 	bl	8005918 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <TSK_MediumFrequencyTaskM1+0x150>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f7ff fcdc 	bl	8000a6c <MCI_ExecBufferedCommands>
    break;
 80010b4:	e7c8      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <TSK_MediumFrequencyTaskM1+0x150>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	f7ff fcd7 	bl	8000a6c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff6a 	bl	8000f98 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	d1bf      	bne.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80010c8:	462a      	mov	r2, r5
 80010ca:	2120      	movs	r1, #32
 80010cc:	481e      	ldr	r0, [pc, #120]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 80010ce:	f004 fc31 	bl	8005934 <STM_FaultProcessing>
 80010d2:	e7b9      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <TSK_MediumFrequencyTaskM1+0x148>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f003 fef6 	bl	8004ec8 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fe2b 	bl	8000d38 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80010e2:	6820      	ldr	r0, [r4, #0]
 80010e4:	f003 ffe8 	bl	80050b8 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80010e8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80010ec:	f7ff ff7a 	bl	8000fe4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80010f0:	2108      	movs	r1, #8
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 80010f4:	f004 fc38 	bl	8005968 <STM_NextState>
    break;
 80010f8:	e7a6      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80010fa:	f7ff ff79 	bl	8000ff0 <TSK_StopPermanencyTimeHasElapsedM1>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d0a2      	beq.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001102:	2109      	movs	r1, #9
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 8001106:	f004 fc2f 	bl	8005968 <STM_NextState>
 800110a:	e79d      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800110c:	f7ff ff60 	bl	8000fd0 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001110:	2800      	cmp	r0, #0
 8001112:	d099      	beq.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <TSK_MediumFrequencyTaskM1+0x148>)
 8001116:	2100      	movs	r1, #0
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	f004 fa51 	bl	80055c0 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800111e:	2111      	movs	r1, #17
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 8001122:	f004 fc21 	bl	8005968 <STM_NextState>
 8001126:	e78f      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <TSK_MediumFrequencyTaskM1+0x148>)
 800112a:	2101      	movs	r1, #1
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f004 fa47 	bl	80055c0 <PWMC_CurrentReadingCalibr>
 8001132:	2800      	cmp	r0, #0
 8001134:	d088      	beq.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
      STM_NextState( &STM[M1], CLEAR );
 8001136:	2112      	movs	r1, #18
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <TSK_MediumFrequencyTaskM1+0x144>)
 800113a:	f004 fc15 	bl	8005968 <STM_NextState>
 800113e:	e783      	b.n	8001048 <TSK_MediumFrequencyTaskM1+0x44>
 8001140:	200000b4 	.word	0x200000b4
 8001144:	200007ec 	.word	0x200007ec
 8001148:	200007e0 	.word	0x200007e0
 800114c:	2000072c 	.word	0x2000072c
 8001150:	200007f4 	.word	0x200007f4
 8001154:	20000738 	.word	0x20000738

08001158 <MC_Scheduler>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MC_Scheduler+0x4c>)
 800115c:	781c      	ldrb	r4, [r3, #0]
 800115e:	2c01      	cmp	r4, #1
 8001160:	d000      	beq.n	8001164 <MC_Scheduler+0xc>
}
 8001162:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001164:	4d10      	ldr	r5, [pc, #64]	; (80011a8 <MC_Scheduler+0x50>)
 8001166:	882b      	ldrh	r3, [r5, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	b1b3      	cbz	r3, 800119a <MC_Scheduler+0x42>
      hMFTaskCounterM1--;
 800116c:	882b      	ldrh	r3, [r5, #0]
 800116e:	3b01      	subs	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <MC_Scheduler+0x54>)
 8001176:	8813      	ldrh	r3, [r2, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	b94b      	cbnz	r3, 8001190 <MC_Scheduler+0x38>
    if(hStopPermanencyCounterM1 > 0u)
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <MC_Scheduler+0x58>)
 800117e:	8813      	ldrh	r3, [r2, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0ed      	beq.n	8001162 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001186:	8813      	ldrh	r3, [r2, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	8013      	strh	r3, [r2, #0]
}
 800118e:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 8001190:	8813      	ldrh	r3, [r2, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	8013      	strh	r3, [r2, #0]
 8001198:	e7f0      	b.n	800117c <MC_Scheduler+0x24>
      TSK_MediumFrequencyTaskM1();
 800119a:	f7ff ff33 	bl	8001004 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800119e:	802c      	strh	r4, [r5, #0]
 80011a0:	e7e8      	b.n	8001174 <MC_Scheduler+0x1c>
 80011a2:	bf00      	nop
 80011a4:	200005a8 	.word	0x200005a8
 80011a8:	200005ac 	.word	0x200005ac
 80011ac:	200005aa 	.word	0x200005aa
 80011b0:	200005ae 	.word	0x200005ae

080011b4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80011b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 80011b8:	4831      	ldr	r0, [pc, #196]	; (8001280 <TSK_HighFrequencyTask+0xcc>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011ba:	4f32      	ldr	r7, [pc, #200]	; (8001284 <TSK_HighFrequencyTask+0xd0>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011bc:	4c32      	ldr	r4, [pc, #200]	; (8001288 <TSK_HighFrequencyTask+0xd4>)
{
 80011be:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 80011c0:	f003 fa8e 	bl	80046e0 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <TSK_HighFrequencyTask+0xd8>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f004 faf4 	bl	80057b4 <STC_GetSpeedSensor>
 80011cc:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80011ce:	f004 fa97 	bl	8005700 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011d2:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80011d4:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f004 f8e2 	bl	80053a0 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80011dc:	9803      	ldr	r0, [sp, #12]
 80011de:	f7ff fce3 	bl	8000ba8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011e2:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80011e4:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011e6:	f7ff fd4f 	bl	8000c88 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <TSK_HighFrequencyTask+0xdc>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011ec:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011f0:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011f2:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011f4:	1a09      	subs	r1, r1, r0
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f004 f804 	bl	8005204 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80011fc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <TSK_HighFrequencyTask+0xe0>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001202:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001206:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001208:	1a89      	subs	r1, r1, r2
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f003 fffa 	bl	8005204 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <TSK_HighFrequencyTask+0xe4>)
 8001212:	f8ad 8008 	strh.w	r8, [sp, #8]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8ad 000a 	strh.w	r0, [sp, #10]
 800121c:	9902      	ldr	r1, [sp, #8]
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f8d4 	bl	80043cc <Circle_Limitation>
 8001224:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001226:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001228:	fa0f f883 	sxth.w	r8, r3
 800122c:	141d      	asrs	r5, r3, #16
 800122e:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001230:	f004 fa6e 	bl	8005710 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001234:	4631      	mov	r1, r6
 8001236:	9802      	ldr	r0, [sp, #8]
 8001238:	f7ff fd60 	bl	8000cfc <MCM_Rev_Park>
 800123c:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800123e:	4601      	mov	r1, r0
 8001240:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001242:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001244:	f004 f8ae 	bl	80053a4 <PWMC_SetPhaseVoltage>
 8001248:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800124a:	9803      	ldr	r0, [sp, #12]
 800124c:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800124e:	9804      	ldr	r0, [sp, #16]
 8001250:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001252:	9801      	ldr	r0, [sp, #4]
 8001254:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001256:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001258:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 800125a:	f8a4 8016 	strh.w	r8, [r4, #22]
 800125e:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001260:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001262:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001266:	d003      	beq.n	8001270 <TSK_HighFrequencyTask+0xbc>
}
 8001268:	2000      	movs	r0, #0
 800126a:	b006      	add	sp, #24
 800126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	480a      	ldr	r0, [pc, #40]	; (800129c <TSK_HighFrequencyTask+0xe8>)
 8001274:	f004 fb5e 	bl	8005934 <STM_FaultProcessing>
}
 8001278:	2000      	movs	r0, #0
 800127a:	b006      	add	sp, #24
 800127c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001280:	200000b4 	.word	0x200000b4
 8001284:	2000072c 	.word	0x2000072c
 8001288:	20000740 	.word	0x20000740
 800128c:	200007f4 	.word	0x200007f4
 8001290:	20000734 	.word	0x20000734
 8001294:	200007f0 	.word	0x200007f0
 8001298:	200007bc 	.word	0x200007bc
 800129c:	200007e0 	.word	0x200007e0

080012a0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80012a4:	4f20      	ldr	r7, [pc, #128]	; (8001328 <TSK_SafetyTask_PWMOFF+0x88>)
{
 80012a6:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80012a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80012ac:	f003 ff56 	bl	800515c <NTC_CalcAvTemp>
 80012b0:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80012b2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80012b6:	f004 f9ad 	bl	8005614 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80012ba:	f024 040c 	bic.w	r4, r4, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80012be:	4304      	orrs	r4, r0
 80012c0:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80012c2:	b335      	cbz	r5, 8001312 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80012c4:	4e19      	ldr	r6, [pc, #100]	; (800132c <TSK_SafetyTask_PWMOFF+0x8c>)
 80012c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80012ca:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80012ce:	43e2      	mvns	r2, r4
 80012d0:	b292      	uxth	r2, r2
 80012d2:	4621      	mov	r1, r4
 80012d4:	4630      	mov	r0, r6
 80012d6:	f004 fb2d 	bl	8005934 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80012da:	4630      	mov	r0, r6
 80012dc:	f004 fbb8 	bl	8005a50 <STM_GetState>
 80012e0:	280a      	cmp	r0, #10
 80012e2:	d008      	beq.n	80012f6 <TSK_SafetyTask_PWMOFF+0x56>
 80012e4:	280b      	cmp	r0, #11
 80012e6:	d105      	bne.n	80012f4 <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012e8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80012ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012f0:	f004 b964 	b.w	80055bc <PWMC_SwitchOffPWM>
}
 80012f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012f6:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80012fa:	f004 f95f 	bl	80055bc <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80012fe:	4628      	mov	r0, r5
 8001300:	f7ff fd1a 	bl	8000d38 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <TSK_SafetyTask_PWMOFF+0x90>)
 8001306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 800130a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800130e:	f003 bed3 	b.w	80050b8 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <TSK_SafetyTask_PWMOFF+0x94>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f004 f9b5 	bl	8005684 <RVBS_CalcAvVbus>
 800131a:	f020 000c 	bic.w	r0, r0, #12
 800131e:	4304      	orrs	r4, r0
 8001320:	b2a4      	uxth	r4, r4
 8001322:	e7cf      	b.n	80012c4 <TSK_SafetyTask_PWMOFF+0x24>
 8001324:	20000728 	.word	0x20000728
 8001328:	2000072c 	.word	0x2000072c
 800132c:	200007e0 	.word	0x200007e0
 8001330:	200007ec 	.word	0x200007ec
 8001334:	200007c0 	.word	0x200007c0

08001338 <TSK_SafetyTask>:
{
 8001338:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <TSK_SafetyTask+0x1c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d000      	beq.n	8001344 <TSK_SafetyTask+0xc>
}
 8001342:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ffab 	bl	80012a0 <TSK_SafetyTask_PWMOFF>
}
 800134a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800134e:	f000 bce3 	b.w	8001d18 <RCM_ExecUserConv>
 8001352:	bf00      	nop
 8001354:	200005a8 	.word	0x200005a8

08001358 <MC_RunMotorControlTasks>:
{
 8001358:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MC_RunMotorControlTasks+0x1c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b903      	cbnz	r3, 8001362 <MC_RunMotorControlTasks+0xa>
}
 8001360:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001362:	f7ff fef9 	bl	8001158 <MC_Scheduler>
    TSK_SafetyTask();
 8001366:	f7ff ffe7 	bl	8001338 <TSK_SafetyTask>
}
 800136a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800136e:	f000 bfbb 	b.w	80022e8 <UI_Scheduler>
 8001372:	bf00      	nop
 8001374:	200005a8 	.word	0x200005a8

08001378 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <TSK_HardwareFaultTask+0x18>)
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f003 fda3 	bl	8004ec8 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800138c:	f004 bad2 	b.w	8005934 <STM_FaultProcessing>
 8001390:	2000072c 	.word	0x2000072c
 8001394:	200007e0 	.word	0x200007e0

08001398 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001398:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <mc_lock_pins+0xf8>)
 800139c:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <mc_lock_pins+0xfc>)
 800139e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013a0:	2110      	movs	r1, #16
 80013a2:	61d9      	str	r1, [r3, #28]
 80013a4:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013a8:	69d9      	ldr	r1, [r3, #28]
 80013aa:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ac:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <mc_lock_pins+0x100>)
  (void) temp;
 80013ae:	980d      	ldr	r0, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b0:	493a      	ldr	r1, [pc, #232]	; (800149c <mc_lock_pins+0x104>)
 80013b2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b4:	2008      	movs	r0, #8
 80013b6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ba:	69d1      	ldr	r1, [r2, #28]
 80013bc:	910c      	str	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013be:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 80013c6:	990c      	ldr	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ca:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013cc:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ce:	69d1      	ldr	r1, [r2, #28]
 80013d0:	910b      	str	r1, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013d2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d6:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 80013da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013dc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013de:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013e2:	69de      	ldr	r6, [r3, #28]
 80013e4:	960a      	str	r6, [sp, #40]	; 0x28
  (void) temp;
 80013e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e8:	4e2d      	ldr	r6, [pc, #180]	; (80014a0 <mc_lock_pins+0x108>)
 80013ea:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ec:	f44f 7780 	mov.w	r7, #256	; 0x100
 80013f0:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f2:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013f4:	69de      	ldr	r6, [r3, #28]
 80013f6:	9609      	str	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013f8:	f44f 7700 	mov.w	r7, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013fc:	f44f 3681 	mov.w	r6, #66048	; 0x10200
  (void) temp;
 8001400:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001404:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001406:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001408:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800140a:	69de      	ldr	r6, [r3, #28]
 800140c:	9608      	str	r6, [sp, #32]
  (void) temp;
 800140e:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001410:	4e24      	ldr	r6, [pc, #144]	; (80014a4 <mc_lock_pins+0x10c>)
 8001412:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001414:	2740      	movs	r7, #64	; 0x40
 8001416:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001418:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800141a:	69de      	ldr	r6, [r3, #28]
 800141c:	9607      	str	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800141e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001422:	f44f 36a0 	mov.w	r6, #81920	; 0x14000
  (void) temp;
 8001426:	f8dd c01c 	ldr.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800142a:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800142c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800142e:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001430:	69d6      	ldr	r6, [r2, #28]
 8001432:	9606      	str	r6, [sp, #24]
  (void) temp;
 8001434:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001436:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001438:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800143a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800143c:	69d8      	ldr	r0, [r3, #28]
 800143e:	9005      	str	r0, [sp, #20]
  (void) temp;
 8001440:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001442:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001444:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001446:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001448:	69d1      	ldr	r1, [r2, #28]
 800144a:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800144c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001450:	f44f 3190 	mov.w	r1, #73728	; 0x12000
  (void) temp;
 8001454:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001456:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001458:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800145c:	69d1      	ldr	r1, [r2, #28]
 800145e:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001460:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001462:	4911      	ldr	r1, [pc, #68]	; (80014a8 <mc_lock_pins+0x110>)
 8001464:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001468:	2020      	movs	r0, #32
 800146a:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800146e:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001472:	442a      	add	r2, r5
  temp = READ_REG(GPIOx->LCKR);
 8001474:	69d2      	ldr	r2, [r2, #28]
 8001476:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001478:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <mc_lock_pins+0x114>)
 800147c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800147e:	2102      	movs	r1, #2
 8001480:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001482:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001488:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 800148a:	b00e      	add	sp, #56	; 0x38
 800148c:	bcf0      	pop	{r4, r5, r6, r7}
 800148e:	4770      	bx	lr
 8001490:	40020000 	.word	0x40020000
 8001494:	00010010 	.word	0x00010010
 8001498:	40020400 	.word	0x40020400
 800149c:	00010008 	.word	0x00010008
 80014a0:	00010100 	.word	0x00010100
 80014a4:	00010040 	.word	0x00010040
 80014a8:	00010020 	.word	0x00010020
 80014ac:	00010002 	.word	0x00010002

080014b0 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	460c      	mov	r4, r1
 80014b4:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80014b6:	2100      	movs	r1, #0
{
 80014b8:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80014ba:	0962      	lsrs	r2, r4, #5
{
 80014bc:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 80014be:	f88d 1009 	strb.w	r1, [sp, #9]
{
 80014c2:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 80014c4:	d122      	bne.n	800150c <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80014c6:	2c12      	cmp	r4, #18
 80014c8:	d814      	bhi.n	80014f4 <MCP_ReceivedFrame+0x44>
 80014ca:	e8df f014 	tbh	[pc, r4, lsl #1]
 80014ce:	0016      	.short	0x0016
 80014d0:	00de004c 	.word	0x00de004c
 80014d4:	00130170 	.word	0x00130170
 80014d8:	017a0013 	.word	0x017a0013
 80014dc:	01bc01a7 	.word	0x01bc01a7
 80014e0:	021101ef 	.word	0x021101ef
 80014e4:	02390222 	.word	0x02390222
 80014e8:	00130256 	.word	0x00130256
 80014ec:	00130013 	.word	0x00130013
 80014f0:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80014fa:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80014fe:	2301      	movs	r3, #1
 8001500:	f10d 020e 	add.w	r2, sp, #14
 8001504:	21ff      	movs	r1, #255	; 0xff
 8001506:	47a0      	blx	r4
    }
  }
}
 8001508:	b00d      	add	sp, #52	; 0x34
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 800150c:	3a01      	subs	r2, #1
 800150e:	f000 ff2b 	bl	8002368 <UI_SetReg>
 8001512:	b1c8      	cbz	r0, 8001548 <MCP_ReceivedFrame+0x98>
  switch (Code)
 8001514:	f004 041f 	and.w	r4, r4, #31
 8001518:	2c12      	cmp	r4, #18
 800151a:	f200 829d 	bhi.w	8001a58 <MCP_ReceivedFrame+0x5a8>
 800151e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001522:	01c2      	.short	0x01c2
 8001524:	00b40022 	.word	0x00b40022
 8001528:	029b0146 	.word	0x029b0146
 800152c:	0150029b 	.word	0x0150029b
 8001530:	0192017d 	.word	0x0192017d
 8001534:	01e701c5 	.word	0x01e701c5
 8001538:	020f01f8 	.word	0x020f01f8
 800153c:	029b022c 	.word	0x029b022c
 8001540:	029b029b 	.word	0x029b029b
 8001544:	01c2029b 	.word	0x01c2029b
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001548:	230b      	movs	r3, #11
 800154a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800154e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001552:	2800      	cmp	r0, #0
 8001554:	d0d1      	beq.n	80014fa <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001556:	2300      	movs	r3, #0
 8001558:	461a      	mov	r2, r3
 800155a:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800155e:	21f0      	movs	r1, #240	; 0xf0
 8001560:	47a0      	blx	r4
}
 8001562:	b00d      	add	sp, #52	; 0x34
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001566:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001568:	2305      	movs	r3, #5
 800156a:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 800156e:	2988      	cmp	r1, #136	; 0x88
 8001570:	f200 8278 	bhi.w	8001a64 <MCP_ReceivedFrame+0x5b4>
 8001574:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001578:	02760268 	.word	0x02760268
 800157c:	02610276 	.word	0x02610276
 8001580:	02570276 	.word	0x02570276
 8001584:	02570257 	.word	0x02570257
 8001588:	02570257 	.word	0x02570257
 800158c:	02570257 	.word	0x02570257
 8001590:	02570257 	.word	0x02570257
 8001594:	02570257 	.word	0x02570257
 8001598:	02470247 	.word	0x02470247
 800159c:	02760276 	.word	0x02760276
 80015a0:	02570257 	.word	0x02570257
 80015a4:	02570257 	.word	0x02570257
 80015a8:	02760257 	.word	0x02760257
 80015ac:	02760276 	.word	0x02760276
 80015b0:	014e014e 	.word	0x014e014e
 80015b4:	02760276 	.word	0x02760276
 80015b8:	02760276 	.word	0x02760276
 80015bc:	02760276 	.word	0x02760276
 80015c0:	02760276 	.word	0x02760276
 80015c4:	02760276 	.word	0x02760276
 80015c8:	02760276 	.word	0x02760276
 80015cc:	02760276 	.word	0x02760276
 80015d0:	02760276 	.word	0x02760276
 80015d4:	02760276 	.word	0x02760276
 80015d8:	02760276 	.word	0x02760276
 80015dc:	02760276 	.word	0x02760276
 80015e0:	02760276 	.word	0x02760276
 80015e4:	02760276 	.word	0x02760276
 80015e8:	02760276 	.word	0x02760276
 80015ec:	02760276 	.word	0x02760276
 80015f0:	02760276 	.word	0x02760276
 80015f4:	02760276 	.word	0x02760276
 80015f8:	02570276 	.word	0x02570276
 80015fc:	02760276 	.word	0x02760276
 8001600:	02760276 	.word	0x02760276
 8001604:	02470247 	.word	0x02470247
 8001608:	02760247 	.word	0x02760247
 800160c:	02760276 	.word	0x02760276
 8001610:	02760276 	.word	0x02760276
 8001614:	02570276 	.word	0x02570276
 8001618:	02760276 	.word	0x02760276
 800161c:	02570276 	.word	0x02570276
 8001620:	02570257 	.word	0x02570257
 8001624:	02570257 	.word	0x02570257
 8001628:	02570257 	.word	0x02570257
 800162c:	02470276 	.word	0x02470276
 8001630:	02760276 	.word	0x02760276
 8001634:	02760276 	.word	0x02760276
 8001638:	02570276 	.word	0x02570276
 800163c:	02760276 	.word	0x02760276
 8001640:	02570257 	.word	0x02570257
 8001644:	02760276 	.word	0x02760276
 8001648:	02760276 	.word	0x02760276
 800164c:	02760276 	.word	0x02760276
 8001650:	02760276 	.word	0x02760276
 8001654:	02760276 	.word	0x02760276
 8001658:	02760276 	.word	0x02760276
 800165c:	02760276 	.word	0x02760276
 8001660:	02470261 	.word	0x02470261
 8001664:	02470247 	.word	0x02470247
 8001668:	02470247 	.word	0x02470247
 800166c:	02760276 	.word	0x02760276
 8001670:	02470276 	.word	0x02470276
 8001674:	02760247 	.word	0x02760247
 8001678:	02760276 	.word	0x02760276
 800167c:	02760276 	.word	0x02760276
 8001680:	02760276 	.word	0x02760276
 8001684:	02570257 	.word	0x02570257
 8001688:	0257      	.short	0x0257
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 800168a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800168c:	2303      	movs	r3, #3
 800168e:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001692:	2988      	cmp	r1, #136	; 0x88
 8001694:	f200 8107 	bhi.w	80018a6 <MCP_ReceivedFrame+0x3f6>
 8001698:	e8df f011 	tbh	[pc, r1, lsl #1]
 800169c:	017f0191 	.word	0x017f0191
 80016a0:	01910191 	.word	0x01910191
 80016a4:	01a3017f 	.word	0x01a3017f
 80016a8:	01a301a3 	.word	0x01a301a3
 80016ac:	01a301a3 	.word	0x01a301a3
 80016b0:	01a301a3 	.word	0x01a301a3
 80016b4:	01a301a3 	.word	0x01a301a3
 80016b8:	01a301a3 	.word	0x01a301a3
 80016bc:	01a301a3 	.word	0x01a301a3
 80016c0:	01a301a3 	.word	0x01a301a3
 80016c4:	01a301a3 	.word	0x01a301a3
 80016c8:	01a301a3 	.word	0x01a301a3
 80016cc:	01a301a3 	.word	0x01a301a3
 80016d0:	01a301a3 	.word	0x01a301a3
 80016d4:	01050105 	.word	0x01050105
 80016d8:	01a3017f 	.word	0x01a3017f
 80016dc:	01a301a3 	.word	0x01a301a3
 80016e0:	01050191 	.word	0x01050191
 80016e4:	01050105 	.word	0x01050105
 80016e8:	01050105 	.word	0x01050105
 80016ec:	01050105 	.word	0x01050105
 80016f0:	01050105 	.word	0x01050105
 80016f4:	01050105 	.word	0x01050105
 80016f8:	01050105 	.word	0x01050105
 80016fc:	01050105 	.word	0x01050105
 8001700:	01050105 	.word	0x01050105
 8001704:	01050105 	.word	0x01050105
 8001708:	01050105 	.word	0x01050105
 800170c:	01050105 	.word	0x01050105
 8001710:	01050105 	.word	0x01050105
 8001714:	01050105 	.word	0x01050105
 8001718:	01050105 	.word	0x01050105
 800171c:	01a30105 	.word	0x01a30105
 8001720:	01050105 	.word	0x01050105
 8001724:	01050105 	.word	0x01050105
 8001728:	017f017f 	.word	0x017f017f
 800172c:	01a3017f 	.word	0x01a3017f
 8001730:	01a301a3 	.word	0x01a301a3
 8001734:	019101a3 	.word	0x019101a3
 8001738:	01a3017f 	.word	0x01a3017f
 800173c:	01a301a3 	.word	0x01a301a3
 8001740:	01a301a3 	.word	0x01a301a3
 8001744:	01a301a3 	.word	0x01a301a3
 8001748:	01a301a3 	.word	0x01a301a3
 800174c:	01a301a3 	.word	0x01a301a3
 8001750:	017f0191 	.word	0x017f0191
 8001754:	01a30105 	.word	0x01a30105
 8001758:	01a301a3 	.word	0x01a301a3
 800175c:	01a301a3 	.word	0x01a301a3
 8001760:	01050105 	.word	0x01050105
 8001764:	01a301a3 	.word	0x01a301a3
 8001768:	01910191 	.word	0x01910191
 800176c:	017f017f 	.word	0x017f017f
 8001770:	017f017f 	.word	0x017f017f
 8001774:	0191017f 	.word	0x0191017f
 8001778:	01a301a3 	.word	0x01a301a3
 800177c:	0105017f 	.word	0x0105017f
 8001780:	01a301a3 	.word	0x01a301a3
 8001784:	017f0191 	.word	0x017f0191
 8001788:	017f017f 	.word	0x017f017f
 800178c:	017f017f 	.word	0x017f017f
 8001790:	017f017f 	.word	0x017f017f
 8001794:	017f017f 	.word	0x017f017f
 8001798:	017f017f 	.word	0x017f017f
 800179c:	01050191 	.word	0x01050191
 80017a0:	017f0191 	.word	0x017f0191
 80017a4:	017f017f 	.word	0x017f017f
 80017a8:	01a301a3 	.word	0x01a301a3
 80017ac:	01a3      	.short	0x01a3
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80017ae:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 80017b0:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80017b2:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80017b6:	4628      	mov	r0, r5
 80017b8:	f001 f89c 	bl	80028f4 <UI_ExecCmd>
 80017bc:	f88d 0009 	strb.w	r0, [sp, #9]
 80017c0:	e6c7      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
 80017c2:	ac04      	add	r4, sp, #16
 80017c4:	2100      	movs	r1, #0
 80017c6:	4620      	mov	r0, r4
 80017c8:	2220      	movs	r2, #32
 80017ca:	f004 faef 	bl	8005dac <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80017ce:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 80017d2:	f10d 0012 	add.w	r0, sp, #18
 80017d6:	1e71      	subs	r1, r6, #1
 80017d8:	2300      	movs	r3, #0
 80017da:	e005      	b.n	80017e8 <MCP_ReceivedFrame+0x338>
 80017dc:	3301      	adds	r3, #1
 80017de:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80017e0:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80017e4:	f000 8144 	beq.w	8001a70 <MCP_ReceivedFrame+0x5c0>
 80017e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017ec:	2a09      	cmp	r2, #9
 80017ee:	d1f5      	bne.n	80017dc <MCP_ReceivedFrame+0x32c>
 80017f0:	1d5a      	adds	r2, r3, #5
 80017f2:	1dd9      	adds	r1, r3, #7
 80017f4:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80017f6:	5cb2      	ldrb	r2, [r6, r2]
 80017f8:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80017fc:	5c72      	ldrb	r2, [r6, r1]
 80017fe:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001802:	5cf3      	ldrb	r3, [r6, r3]
 8001804:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001808:	4622      	mov	r2, r4
 800180a:	2320      	movs	r3, #32
 800180c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001810:	21f0      	movs	r1, #240	; 0xf0
 8001812:	47a0      	blx	r4
      bNoError = true;
 8001814:	2301      	movs	r3, #1
 8001816:	f88d 3009 	strb.w	r3, [sp, #9]
 800181a:	e69c      	b.n	8001556 <MCP_ReceivedFrame+0xa6>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800181c:	7877      	ldrb	r7, [r6, #1]
 800181e:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001820:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001822:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001824:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001826:	78f1      	ldrb	r1, [r6, #3]
 8001828:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800182c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001830:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001834:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001838:	b292      	uxth	r2, r2
 800183a:	4628      	mov	r0, r5
 800183c:	f001 f896 	bl	800296c <UI_ExecSpeedRamp>
 8001840:	f88d 0009 	strb.w	r0, [sp, #9]
 8001844:	e685      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001846:	f10d 030e 	add.w	r3, sp, #14
 800184a:	7831      	ldrb	r1, [r6, #0]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	f10d 020a 	add.w	r2, sp, #10
 8001852:	ab03      	add	r3, sp, #12
 8001854:	4628      	mov	r0, r5
 8001856:	f001 f8a5 	bl	80029a4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800185a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 800185e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001862:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8001866:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800186a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800186e:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001870:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001872:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001874:	f363 0207 	bfi	r2, r3, #0, #8
 8001878:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 800187c:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 800187e:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001882:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 8001884:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001888:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 800188a:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 800188c:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 800188e:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001892:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001896:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800189a:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800189e:	2308      	movs	r3, #8
 80018a0:	aa04      	add	r2, sp, #16
 80018a2:	21f0      	movs	r1, #240	; 0xf0
 80018a4:	47a0      	blx	r4
 80018a6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80018aa:	e652      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80018ac:	78b1      	ldrb	r1, [r6, #2]
 80018ae:	7873      	ldrb	r3, [r6, #1]
 80018b0:	78f2      	ldrb	r2, [r6, #3]
 80018b2:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80018b4:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80018b6:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80018b8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80018bc:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80018c0:	4a6d      	ldr	r2, [pc, #436]	; (8001a78 <MCP_ReceivedFrame+0x5c8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80018c2:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80018c4:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80018c8:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 80018cc:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80018ce:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80018d2:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80018d6:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80018d8:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80018dc:	7831      	ldrb	r1, [r6, #0]
 80018de:	9000      	str	r0, [sp, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	b292      	uxth	r2, r2
 80018e4:	4628      	mov	r0, r5
 80018e6:	f001 f879 	bl	80029dc <UI_SetRevupData>
 80018ea:	f88d 0009 	strb.w	r0, [sp, #9]
 80018ee:	e630      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
      hIdRef = buffer[2] + (buffer[3] << 8);
 80018f0:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80018f2:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80018f4:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80018f6:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80018f8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 80018fc:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001900:	b212      	sxth	r2, r2
 8001902:	b209      	sxth	r1, r1
 8001904:	4628      	mov	r0, r5
 8001906:	f001 f883 	bl	8002a10 <UI_SetCurrentReferences>
      bNoError = true;
 800190a:	2301      	movs	r3, #1
 800190c:	f88d 3009 	strb.w	r3, [sp, #9]
 8001910:	e621      	b.n	8001556 <MCP_ReceivedFrame+0xa6>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001912:	4c5a      	ldr	r4, [pc, #360]	; (8001a7c <MCP_ReceivedFrame+0x5cc>)
      stepList.data = buffer;
 8001914:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001916:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001918:	4621      	mov	r1, r4
 800191a:	a804      	add	r0, sp, #16
      stepList.len = Size;
 800191c:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001920:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001924:	f001 f882 	bl	8002a2c <UI_GetMPInfo>
 8001928:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 800192c:	2800      	cmp	r0, #0
 800192e:	f43f ade4 	beq.w	80014fa <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001932:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8001936:	7923      	ldrb	r3, [r4, #4]
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	21f0      	movs	r1, #240	; 0xf0
 800193c:	47b0      	blx	r6
 800193e:	e5e3      	b.n	8001508 <MCP_ReceivedFrame+0x58>
 8001940:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 8001944:	ac04      	add	r4, sp, #16
 8001946:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001948:	4623      	mov	r3, r4
 800194a:	ae0c      	add	r6, sp, #48	; 0x30
 800194c:	e004      	b.n	8001958 <MCP_ReceivedFrame+0x4a8>
        outBuff[i] = pHandle->s_fwVer[i];
 800194e:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001952:	429e      	cmp	r6, r3
 8001954:	f43f af58 	beq.w	8001808 <MCP_ReceivedFrame+0x358>
 8001958:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800195c:	1b18      	subs	r0, r3, r4
 800195e:	b2c0      	uxtb	r0, r0
 8001960:	2900      	cmp	r1, #0
 8001962:	d1f4      	bne.n	800194e <MCP_ReceivedFrame+0x49e>
      for (; i < 32; i++)
 8001964:	281f      	cmp	r0, #31
 8001966:	f63f af4f 	bhi.w	8001808 <MCP_ReceivedFrame+0x358>
        outBuff[i] = 0;
 800196a:	f1c0 021f 	rsb	r2, r0, #31
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	3201      	adds	r2, #1
 8001972:	4420      	add	r0, r4
 8001974:	f004 fa1a 	bl	8005dac <memset>
 8001978:	e746      	b.n	8001808 <MCP_ReceivedFrame+0x358>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800197a:	7970      	ldrb	r0, [r6, #5]
 800197c:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800197e:	7873      	ldrb	r3, [r6, #1]
 8001980:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001982:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001986:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 800198a:	b292      	uxth	r2, r2
 800198c:	b209      	sxth	r1, r1
 800198e:	4628      	mov	r0, r5
 8001990:	f000 fffe 	bl	8002990 <UI_ExecTorqueRamp>
 8001994:	f88d 0009 	strb.w	r0, [sp, #9]
 8001998:	e5db      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 800199a:	f10d 0209 	add.w	r2, sp, #9
 800199e:	4628      	mov	r0, r5
 80019a0:	f000 fda6 	bl	80024f0 <UI_GetReg>
          if ( bNoError == true )
 80019a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80019a8:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f43f ada5 	beq.w	80014fa <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80019b0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019b4:	2304      	movs	r3, #4
 80019b6:	aa04      	add	r2, sp, #16
 80019b8:	21f0      	movs	r1, #240	; 0xf0
 80019ba:	47a0      	blx	r4
 80019bc:	e5a4      	b.n	8001508 <MCP_ReceivedFrame+0x58>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019be:	f10d 0209 	add.w	r2, sp, #9
 80019c2:	4628      	mov	r0, r5
 80019c4:	f000 fd94 	bl	80024f0 <UI_GetReg>
           if ( bNoError == true )
 80019c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019cc:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f43f ad93 	beq.w	80014fa <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80019d4:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019d8:	2301      	movs	r3, #1
 80019da:	aa04      	add	r2, sp, #16
 80019dc:	21f0      	movs	r1, #240	; 0xf0
 80019de:	47a0      	blx	r4
 80019e0:	e592      	b.n	8001508 <MCP_ReceivedFrame+0x58>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019e2:	f10d 0209 	add.w	r2, sp, #9
 80019e6:	4628      	mov	r0, r5
 80019e8:	f000 fd82 	bl	80024f0 <UI_GetReg>
          if ( bNoError == true )
 80019ec:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019f0:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f43f ad81 	beq.w	80014fa <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80019f8:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019fc:	2302      	movs	r3, #2
 80019fe:	aa04      	add	r2, sp, #16
 8001a00:	21f0      	movs	r1, #240	; 0xf0
 8001a02:	47a0      	blx	r4
 8001a04:	e580      	b.n	8001508 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a06:	78b4      	ldrb	r4, [r6, #2]
 8001a08:	7873      	ldrb	r3, [r6, #1]
 8001a0a:	78f0      	ldrb	r0, [r6, #3]
 8001a0c:	7932      	ldrb	r2, [r6, #4]
 8001a0e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001a12:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a16:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f000 fca4 	bl	8002368 <UI_SetReg>
 8001a20:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a24:	e595      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001a26:	78b2      	ldrb	r2, [r6, #2]
 8001a28:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001a30:	f000 fc9a 	bl	8002368 <UI_SetReg>
 8001a34:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a38:	e58b      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001a3a:	7872      	ldrb	r2, [r6, #1]
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f000 fc93 	bl	8002368 <UI_SetReg>
 8001a42:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a46:	e584      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a48:	7872      	ldrb	r2, [r6, #1]
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 fc8b 	bl	8002368 <UI_SetReg>
 8001a52:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a56:	e57c      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a5e:	f88d 300e 	strb.w	r3, [sp, #14]
 8001a62:	e576      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f88d 300e 	strb.w	r3, [sp, #14]
 8001a6a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a6e:	e570      	b.n	8001552 <MCP_ReceivedFrame+0xa2>
 8001a70:	2326      	movs	r3, #38	; 0x26
 8001a72:	2124      	movs	r1, #36	; 0x24
 8001a74:	2222      	movs	r2, #34	; 0x22
 8001a76:	e6be      	b.n	80017f6 <MCP_ReceivedFrame+0x346>
 8001a78:	2aaaaaab 	.word	0x2aaaaaab
 8001a7c:	200005b0 	.word	0x200005b0

08001a80 <MCP_WaitNextFrame>:
{
 8001a80:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001a82:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001a84:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001a86:	6980      	ldr	r0, [r0, #24]
 8001a88:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001a90:	69a0      	ldr	r0, [r4, #24]
 8001a92:	6a23      	ldr	r3, [r4, #32]
}
 8001a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001a98:	4718      	bx	r3
 8001a9a:	bf00      	nop

08001a9c <MCP_Init>:
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	461e      	mov	r6, r3
  FCP_SetClient( pFCP, pHandle,
 8001aa4:	4d0a      	ldr	r5, [pc, #40]	; (8001ad0 <MCP_Init+0x34>)
  pHandle->s_fwVer = s_fwVer;
 8001aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001aa8:	6181      	str	r1, [r0, #24]
{
 8001aaa:	4617      	mov	r7, r2
  pHandle->s_fwVer = s_fwVer;
 8001aac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	9500      	str	r5, [sp, #0]
 8001ab4:	4621      	mov	r1, r4
{
 8001ab6:	9d08      	ldr	r5, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MCP_Init+0x38>)
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <MCP_Init+0x3c>)
 8001abc:	f002 fcc6 	bl	800444c <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001ac0:	e9c4 7607 	strd	r7, r6, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001ac4:	6265      	str	r5, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ffda 	bl	8001a80 <MCP_WaitNextFrame>
}
 8001acc:	b003      	add	sp, #12
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	08001add 	.word	0x08001add
 8001ad4:	080014b1 	.word	0x080014b1
 8001ad8:	08001ae5 	.word	0x08001ae5

08001adc <MCP_OnTimeOut>:
{
 8001adc:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001ade:	f7ff ffcf 	bl	8001a80 <MCP_WaitNextFrame>
}
 8001ae2:	bd08      	pop	{r3, pc}

08001ae4 <MCP_SentFrame>:
{
 8001ae4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001ae6:	f7ff ffcb 	bl	8001a80 <MCP_WaitNextFrame>
}
 8001aea:	bd08      	pop	{r3, pc}

08001aec <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001aec:	b530      	push	{r4, r5, lr}
 8001aee:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001af0:	f001 fc92 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001af6:	4d0c      	ldr	r5, [pc, #48]	; (8001b28 <MX_MotorControl_Init+0x3c>)
 8001af8:	4c0c      	ldr	r4, [pc, #48]	; (8001b2c <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001afa:	fba3 3000 	umull	r3, r0, r3, r0
 8001afe:	09c0      	lsrs	r0, r0, #7
 8001b00:	f001 fa98 	bl	8003034 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001b04:	4629      	mov	r1, r5
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff f954 	bl	8000db4 <MCboot>
  mc_lock_pins();
 8001b0c:	f7ff fc44 	bl	8001398 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <MX_MotorControl_Init+0x44>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4622      	mov	r2, r4
 8001b16:	462b      	mov	r3, r5
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_MotorControl_Init+0x48>)
 8001b1c:	f000 fba6 	bl	800226c <UI_TaskInit>
}
 8001b20:	b003      	add	sp, #12
 8001b22:	bd30      	pop	{r4, r5, pc}
 8001b24:	10624dd3 	.word	0x10624dd3
 8001b28:	200007fc 	.word	0x200007fc
 8001b2c:	200007f8 	.word	0x200007f8
 8001b30:	08006004 	.word	0x08006004
 8001b34:	20000560 	.word	0x20000560

08001b38 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b38:	4a5b      	ldr	r2, [pc, #364]	; (8001ca8 <RCM_RegisterRegConv+0x170>)
 8001b3a:	6813      	ldr	r3, [r2, #0]
{
 8001b3c:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d079      	beq.n	8001c36 <RCM_RegisterRegConv+0xfe>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b42:	7919      	ldrb	r1, [r3, #4]
 8001b44:	7904      	ldrb	r4, [r0, #4]
 8001b46:	42a1      	cmp	r1, r4
 8001b48:	d01e      	beq.n	8001b88 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b4a:	6851      	ldr	r1, [r2, #4]
 8001b4c:	2900      	cmp	r1, #0
 8001b4e:	f000 8085 	beq.w	8001c5c <RCM_RegisterRegConv+0x124>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b52:	790d      	ldrb	r5, [r1, #4]
 8001b54:	42ac      	cmp	r4, r5
  uint8_t handle=255;
 8001b56:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b5a:	d073      	beq.n	8001c44 <RCM_RegisterRegConv+0x10c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b5c:	6895      	ldr	r5, [r2, #8]
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	f000 8093 	beq.w	8001c8a <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b64:	7929      	ldrb	r1, [r5, #4]
 8001b66:	42a1      	cmp	r1, r4
 8001b68:	d072      	beq.n	8001c50 <RCM_RegisterRegConv+0x118>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b6a:	68d1      	ldr	r1, [r2, #12]
 8001b6c:	2900      	cmp	r1, #0
 8001b6e:	f000 8087 	beq.w	8001c80 <RCM_RegisterRegConv+0x148>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b72:	790d      	ldrb	r5, [r1, #4]
 8001b74:	42a5      	cmp	r5, r4
 8001b76:	d07c      	beq.n	8001c72 <RCM_RegisterRegConv+0x13a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	bf88      	it	hi
 8001b7c:	23ff      	movhi	r3, #255	; 0xff
 8001b7e:	f240 8089 	bls.w	8001c94 <RCM_RegisterRegConv+0x15c>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bcf0      	pop	{r4, r5, r6, r7}
 8001b86:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6801      	ldr	r1, [r0, #0]
 8001b8c:	4299      	cmp	r1, r3
 8001b8e:	d1dc      	bne.n	8001b4a <RCM_RegisterRegConv+0x12>
  uint8_t i=0;
 8001b90:	2300      	movs	r3, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001b92:	688c      	ldr	r4, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001b94:	4d45      	ldr	r5, [pc, #276]	; (8001cac <RCM_RegisterRegConv+0x174>)
      RCM_handle_array [handle] = regConv;
 8001b96:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001ba0:	07e2      	lsls	r2, r4, #31
 8001ba2:	d411      	bmi.n	8001bc8 <RCM_RegisterRegConv+0x90>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001ba4:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001ba6:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001baa:	f022 0220 	bic.w	r2, r2, #32
 8001bae:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001bb0:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001bb2:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001bb4:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bbc:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001bbe:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001bc0:	688a      	ldr	r2, [r1, #8]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001bc8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001bca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bce:	62ca      	str	r2, [r1, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001bd0:	7902      	ldrb	r2, [r0, #4]
 8001bd2:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8001bd6:	2a09      	cmp	r2, #9
 8001bd8:	bf94      	ite	ls
 8001bda:	f042 7200 	orrls.w	r2, r2, #33554432	; 0x2000000
 8001bde:	3c1e      	subhi	r4, #30
 8001be0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001be8:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001bec:	fab7 f487 	clz	r4, r7
 8001bf0:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001bf4:	40e7      	lsrs	r7, r4
 8001bf6:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8001bf8:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001bfc:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
 8001c00:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001c04:	fa94 f6a4 	rbit	r6, r4
 8001c08:	fab6 f686 	clz	r6, r6
 8001c0c:	fa94 f4a4 	rbit	r4, r4
 8001c10:	f04f 0c07 	mov.w	ip, #7
 8001c14:	fab4 f484 	clz	r4, r4
 8001c18:	fa22 f606 	lsr.w	r6, r2, r6
 8001c1c:	6880      	ldr	r0, [r0, #8]
 8001c1e:	40e2      	lsrs	r2, r4
 8001c20:	fa0c f606 	lsl.w	r6, ip, r6
 8001c24:	4090      	lsls	r0, r2
 8001c26:	ea25 0206 	bic.w	r2, r5, r6
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bcf0      	pop	{r4, r5, r6, r7}
 8001c34:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c36:	6851      	ldr	r1, [r2, #4]
 8001c38:	2900      	cmp	r1, #0
 8001c3a:	d02d      	beq.n	8001c98 <RCM_RegisterRegConv+0x160>
 8001c3c:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c3e:	790d      	ldrb	r5, [r1, #4]
 8001c40:	42ac      	cmp	r4, r5
 8001c42:	d18b      	bne.n	8001b5c <RCM_RegisterRegConv+0x24>
 8001c44:	680d      	ldr	r5, [r1, #0]
 8001c46:	6801      	ldr	r1, [r0, #0]
 8001c48:	428d      	cmp	r5, r1
 8001c4a:	d187      	bne.n	8001b5c <RCM_RegisterRegConv+0x24>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e7a0      	b.n	8001b92 <RCM_RegisterRegConv+0x5a>
 8001c50:	682d      	ldr	r5, [r5, #0]
 8001c52:	6801      	ldr	r1, [r0, #0]
 8001c54:	428d      	cmp	r5, r1
 8001c56:	d188      	bne.n	8001b6a <RCM_RegisterRegConv+0x32>
      i++;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e79a      	b.n	8001b92 <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c5c:	6895      	ldr	r5, [r2, #8]
      i++;
 8001c5e:	2301      	movs	r3, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c60:	2d00      	cmp	r5, #0
 8001c62:	f47f af7f 	bne.w	8001b64 <RCM_RegisterRegConv+0x2c>
 8001c66:	68d1      	ldr	r1, [r2, #12]
 8001c68:	b1a1      	cbz	r1, 8001c94 <RCM_RegisterRegConv+0x15c>
 8001c6a:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c6c:	790d      	ldrb	r5, [r1, #4]
 8001c6e:	42a5      	cmp	r5, r4
 8001c70:	d182      	bne.n	8001b78 <RCM_RegisterRegConv+0x40>
 8001c72:	680c      	ldr	r4, [r1, #0]
 8001c74:	6801      	ldr	r1, [r0, #0]
 8001c76:	428c      	cmp	r4, r1
 8001c78:	f47f af7e 	bne.w	8001b78 <RCM_RegisterRegConv+0x40>
      i++;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e788      	b.n	8001b92 <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	f67f af79 	bls.w	8001b78 <RCM_RegisterRegConv+0x40>
 8001c86:	6801      	ldr	r1, [r0, #0]
 8001c88:	e7f8      	b.n	8001c7c <RCM_RegisterRegConv+0x144>
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf8c      	ite	hi
 8001c8e:	2302      	movhi	r3, #2
 8001c90:	2300      	movls	r3, #0
 8001c92:	e7e8      	b.n	8001c66 <RCM_RegisterRegConv+0x12e>
 8001c94:	6801      	ldr	r1, [r0, #0]
 8001c96:	e77c      	b.n	8001b92 <RCM_RegisterRegConv+0x5a>
 8001c98:	6895      	ldr	r5, [r2, #8]
 8001c9a:	b115      	cbz	r5, 8001ca2 <RCM_RegisterRegConv+0x16a>
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	7904      	ldrb	r4, [r0, #4]
 8001ca0:	e760      	b.n	8001b64 <RCM_RegisterRegConv+0x2c>
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	e7df      	b.n	8001c66 <RCM_RegisterRegConv+0x12e>
 8001ca6:	bf00      	nop
 8001ca8:	20000828 	.word	0x20000828
 8001cac:	20000804 	.word	0x20000804

08001cb0 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001cb0:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <RCM_ExecRegularConv+0x64>)
 8001cb4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001cb8:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001cc0:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001cc2:	bf8c      	ite	hi
 8001cc4:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001cc6:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001cca:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001cce:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001cd2:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001cd6:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001cda:	fab1 f181 	clz	r1, r1
 8001cde:	40cd      	lsrs	r5, r1
 8001ce0:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001cec:	f020 001f 	bic.w	r0, r0, #31
 8001cf0:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8001cf8:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001cfc:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001cfe:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001d00:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001d04:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001d06:	079b      	lsls	r3, r3, #30
 8001d08:	d5fc      	bpl.n	8001d04 <RCM_ExecRegularConv+0x54>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001d0a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001d0c:	bc30      	pop	{r4, r5}
 8001d0e:	b280      	uxth	r0, r0
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000828 	.word	0x20000828

08001d18 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001d18:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001d1a:	4c23      	ldr	r4, [pc, #140]	; (8001da8 <RCM_ExecUserConv+0x90>)
 8001d1c:	7823      	ldrb	r3, [r4, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001d22:	bcf0      	pop	{r4, r5, r6, r7}
 8001d24:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d26:	4a21      	ldr	r2, [pc, #132]	; (8001dac <RCM_ExecUserConv+0x94>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <RCM_ExecUserConv+0x98>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d2a:	7810      	ldrb	r0, [r2, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d2c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d30:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d38:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d3a:	bf8c      	ite	hi
 8001d3c:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d3e:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001d42:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001d46:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d4a:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001d4e:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001d52:	fab1 f181 	clz	r1, r1
 8001d56:	40cf      	lsrs	r7, r1
 8001d58:	f102 062c 	add.w	r6, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8001d64:	f025 051f 	bic.w	r5, r5, #31
 8001d68:	432b      	orrs	r3, r5
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001d6a:	0151      	lsls	r1, r2, #5
 8001d6c:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 8001d70:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001d74:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001d76:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8001d78:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001d7c:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001d7e:	079b      	lsls	r3, r3, #30
 8001d80:	d5fc      	bpl.n	8001d7c <RCM_ExecUserConv+0x64>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <RCM_ExecUserConv+0x9c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001d84:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d86:	4e0c      	ldr	r6, [pc, #48]	; (8001db8 <RCM_ExecUserConv+0xa0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001d88:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8001d8c:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001d8e:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d90:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001d92:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001d94:	2d00      	cmp	r5, #0
 8001d96:	d0c4      	beq.n	8001d22 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001d98:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001d9c:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001d9e:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001da0:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001da2:	462b      	mov	r3, r5
}
 8001da4:	bcf0      	pop	{r4, r5, r6, r7}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001da6:	4718      	bx	r3
 8001da8:	20000824 	.word	0x20000824
 8001dac:	20000800 	.word	0x20000800
 8001db0:	20000828 	.word	0x20000828
 8001db4:	20000804 	.word	0x20000804
 8001db8:	20000838 	.word	0x20000838

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_MspInit+0x38>)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	9100      	str	r1, [sp, #0]
 8001dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
 8001dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001dd2:	9200      	str	r2, [sp, #0]
 8001dd4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	9101      	str	r1, [sp, #4]
 8001dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001dea:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dec:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001dee:	f001 b8cb 	b.w	8002f88 <HAL_NVIC_SetPriorityGrouping>
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001dfa:	6803      	ldr	r3, [r0, #0]
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <HAL_ADC_MspInit+0xc4>)
{
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001e02:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001e08:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001e0c:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8001e0e:	d023      	beq.n	8001e58 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <HAL_ADC_MspInit+0xc8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d001      	beq.n	8001e1a <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e16:	b00b      	add	sp, #44	; 0x2c
 8001e18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_ADC_MspInit+0xcc>)
 8001e1c:	9403      	str	r4, [sp, #12]
 8001e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001e20:	4829      	ldr	r0, [pc, #164]	; (8001ec8 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
 8001e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001e2e:	9203      	str	r2, [sp, #12]
 8001e30:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	9404      	str	r4, [sp, #16]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001e44:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e46:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001e48:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f001 f910 	bl	8003074 <HAL_GPIO_Init>
}
 8001e54:	b00b      	add	sp, #44	; 0x2c
 8001e56:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_ADC_MspInit+0xcc>)
 8001e5a:	9400      	str	r4, [sp, #0]
 8001e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	481a      	ldr	r0, [pc, #104]	; (8001ec8 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
 8001e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e68:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001e6c:	9200      	str	r2, [sp, #0]
 8001e6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	9401      	str	r4, [sp, #4]
 8001e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	f002 0201 	and.w	r2, r2, #1
 8001e80:	9201      	str	r2, [sp, #4]
 8001e82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	9402      	str	r4, [sp, #8]
 8001e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e88:	f042 0204 	orr.w	r2, r2, #4
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e96:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8001e98:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f001 f8e7 	bl	8003074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001ea6:	2320      	movs	r3, #32
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	a905      	add	r1, sp, #20
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <HAL_ADC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001eac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f001 f8df 	bl	8003074 <HAL_GPIO_Init>
}
 8001eb6:	b00b      	add	sp, #44	; 0x2c
 8001eb8:	bd30      	pop	{r4, r5, pc}
 8001eba:	bf00      	nop
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	40012100 	.word	0x40012100
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020800 	.word	0x40020800

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001ed2:	6803      	ldr	r3, [r0, #0]
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <HAL_TIM_Base_MspInit+0xd8>)
{
 8001ed6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 8001eda:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001ee0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001ee4:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 8001ee6:	d03d      	beq.n	8001f64 <HAL_TIM_Base_MspInit+0x94>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d001      	beq.n	8001ef2 <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eee:	b00a      	add	sp, #40	; 0x28
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001ef6:	9402      	str	r4, [sp, #8]
 8001ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	482c      	ldr	r0, [pc, #176]	; (8001fac <HAL_TIM_Base_MspInit+0xdc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
 8001f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f04:	f002 0201 	and.w	r2, r2, #1
 8001f08:	9202      	str	r2, [sp, #8]
 8001f0a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	9403      	str	r4, [sp, #12]
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	f042 0202 	orr.w	r2, r2, #2
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f18:	f002 0202 	and.w	r2, r2, #2
 8001f1c:	9203      	str	r2, [sp, #12]
 8001f1e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	9404      	str	r4, [sp, #16]
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f34:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8001f36:	f44f 6381 	mov.w	r3, #1032	; 0x408
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f42:	e9cd 5608 	strd	r5, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f001 f895 	bl	8003074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	a905      	add	r1, sp, #20
 8001f50:	4817      	ldr	r0, [pc, #92]	; (8001fb0 <HAL_TIM_Base_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f54:	e9cd 5608 	strd	r5, r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001f5a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f001 f88a 	bl	8003074 <HAL_GPIO_Init>
}
 8001f60:	b00a      	add	sp, #40	; 0x28
 8001f62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_TIM_Base_MspInit+0xe4>)
 8001f66:	9400      	str	r4, [sp, #0]
 8001f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <HAL_TIM_Base_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	f002 0201 	and.w	r2, r2, #1
 8001f78:	9200      	str	r2, [sp, #0]
 8001f7a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	9401      	str	r4, [sp, #4]
 8001f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f8e:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001f92:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001f94:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f98:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9e:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f001 f868 	bl	8003074 <HAL_GPIO_Init>
}
 8001fa4:	b00a      	add	sp, #40	; 0x28
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001fba:	6801      	ldr	r1, [r0, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_TIM_MspPostInit+0x7c>)
{
 8001fbe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001fc2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001fc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001fcc:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8001fce:	d001      	beq.n	8001fd4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fd0:	b009      	add	sp, #36	; 0x24
 8001fd2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	4816      	ldr	r0, [pc, #88]	; (8002038 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	f041 0102 	orr.w	r1, r1, #2
 8001fe2:	6311      	str	r1, [r2, #48]	; 0x30
 8001fe4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fe6:	f001 0102 	and.w	r1, r1, #2
 8001fea:	9101      	str	r1, [sp, #4]
 8001fec:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002002:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002004:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800200c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002012:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f001 f82d 	bl	8003074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800201a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	a903      	add	r1, sp, #12
 8002020:	4806      	ldr	r0, [pc, #24]	; (800203c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002022:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002024:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002028:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f001 f822 	bl	8003074 <HAL_GPIO_Init>
}
 8002030:	b009      	add	sp, #36	; 0x24
 8002032:	bd30      	pop	{r4, r5, pc}
 8002034:	40010000 	.word	0x40010000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002040:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002042:	6801      	ldr	r1, [r0, #0]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_UART_MspInit+0x60>)
{
 8002046:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800204a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002050:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002054:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002056:	d001      	beq.n	800205c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002058:	b009      	add	sp, #36	; 0x24
 800205a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800205c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	480f      	ldr	r0, [pc, #60]	; (80020a4 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002066:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800206a:	6411      	str	r1, [r2, #64]	; 0x40
 800206c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800206e:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8002072:	9101      	str	r1, [sp, #4]
 8002074:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800208e:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002092:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f000 ffec 	bl	8003074 <HAL_GPIO_Init>
}
 800209c:	b009      	add	sp, #36	; 0x24
 800209e:	bd30      	pop	{r4, r5, pc}
 80020a0:	40004400 	.word	0x40004400
 80020a4:	40020000 	.word	0x40020000

080020a8 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <ADC_IRQHandler+0x24>)
 80020aa:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80020ac:	0752      	lsls	r2, r2, #29
 80020ae:	d406      	bmi.n	80020be <ADC_IRQHandler+0x16>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <ADC_IRQHandler+0x28>)
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	f023 030c 	bic.w	r3, r3, #12
 80020b8:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80020ba:	f7ff b87b 	b.w	80011b4 <TSK_HighFrequencyTask>
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f022 020c 	bic.w	r2, r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80020c6:	f7ff b875 	b.w	80011b4 <TSK_HighFrequencyTask>
 80020ca:	bf00      	nop
 80020cc:	40012000 	.word	0x40012000
 80020d0:	40012200 	.word	0x40012200

080020d4 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80020d8:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020da:	f06f 0201 	mvn.w	r2, #1
 80020de:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80020e0:	f002 bf7a 	b.w	8004fd8 <ICS_TIMx_UP_IRQHandler>
 80020e4:	20000314 	.word	0x20000314

080020e8 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80020ea:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80020ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80020ee:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	0612      	lsls	r2, r2, #24
 80020f4:	d504      	bpl.n	8002100 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80020f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020fa:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 80020fc:	f002 ffb6 	bl	800506c <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002104:	f7ff b828 	b.w	8001158 <MC_Scheduler>
 8002108:	20000314 	.word	0x20000314

0800210c <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 800210c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 800210e:	4c0c      	ldr	r4, [pc, #48]	; (8002140 <TIM2_IRQHandler+0x34>)
 8002110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	07d1      	lsls	r1, r2, #31
 8002116:	d40b      	bmi.n	8002130 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	0792      	lsls	r2, r2, #30
 800211c:	d400      	bmi.n	8002120 <TIM2_IRQHandler+0x14>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800211e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002120:	f06f 0202 	mvn.w	r2, #2
 8002124:	611a      	str	r2, [r3, #16]
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <TIM2_IRQHandler+0x34>)
}
 8002128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 800212c:	f002 bb42 	b.w	80047b4 <HALL_TIMx_CC_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002130:	f06f 0201 	mvn.w	r2, #1
 8002134:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8002136:	4620      	mov	r0, r4
 8002138:	f002 fce0 	bl	8004afc <HALL_TIMx_UP_IRQHandler>
 800213c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800213e:	e7eb      	b.n	8002118 <TIM2_IRQHandler+0xc>
 8002140:	200000b4 	.word	0x200000b4

08002144 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002144:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002146:	4c1d      	ldr	r4, [pc, #116]	; (80021bc <USART2_IRQHandler+0x78>)
 8002148:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	0691      	lsls	r1, r2, #26
{
 8002150:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002152:	d41d      	bmi.n	8002190 <USART2_IRQHandler+0x4c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002154:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002156:	0612      	lsls	r2, r2, #24
 8002158:	d414      	bmi.n	8002184 <USART2_IRQHandler+0x40>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800215a:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800215c:	071b      	lsls	r3, r3, #28
 800215e:	d401      	bmi.n	8002164 <USART2_IRQHandler+0x20>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002160:	b002      	add	sp, #8
 8002162:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002164:	4815      	ldr	r0, [pc, #84]	; (80021bc <USART2_IRQHandler+0x78>)
 8002166:	f003 fdbf 	bl	8005ce8 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800216a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002172:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002178:	9b01      	ldr	r3, [sp, #4]
}
 800217a:	b002      	add	sp, #8
 800217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002180:	f000 b8d2 	b.w	8002328 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <USART2_IRQHandler+0x78>)
 8002186:	f003 fc79 	bl	8005a7c <UFCP_TX_IRQ_Handler>
 800218a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800218e:	e7e4      	b.n	800215a <USART2_IRQHandler+0x16>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002190:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002192:	4620      	mov	r0, r4
 8002194:	b2c9      	uxtb	r1, r1
 8002196:	f003 fd45 	bl	8005c24 <UFCP_RX_IRQ_Handler>
 800219a:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <USART2_IRQHandler+0x6c>
    if (retVal == 2)
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d002      	beq.n	80021aa <USART2_IRQHandler+0x66>
 80021a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80021a8:	e7d4      	b.n	8002154 <USART2_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 80021aa:	f000 f8bd 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
 80021ae:	e7f9      	b.n	80021a4 <USART2_IRQHandler+0x60>
      UI_SerialCommunicationTimeOutStart();
 80021b0:	f000 f8c0 	bl	8002334 <UI_SerialCommunicationTimeOutStart>
 80021b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80021b8:	e7cc      	b.n	8002154 <USART2_IRQHandler+0x10>
 80021ba:	bf00      	nop
 80021bc:	20000424 	.word	0x20000424

080021c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80021c0:	b530      	push	{r4, r5, lr}
 80021c2:	b083      	sub	sp, #12
 80021c4:	4c1c      	ldr	r4, [pc, #112]	; (8002238 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80021c6:	f7ff f8d7 	bl	8001378 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80021ca:	4625      	mov	r5, r4
 80021cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80021d0:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80021d2:	0712      	lsls	r2, r2, #28
 80021d4:	d41d      	bmi.n	8002212 <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80021d6:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021d8:	0610      	lsls	r0, r2, #24
 80021da:	d40f      	bmi.n	80021fc <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80021dc:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80021de:	0692      	lsls	r2, r2, #26
 80021e0:	d5f6      	bpl.n	80021d0 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021e2:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80021e4:	4628      	mov	r0, r5
 80021e6:	b2c9      	uxtb	r1, r1
 80021e8:	f003 fd1c 	bl	8005c24 <UFCP_RX_IRQ_Handler>
 80021ec:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d01f      	beq.n	8002232 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d1ea      	bne.n	80021cc <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80021f6:	f000 f897 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
 80021fa:	e7e7      	b.n	80021cc <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80021fc:	4628      	mov	r0, r5
 80021fe:	f003 fc3d 	bl	8005a7c <UFCP_TX_IRQ_Handler>
 8002202:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002206:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002208:	0691      	lsls	r1, r2, #26
 800220a:	d4ea      	bmi.n	80021e2 <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800220c:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800220e:	0712      	lsls	r2, r2, #28
 8002210:	d5e1      	bpl.n	80021d6 <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002212:	4628      	mov	r0, r5
 8002214:	f003 fd68 	bl	8005ce8 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002218:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002220:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002226:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002228:	f000 f87e 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
 800222c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002230:	e7d1      	b.n	80021d6 <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8002232:	f000 f87f 	bl	8002334 <UI_SerialCommunicationTimeOutStart>
 8002236:	e7c9      	b.n	80021cc <HardFault_Handler+0xc>
 8002238:	20000424 	.word	0x20000424

0800223c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800223c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800223e:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <SysTick_Handler+0x2c>)
 8002240:	7823      	ldrb	r3, [r4, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d006      	beq.n	8002254 <SysTick_Handler+0x18>
 8002246:	3301      	adds	r3, #1
 8002248:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800224a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002250:	f7ff b882 	b.w	8001358 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002254:	f000 fc38 	bl	8002ac8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002258:	f000 ff08 	bl	800306c <HAL_SYSTICK_IRQHandler>
 800225c:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 800225e:	7023      	strb	r3, [r4, #0]
}
 8002260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002264:	f7ff b878 	b.w	8001358 <MC_RunMotorControlTasks>
 8002268:	20000564 	.word	0x20000564

0800226c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002270:	4d16      	ldr	r5, [pc, #88]	; (80022cc <UI_TaskInit+0x60>)
    pMCP = &MCP_UI_Params;
 8002272:	f8df c070 	ldr.w	ip, [pc, #112]	; 80022e4 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002276:	4e16      	ldr	r6, [pc, #88]	; (80022d0 <UI_TaskInit+0x64>)
{
 8002278:	4682      	mov	sl, r0
 800227a:	460f      	mov	r7, r1
 800227c:	4690      	mov	r8, r2
 800227e:	4699      	mov	r9, r3
    pMCP->_Super = UI_Params;
 8002280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002282:	4664      	mov	r4, ip
 8002284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002286:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 800228a:	b083      	sub	sp, #12
    pMCP = &MCP_UI_Params;
 800228c:	4d11      	ldr	r5, [pc, #68]	; (80022d4 <UI_TaskInit+0x68>)
{
 800228e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    pMCP = &MCP_UI_Params;
 8002292:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002296:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 800229a:	4630      	mov	r0, r6
 800229c:	f003 fbec 	bl	8005a78 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <UI_TaskInit+0x6c>)
 80022a2:	6828      	ldr	r0, [r5, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <UI_TaskInit+0x70>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4631      	mov	r1, r6
 80022aa:	f8cd b004 	str.w	fp, [sp, #4]
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <UI_TaskInit+0x74>)
 80022b0:	f7ff fbf4 	bl	8001a9c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80022b4:	6828      	ldr	r0, [r5, #0]
 80022b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80022ba:	464b      	mov	r3, r9
 80022bc:	4642      	mov	r2, r8
 80022be:	4639      	mov	r1, r7

}
 80022c0:	b003      	add	sp, #12
 80022c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80022c6:	f000 b83b 	b.w	8002340 <UI_Init>
 80022ca:	bf00      	nop
 80022cc:	20000590 	.word	0x20000590
 80022d0:	20000424 	.word	0x20000424
 80022d4:	200005bc 	.word	0x200005bc
 80022d8:	08005d05 	.word	0x08005d05
 80022dc:	08005b01 	.word	0x08005b01
 80022e0:	08005add 	.word	0x08005add
 80022e4:	2000083c 	.word	0x2000083c

080022e8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <UI_Scheduler+0x34>)
 80022ea:	8813      	ldrh	r3, [r2, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b11b      	cbz	r3, 80022f8 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80022f0:	8813      	ldrh	r3, [r2, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <UI_Scheduler+0x38>)
 80022fa:	8813      	ldrh	r3, [r2, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d903      	bls.n	8002308 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 8002300:	8813      	ldrh	r3, [r2, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <UI_Scheduler+0x3c>)
 800230a:	8813      	ldrh	r3, [r2, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d903      	bls.n	8002318 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 8002310:	8813      	ldrh	r3, [r2, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]
  }
}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200005ba 	.word	0x200005ba
 8002320:	200005b8 	.word	0x200005b8
 8002324:	20000566 	.word	0x20000566

08002328 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <UI_SerialCommunicationTimeOutStop+0x8>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
}
 800232e:	4770      	bx	lr
 8002330:	200005b8 	.word	0x200005b8

08002334 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002334:	4b01      	ldr	r3, [pc, #4]	; (800233c <UI_SerialCommunicationTimeOutStart+0x8>)
 8002336:	224f      	movs	r2, #79	; 0x4f
 8002338:	801a      	strh	r2, [r3, #0]
}
 800233a:	4770      	bx	lr
 800233c:	200005b8 	.word	0x200005b8

08002340 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002340:	b430      	push	{r4, r5}
 8002342:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002344:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002346:	2500      	movs	r5, #0
 8002348:	7505      	strb	r5, [r0, #20]
  pHandle->bDriveNum = bMCNum;
 800234a:	7101      	strb	r1, [r0, #4]
  pHandle->pMCT = pMCT;
 800234c:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8002350:	bc30      	pop	{r4, r5}
 8002352:	4770      	bx	lr

08002354 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002354:	7903      	ldrb	r3, [r0, #4]
 8002356:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002358:	bf86      	itte	hi
 800235a:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 800235c:	2001      	movhi	r0, #1
    retVal = false;
 800235e:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002364:	7d00      	ldrb	r0, [r0, #20]
 8002366:	4770      	bx	lr

08002368 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002368:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800236a:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800236e:	7d03      	ldrb	r3, [r0, #20]
{
 8002370:	b085      	sub	sp, #20
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002372:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002376:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 800237a:	295b      	cmp	r1, #91	; 0x5b
 800237c:	f200 80a0 	bhi.w	80024c0 <UI_SetReg+0x158>
 8002380:	e8df f001 	tbb	[pc, r1]
 8002384:	3f9e9e3b 	.word	0x3f9e9e3b
 8002388:	524c469e 	.word	0x524c469e
 800238c:	726c6658 	.word	0x726c6658
 8002390:	928c8678 	.word	0x928c8678
 8002394:	9e9e9e9e 	.word	0x9e9e9e9e
 8002398:	9e9e9e9e 	.word	0x9e9e9e9e
 800239c:	9e9e9e9e 	.word	0x9e9e9e9e
 80023a0:	9e9e9e9e 	.word	0x9e9e9e9e
 80023a4:	9e9e9e9e 	.word	0x9e9e9e9e
 80023a8:	9e9e9e9e 	.word	0x9e9e9e9e
 80023ac:	9e9e9e9e 	.word	0x9e9e9e9e
 80023b0:	9e9e9e9e 	.word	0x9e9e9e9e
 80023b4:	9e9e9e9e 	.word	0x9e9e9e9e
 80023b8:	9e9e9e9e 	.word	0x9e9e9e9e
 80023bc:	9e9e9e9e 	.word	0x9e9e9e9e
 80023c0:	9e9e9e9e 	.word	0x9e9e9e9e
 80023c4:	9e9e989e 	.word	0x9e9e989e
 80023c8:	9e9e9e9e 	.word	0x9e9e9e9e
 80023cc:	9e9e9e9e 	.word	0x9e9e9e9e
 80023d0:	9e9e9e9e 	.word	0x9e9e9e9e
 80023d4:	9e9e9e9e 	.word	0x9e9e9e9e
 80023d8:	9e9e9e9e 	.word	0x9e9e9e9e
 80023dc:	2e9e9e9e 	.word	0x2e9e9e9e
    }
    break;

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80023e0:	4942      	ldr	r1, [pc, #264]	; (80024ec <UI_SetReg+0x184>)
 80023e2:	fb81 3102 	smull	r3, r1, r1, r2
 80023e6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80023ea:	4628      	mov	r0, r5
 80023ec:	b209      	sxth	r1, r1
 80023ee:	2200      	movs	r2, #0
 80023f0:	f7fe fb04 	bl	80009fc <MCI_ExecSpeedRamp>
  bool retVal = true;
 80023f4:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 80023f6:	b005      	add	sp, #20
 80023f8:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80023fa:	b2d1      	uxtb	r1, r2
 80023fc:	f7ff ffaa 	bl	8002354 <UI_SelectMC>
    break;
 8002400:	e7f9      	b.n	80023f6 <UI_SetReg+0x8e>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002402:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 8002406:	d05d      	beq.n	80024c4 <UI_SetReg+0x15c>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002408:	2c01      	cmp	r4, #1
 800240a:	d065      	beq.n	80024d8 <UI_SetReg+0x170>
  bool retVal = true;
 800240c:	2001      	movs	r0, #1
 800240e:	e7f2      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	b211      	sxth	r1, r2
 8002414:	f002 fede 	bl	80051d4 <PID_SetKP>
  bool retVal = true;
 8002418:	2001      	movs	r0, #1
    break;
 800241a:	e7ec      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	b211      	sxth	r1, r2
 8002420:	f002 feda 	bl	80051d8 <PID_SetKI>
  bool retVal = true;
 8002424:	2001      	movs	r0, #1
    break;
 8002426:	e7e6      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	b211      	sxth	r1, r2
 800242c:	f002 fee4 	bl	80051f8 <PID_SetKD>
  bool retVal = true;
 8002430:	2001      	movs	r0, #1
    break;
 8002432:	e7e0      	b.n	80023f6 <UI_SetReg+0x8e>
      currComp = MCI_GetIqdref(pMCI);
 8002434:	4628      	mov	r0, r5
 8002436:	9201      	str	r2, [sp, #4]
 8002438:	f7fe fb88 	bl	8000b4c <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 800243c:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 800243e:	9003      	str	r0, [sp, #12]
      currComp.q = (int16_t)wValue;
 8002440:	f8ad 200c 	strh.w	r2, [sp, #12]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002444:	4628      	mov	r0, r5
 8002446:	9903      	ldr	r1, [sp, #12]
 8002448:	f7fe faec 	bl	8000a24 <MCI_SetCurrentReferences>
  bool retVal = true;
 800244c:	2001      	movs	r0, #1
    break;
 800244e:	e7d2      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002450:	6858      	ldr	r0, [r3, #4]
 8002452:	b211      	sxth	r1, r2
 8002454:	f002 febe 	bl	80051d4 <PID_SetKP>
  bool retVal = true;
 8002458:	2001      	movs	r0, #1
    break;
 800245a:	e7cc      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 800245c:	6858      	ldr	r0, [r3, #4]
 800245e:	b211      	sxth	r1, r2
 8002460:	f002 feba 	bl	80051d8 <PID_SetKI>
  bool retVal = true;
 8002464:	2001      	movs	r0, #1
    break;
 8002466:	e7c6      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002468:	6858      	ldr	r0, [r3, #4]
 800246a:	b211      	sxth	r1, r2
 800246c:	f002 fec4 	bl	80051f8 <PID_SetKD>
  bool retVal = true;
 8002470:	2001      	movs	r0, #1
    break;
 8002472:	e7c0      	b.n	80023f6 <UI_SetReg+0x8e>
      currComp = MCI_GetIqdref(pMCI);
 8002474:	4628      	mov	r0, r5
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	f7fe fb68 	bl	8000b4c <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 800247c:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 800247e:	9003      	str	r0, [sp, #12]
      currComp.d = (int16_t)wValue;
 8002480:	f8ad 200e 	strh.w	r2, [sp, #14]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002484:	4628      	mov	r0, r5
 8002486:	9903      	ldr	r1, [sp, #12]
 8002488:	f7fe facc 	bl	8000a24 <MCI_SetCurrentReferences>
  bool retVal = true;
 800248c:	2001      	movs	r0, #1
    break;
 800248e:	e7b2      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002490:	6898      	ldr	r0, [r3, #8]
 8002492:	b211      	sxth	r1, r2
 8002494:	f002 fe9e 	bl	80051d4 <PID_SetKP>
  bool retVal = true;
 8002498:	2001      	movs	r0, #1
    break;
 800249a:	e7ac      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800249c:	6898      	ldr	r0, [r3, #8]
 800249e:	b211      	sxth	r1, r2
 80024a0:	f002 fe9a 	bl	80051d8 <PID_SetKI>
  bool retVal = true;
 80024a4:	2001      	movs	r0, #1
    break;
 80024a6:	e7a6      	b.n	80023f6 <UI_SetReg+0x8e>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80024a8:	6898      	ldr	r0, [r3, #8]
 80024aa:	b211      	sxth	r1, r2
 80024ac:	f002 fea4 	bl	80051f8 <PID_SetKD>
  bool retVal = true;
 80024b0:	2001      	movs	r0, #1
    break;
 80024b2:	e7a0      	b.n	80023f6 <UI_SetReg+0x8e>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80024b4:	4628      	mov	r0, r5
 80024b6:	b211      	sxth	r1, r2
 80024b8:	f7fe fb68 	bl	8000b8c <MCI_SetIdref>
  bool retVal = true;
 80024bc:	2001      	movs	r0, #1
    break;
 80024be:	e79a      	b.n	80023f6 <UI_SetReg+0x8e>
    retVal = false;
 80024c0:	2000      	movs	r0, #0
 80024c2:	e798      	b.n	80023f6 <UI_SetReg+0x8e>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80024c4:	4628      	mov	r0, r5
 80024c6:	f7fe fb5d 	bl	8000b84 <MCI_GetTeref>
 80024ca:	4622      	mov	r2, r4
 80024cc:	4601      	mov	r1, r0
 80024ce:	4628      	mov	r0, r5
 80024d0:	f7fe fa9c 	bl	8000a0c <MCI_ExecTorqueRamp>
  bool retVal = true;
 80024d4:	2001      	movs	r0, #1
 80024d6:	e78e      	b.n	80023f6 <UI_SetReg+0x8e>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80024d8:	4628      	mov	r0, r5
 80024da:	f7fe fb1b 	bl	8000b14 <MCI_GetMecSpeedRefUnit>
 80024de:	2200      	movs	r2, #0
 80024e0:	4601      	mov	r1, r0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fa8a 	bl	80009fc <MCI_ExecSpeedRamp>
  bool retVal = true;
 80024e8:	4620      	mov	r0, r4
 80024ea:	e784      	b.n	80023f6 <UI_SetReg+0x8e>
 80024ec:	2aaaaaab 	.word	0x2aaaaaab

080024f0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80024f2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024f6:	7d03      	ldrb	r3, [r0, #20]
{
 80024f8:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024fa:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80024fe:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002502:	2a00      	cmp	r2, #0
 8002504:	f000 8089 	beq.w	800261a <UI_GetReg+0x12a>
  {
    *success = true;
 8002508:	2601      	movs	r6, #1
 800250a:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 800250c:	2981      	cmp	r1, #129	; 0x81
 800250e:	f200 81db 	bhi.w	80028c8 <UI_GetReg+0x3d8>
 8002512:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002516:	0163      	.short	0x0163
 8002518:	0159015d 	.word	0x0159015d
 800251c:	01b601bd 	.word	0x01b601bd
 8002520:	01ae01b2 	.word	0x01ae01b2
 8002524:	00ff0194 	.word	0x00ff0194
 8002528:	0178017c 	.word	0x0178017c
 800252c:	00fa0174 	.word	0x00fa0174
 8002530:	016a016e 	.word	0x016a016e
 8002534:	01d90166 	.word	0x01d90166
 8002538:	01d901d9 	.word	0x01d901d9
 800253c:	01d901d9 	.word	0x01d901d9
 8002540:	01d901d9 	.word	0x01d901d9
 8002544:	01d901d9 	.word	0x01d901d9
 8002548:	01a101a5 	.word	0x01a101a5
 800254c:	01d9019d 	.word	0x01d9019d
 8002550:	01d201d9 	.word	0x01d201d9
 8002554:	01c801cd 	.word	0x01c801cd
 8002558:	01c101d9 	.word	0x01c101d9
 800255c:	014f0154 	.word	0x014f0154
 8002560:	01980180 	.word	0x01980180
 8002564:	01c801cd 	.word	0x01c801cd
 8002568:	00fa00ff 	.word	0x00fa00ff
 800256c:	018f01a9 	.word	0x018f01a9
 8002570:	0185018a 	.word	0x0185018a
 8002574:	0127013b 	.word	0x0127013b
 8002578:	01d901d9 	.word	0x01d901d9
 800257c:	01d901d9 	.word	0x01d901d9
 8002580:	01d901d9 	.word	0x01d901d9
 8002584:	01d901d9 	.word	0x01d901d9
 8002588:	01d901d9 	.word	0x01d901d9
 800258c:	01d901d9 	.word	0x01d901d9
 8002590:	01d901d9 	.word	0x01d901d9
 8002594:	01190120 	.word	0x01190120
 8002598:	01d900fa 	.word	0x01d900fa
 800259c:	01d901d9 	.word	0x01d901d9
 80025a0:	01d901d9 	.word	0x01d901d9
 80025a4:	01d901d9 	.word	0x01d901d9
 80025a8:	01d901d9 	.word	0x01d901d9
 80025ac:	01d901d9 	.word	0x01d901d9
 80025b0:	01d901d9 	.word	0x01d901d9
 80025b4:	01d901d9 	.word	0x01d901d9
 80025b8:	01d901d9 	.word	0x01d901d9
 80025bc:	01d901d9 	.word	0x01d901d9
 80025c0:	01d901d9 	.word	0x01d901d9
 80025c4:	01d901d9 	.word	0x01d901d9
 80025c8:	01d901d9 	.word	0x01d901d9
 80025cc:	01d90108 	.word	0x01d90108
 80025d0:	01d901d9 	.word	0x01d901d9
 80025d4:	01d901d9 	.word	0x01d901d9
 80025d8:	01d901d9 	.word	0x01d901d9
 80025dc:	01d901d9 	.word	0x01d901d9
 80025e0:	01d901d9 	.word	0x01d901d9
 80025e4:	01d901d9 	.word	0x01d901d9
 80025e8:	01d901d9 	.word	0x01d901d9
 80025ec:	01d901d9 	.word	0x01d901d9
 80025f0:	010401d9 	.word	0x010401d9
 80025f4:	01720115 	.word	0x01720115
 80025f8:	00f701d9 	.word	0x00f701d9
 80025fc:	01d900f7 	.word	0x01d900f7
 8002600:	01d901d9 	.word	0x01d901d9
 8002604:	01d901d9 	.word	0x01d901d9
 8002608:	01d901d9 	.word	0x01d901d9
 800260c:	01d901d9 	.word	0x01d901d9
 8002610:	01d901d9 	.word	0x01d901d9
 8002614:	01d901d9 	.word	0x01d901d9
 8002618:	00f7      	.short	0x00f7
 800261a:	2970      	cmp	r1, #112	; 0x70
 800261c:	d872      	bhi.n	8002704 <UI_GetReg+0x214>
 800261e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002622:	00dd      	.short	0x00dd
 8002624:	00d300d7 	.word	0x00d300d7
 8002628:	01300137 	.word	0x01300137
 800262c:	0128012c 	.word	0x0128012c
 8002630:	0079010e 	.word	0x0079010e
 8002634:	00f200f6 	.word	0x00f200f6
 8002638:	007400ee 	.word	0x007400ee
 800263c:	00e400e8 	.word	0x00e400e8
 8002640:	007100e0 	.word	0x007100e0
 8002644:	00710071 	.word	0x00710071
 8002648:	00710071 	.word	0x00710071
 800264c:	00710071 	.word	0x00710071
 8002650:	00710071 	.word	0x00710071
 8002654:	011b011f 	.word	0x011b011f
 8002658:	00710117 	.word	0x00710117
 800265c:	014c0071 	.word	0x014c0071
 8002660:	01420147 	.word	0x01420147
 8002664:	013b0071 	.word	0x013b0071
 8002668:	00c900ce 	.word	0x00c900ce
 800266c:	011200fa 	.word	0x011200fa
 8002670:	01420147 	.word	0x01420147
 8002674:	00740079 	.word	0x00740079
 8002678:	01090123 	.word	0x01090123
 800267c:	00ff0104 	.word	0x00ff0104
 8002680:	00a100b5 	.word	0x00a100b5
 8002684:	00710071 	.word	0x00710071
 8002688:	00710071 	.word	0x00710071
 800268c:	00710071 	.word	0x00710071
 8002690:	00710071 	.word	0x00710071
 8002694:	00710071 	.word	0x00710071
 8002698:	00710071 	.word	0x00710071
 800269c:	00710071 	.word	0x00710071
 80026a0:	0093009a 	.word	0x0093009a
 80026a4:	00710074 	.word	0x00710074
 80026a8:	00710071 	.word	0x00710071
 80026ac:	00710071 	.word	0x00710071
 80026b0:	00710071 	.word	0x00710071
 80026b4:	00710071 	.word	0x00710071
 80026b8:	00710071 	.word	0x00710071
 80026bc:	00710071 	.word	0x00710071
 80026c0:	00710071 	.word	0x00710071
 80026c4:	00710071 	.word	0x00710071
 80026c8:	00710071 	.word	0x00710071
 80026cc:	00710071 	.word	0x00710071
 80026d0:	00710071 	.word	0x00710071
 80026d4:	00710071 	.word	0x00710071
 80026d8:	00710082 	.word	0x00710082
 80026dc:	00710071 	.word	0x00710071
 80026e0:	00710071 	.word	0x00710071
 80026e4:	00710071 	.word	0x00710071
 80026e8:	00710071 	.word	0x00710071
 80026ec:	00710071 	.word	0x00710071
 80026f0:	00710071 	.word	0x00710071
 80026f4:	00710071 	.word	0x00710071
 80026f8:	00710071 	.word	0x00710071
 80026fc:	007e0071 	.word	0x007e0071
 8002700:	00ec008f 	.word	0x00ec008f
  int32_t bRetVal = 0;
 8002704:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8002706:	b00c      	add	sp, #48	; 0x30
 8002708:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800270a:	4620      	mov	r0, r4
 800270c:	f7fe fa1e 	bl	8000b4c <MCI_GetIqdref>
 8002710:	1400      	asrs	r0, r0, #16
    break;
 8002712:	e7f8      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002714:	4620      	mov	r0, r4
 8002716:	f7fe fa19 	bl	8000b4c <MCI_GetIqdref>
 800271a:	b200      	sxth	r0, r0
    break;
 800271c:	e7f3      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800271e:	6828      	ldr	r0, [r5, #0]
 8002720:	f002 fd66 	bl	80051f0 <PID_GetKPDivisor>
    break;
 8002724:	e7ef      	b.n	8002706 <UI_GetReg+0x216>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002726:	4620      	mov	r0, r4
 8002728:	f7fe f9de 	bl	8000ae8 <MCI_GetControlMode>
 800272c:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800272e:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002730:	f000 80d7 	beq.w	80028e2 <UI_GetReg+0x3f2>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002734:	f7fe f9ee 	bl	8000b14 <MCI_GetMecSpeedRefUnit>
 8002738:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800273c:	0040      	lsls	r0, r0, #1
 800273e:	e7e2      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002740:	6828      	ldr	r0, [r5, #0]
 8002742:	f002 fd57 	bl	80051f4 <PID_GetKIDivisor>
    break;
 8002746:	e7de      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002748:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800274a:	f003 f8d5 	bl	80058f8 <STC_GetMinAppNegativeMecSpeedUnit>
 800274e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002752:	0040      	lsls	r0, r0, #1
    break;
 8002754:	e7d7      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002756:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002758:	f003 f8cc 	bl	80058f4 <STC_GetMaxAppPositiveMecSpeedUnit>
 800275c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002760:	0040      	lsls	r0, r0, #1
    break;
 8002762:	e7d0      	b.n	8002706 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002764:	6902      	ldr	r2, [r0, #16]
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800276a:	0f1a      	lsrs	r2, r3, #28
 800276c:	3a01      	subs	r2, #1
 800276e:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002772:	2a01      	cmp	r2, #1
 8002774:	f103 33ff 	add.w	r3, r3, #4294967295
 8002778:	f240 80a9 	bls.w	80028ce <UI_GetReg+0x3de>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800277c:	2b01      	cmp	r3, #1
 800277e:	d8c1      	bhi.n	8002704 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002780:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002782:	2800      	cmp	r0, #0
 8002784:	d0be      	beq.n	8002704 <UI_GetReg+0x214>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002786:	f002 fff7 	bl	8005778 <SPD_GetS16Speed>
 800278a:	e7bc      	b.n	8002706 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800278c:	6902      	ldr	r2, [r0, #16]
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002792:	0f1a      	lsrs	r2, r3, #28
 8002794:	3a01      	subs	r2, #1
 8002796:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800279a:	2a01      	cmp	r2, #1
 800279c:	f103 33ff 	add.w	r3, r3, #4294967295
 80027a0:	f240 809a 	bls.w	80028d8 <UI_GetReg+0x3e8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d8ad      	bhi.n	8002704 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 80027a8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d0aa      	beq.n	8002704 <UI_GetReg+0x214>
        bRetVal = SPD_GetElAngle(pSPD);
 80027ae:	f002 ffa7 	bl	8005700 <SPD_GetElAngle>
 80027b2:	e7a8      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).b;
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7fe f9b1 	bl	8000b1c <MCI_GetIab>
 80027ba:	1400      	asrs	r0, r0, #16
    break;
 80027bc:	e7a3      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).a;
 80027be:	4620      	mov	r0, r4
 80027c0:	f7fe f9ac 	bl	8000b1c <MCI_GetIab>
 80027c4:	b200      	sxth	r0, r0
    break;
 80027c6:	e79e      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80027c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80027ca:	f003 f941 	bl	8005a50 <STM_GetState>
	break;
 80027ce:	e79a      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80027d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 80027d2:	b00c      	add	sp, #48	; 0x30
 80027d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80027d8:	f003 b948 	b.w	8005a6c <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80027dc:	f7ff fdc2 	bl	8002364 <UI_GetSelectedMC>
    break;
 80027e0:	e791      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80027e2:	68a8      	ldr	r0, [r5, #8]
 80027e4:	f002 fd0a 	bl	80051fc <PID_GetKD>
    break;
 80027e8:	e78d      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80027ea:	68a8      	ldr	r0, [r5, #8]
 80027ec:	f002 fcfa 	bl	80051e4 <PID_GetKI>
    break;
 80027f0:	e789      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80027f2:	68a8      	ldr	r0, [r5, #8]
 80027f4:	f002 fcf2 	bl	80051dc <PID_GetKP>
    break;
 80027f8:	e785      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)(MC_UID);
 80027fa:	483d      	ldr	r0, [pc, #244]	; (80028f0 <UI_GetReg+0x400>)
 80027fc:	e783      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80027fe:	6868      	ldr	r0, [r5, #4]
 8002800:	f002 fcfc 	bl	80051fc <PID_GetKD>
    break;
 8002804:	e77f      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002806:	6868      	ldr	r0, [r5, #4]
 8002808:	f002 fcec 	bl	80051e4 <PID_GetKI>
    break;
 800280c:	e77b      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800280e:	6868      	ldr	r0, [r5, #4]
 8002810:	f002 fce4 	bl	80051dc <PID_GetKP>
    break;
 8002814:	e777      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002816:	4620      	mov	r0, r4
 8002818:	f7fe f988 	bl	8000b2c <MCI_GetIalphabeta>
 800281c:	b200      	sxth	r0, r0
    break;
 800281e:	e772      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002820:	4620      	mov	r0, r4
 8002822:	f7fe f9a5 	bl	8000b70 <MCI_GetValphabeta>
 8002826:	1400      	asrs	r0, r0, #16
    break;
 8002828:	e76d      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800282a:	4620      	mov	r0, r4
 800282c:	f7fe f9a0 	bl	8000b70 <MCI_GetValphabeta>
 8002830:	b200      	sxth	r0, r0
    break;
 8002832:	e768      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002834:	4620      	mov	r0, r4
 8002836:	f7fe f991 	bl	8000b5c <MCI_GetVqd>
 800283a:	1400      	asrs	r0, r0, #16
    break;
 800283c:	e763      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800283e:	6828      	ldr	r0, [r5, #0]
 8002840:	f002 fcdc 	bl	80051fc <PID_GetKD>
    break;
 8002844:	e75f      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002846:	4620      	mov	r0, r4
 8002848:	f7fe f970 	bl	8000b2c <MCI_GetIalphabeta>
 800284c:	1400      	asrs	r0, r0, #16
    break;
 800284e:	e75a      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002850:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002852:	f002 fc5b 	bl	800510c <MPM_GetAvrgElMotorPowerW>
    break;
 8002856:	e756      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002858:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800285a:	f002 fc9d 	bl	8005198 <NTC_GetAvTemp_C>
    break;
 800285e:	e752      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002860:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002862:	f001 fdad 	bl	80043c0 <VBS_GetAvBusVoltage_V>
    break;
 8002866:	e74e      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002868:	4620      	mov	r0, r4
 800286a:	f7fe f977 	bl	8000b5c <MCI_GetVqd>
 800286e:	b200      	sxth	r0, r0
    break;
 8002870:	e749      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002872:	6828      	ldr	r0, [r5, #0]
 8002874:	f002 fcb6 	bl	80051e4 <PID_GetKI>
    break;
 8002878:	e745      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800287a:	6828      	ldr	r0, [r5, #0]
 800287c:	f002 fcae 	bl	80051dc <PID_GetKP>
    break;
 8002880:	e741      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002882:	4620      	mov	r0, r4
 8002884:	f7fe f946 	bl	8000b14 <MCI_GetMecSpeedRefUnit>
 8002888:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800288c:	0040      	lsls	r0, r0, #1
    break;
 800288e:	e73a      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002890:	4620      	mov	r0, r4
 8002892:	f7fe f929 	bl	8000ae8 <MCI_GetControlMode>
    break;
 8002896:	e736      	b.n	8002706 <UI_GetReg+0x216>
      if (pMCT->pRevupCtrl)
 8002898:	6968      	ldr	r0, [r5, #20]
 800289a:	2800      	cmp	r0, #0
 800289c:	f43f af32 	beq.w	8002704 <UI_GetReg+0x214>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80028a0:	f003 fa5c 	bl	8005d5c <RUC_GetNumberOfPhases>
 80028a4:	e72f      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).d;
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7fe f948 	bl	8000b3c <MCI_GetIqd>
 80028ac:	1400      	asrs	r0, r0, #16
    break;
 80028ae:	e72a      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).q;
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7fe f943 	bl	8000b3c <MCI_GetIqd>
 80028b6:	b200      	sxth	r0, r0
    break;
 80028b8:	e725      	b.n	8002706 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7fe f922 	bl	8000b04 <MCI_GetAvrgMecSpeedUnit>
 80028c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80028c4:	0040      	lsls	r0, r0, #1
    break;
 80028c6:	e71e      	b.n	8002706 <UI_GetReg+0x216>
        *success = false;
 80028c8:	2000      	movs	r0, #0
 80028ca:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80028cc:	e71b      	b.n	8002706 <UI_GetReg+0x216>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80028ce:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80028d0:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80028d2:	f63f af56 	bhi.w	8002782 <UI_GetReg+0x292>
 80028d6:	e753      	b.n	8002780 <UI_GetReg+0x290>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80028d8:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80028da:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80028dc:	f63f af65 	bhi.w	80027aa <UI_GetReg+0x2ba>
 80028e0:	e762      	b.n	80027a8 <UI_GetReg+0x2b8>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80028e2:	f7fe f903 	bl	8000aec <MCI_GetLastRampFinalSpeed>
 80028e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80028ea:	0040      	lsls	r0, r0, #1
 80028ec:	e70b      	b.n	8002706 <UI_GetReg+0x216>
 80028ee:	bf00      	nop
 80028f0:	34a6847a 	.word	0x34a6847a

080028f4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80028f4:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80028f6:	6883      	ldr	r3, [r0, #8]
 80028f8:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 80028fa:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80028fc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002900:	290d      	cmp	r1, #13
 8002902:	d82c      	bhi.n	800295e <UI_ExecCmd+0x6a>
 8002904:	e8df f001 	tbb	[pc, r1]
 8002908:	0c071217 	.word	0x0c071217
 800290c:	261c0e0c 	.word	0x261c0e0c
 8002910:	2b2b2b21 	.word	0x2b2b2b21
 8002914:	122b      	.short	0x122b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002916:	4620      	mov	r0, r4
 8002918:	f7fe f8e2 	bl	8000ae0 <MCI_GetSTMState>
 800291c:	2806      	cmp	r0, #6
 800291e:	d020      	beq.n	8002962 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002920:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002922:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002924:	4620      	mov	r0, r4
 8002926:	f7fe f8db 	bl	8000ae0 <MCI_GetSTMState>
 800292a:	b120      	cbz	r0, 8002936 <UI_ExecCmd+0x42>
        MCI_StopMotor(pMCI);
 800292c:	4620      	mov	r0, r4
 800292e:	f7fe f891 	bl	8000a54 <MCI_StopMotor>
  bool retVal = true;
 8002932:	2001      	movs	r0, #1
}
 8002934:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002936:	4620      	mov	r0, r4
 8002938:	f7fe f882 	bl	8000a40 <MCI_StartMotor>
  bool retVal = true;
 800293c:	2001      	movs	r0, #1
}
 800293e:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002940:	4620      	mov	r0, r4
 8002942:	f7fe f88b 	bl	8000a5c <MCI_FaultAcknowledged>
  bool retVal = true;
 8002946:	2001      	movs	r0, #1
}
 8002948:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 800294a:	4620      	mov	r0, r4
 800294c:	f7fe f922 	bl	8000b94 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002950:	2001      	movs	r0, #1
}
 8002952:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002954:	4620      	mov	r0, r4
 8002956:	f7fe f885 	bl	8000a64 <MCI_EncoderAlign>
  bool retVal = true;
 800295a:	2001      	movs	r0, #1
}
 800295c:	bd10      	pop	{r4, pc}
    retVal = false;
 800295e:	2000      	movs	r0, #0
}
 8002960:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002962:	4620      	mov	r0, r4
 8002964:	f7fe f8ca 	bl	8000afc <MCI_StopRamp>
  bool retVal = true;
 8002968:	2001      	movs	r0, #1
}
 800296a:	bd10      	pop	{r4, pc}

0800296c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800296c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002970:	7d04      	ldrb	r4, [r0, #20]
 8002972:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002974:	fb83 c301 	smull	ip, r3, r3, r1
 8002978:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800297c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002980:	b209      	sxth	r1, r1
 8002982:	f7fe f83b 	bl	80009fc <MCI_ExecSpeedRamp>
  return true;
}
 8002986:	2001      	movs	r0, #1
 8002988:	bd10      	pop	{r4, pc}
 800298a:	bf00      	nop
 800298c:	2aaaaaab 	.word	0x2aaaaaab

08002990 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002990:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002992:	6883      	ldr	r3, [r0, #8]
 8002994:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002996:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800299a:	f7fe f837 	bl	8000a0c <MCI_ExecTorqueRamp>
  return true;
}
 800299e:	2001      	movs	r0, #1
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	bf00      	nop

080029a4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029a6:	7d04      	ldrb	r4, [r0, #20]
 80029a8:	68c0      	ldr	r0, [r0, #12]
 80029aa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80029ae:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80029b0:	b194      	cbz	r4, 80029d8 <UI_GetRevupData+0x34>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80029b2:	4620      	mov	r0, r4
 80029b4:	461e      	mov	r6, r3
 80029b6:	4617      	mov	r7, r2
 80029b8:	460d      	mov	r5, r1
 80029ba:	f003 f9b9 	bl	8005d30 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80029be:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80029c0:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80029c2:	4620      	mov	r0, r4
 80029c4:	f003 f9ba 	bl	8005d3c <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80029c8:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80029ca:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80029cc:	4620      	mov	r0, r4
 80029ce:	f003 f9bd 	bl	8005d4c <RUC_GetPhaseFinalTorque>
 80029d2:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 80029d4:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80029d6:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80029d8:	4620      	mov	r0, r4
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029dc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029e0:	7d04      	ldrb	r4, [r0, #20]
 80029e2:	68c3      	ldr	r3, [r0, #12]
{
 80029e4:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80029ec:	695c      	ldr	r4, [r3, #20]
{
 80029ee:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80029f0:	4620      	mov	r0, r4
 80029f2:	f003 f98b 	bl	8005d0c <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80029f6:	463a      	mov	r2, r7
 80029f8:	4629      	mov	r1, r5
 80029fa:	4620      	mov	r0, r4
 80029fc:	f003 f98c 	bl	8005d18 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002a00:	4620      	mov	r0, r4
 8002a02:	4632      	mov	r2, r6
 8002a04:	4629      	mov	r1, r5
 8002a06:	f003 f98d 	bl	8005d24 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a0e:	bf00      	nop

08002a10 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002a10:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a12:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002a14:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a18:	7d01      	ldrb	r1, [r0, #20]
  currComp.d = hIdRef;
 8002a1a:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a1e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002a22:	9901      	ldr	r1, [sp, #4]
}
 8002a24:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002a26:	f7fd bffd 	b.w	8000a24 <MCI_SetCurrentReferences>
 8002a2a:	bf00      	nop

08002a2c <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	4770      	bx	lr

08002a30 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SystemInit+0x18>)
 8002a32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a42:	6099      	str	r1, [r3, #8]
#endif
}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <HAL_InitTick+0x3c>)
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_InitTick+0x40>)
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
{
 8002a56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a5c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a60:	fbb3 f0f0 	udiv	r0, r3, r0
 8002a64:	f000 fae6 	bl	8003034 <HAL_SYSTICK_Config>
 8002a68:	b908      	cbnz	r0, 8002a6e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	2d0f      	cmp	r5, #15
 8002a6c:	d901      	bls.n	8002a72 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002a6e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a70:	bd38      	pop	{r3, r4, r5, pc}
 8002a72:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a74:	4602      	mov	r2, r0
 8002a76:	4629      	mov	r1, r5
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f000 fa96 	bl	8002fac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_InitTick+0x44>)
 8002a82:	4620      	mov	r0, r4
 8002a84:	601d      	str	r5, [r3, #0]
}
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	2000056c 	.word	0x2000056c
 8002a8c:	20000568 	.word	0x20000568
 8002a90:	20000570 	.word	0x20000570

08002a94 <HAL_Init>:
{
 8002a94:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_Init+0x30>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aa6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 fa69 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7ff ffc8 	bl	8002a4c <HAL_InitTick>
  HAL_MspInit();
 8002abc:	f7ff f97e 	bl	8001dbc <HAL_MspInit>
}
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	bd08      	pop	{r3, pc}
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <HAL_IncTick+0x10>)
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_IncTick+0x14>)
 8002acc:	6811      	ldr	r1, [r2, #0]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	440b      	add	r3, r1
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200008ec 	.word	0x200008ec
 8002adc:	2000056c 	.word	0x2000056c

08002ae0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ae0:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <HAL_GetTick+0x8>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	200008ec 	.word	0x200008ec

08002aec <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aec:	2800      	cmp	r0, #0
 8002aee:	f000 8091 	beq.w	8002c14 <HAL_ADC_Init+0x128>
{
 8002af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002af4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002af6:	4604      	mov	r4, r0
 8002af8:	2d00      	cmp	r5, #0
 8002afa:	f000 8081 	beq.w	8002c00 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b00:	06db      	lsls	r3, r3, #27
 8002b02:	d504      	bpl.n	8002b0e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b04:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8002b06:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002b08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8002b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002b0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b12:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b14:	4d4d      	ldr	r5, [pc, #308]	; (8002c4c <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002b1a:	f022 0202 	bic.w	r2, r2, #2
 8002b1e:	f042 0202 	orr.w	r2, r2, #2
 8002b22:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b24:	684a      	ldr	r2, [r1, #4]
 8002b26:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002b2a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b2c:	684a      	ldr	r2, [r1, #4]
 8002b2e:	6860      	ldr	r0, [r4, #4]
 8002b30:	4302      	orrs	r2, r0
 8002b32:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b34:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b36:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b38:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b3a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b3c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002b40:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b4a:	6858      	ldr	r0, [r3, #4]
 8002b4c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8002b50:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b52:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b56:	4339      	orrs	r1, r7
 8002b58:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002b60:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b62:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b64:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b66:	ea42 0206 	orr.w	r2, r2, r6
 8002b6a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b6c:	d054      	beq.n	8002c18 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b6e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b70:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b72:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002b76:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	4310      	orrs	r0, r2
 8002b7c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002b84:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	432a      	orrs	r2, r5
 8002b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b8c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b8e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b90:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b94:	f021 0102 	bic.w	r1, r1, #2
 8002b98:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8002ba0:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba2:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d140      	bne.n	8002c2a <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bac:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb0:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bb2:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb6:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bb8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002bc0:	3d01      	subs	r5, #1
 8002bc2:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8002bc6:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bc8:	6898      	ldr	r0, [r3, #8]
 8002bca:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8002bce:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8002bd6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002bde:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002be8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002bea:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002c00:	f7ff f8fa 	bl	8001df8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002c04:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002c08:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0c:	06db      	lsls	r3, r3, #27
 8002c0e:	f53f af79 	bmi.w	8002b04 <HAL_ADC_Init+0x18>
 8002c12:	e77c      	b.n	8002b0e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
}
 8002c16:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	e7b0      	b.n	8002b8c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c30:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c38:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	3901      	subs	r1, #1
 8002c3e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	e7b3      	b.n	8002bae <HAL_ADC_Init+0xc2>
 8002c46:	bf00      	nop
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	0f000001 	.word	0x0f000001

08002c50 <HAL_ADC_ConfigChannel>:
{
 8002c50:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8002c52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002c56:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002c58:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002c5a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002c5c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002c5e:	f000 8094 	beq.w	8002d8a <HAL_ADC_ConfigChannel+0x13a>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c62:	680d      	ldr	r5, [r1, #0]
 8002c64:	688a      	ldr	r2, [r1, #8]
 8002c66:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002c68:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c6a:	2d09      	cmp	r5, #9
 8002c6c:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 8002c6e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c72:	d829      	bhi.n	8002cc8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c74:	691c      	ldr	r4, [r3, #16]
 8002c76:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002c7a:	f04f 0c07 	mov.w	ip, #7
 8002c7e:	fa0c fc06 	lsl.w	ip, ip, r6
 8002c82:	ea24 040c 	bic.w	r4, r4, ip
 8002c86:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c88:	691c      	ldr	r4, [r3, #16]
 8002c8a:	fa02 f606 	lsl.w	r6, r2, r6
 8002c8e:	4326      	orrs	r6, r4
 8002c90:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 8002c92:	684e      	ldr	r6, [r1, #4]
 8002c94:	2e06      	cmp	r6, #6
 8002c96:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8002c9a:	d82a      	bhi.n	8002cf2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c9e:	3a05      	subs	r2, #5
 8002ca0:	241f      	movs	r4, #31
 8002ca2:	4094      	lsls	r4, r2
 8002ca4:	ea21 0104 	bic.w	r1, r1, r4
 8002ca8:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002caa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cac:	fa07 f202 	lsl.w	r2, r7, r2
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <HAL_ADC_ConfigChannel+0x15c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02d      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002cc0:	4618      	mov	r0, r3
}
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8002cc6:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cc8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8002ccc:	68dc      	ldr	r4, [r3, #12]
 8002cce:	3e1e      	subs	r6, #30
 8002cd0:	f04f 0c07 	mov.w	ip, #7
 8002cd4:	fa0c fc06 	lsl.w	ip, ip, r6
 8002cd8:	ea24 040c 	bic.w	r4, r4, ip
 8002cdc:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cde:	68dc      	ldr	r4, [r3, #12]
 8002ce0:	fa02 f606 	lsl.w	r6, r2, r6
 8002ce4:	4326      	orrs	r6, r4
 8002ce6:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8002ce8:	684e      	ldr	r6, [r1, #4]
 8002cea:	2e06      	cmp	r6, #6
 8002cec:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8002cf0:	d9d4      	bls.n	8002c9c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8002cf2:	2e0c      	cmp	r6, #12
 8002cf4:	d831      	bhi.n	8002d5a <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cf6:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8002cfa:	211f      	movs	r1, #31
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfe:	40a1      	lsls	r1, r4
 8002d00:	ea22 0201 	bic.w	r2, r2, r1
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d08:	fa07 f204 	lsl.w	r2, r7, r4
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <HAL_ADC_ConfigChannel+0x15c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d1d1      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
 8002d16:	2d12      	cmp	r5, #18
 8002d18:	d02d      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d1a:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_ADC_ConfigChannel+0x160>)
 8002d1c:	429d      	cmp	r5, r3
 8002d1e:	d138      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x142>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_ADC_ConfigChannel+0x164>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d22:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d24:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d26:	4c25      	ldr	r4, [pc, #148]	; (8002dbc <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d28:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8002d2c:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d2e:	6851      	ldr	r1, [r2, #4]
 8002d30:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002d34:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fba4 2303 	umull	r2, r3, r4, r3
 8002d3c:	0c9b      	lsrs	r3, r3, #18
 8002d3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0b6      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8002d4c:	9b01      	ldr	r3, [sp, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0xfc>
 8002d58:	e7af      	b.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d5a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8002d5e:	241f      	movs	r4, #31
 8002d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d62:	408c      	lsls	r4, r1
 8002d64:	ea22 0204 	bic.w	r2, r2, r4
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002d6c:	fa07 f201 	lsl.w	r2, r7, r1
 8002d70:	4322      	orrs	r2, r4
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d74:	e79e      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_ADC_ConfigChannel+0x164>)
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002d7e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	e797      	b.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8002d8a:	2002      	movs	r0, #2
}
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bcf0      	pop	{r4, r5, r6, r7}
 8002d90:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d92:	2d11      	cmp	r5, #17
 8002d94:	d191      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_ADC_ConfigChannel+0x164>)
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002d9e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e787      	b.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
 8002daa:	bf00      	nop
 8002dac:	40012000 	.word	0x40012000
 8002db0:	10000012 	.word	0x10000012
 8002db4:	40012300 	.word	0x40012300
 8002db8:	20000568 	.word	0x20000568
 8002dbc:	431bde83 	.word	0x431bde83

08002dc0 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	f000 80d5 	beq.w	8002f74 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
{
 8002dca:	b4f0      	push	{r4, r5, r6, r7}
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002dcc:	680d      	ldr	r5, [r1, #0]
 8002dce:	688e      	ldr	r6, [r1, #8]
 8002dd0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002dd2:	2201      	movs	r2, #1
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002dd4:	2d09      	cmp	r5, #9
 8002dd6:	b2ac      	uxth	r4, r5
  __HAL_LOCK(hadc);
 8002dd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002ddc:	d86b      	bhi.n	8002eb6 <HAL_ADCEx_InjectedConfigChannel+0xf6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002dde:	691f      	ldr	r7, [r3, #16]
 8002de0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002de4:	f04f 0c07 	mov.w	ip, #7
 8002de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8002dec:	ea27 070c 	bic.w	r7, r7, ip
 8002df0:	611f      	str	r7, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002df2:	691f      	ldr	r7, [r3, #16]
 8002df4:	fa06 f202 	lsl.w	r2, r6, r2
 8002df8:	433a      	orrs	r2, r7
 8002dfa:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002dfc:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002dfe:	f8d1 c010 	ldr.w	ip, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e02:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002e04:	f427 1740 	bic.w	r7, r7, #3145728	; 0x300000
 8002e08:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e0a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002e0c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8002e10:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e14:	1cf2      	adds	r2, r6, #3
 8002e16:	eba2 020c 	sub.w	r2, r2, ip
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e1a:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002e20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e24:	f04f 0c1f 	mov.w	ip, #31
 8002e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8002e2c:	ea27 070c 	bic.w	r7, r7, ip
 8002e30:	639f      	str	r7, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e32:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e36:	698f      	ldr	r7, [r1, #24]
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e38:	fa04 f202 	lsl.w	r2, r4, r2
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e3c:	4c4e      	ldr	r4, [pc, #312]	; (8002f78 <HAL_ADCEx_InjectedConfigChannel+0x1b8>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e3e:	ea42 020c 	orr.w	r2, r2, ip
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e42:	42a7      	cmp	r7, r4
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e46:	d071      	beq.n	8002f2c <HAL_ADCEx_InjectedConfigChannel+0x16c>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002e48:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002e4a:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002e4e:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8002e52:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4317      	orrs	r7, r2
 8002e58:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002e5a:	689c      	ldr	r4, [r3, #8]
 8002e5c:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8002e60:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	ea42 020c 	orr.w	r2, r2, ip
 8002e68:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002e6a:	7d4a      	ldrb	r2, [r1, #21]
 8002e6c:	2a00      	cmp	r2, #0
 8002e6e:	d058      	beq.n	8002f22 <HAL_ADCEx_InjectedConfigChannel+0x162>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e76:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002e78:	7d0a      	ldrb	r2, [r1, #20]
 8002e7a:	b36a      	cbz	r2, 8002ed8 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e82:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8002e84:	2e02      	cmp	r6, #2
 8002e86:	68ca      	ldr	r2, [r1, #12]
 8002e88:	d02d      	beq.n	8002ee6 <HAL_ADCEx_InjectedConfigChannel+0x126>
 8002e8a:	2e03      	cmp	r6, #3
 8002e8c:	d061      	beq.n	8002f52 <HAL_ADCEx_InjectedConfigChannel+0x192>
 8002e8e:	2e01      	cmp	r6, #1
 8002e90:	d055      	beq.n	8002f3e <HAL_ADCEx_InjectedConfigChannel+0x17e>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002e92:	6a19      	ldr	r1, [r3, #32]
 8002e94:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8002e98:	f021 010f 	bic.w	r1, r1, #15
 8002e9c:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002e9e:	6a19      	ldr	r1, [r3, #32]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002ea4:	4a35      	ldr	r2, [pc, #212]	; (8002f7c <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d029      	beq.n	8002efe <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 8002eb0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002eb2:	4618      	mov	r0, r3
}
 8002eb4:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002eb6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002eba:	68df      	ldr	r7, [r3, #12]
 8002ebc:	3a1e      	subs	r2, #30
 8002ebe:	f04f 0c07 	mov.w	ip, #7
 8002ec2:	fa0c fc02 	lsl.w	ip, ip, r2
 8002ec6:	ea27 070c 	bic.w	r7, r7, ip
 8002eca:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002ecc:	68df      	ldr	r7, [r3, #12]
 8002ece:	fa06 f202 	lsl.w	r2, r6, r2
 8002ed2:	433a      	orrs	r2, r7
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	e791      	b.n	8002dfc <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ede:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002ee0:	2e02      	cmp	r6, #2
 8002ee2:	68ca      	ldr	r2, [r1, #12]
 8002ee4:	d1d1      	bne.n	8002e8a <HAL_ADCEx_InjectedConfigChannel+0xca>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002ee6:	6999      	ldr	r1, [r3, #24]
 8002ee8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8002eec:	f021 010f 	bic.w	r1, r1, #15
 8002ef0:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002ef2:	6999      	ldr	r1, [r3, #24]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d1d5      	bne.n	8002eaa <HAL_ADCEx_InjectedConfigChannel+0xea>
 8002efe:	2d12      	cmp	r5, #18
 8002f00:	d031      	beq.n	8002f66 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <HAL_ADCEx_InjectedConfigChannel+0x1c0>)
 8002f04:	429d      	cmp	r5, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8002f08:	2d11      	cmp	r5, #17
 8002f0a:	d1ce      	bne.n	8002eaa <HAL_ADCEx_InjectedConfigChannel+0xea>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8002f0e:	6853      	ldr	r3, [r2, #4]
 8002f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f14:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 8002f16:	2300      	movs	r3, #0
 8002f18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002f1c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002f1e:	4618      	mov	r0, r3
}
 8002f20:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e7a5      	b.n	8002e78 <HAL_ADCEx_InjectedConfigChannel+0xb8>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	e795      	b.n	8002e6a <HAL_ADCEx_InjectedConfigChannel+0xaa>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002f3e:	6959      	ldr	r1, [r3, #20]
 8002f40:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8002f44:	f021 010f 	bic.w	r1, r1, #15
 8002f48:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002f4a:	6959      	ldr	r1, [r3, #20]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	615a      	str	r2, [r3, #20]
      break;
 8002f50:	e7a8      	b.n	8002ea4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8002f58:	f021 010f 	bic.w	r1, r1, #15
 8002f5c:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002f5e:	69d9      	ldr	r1, [r3, #28]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	61da      	str	r2, [r3, #28]
      break;
 8002f64:	e79e      	b.n	8002ea4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f66:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f6e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8002f72:	e79a      	b.n	8002eaa <HAL_ADCEx_InjectedConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8002f74:	2002      	movs	r0, #2
}
 8002f76:	4770      	bx	lr
 8002f78:	000f0001 	.word	0x000f0001
 8002f7c:	40012000 	.word	0x40012000
 8002f80:	10000012 	.word	0x10000012
 8002f84:	40012300 	.word	0x40012300

08002f88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002f8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002f90:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f92:	0200      	lsls	r0, r0, #8
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f98:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002fa0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002fa2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_NVIC_SetPriority+0x64>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb6:	f1c3 0507 	rsb	r5, r3, #7
 8002fba:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc0:	bf28      	it	cs
 8002fc2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc4:	2c06      	cmp	r4, #6
 8002fc6:	d919      	bls.n	8002ffc <HAL_NVIC_SetPriority+0x50>
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	f04f 34ff 	mov.w	r4, #4294967295
 8002fce:	409c      	lsls	r4, r3
 8002fd0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	40aa      	lsls	r2, r5
 8002fda:	ea21 0102 	bic.w	r1, r1, r2
 8002fde:	fa01 f203 	lsl.w	r2, r1, r3
 8002fe2:	4322      	orrs	r2, r4
 8002fe4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	db0a      	blt.n	8003002 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ff0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002ff4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ff8:	bc30      	pop	{r4, r5}
 8002ffa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffc:	2400      	movs	r4, #0
 8002ffe:	4623      	mov	r3, r4
 8003000:	e7e8      	b.n	8002fd4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_NVIC_SetPriority+0x68>)
 8003004:	f000 000f 	and.w	r0, r0, #15
 8003008:	4403      	add	r3, r0
 800300a:	761a      	strb	r2, [r3, #24]
 800300c:	bc30      	pop	{r4, r5}
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00
 8003014:	e000ecfc 	.word	0xe000ecfc

08003018 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003018:	2800      	cmp	r0, #0
 800301a:	db07      	blt.n	800302c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301c:	f000 011f 	and.w	r1, r0, #31
 8003020:	2301      	movs	r3, #1
 8003022:	0940      	lsrs	r0, r0, #5
 8003024:	4a02      	ldr	r2, [pc, #8]	; (8003030 <HAL_NVIC_EnableIRQ+0x18>)
 8003026:	408b      	lsls	r3, r1
 8003028:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	3801      	subs	r0, #1
 8003036:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800303a:	d20e      	bcs.n	800305a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	4c08      	ldr	r4, [pc, #32]	; (8003064 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	20f0      	movs	r0, #240	; 0xf0
 8003046:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003058:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2001      	movs	r0, #1
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop

0800306c <HAL_SYSTICK_IRQHandler>:
{
 800306c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800306e:	f7ff fffb 	bl	8003068 <HAL_SYSTICK_Callback>
}
 8003072:	bd08      	pop	{r3, pc}

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003078:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307c:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 800325c <HAL_GPIO_Init+0x1e8>
{
 8003080:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	2400      	movs	r4, #0
 8003084:	e003      	b.n	800308e <HAL_GPIO_Init+0x1a>
 8003086:	3401      	adds	r4, #1
 8003088:	2c10      	cmp	r4, #16
 800308a:	f000 8086 	beq.w	800319a <HAL_GPIO_Init+0x126>
    ioposition = 0x01U << position;
 800308e:	2301      	movs	r3, #1
 8003090:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003092:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8003096:	4293      	cmp	r3, r2
 8003098:	d1f5      	bne.n	8003086 <HAL_GPIO_Init+0x12>
 800309a:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800309e:	f026 0910 	bic.w	r9, r6, #16
 80030a2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80030a6:	2303      	movs	r3, #3
 80030a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80030ac:	fa03 f30c 	lsl.w	r3, r3, ip
 80030b0:	2f01      	cmp	r7, #1
 80030b2:	ea6f 0303 	mvn.w	r3, r3
 80030b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80030ba:	d971      	bls.n	80031a0 <HAL_GPIO_Init+0x12c>
      temp = GPIOx->PUPDR;
 80030bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030be:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80030c2:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 80030c4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c6:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ca:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	fa05 f30c 	lsl.w	r3, r5, ip
 80030d0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80030d2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d4:	00f3      	lsls	r3, r6, #3
 80030d6:	d5d6      	bpl.n	8003086 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d8:	4d59      	ldr	r5, [pc, #356]	; (8003240 <HAL_GPIO_Init+0x1cc>)
 80030da:	2300      	movs	r3, #0
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	646b      	str	r3, [r5, #68]	; 0x44
 80030e6:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 80030e8:	f024 0303 	bic.w	r3, r4, #3
 80030ec:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80030f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030f4:	9501      	str	r5, [sp, #4]
 80030f6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030fa:	f004 0503 	and.w	r5, r4, #3
 80030fe:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	4d50      	ldr	r5, [pc, #320]	; (8003244 <HAL_GPIO_Init+0x1d0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003104:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003106:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800310a:	270f      	movs	r7, #15
 800310c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003110:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003112:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	d019      	beq.n	800314c <HAL_GPIO_Init+0xd8>
 8003118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800311c:	42a8      	cmp	r0, r5
 800311e:	d070      	beq.n	8003202 <HAL_GPIO_Init+0x18e>
 8003120:	4d49      	ldr	r5, [pc, #292]	; (8003248 <HAL_GPIO_Init+0x1d4>)
 8003122:	42a8      	cmp	r0, r5
 8003124:	d073      	beq.n	800320e <HAL_GPIO_Init+0x19a>
 8003126:	4d49      	ldr	r5, [pc, #292]	; (800324c <HAL_GPIO_Init+0x1d8>)
 8003128:	42a8      	cmp	r0, r5
 800312a:	d076      	beq.n	800321a <HAL_GPIO_Init+0x1a6>
 800312c:	4d48      	ldr	r5, [pc, #288]	; (8003250 <HAL_GPIO_Init+0x1dc>)
 800312e:	42a8      	cmp	r0, r5
 8003130:	d079      	beq.n	8003226 <HAL_GPIO_Init+0x1b2>
 8003132:	4d48      	ldr	r5, [pc, #288]	; (8003254 <HAL_GPIO_Init+0x1e0>)
 8003134:	42a8      	cmp	r0, r5
 8003136:	d07c      	beq.n	8003232 <HAL_GPIO_Init+0x1be>
 8003138:	4d47      	ldr	r5, [pc, #284]	; (8003258 <HAL_GPIO_Init+0x1e4>)
 800313a:	42a8      	cmp	r0, r5
 800313c:	bf0c      	ite	eq
 800313e:	f04f 0c06 	moveq.w	ip, #6
 8003142:	f04f 0c07 	movne.w	ip, #7
 8003146:	fa0c f509 	lsl.w	r5, ip, r9
 800314a:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800314e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8003152:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003154:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8003156:	bf54      	ite	pl
 8003158:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800315a:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800315c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003160:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003164:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8003166:	bf54      	ite	pl
 8003168:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800316a:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800316c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003170:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003174:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8003176:	bf54      	ite	pl
 8003178:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800317a:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800317c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003180:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003184:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003186:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800318a:	bf54      	ite	pl
 800318c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800318e:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003190:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8003192:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	f47f af7a 	bne.w	800308e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800319a:	b003      	add	sp, #12
 800319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80031a0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a2:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a6:	68cf      	ldr	r7, [r1, #12]
 80031a8:	fa07 f70c 	lsl.w	r7, r7, ip
 80031ac:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80031b0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80031b2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031b6:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ba:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031be:	40a7      	lsls	r7, r4
 80031c0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80031c4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80031c6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c8:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ca:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031cc:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 80031d0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d2:	f47f af77 	bne.w	80030c4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 80031d6:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80031da:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031de:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 80031e2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031e6:	00bf      	lsls	r7, r7, #2
 80031e8:	f04f 0b0f 	mov.w	fp, #15
 80031ec:	fa0b fb07 	lsl.w	fp, fp, r7
 80031f0:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f4:	690d      	ldr	r5, [r1, #16]
 80031f6:	40bd      	lsls	r5, r7
 80031f8:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 80031fc:	f8c9 5020 	str.w	r5, [r9, #32]
 8003200:	e760      	b.n	80030c4 <HAL_GPIO_Init+0x50>
 8003202:	f04f 0c01 	mov.w	ip, #1
 8003206:	fa0c f509 	lsl.w	r5, ip, r9
 800320a:	432f      	orrs	r7, r5
 800320c:	e79e      	b.n	800314c <HAL_GPIO_Init+0xd8>
 800320e:	f04f 0c02 	mov.w	ip, #2
 8003212:	fa0c f509 	lsl.w	r5, ip, r9
 8003216:	432f      	orrs	r7, r5
 8003218:	e798      	b.n	800314c <HAL_GPIO_Init+0xd8>
 800321a:	f04f 0c03 	mov.w	ip, #3
 800321e:	fa0c f509 	lsl.w	r5, ip, r9
 8003222:	432f      	orrs	r7, r5
 8003224:	e792      	b.n	800314c <HAL_GPIO_Init+0xd8>
 8003226:	f04f 0c04 	mov.w	ip, #4
 800322a:	fa0c f509 	lsl.w	r5, ip, r9
 800322e:	432f      	orrs	r7, r5
 8003230:	e78c      	b.n	800314c <HAL_GPIO_Init+0xd8>
 8003232:	f04f 0c05 	mov.w	ip, #5
 8003236:	fa0c f509 	lsl.w	r5, ip, r9
 800323a:	432f      	orrs	r7, r5
 800323c:	e786      	b.n	800314c <HAL_GPIO_Init+0xd8>
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40021800 	.word	0x40021800
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003260:	b530      	push	{r4, r5, lr}
 8003262:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003266:	491a      	ldr	r1, [pc, #104]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003268:	4c1a      	ldr	r4, [pc, #104]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2200      	movs	r2, #0
 800326c:	9201      	str	r2, [sp, #4]
 800326e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800327e:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003282:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8003284:	f7ff fc2c 	bl	8002ae0 <HAL_GetTick>
 8003288:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800328a:	e005      	b.n	8003298 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800328c:	f7ff fc28 	bl	8002ae0 <HAL_GetTick>
 8003290:	1b40      	subs	r0, r0, r5
 8003292:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003296:	d816      	bhi.n	80032c6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	03da      	lsls	r2, r3, #15
 800329c:	d5f6      	bpl.n	800328c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032a0:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80032a6:	f7ff fc1b 	bl	8002ae0 <HAL_GetTick>
 80032aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ac:	e005      	b.n	80032ba <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032ae:	f7ff fc17 	bl	8002ae0 <HAL_GetTick>
 80032b2:	1b40      	subs	r0, r0, r5
 80032b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032b8:	d805      	bhi.n	80032c6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	039b      	lsls	r3, r3, #14
 80032be:	d5f6      	bpl.n	80032ae <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80032c0:	2000      	movs	r0, #0
}
 80032c2:	b003      	add	sp, #12
 80032c4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80032c6:	2003      	movs	r0, #3
}
 80032c8:	b003      	add	sp, #12
 80032ca:	bd30      	pop	{r4, r5, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	420e0040 	.word	0x420e0040
 80032d4:	40007000 	.word	0x40007000
 80032d8:	420e0044 	.word	0x420e0044

080032dc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032dc:	b160      	cbz	r0, 80032f8 <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032de:	4a49      	ldr	r2, [pc, #292]	; (8003404 <HAL_RCC_ClockConfig+0x128>)
 80032e0:	6813      	ldr	r3, [r2, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	428b      	cmp	r3, r1
 80032e8:	d208      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	b2cb      	uxtb	r3, r1
 80032ec:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80032f8:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80032fa:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	6803      	ldr	r3, [r0, #0]
{
 80032fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003302:	079d      	lsls	r5, r3, #30
 8003304:	d514      	bpl.n	8003330 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003306:	075c      	lsls	r4, r3, #29
 8003308:	d504      	bpl.n	8003314 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330a:	4c3f      	ldr	r4, [pc, #252]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 800330c:	68a2      	ldr	r2, [r4, #8]
 800330e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003312:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	071a      	lsls	r2, r3, #28
 8003316:	d504      	bpl.n	8003322 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003318:	4c3b      	ldr	r4, [pc, #236]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 800331a:	68a2      	ldr	r2, [r4, #8]
 800331c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003320:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003322:	4c39      	ldr	r4, [pc, #228]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 8003324:	6885      	ldr	r5, [r0, #8]
 8003326:	68a2      	ldr	r2, [r4, #8]
 8003328:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800332c:	432a      	orrs	r2, r5
 800332e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003330:	07df      	lsls	r7, r3, #31
 8003332:	4604      	mov	r4, r0
 8003334:	460d      	mov	r5, r1
 8003336:	d522      	bpl.n	800337e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003338:	6842      	ldr	r2, [r0, #4]
 800333a:	2a01      	cmp	r2, #1
 800333c:	d057      	beq.n	80033ee <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	1e93      	subs	r3, r2, #2
 8003340:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 8003344:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	d959      	bls.n	80033fc <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	0799      	lsls	r1, r3, #30
 800334a:	d525      	bpl.n	8003398 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334c:	4e2e      	ldr	r6, [pc, #184]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 800334e:	68b3      	ldr	r3, [r6, #8]
 8003350:	f023 0303 	bic.w	r3, r3, #3
 8003354:	4313      	orrs	r3, r2
 8003356:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003358:	f7ff fbc2 	bl	8002ae0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003360:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	e005      	b.n	8003370 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7ff fbbc 	bl	8002ae0 <HAL_GetTick>
 8003368:	eba0 0008 	sub.w	r0, r0, r8
 800336c:	42b8      	cmp	r0, r7
 800336e:	d843      	bhi.n	80033f8 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	68b3      	ldr	r3, [r6, #8]
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800337c:	d1f2      	bne.n	8003364 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_RCC_ClockConfig+0x128>)
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	42ab      	cmp	r3, r5
 8003388:	d909      	bls.n	800339e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	b2eb      	uxtb	r3, r5
 800338c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	42ab      	cmp	r3, r5
 8003396:	d002      	beq.n	800339e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003398:	2001      	movs	r0, #1
}
 800339a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	075a      	lsls	r2, r3, #29
 80033a2:	d506      	bpl.n	80033b2 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4918      	ldr	r1, [pc, #96]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 80033a6:	68e0      	ldr	r0, [r4, #12]
 80033a8:	688a      	ldr	r2, [r1, #8]
 80033aa:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80033ae:	4302      	orrs	r2, r0
 80033b0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	071b      	lsls	r3, r3, #28
 80033b4:	d412      	bmi.n	80033dc <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f855 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 80033bc:	4c13      	ldr	r4, [pc, #76]	; (800340c <HAL_RCC_ClockConfig+0x130>)
 80033be:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80033c0:	4913      	ldr	r1, [pc, #76]	; (8003410 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <HAL_RCC_ClockConfig+0x138>)
 80033c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80033c8:	5ce3      	ldrb	r3, [r4, r3]
 80033ca:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80033ce:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80033d2:	f7ff fb3b 	bl	8002a4c <HAL_InitTick>
  return HAL_OK;
 80033d6:	2000      	movs	r0, #0
}
 80033d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 80033de:	6921      	ldr	r1, [r4, #16]
 80033e0:	6893      	ldr	r3, [r2, #8]
 80033e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80033e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	e7e3      	b.n	80033b6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_ClockConfig+0x12c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	039e      	lsls	r6, r3, #14
 80033f4:	d4aa      	bmi.n	800334c <HAL_RCC_ClockConfig+0x70>
 80033f6:	e7cf      	b.n	8003398 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80033f8:	2003      	movs	r0, #3
 80033fa:	e7ed      	b.n	80033d8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fc:	0198      	lsls	r0, r3, #6
 80033fe:	d4a5      	bmi.n	800334c <HAL_RCC_ClockConfig+0x70>
 8003400:	e7ca      	b.n	8003398 <HAL_RCC_ClockConfig+0xbc>
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	08006024 	.word	0x08006024
 8003410:	20000570 	.word	0x20000570
 8003414:	20000568 	.word	0x20000568

08003418 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003418:	4b01      	ldr	r3, [pc, #4]	; (8003420 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000568 	.word	0x20000568

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003428:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800342a:	4905      	ldr	r1, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800342c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003430:	6808      	ldr	r0, [r1, #0]
 8003432:	5cd3      	ldrb	r3, [r2, r3]
}
 8003434:	40d8      	lsrs	r0, r3
 8003436:	4770      	bx	lr
 8003438:	40023800 	.word	0x40023800
 800343c:	08006034 	.word	0x08006034
 8003440:	20000568 	.word	0x20000568

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003448:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800344a:	4905      	ldr	r1, [pc, #20]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800344c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003450:	6808      	ldr	r0, [r1, #0]
 8003452:	5cd3      	ldrb	r3, [r2, r3]
}
 8003454:	40d8      	lsrs	r0, r3
 8003456:	4770      	bx	lr
 8003458:	40023800 	.word	0x40023800
 800345c:	08006034 	.word	0x08006034
 8003460:	20000568 	.word	0x20000568

08003464 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003464:	4928      	ldr	r1, [pc, #160]	; (8003508 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8003466:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003468:	688b      	ldr	r3, [r1, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b08      	cmp	r3, #8
 8003470:	d007      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x1e>
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d01d      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003476:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003478:	4825      	ldr	r0, [pc, #148]	; (8003510 <HAL_RCC_GetSysClockFreq+0xac>)
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf18      	it	ne
 800347e:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003480:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003482:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003484:	684b      	ldr	r3, [r1, #4]
 8003486:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	d130      	bne.n	80034f2 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003490:	6849      	ldr	r1, [r1, #4]
 8003492:	481e      	ldr	r0, [pc, #120]	; (800350c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003494:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003498:	fba1 0100 	umull	r0, r1, r1, r0
 800349c:	f7fc feb2 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80034a8:	3301      	adds	r3, #1
 80034aa:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80034ac:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80034b0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b4:	684b      	ldr	r3, [r1, #4]
 80034b6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034be:	d10e      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c0:	6849      	ldr	r1, [r1, #4]
 80034c2:	4812      	ldr	r0, [pc, #72]	; (800350c <HAL_RCC_GetSysClockFreq+0xa8>)
 80034c4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034c8:	fba1 0100 	umull	r0, r1, r1, r0
 80034cc:	f7fc fe9a 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80034d8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80034dc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	684b      	ldr	r3, [r1, #4]
 80034e0:	480b      	ldr	r0, [pc, #44]	; (8003510 <HAL_RCC_GetSysClockFreq+0xac>)
 80034e2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80034e6:	fba3 0100 	umull	r0, r1, r3, r0
 80034ea:	2300      	movs	r3, #0
 80034ec:	f7fc fe8a 	bl	8000204 <__aeabi_uldivmod>
 80034f0:	e7ee      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f2:	684b      	ldr	r3, [r1, #4]
 80034f4:	4806      	ldr	r0, [pc, #24]	; (8003510 <HAL_RCC_GetSysClockFreq+0xac>)
 80034f6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80034fa:	fba3 0100 	umull	r0, r1, r3, r0
 80034fe:	2300      	movs	r3, #0
 8003500:	f7fc fe80 	bl	8000204 <__aeabi_uldivmod>
 8003504:	e7cc      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x3c>
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	007a1200 	.word	0x007a1200

08003514 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	07da      	lsls	r2, r3, #31
{
 800351c:	b082      	sub	sp, #8
 800351e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003520:	d536      	bpl.n	8003590 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003522:	49ae      	ldr	r1, [pc, #696]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 8003524:	688a      	ldr	r2, [r1, #8]
 8003526:	f002 020c 	and.w	r2, r2, #12
 800352a:	2a04      	cmp	r2, #4
 800352c:	f000 80d2 	beq.w	80036d4 <HAL_RCC_OscConfig+0x1c0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003536:	2a08      	cmp	r2, #8
 8003538:	f000 80c8 	beq.w	80036cc <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353c:	49a7      	ldr	r1, [pc, #668]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 800353e:	688a      	ldr	r2, [r1, #8]
 8003540:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003544:	2a0c      	cmp	r2, #12
 8003546:	f000 8104 	beq.w	8003752 <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	f000 8104 	beq.w	800375c <HAL_RCC_OscConfig+0x248>
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	f000 8160 	beq.w	800381c <HAL_RCC_OscConfig+0x308>
 800355c:	4d9f      	ldr	r5, [pc, #636]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 800355e:	682a      	ldr	r2, [r5, #0]
 8003560:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003564:	602a      	str	r2, [r5, #0]
 8003566:	682a      	ldr	r2, [r5, #0]
 8003568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 80f9 	bne.w	8003766 <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7ff fab4 	bl	8002ae0 <HAL_GetTick>
 8003578:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e005      	b.n	8003588 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7ff fab0 	bl	8002ae0 <HAL_GetTick>
 8003580:	1b80      	subs	r0, r0, r6
 8003582:	2864      	cmp	r0, #100	; 0x64
 8003584:	f200 810d 	bhi.w	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	0399      	lsls	r1, r3, #14
 800358c:	d4f6      	bmi.n	800357c <HAL_RCC_OscConfig+0x68>
 800358e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003590:	079a      	lsls	r2, r3, #30
 8003592:	d52f      	bpl.n	80035f4 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003594:	4a91      	ldr	r2, [pc, #580]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 8003596:	6891      	ldr	r1, [r2, #8]
 8003598:	f011 0f0c 	tst.w	r1, #12
 800359c:	f000 80ab 	beq.w	80036f6 <HAL_RCC_OscConfig+0x1e2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035a0:	6891      	ldr	r1, [r2, #8]
 80035a2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035a6:	2908      	cmp	r1, #8
 80035a8:	f000 80a1 	beq.w	80036ee <HAL_RCC_OscConfig+0x1da>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ac:	498b      	ldr	r1, [pc, #556]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 80035ae:	688a      	ldr	r2, [r1, #8]
 80035b0:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035b4:	2a0c      	cmp	r2, #12
 80035b6:	f000 812c 	beq.w	8003812 <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ba:	68e3      	ldr	r3, [r4, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8117 	beq.w	80037f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c2:	4b87      	ldr	r3, [pc, #540]	; (80037e0 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4d85      	ldr	r5, [pc, #532]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035ca:	f7ff fa89 	bl	8002ae0 <HAL_GetTick>
 80035ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e005      	b.n	80035de <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7ff fa85 	bl	8002ae0 <HAL_GetTick>
 80035d6:	1b80      	subs	r0, r0, r6
 80035d8:	2802      	cmp	r0, #2
 80035da:	f200 80e2 	bhi.w	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	682b      	ldr	r3, [r5, #0]
 80035e0:	0798      	lsls	r0, r3, #30
 80035e2:	d5f6      	bpl.n	80035d2 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	6922      	ldr	r2, [r4, #16]
 80035e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f4:	071a      	lsls	r2, r3, #28
 80035f6:	d515      	bpl.n	8003624 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f8:	6963      	ldr	r3, [r4, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808d 	beq.w	800371a <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003600:	4b78      	ldr	r3, [pc, #480]	; (80037e4 <HAL_RCC_OscConfig+0x2d0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	4d76      	ldr	r5, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003608:	f7ff fa6a 	bl	8002ae0 <HAL_GetTick>
 800360c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	e005      	b.n	800361c <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003610:	f7ff fa66 	bl	8002ae0 <HAL_GetTick>
 8003614:	1b80      	subs	r0, r0, r6
 8003616:	2802      	cmp	r0, #2
 8003618:	f200 80c3 	bhi.w	80037a2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800361e:	079b      	lsls	r3, r3, #30
 8003620:	d5f6      	bpl.n	8003610 <HAL_RCC_OscConfig+0xfc>
 8003622:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	0758      	lsls	r0, r3, #29
 8003626:	d531      	bpl.n	800368c <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003628:	4a6c      	ldr	r2, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 800362a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800362c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003630:	f000 8083 	beq.w	800373a <HAL_RCC_OscConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 8003634:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4d6c      	ldr	r5, [pc, #432]	; (80037e8 <HAL_RCC_OscConfig+0x2d4>)
 8003638:	682a      	ldr	r2, [r5, #0]
 800363a:	05d1      	lsls	r1, r2, #23
 800363c:	f140 80a1 	bpl.w	8003782 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f000 80b1 	beq.w	80037aa <HAL_RCC_OscConfig+0x296>
 8003648:	2b05      	cmp	r3, #5
 800364a:	f000 80f7 	beq.w	800383c <HAL_RCC_OscConfig+0x328>
 800364e:	4d63      	ldr	r5, [pc, #396]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 8003650:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	672a      	str	r2, [r5, #112]	; 0x70
 8003658:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 80a7 	bne.w	80037b4 <HAL_RCC_OscConfig+0x2a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7ff fa3b 	bl	8002ae0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800366e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e006      	b.n	8003680 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7ff fa35 	bl	8002ae0 <HAL_GetTick>
 8003676:	eba0 0008 	sub.w	r0, r0, r8
 800367a:	42b8      	cmp	r0, r7
 800367c:	f200 8091 	bhi.w	80037a2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003682:	0798      	lsls	r0, r3, #30
 8003684:	d4f5      	bmi.n	8003672 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003686:	2e00      	cmp	r6, #0
 8003688:	f040 80d2 	bne.w	8003830 <HAL_RCC_OscConfig+0x31c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	69a2      	ldr	r2, [r4, #24]
 800368e:	b1ca      	cbz	r2, 80036c4 <HAL_RCC_OscConfig+0x1b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003690:	4d52      	ldr	r5, [pc, #328]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 8003692:	68a9      	ldr	r1, [r5, #8]
 8003694:	f001 010c 	and.w	r1, r1, #12
 8003698:	2908      	cmp	r1, #8
 800369a:	d024      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	4a53      	ldr	r2, [pc, #332]	; (80037ec <HAL_RCC_OscConfig+0x2d8>)
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	f000 80d3 	beq.w	8003850 <HAL_RCC_OscConfig+0x33c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7ff fa19 	bl	8002ae0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80036b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e004      	b.n	80036be <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7ff fa14 	bl	8002ae0 <HAL_GetTick>
 80036b8:	1b40      	subs	r0, r0, r5
 80036ba:	2802      	cmp	r0, #2
 80036bc:	d871      	bhi.n	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	019b      	lsls	r3, r3, #6
 80036c2:	d4f7      	bmi.n	80036b4 <HAL_RCC_OscConfig+0x1a0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80036c4:	2000      	movs	r0, #0
}
 80036c6:	b002      	add	sp, #8
 80036c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036cc:	684a      	ldr	r2, [r1, #4]
 80036ce:	0257      	lsls	r7, r2, #9
 80036d0:	f57f af34 	bpl.w	800353c <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	4a41      	ldr	r2, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	0395      	lsls	r5, r2, #14
 80036da:	f57f af59 	bpl.w	8003590 <HAL_RCC_OscConfig+0x7c>
 80036de:	6862      	ldr	r2, [r4, #4]
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	f47f af55 	bne.w	8003590 <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 80036e6:	2001      	movs	r0, #1
}
 80036e8:	b002      	add	sp, #8
 80036ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	0257      	lsls	r7, r2, #9
 80036f2:	f53f af5b 	bmi.w	80035ac <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	4a39      	ldr	r2, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	0795      	lsls	r5, r2, #30
 80036fc:	d502      	bpl.n	8003704 <HAL_RCC_OscConfig+0x1f0>
 80036fe:	68e2      	ldr	r2, [r4, #12]
 8003700:	2a01      	cmp	r2, #1
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4935      	ldr	r1, [pc, #212]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 8003706:	6920      	ldr	r0, [r4, #16]
 8003708:	680a      	ldr	r2, [r1, #0]
 800370a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800370e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003712:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003714:	071a      	lsls	r2, r3, #28
 8003716:	d585      	bpl.n	8003624 <HAL_RCC_OscConfig+0x110>
 8003718:	e76e      	b.n	80035f8 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	4d2f      	ldr	r5, [pc, #188]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800371e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003720:	f7ff f9de 	bl	8002ae0 <HAL_GetTick>
 8003724:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003726:	e004      	b.n	8003732 <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7ff f9da 	bl	8002ae0 <HAL_GetTick>
 800372c:	1b80      	subs	r0, r0, r6
 800372e:	2802      	cmp	r0, #2
 8003730:	d837      	bhi.n	80037a2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003732:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003734:	079f      	lsls	r7, r3, #30
 8003736:	d4f7      	bmi.n	8003728 <HAL_RCC_OscConfig+0x214>
 8003738:	e773      	b.n	8003622 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6413      	str	r3, [r2, #64]	; 0x40
 8003744:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800374e:	2601      	movs	r6, #1
 8003750:	e771      	b.n	8003636 <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	684a      	ldr	r2, [r1, #4]
 8003754:	0256      	lsls	r6, r2, #9
 8003756:	f57f aef8 	bpl.w	800354a <HAL_RCC_OscConfig+0x36>
 800375a:	e7bb      	b.n	80036d4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003766:	f7ff f9bb 	bl	8002ae0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4d1c      	ldr	r5, [pc, #112]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800376c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e004      	b.n	800377a <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003770:	f7ff f9b6 	bl	8002ae0 <HAL_GetTick>
 8003774:	1b80      	subs	r0, r0, r6
 8003776:	2864      	cmp	r0, #100	; 0x64
 8003778:	d813      	bhi.n	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	682b      	ldr	r3, [r5, #0]
 800377c:	0398      	lsls	r0, r3, #14
 800377e:	d5f7      	bpl.n	8003770 <HAL_RCC_OscConfig+0x25c>
 8003780:	e705      	b.n	800358e <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	682a      	ldr	r2, [r5, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800378a:	f7ff f9a9 	bl	8002ae0 <HAL_GetTick>
 800378e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	05da      	lsls	r2, r3, #23
 8003794:	f53f af54 	bmi.w	8003640 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7ff f9a2 	bl	8002ae0 <HAL_GetTick>
 800379c:	1bc0      	subs	r0, r0, r7
 800379e:	2802      	cmp	r0, #2
 80037a0:	d9f6      	bls.n	8003790 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 80037a2:	2003      	movs	r0, #3
}
 80037a4:	b002      	add	sp, #8
 80037a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
 80037ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80037b4:	f7ff f994 	bl	8002ae0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4d08      	ldr	r5, [pc, #32]	; (80037dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80037ba:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	e005      	b.n	80037ce <HAL_RCC_OscConfig+0x2ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7ff f98d 	bl	8002ae0 <HAL_GetTick>
 80037c6:	eba0 0008 	sub.w	r0, r0, r8
 80037ca:	42b8      	cmp	r0, r7
 80037cc:	d8e9      	bhi.n	80037a2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80037d0:	079b      	lsls	r3, r3, #30
 80037d2:	d5f6      	bpl.n	80037c2 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 80037d4:	2e00      	cmp	r6, #0
 80037d6:	f43f af59 	beq.w	800368c <HAL_RCC_OscConfig+0x178>
 80037da:	e029      	b.n	8003830 <HAL_RCC_OscConfig+0x31c>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470060 	.word	0x42470060
        __HAL_RCC_HSI_DISABLE();
 80037f0:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <HAL_RCC_OscConfig+0x39c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	4d30      	ldr	r5, [pc, #192]	; (80038b4 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_HSI_DISABLE();
 80037f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037f6:	f7ff f973 	bl	8002ae0 <HAL_GetTick>
 80037fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fc:	e004      	b.n	8003808 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fe:	f7ff f96f 	bl	8002ae0 <HAL_GetTick>
 8003802:	1b80      	subs	r0, r0, r6
 8003804:	2802      	cmp	r0, #2
 8003806:	d8cc      	bhi.n	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	0799      	lsls	r1, r3, #30
 800380c:	d4f7      	bmi.n	80037fe <HAL_RCC_OscConfig+0x2ea>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	e6f0      	b.n	80035f4 <HAL_RCC_OscConfig+0xe0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003812:	684a      	ldr	r2, [r1, #4]
 8003814:	0256      	lsls	r6, r2, #9
 8003816:	f53f aed0 	bmi.w	80035ba <HAL_RCC_OscConfig+0xa6>
 800381a:	e76c      	b.n	80036f6 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0x3a0>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e79a      	b.n	8003766 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <HAL_RCC_OscConfig+0x3a0>)
 8003832:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
 800383a:	e727      	b.n	800368c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCC_OscConfig+0x3a0>)
 800383e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003840:	f042 0204 	orr.w	r2, r2, #4
 8003844:	671a      	str	r2, [r3, #112]	; 0x70
 8003846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	671a      	str	r2, [r3, #112]	; 0x70
 800384e:	e7b1      	b.n	80037b4 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 8003850:	f7ff f946 	bl	8002ae0 <HAL_GetTick>
 8003854:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e004      	b.n	8003862 <HAL_RCC_OscConfig+0x34e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7ff f942 	bl	8002ae0 <HAL_GetTick>
 800385c:	1b80      	subs	r0, r0, r6
 800385e:	2802      	cmp	r0, #2
 8003860:	d89f      	bhi.n	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	682b      	ldr	r3, [r5, #0]
 8003864:	0199      	lsls	r1, r3, #6
 8003866:	d4f7      	bmi.n	8003858 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800386c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800386e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003870:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003872:	4313      	orrs	r3, r2
 8003874:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003876:	4c0f      	ldr	r4, [pc, #60]	; (80038b4 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003878:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800387c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003880:	0852      	lsrs	r2, r2, #1
 8003882:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003886:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003888:	490b      	ldr	r1, [pc, #44]	; (80038b8 <HAL_RCC_OscConfig+0x3a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800388e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003890:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003892:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003894:	f7ff f924 	bl	8002ae0 <HAL_GetTick>
 8003898:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	e005      	b.n	80038a8 <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7ff f920 	bl	8002ae0 <HAL_GetTick>
 80038a0:	1b40      	subs	r0, r0, r5
 80038a2:	2802      	cmp	r0, #2
 80038a4:	f63f af7d 	bhi.w	80037a2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	019a      	lsls	r2, r3, #6
 80038ac:	d5f6      	bpl.n	800389c <HAL_RCC_OscConfig+0x388>
 80038ae:	e709      	b.n	80036c4 <HAL_RCC_OscConfig+0x1b0>
 80038b0:	42470000 	.word	0x42470000
 80038b4:	40023800 	.word	0x40023800
 80038b8:	42470060 	.word	0x42470060

080038bc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038bc:	2800      	cmp	r0, #0
 80038be:	d05c      	beq.n	800397a <HAL_TIM_Base_Init+0xbe>
{
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038c6:	4604      	mov	r4, r0
 80038c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038cc:	b3bb      	cbz	r3, 800393e <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	4e3a      	ldr	r6, [pc, #232]	; (80039bc <HAL_TIM_Base_Init+0x100>)
 80038d2:	69a5      	ldr	r5, [r4, #24]
 80038d4:	68e0      	ldr	r0, [r4, #12]
 80038d6:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	2302      	movs	r3, #2
 80038da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038de:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80038e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e2:	d04c      	beq.n	800397e <HAL_TIM_Base_Init+0xc2>
 80038e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80038e8:	d058      	beq.n	800399c <HAL_TIM_Base_Init+0xe0>
 80038ea:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80038ee:	42b2      	cmp	r2, r6
 80038f0:	d02a      	beq.n	8003948 <HAL_TIM_Base_Init+0x8c>
 80038f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80038f6:	42b2      	cmp	r2, r6
 80038f8:	d026      	beq.n	8003948 <HAL_TIM_Base_Init+0x8c>
 80038fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80038fe:	42b2      	cmp	r2, r6
 8003900:	d022      	beq.n	8003948 <HAL_TIM_Base_Init+0x8c>
 8003902:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003906:	42b2      	cmp	r2, r6
 8003908:	d01e      	beq.n	8003948 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800390e:	42b2      	cmp	r2, r6
 8003910:	d013      	beq.n	800393a <HAL_TIM_Base_Init+0x7e>
 8003912:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003916:	42b2      	cmp	r2, r6
 8003918:	d00f      	beq.n	800393a <HAL_TIM_Base_Init+0x7e>
 800391a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800391e:	42b2      	cmp	r2, r6
 8003920:	d00b      	beq.n	800393a <HAL_TIM_Base_Init+0x7e>
 8003922:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8003926:	42b2      	cmp	r2, r6
 8003928:	d007      	beq.n	800393a <HAL_TIM_Base_Init+0x7e>
 800392a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800392e:	42b2      	cmp	r2, r6
 8003930:	d003      	beq.n	800393a <HAL_TIM_Base_Init+0x7e>
 8003932:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003936:	42b2      	cmp	r2, r6
 8003938:	d138      	bne.n	80039ac <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	6926      	ldr	r6, [r4, #16]
 800393c:	e033      	b.n	80039a6 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800393e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003942:	f7fe fac5 	bl	8001ed0 <HAL_TIM_Base_MspInit>
 8003946:	e7c2      	b.n	80038ce <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003948:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394a:	4f1d      	ldr	r7, [pc, #116]	; (80039c0 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003950:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003958:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8003962:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003964:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003966:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396a:	6963      	ldr	r3, [r4, #20]
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800396e:	2301      	movs	r3, #1
 8003970:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003972:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003974:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800397a:	2001      	movs	r0, #1
}
 800397c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800397e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003980:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003986:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003992:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003994:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003996:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003998:	6291      	str	r1, [r2, #40]	; 0x28
 800399a:	e7e6      	b.n	800396a <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 800399c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039a4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80039b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039b6:	6291      	str	r1, [r2, #40]	; 0x28
 80039b8:	e7d9      	b.n	800396e <HAL_TIM_Base_Init+0xb2>
 80039ba:	bf00      	nop
 80039bc:	40010000 	.word	0x40010000
 80039c0:	40010400 	.word	0x40010400

080039c4 <HAL_TIM_PWM_MspInit>:
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d05c      	beq.n	8003a86 <HAL_TIM_PWM_Init+0xbe>
{
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039d2:	4604      	mov	r4, r0
 80039d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039d8:	b3bb      	cbz	r3, 8003a4a <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039da:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	4e3a      	ldr	r6, [pc, #232]	; (8003ac8 <HAL_TIM_PWM_Init+0x100>)
 80039de:	69a5      	ldr	r5, [r4, #24]
 80039e0:	68e0      	ldr	r0, [r4, #12]
 80039e2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	2302      	movs	r3, #2
 80039e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ea:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80039ec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ee:	d04c      	beq.n	8003a8a <HAL_TIM_PWM_Init+0xc2>
 80039f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80039f4:	d058      	beq.n	8003aa8 <HAL_TIM_PWM_Init+0xe0>
 80039f6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80039fa:	42b2      	cmp	r2, r6
 80039fc:	d02a      	beq.n	8003a54 <HAL_TIM_PWM_Init+0x8c>
 80039fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003a02:	42b2      	cmp	r2, r6
 8003a04:	d026      	beq.n	8003a54 <HAL_TIM_PWM_Init+0x8c>
 8003a06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003a0a:	42b2      	cmp	r2, r6
 8003a0c:	d022      	beq.n	8003a54 <HAL_TIM_PWM_Init+0x8c>
 8003a0e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003a12:	42b2      	cmp	r2, r6
 8003a14:	d01e      	beq.n	8003a54 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a16:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003a1a:	42b2      	cmp	r2, r6
 8003a1c:	d013      	beq.n	8003a46 <HAL_TIM_PWM_Init+0x7e>
 8003a1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003a22:	42b2      	cmp	r2, r6
 8003a24:	d00f      	beq.n	8003a46 <HAL_TIM_PWM_Init+0x7e>
 8003a26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003a2a:	42b2      	cmp	r2, r6
 8003a2c:	d00b      	beq.n	8003a46 <HAL_TIM_PWM_Init+0x7e>
 8003a2e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8003a32:	42b2      	cmp	r2, r6
 8003a34:	d007      	beq.n	8003a46 <HAL_TIM_PWM_Init+0x7e>
 8003a36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003a3a:	42b2      	cmp	r2, r6
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_PWM_Init+0x7e>
 8003a3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003a42:	42b2      	cmp	r2, r6
 8003a44:	d138      	bne.n	8003ab8 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	6926      	ldr	r6, [r4, #16]
 8003a48:	e033      	b.n	8003ab2 <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8003a4a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a4e:	f7ff ffb9 	bl	80039c4 <HAL_TIM_PWM_MspInit>
 8003a52:	e7c2      	b.n	80039da <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003a54:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a56:	4f1d      	ldr	r7, [pc, #116]	; (8003acc <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a5c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a64:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8003a6e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a70:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a72:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8003a76:	6963      	ldr	r3, [r4, #20]
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003a7e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003a86:	2001      	movs	r0, #1
}
 8003a88:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003a8a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a92:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a98:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003aa0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003aa4:	6291      	str	r1, [r2, #40]	; 0x28
 8003aa6:	e7e6      	b.n	8003a76 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8003aa8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aaa:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003abe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ac2:	6291      	str	r1, [r2, #40]	; 0x28
 8003ac4:	e7d9      	b.n	8003a7a <HAL_TIM_PWM_Init+0xb2>
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40010400 	.word	0x40010400

08003ad0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003ad0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f000 80cc 	beq.w	8003c72 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 8003ada:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003ade:	2401      	movs	r4, #1
 8003ae0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003ae8:	2a0c      	cmp	r2, #12
 8003aea:	d835      	bhi.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x88>
 8003aec:	e8df f002 	tbb	[pc, r2]
 8003af0:	34343407 	.word	0x34343407
 8003af4:	3434346a 	.word	0x3434346a
 8003af8:	34343496 	.word	0x34343496
 8003afc:	3d          	.byte	0x3d
 8003afd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003afe:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b00:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b04:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003b06:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b08:	4e74      	ldr	r6, [pc, #464]	; (8003cdc <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0a:	f025 0501 	bic.w	r5, r5, #1
 8003b0e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003b10:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b12:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b14:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003b16:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b1a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b1e:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8003b20:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b28:	f000 80bb 	beq.w	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003b2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b30:	42b3      	cmp	r3, r6
 8003b32:	f000 80b6 	beq.w	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b36:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b38:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b3a:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b3c:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b40:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b42:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	f044 0408 	orr.w	r4, r4, #8
 8003b48:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b4a:	6999      	ldr	r1, [r3, #24]
 8003b4c:	f021 0104 	bic.w	r1, r1, #4
 8003b50:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	432a      	orrs	r2, r5
 8003b56:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003b58:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003b64:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003b66:	4618      	mov	r0, r3
}
 8003b68:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b6a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b6c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b70:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b72:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b74:	4e59      	ldr	r6, [pc, #356]	; (8003cdc <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b76:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003b7a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003b7c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b7e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b80:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b86:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b8c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b94:	d06f      	beq.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8003b96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b9a:	42b3      	cmp	r3, r6
 8003b9c:	d06b      	beq.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b9e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ba0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ba2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba4:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003baa:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bac:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003bb0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003bb8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003bc0:	61da      	str	r2, [r3, #28]
      break;
 8003bc2:	e7c9      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bca:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bcc:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8003cdc <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd0:	f025 0510 	bic.w	r5, r5, #16
 8003bd4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003bd8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003bda:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be4:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bea:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bee:	d065      	beq.n	8003cbc <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8003bf0:	4f3b      	ldr	r7, [pc, #236]	; (8003ce0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003bf2:	42bb      	cmp	r3, r7
 8003bf4:	d062      	beq.n	8003cbc <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003bf8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003bfa:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003bfc:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003bfe:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c00:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c02:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c04:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003c08:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c0a:	6999      	ldr	r1, [r3, #24]
 8003c0c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003c10:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003c18:	619a      	str	r2, [r3, #24]
      break;
 8003c1a:	e79d      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c1c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c1e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c20:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003c22:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c24:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003cdc <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c28:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8003c2c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003c30:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003c32:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c38:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c3c:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003c42:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c46:	d01c      	beq.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8003c48:	4f25      	ldr	r7, [pc, #148]	; (8003ce0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003c4a:	42bb      	cmp	r3, r7
 8003c4c:	d019      	beq.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c50:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003c52:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003c54:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003c56:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c58:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c5a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c5c:	f044 0408 	orr.w	r4, r4, #8
 8003c60:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c62:	69d9      	ldr	r1, [r3, #28]
 8003c64:	f021 0104 	bic.w	r1, r1, #4
 8003c68:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	432a      	orrs	r2, r5
 8003c6e:	61da      	str	r2, [r3, #28]
      break;
 8003c70:	e772      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 8003c72:	2002      	movs	r0, #2
}
 8003c74:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c76:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c78:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c7c:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8003c80:	e78d      	b.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c82:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c88:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c90:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c94:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c9c:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8003ca0:	e7d5      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 8003ca2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ca4:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003ca8:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003caa:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cae:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cb4:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb8:	4335      	orrs	r5, r6
 8003cba:	e73c      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cbc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cca:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cce:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd6:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 8003cda:	e78c      	b.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x126>
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ce4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d05a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003cee:	6803      	ldr	r3, [r0, #0]
{
 8003cf0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003cf6:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003cf8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003cfe:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8003d02:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8003d04:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8003d06:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8003d0a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d0c:	d074      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x114>
 8003d0e:	d94a      	bls.n	8003da6 <HAL_TIM_ConfigClockSource+0xc2>
 8003d10:	2c60      	cmp	r4, #96	; 0x60
 8003d12:	d02d      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0x8c>
 8003d14:	d956      	bls.n	8003dc4 <HAL_TIM_ConfigClockSource+0xe0>
 8003d16:	2c70      	cmp	r4, #112	; 0x70
 8003d18:	d01a      	beq.n	8003d50 <HAL_TIM_ConfigClockSource+0x6c>
 8003d1a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8003d1e:	d10e      	bne.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d20:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003d24:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003d26:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	432a      	orrs	r2, r5
 8003d2a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d32:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d34:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d3c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8003d3e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	2201      	movs	r2, #1
 8003d42:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003d4a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003d4c:	4618      	mov	r0, r3
}
 8003d4e:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d50:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003d54:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003d56:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d58:	432a      	orrs	r2, r5
 8003d5a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d62:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003d64:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003d66:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d68:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003d6c:	609a      	str	r2, [r3, #8]
      break;
 8003d6e:	e7e6      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d70:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d72:	684d      	ldr	r5, [r1, #4]
 8003d74:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	f024 0410 	bic.w	r4, r4, #16
 8003d7a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d80:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d88:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003d90:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d92:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003d94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	e7cd      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003da2:	2002      	movs	r0, #2
}
 8003da4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003da6:	2c10      	cmp	r4, #16
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0xd0>
 8003daa:	d93d      	bls.n	8003e28 <HAL_TIM_ConfigClockSource+0x144>
 8003dac:	2c20      	cmp	r4, #32
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0xd0>
 8003db0:	2c30      	cmp	r4, #48	; 0x30
 8003db2:	d1c4      	bne.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8003db4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dbe:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8003dc0:	609c      	str	r4, [r3, #8]
 8003dc2:	e7bc      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2c50      	cmp	r4, #80	; 0x50
 8003dc6:	d1ba      	bne.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003dc8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dca:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dcc:	684c      	ldr	r4, [r1, #4]
 8003dce:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd0:	f026 0601 	bic.w	r6, r6, #1
 8003dd4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dd8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ddc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003de4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003dea:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	e7a2      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003df8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfc:	684c      	ldr	r4, [r1, #4]
 8003dfe:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e00:	f026 0601 	bic.w	r6, r6, #1
 8003e04:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e08:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003e14:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003e1a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e20:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	e78a      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003e28:	2c00      	cmp	r4, #0
 8003e2a:	d0c3      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0xd0>
 8003e2c:	e787      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x5a>
 8003e2e:	bf00      	nop

08003e30 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003e30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d047      	beq.n	8003ec8 <HAL_TIM_SlaveConfigSynchro+0x98>
  tmpsmcr = htim->Instance->SMCR;
 8003e38:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3a:	2302      	movs	r3, #2
{
 8003e3c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e42:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8003e46:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e4c:	432b      	orrs	r3, r5
 8003e4e:	4604      	mov	r4, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e50:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e54:	4333      	orrs	r3, r6
  __HAL_LOCK(htim);
 8003e56:	2001      	movs	r0, #1
  switch (sSlaveConfig->InputTrigger)
 8003e58:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 8003e5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8003e5e:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8003e60:	d04e      	beq.n	8003f00 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8003e62:	d91f      	bls.n	8003ea4 <HAL_TIM_SlaveConfigSynchro+0x74>
 8003e64:	2d60      	cmp	r5, #96	; 0x60
 8003e66:	d038      	beq.n	8003eda <HAL_TIM_SlaveConfigSynchro+0xaa>
 8003e68:	2d70      	cmp	r5, #112	; 0x70
 8003e6a:	d10a      	bne.n	8003e82 <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e6c:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8003e70:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8003e72:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e74:	432b      	orrs	r3, r5
 8003e76:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003e80:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e82:	68d3      	ldr	r3, [r2, #12]
 8003e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e88:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e8a:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8003e8e:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e94:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003e96:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e9c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8003ea0:	bcf0      	pop	{r4, r5, r6, r7}
 8003ea2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8003ea4:	2d40      	cmp	r5, #64	; 0x40
 8003ea6:	d1ec      	bne.n	8003e82 <HAL_TIM_SlaveConfigSynchro+0x52>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003ea8:	2e05      	cmp	r6, #5
 8003eaa:	d00f      	beq.n	8003ecc <HAL_TIM_SlaveConfigSynchro+0x9c>
      tmpccer = htim->Instance->CCER;
 8003eac:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003eae:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003eb0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003eb2:	f020 0001 	bic.w	r0, r0, #1
 8003eb6:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003eb8:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ebe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003ec2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003ec4:	6215      	str	r5, [r2, #32]
 8003ec6:	e7dc      	b.n	8003e82 <HAL_TIM_SlaveConfigSynchro+0x52>
  __HAL_LOCK(htim);
 8003ec8:	2002      	movs	r0, #2
}
 8003eca:	4770      	bx	lr
    __HAL_UNLOCK(htim);
 8003ecc:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8003ece:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003ed2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ed8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003edc:	688d      	ldr	r5, [r1, #8]
 8003ede:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee0:	f020 0010 	bic.w	r0, r0, #16
 8003ee4:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8003ee8:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eea:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003efa:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003efc:	6213      	str	r3, [r2, #32]
 8003efe:	e7c0      	b.n	8003e82 <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpccer = TIMx->CCER;
 8003f00:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f02:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f04:	6888      	ldr	r0, [r1, #8]
 8003f06:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f08:	f026 0601 	bic.w	r6, r6, #1
 8003f0c:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0e:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f10:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003f18:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f1a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003f1e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003f20:	6211      	str	r1, [r2, #32]
 8003f22:	e7ae      	b.n	8003e82 <HAL_TIM_SlaveConfigSynchro+0x52>

08003f24 <TIM_Base_SetConfig>:
{
 8003f24:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f26:	4e36      	ldr	r6, [pc, #216]	; (8004000 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	694d      	ldr	r5, [r1, #20]
 8003f2c:	688c      	ldr	r4, [r1, #8]
 8003f2e:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	42b0      	cmp	r0, r6
 8003f32:	d055      	beq.n	8003fe0 <TIM_Base_SetConfig+0xbc>
 8003f34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f38:	d029      	beq.n	8003f8e <TIM_Base_SetConfig+0x6a>
 8003f3a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003f3e:	42b0      	cmp	r0, r6
 8003f40:	d037      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8e>
 8003f42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f46:	42b0      	cmp	r0, r6
 8003f48:	d033      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8e>
 8003f4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f4e:	42b0      	cmp	r0, r6
 8003f50:	d02f      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8e>
 8003f52:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003f56:	42b0      	cmp	r0, r6
 8003f58:	d02b      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003f5e:	42b0      	cmp	r0, r6
 8003f60:	d013      	beq.n	8003f8a <TIM_Base_SetConfig+0x66>
 8003f62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f66:	42b0      	cmp	r0, r6
 8003f68:	d00f      	beq.n	8003f8a <TIM_Base_SetConfig+0x66>
 8003f6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f6e:	42b0      	cmp	r0, r6
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0x66>
 8003f72:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8003f76:	42b0      	cmp	r0, r6
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x66>
 8003f7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f7e:	42b0      	cmp	r0, r6
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x66>
 8003f82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f86:	42b0      	cmp	r0, r6
 8003f88:	d109      	bne.n	8003f9e <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8a:	68c9      	ldr	r1, [r1, #12]
 8003f8c:	e004      	b.n	8003f98 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8003f8e:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f90:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f96:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003fa4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003faa:	2301      	movs	r3, #1
 8003fac:	6143      	str	r3, [r0, #20]
}
 8003fae:	bcf0      	pop	{r4, r5, r6, r7}
 8003fb0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003fb2:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb4:	4f13      	ldr	r7, [pc, #76]	; (8004004 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fba:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbc:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc8:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fca:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8003fcc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fce:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd2:	d1ea      	bne.n	8003faa <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	690b      	ldr	r3, [r1, #16]
 8003fd6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	6143      	str	r3, [r0, #20]
}
 8003fdc:	bcf0      	pop	{r4, r5, r6, r7}
 8003fde:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe2:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fee:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003ff6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff8:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ffa:	6282      	str	r2, [r0, #40]	; 0x28
 8003ffc:	e7ea      	b.n	8003fd4 <TIM_Base_SetConfig+0xb0>
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40010400 	.word	0x40010400

08004008 <TIM_OC2_SetConfig>:
{
 8004008:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800400c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800400e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004010:	4d15      	ldr	r5, [pc, #84]	; (8004068 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	f024 0410 	bic.w	r4, r4, #16
 8004016:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004018:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800401a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800401c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800401e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004022:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004026:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004028:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004030:	d00a      	beq.n	8004048 <TIM_OC2_SetConfig+0x40>
 8004032:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004036:	42a8      	cmp	r0, r5
 8004038:	d006      	beq.n	8004048 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 800403a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800403c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800403e:	6182      	str	r2, [r0, #24]
}
 8004040:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004042:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004044:	6203      	str	r3, [r0, #32]
}
 8004046:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004048:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800404a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800404e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004052:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004056:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800405a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800405c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004060:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004064:	e7e9      	b.n	800403a <TIM_OC2_SetConfig+0x32>
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000

0800406c <TIM_TI1_SetConfig>:
{
 800406c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406e:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004070:	4e1b      	ldr	r6, [pc, #108]	; (80040e0 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004072:	f024 0401 	bic.w	r4, r4, #1
 8004076:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004078:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800407a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800407c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800407e:	d01d      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 8004080:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004084:	d01a      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 8004086:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800408a:	42b0      	cmp	r0, r6
 800408c:	d016      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 800408e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004092:	42b0      	cmp	r0, r6
 8004094:	d012      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 8004096:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800409a:	42b0      	cmp	r0, r6
 800409c:	d00e      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 800409e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80040a2:	42b0      	cmp	r0, r6
 80040a4:	d00a      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 80040a6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80040aa:	42b0      	cmp	r0, r6
 80040ac:	d006      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
 80040ae:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80040b2:	42b0      	cmp	r0, r6
 80040b4:	d002      	beq.n	80040bc <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040b6:	f044 0201 	orr.w	r2, r4, #1
 80040ba:	e002      	b.n	80040c2 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040bc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80040c0:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040c2:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040c4:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040c8:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040ce:	f001 010a 	and.w	r1, r1, #10
 80040d2:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040d4:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 80040d6:	6183      	str	r3, [r0, #24]
}
 80040d8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80040da:	6201      	str	r1, [r0, #32]
}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000

080040e4 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop

080040e8 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d054      	beq.n	8004196 <HAL_TIMEx_HallSensor_Init+0xae>
{
 80040ec:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80040f2:	b088      	sub	sp, #32
 80040f4:	4604      	mov	r4, r0
 80040f6:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d045      	beq.n	800418c <HAL_TIMEx_HallSensor_Init+0xa4>
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004106:	1d21      	adds	r1, r4, #4
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	f7ff ff0b 	bl	8003f24 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800410e:	68ab      	ldr	r3, [r5, #8]
 8004110:	6829      	ldr	r1, [r5, #0]
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	2203      	movs	r2, #3
 8004116:	f7ff ffa9 	bl	800406c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800411a:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800411c:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800411e:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004120:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004122:	f022 020c 	bic.w	r2, r2, #12
 8004126:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004128:	6983      	ldr	r3, [r0, #24]
 800412a:	4333      	orrs	r3, r6
 800412c:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800412e:	6843      	ldr	r3, [r0, #4]
 8004130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004134:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004136:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004138:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004140:	6883      	ldr	r3, [r0, #8]
 8004142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004146:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004148:	6883      	ldr	r3, [r0, #8]
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004150:	6883      	ldr	r3, [r0, #8]
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004158:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800415a:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800415c:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800415e:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004160:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004164:	9507      	str	r5, [sp, #28]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004166:	e9cd 5503 	strd	r5, r5, [sp, #12]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800416a:	f7ff ff4d 	bl	8004008 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004176:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004178:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 800417a:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800417c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 8004180:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004182:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004184:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004188:	b008      	add	sp, #32
 800418a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800418c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004190:	f7ff ffa8 	bl	80040e4 <HAL_TIMEx_HallSensor_MspInit>
 8004194:	e7b4      	b.n	8004100 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004196:	2001      	movs	r0, #1
}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop

0800419c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800419c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d03a      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a4:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041a6:	2202      	movs	r2, #2
{
 80041a8:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80041ae:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b0:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	4d1b      	ldr	r5, [pc, #108]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ba:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041bc:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80041be:	f04f 0601 	mov.w	r6, #1
 80041c2:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 80041c6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	d019      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d016      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041ee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80041f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d104      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fe:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004200:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004204:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004206:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004208:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800420a:	2201      	movs	r2, #1
 800420c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004210:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004214:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004216:	4618      	mov	r0, r3
}
 8004218:	4770      	bx	lr
  __HAL_LOCK(htim);
 800421a:	2002      	movs	r0, #2
}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	40000400 	.word	0x40000400

08004228 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d021      	beq.n	8004274 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8004230:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004232:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004236:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004244:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800424a:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800424e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004254:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800425a:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800425c:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800425e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004264:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8004266:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004268:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 800426a:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 800426c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8004270:	4608      	mov	r0, r1
 8004272:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004274:	2302      	movs	r3, #2
}
 8004276:	4618      	mov	r0, r3
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop

0800427c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427c:	2800      	cmp	r0, #0
 800427e:	f000 8093 	beq.w	80043a8 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8004286:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004288:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800428c:	4604      	mov	r4, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8085 	beq.w	800439e <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004294:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004296:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004298:	2224      	movs	r2, #36	; 0x24
 800429a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800429e:	68d8      	ldr	r0, [r3, #12]
 80042a0:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a4:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80042a8:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042aa:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ac:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ae:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80042b2:	4329      	orrs	r1, r5
 80042b4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80042b6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b8:	6965      	ldr	r5, [r4, #20]
 80042ba:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 80042bc:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042c0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80042c2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042c6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80042c8:	430a      	orrs	r2, r1
 80042ca:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	69a1      	ldr	r1, [r4, #24]
 80042d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042d4:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042da:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042dc:	4a36      	ldr	r2, [pc, #216]	; (80043b8 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042de:	d034      	beq.n	800434a <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d063      	beq.n	80043ac <HAL_UART_Init+0x130>
 80042e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d05f      	beq.n	80043ac <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7ff f89a 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	4d32      	ldr	r5, [pc, #200]	; (80043bc <HAL_UART_Init+0x140>)
 80042f4:	2219      	movs	r2, #25
 80042f6:	fba0 0102 	umull	r0, r1, r0, r2
 80042fa:	009a      	lsls	r2, r3, #2
 80042fc:	0f9b      	lsrs	r3, r3, #30
 80042fe:	f7fb ff81 	bl	8000204 <__aeabi_uldivmod>
 8004302:	fba5 2100 	umull	r2, r1, r5, r0
 8004306:	0949      	lsrs	r1, r1, #5
 8004308:	2264      	movs	r2, #100	; 0x64
 800430a:	fb02 0211 	mls	r2, r2, r1, r0
 800430e:	0112      	lsls	r2, r2, #4
 8004310:	3232      	adds	r2, #50	; 0x32
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	fba5 0202 	umull	r0, r2, r5, r2
 8004318:	0109      	lsls	r1, r1, #4
 800431a:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 800431e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004326:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004330:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004334:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800433a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800433c:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433e:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004340:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004348:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800434a:	4293      	cmp	r3, r2
 800434c:	d031      	beq.n	80043b2 <HAL_UART_Init+0x136>
 800434e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004352:	4293      	cmp	r3, r2
 8004354:	d02d      	beq.n	80043b2 <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004356:	f7ff f865 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800435a:	6862      	ldr	r2, [r4, #4]
 800435c:	2600      	movs	r6, #0
 800435e:	1892      	adds	r2, r2, r2
 8004360:	f04f 0119 	mov.w	r1, #25
 8004364:	eb46 0306 	adc.w	r3, r6, r6
 8004368:	fba0 0101 	umull	r0, r1, r0, r1
 800436c:	f7fb ff4a 	bl	8000204 <__aeabi_uldivmod>
 8004370:	4e12      	ldr	r6, [pc, #72]	; (80043bc <HAL_UART_Init+0x140>)
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	fba6 2100 	umull	r2, r1, r6, r0
 8004378:	094d      	lsrs	r5, r1, #5
 800437a:	2264      	movs	r2, #100	; 0x64
 800437c:	fb02 0215 	mls	r2, r2, r5, r0
 8004380:	00d2      	lsls	r2, r2, #3
 8004382:	3232      	adds	r2, #50	; 0x32
 8004384:	fba6 1202 	umull	r1, r2, r6, r2
 8004388:	0952      	lsrs	r2, r2, #5
 800438a:	f002 0107 	and.w	r1, r2, #7
 800438e:	0052      	lsls	r2, r2, #1
 8004390:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004394:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004398:	440a      	add	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	e7c0      	b.n	8004320 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800439e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80043a2:	f7fd fe4d 	bl	8002040 <HAL_UART_MspInit>
 80043a6:	e775      	b.n	8004294 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80043a8:	2001      	movs	r0, #1
}
 80043aa:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7ff f84a 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 80043b0:	e79e      	b.n	80042f0 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b2:	f7ff f847 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 80043b6:	e7d0      	b.n	800435a <HAL_UART_Init+0xde>
 80043b8:	40011000 	.word	0x40011000
 80043bc:	51eb851f 	.word	0x51eb851f

080043c0 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80043c0:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80043c2:	8840      	ldrh	r0, [r0, #2]
 80043c4:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80043c8:	0c00      	lsrs	r0, r0, #16
 80043ca:	4770      	bx	lr

080043cc <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80043cc:	b410      	push	{r4}
 80043ce:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80043d0:	8802      	ldrh	r2, [r0, #0]
 80043d2:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80043d4:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80043d8:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80043dc:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80043e0:	42a2      	cmp	r2, r4
{
 80043e2:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80043e4:	d219      	bcs.n	800441a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80043e6:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80043ea:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80043ee:	b2e4      	uxtb	r4, r4
 80043f0:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80043f4:	8882      	ldrh	r2, [r0, #4]
 80043f6:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80043fa:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004400:	bfbc      	itt	lt
 8004402:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004406:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004408:	2b00      	cmp	r3, #0
 800440a:	bfbc      	itt	lt
 800440c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004410:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004412:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004416:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800441a:	b289      	uxth	r1, r1
 800441c:	2000      	movs	r0, #0
 800441e:	b29b      	uxth	r3, r3
 8004420:	f361 000f 	bfi	r0, r1, #0, #16
 8004424:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004428:	b005      	add	sp, #20
 800442a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800442e:	4770      	bx	lr

08004430 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	8243      	strh	r3, [r0, #18]
 8004434:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004436:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 800443a:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800443e:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004442:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8004446:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 800444a:	4770      	bx	lr

0800444c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 800444c:	b120      	cbz	r0, 8004458 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800444e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004452:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004454:	9b00      	ldr	r3, [sp, #0]
 8004456:	60c3      	str	r3, [r0, #12]
  }
}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop

0800445c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 800445c:	b190      	cbz	r0, 8004484 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800445e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004460:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8004462:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004464:	b151      	cbz	r1, 800447c <FCP_CalcCRC+0x20>
 8004466:	1e4a      	subs	r2, r1, #1
 8004468:	1c81      	adds	r1, r0, #2
 800446a:	fa51 f282 	uxtab	r2, r1, r2
 800446e:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8004470:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8004474:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004476:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 8004478:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800447a:	d1f9      	bne.n	8004470 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800447c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8004480:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004488:	b4f0      	push	{r4, r5, r6, r7}
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 800448a:	8a85      	ldrh	r5, [r0, #20]
                                     pHandle->_Super.bElToMecRatio;
 800448c:	7842      	ldrb	r2, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800448e:	8ac6      	ldrh	r6, [r0, #22]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004490:	e9d0 430a 	ldrd	r4, r3, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004494:	fb16 f602 	smulbb	r6, r6, r2
  hMaxReliableElSpeedUnit *= 2u;
 8004498:	006d      	lsls	r5, r5, #1
 800449a:	fb15 f502 	smulbb	r5, r5, r2
  hMinReliableElSpeedUnit /= 4u;
 800449e:	f3c6 068d 	ubfx	r6, r6, #2, #14

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80044a2:	0c22      	lsrs	r2, r4, #16
  hMaxReliableElSpeedUnit *= 2u;
 80044a4:	b2ad      	uxth	r5, r5
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80044a6:	f8a0 20c2 	strh.w	r2, [r0, #194]	; 0xc2

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80044aa:	2e00      	cmp	r6, #0
 80044ac:	d069      	beq.n	8004582 <HALL_Init+0xfa>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80044ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80044b2:	0076      	lsls	r6, r6, #1
 80044b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80044b8:	fbb1 f1f6 	udiv	r1, r1, r6
 80044bc:	b28f      	uxth	r7, r1
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80044be:	4e32      	ldr	r6, [pc, #200]	; (8004588 <HALL_Init+0x100>)
 80044c0:	f8a0 70c0 	strh.w	r7, [r0, #192]	; 0xc0
 80044c4:	fb01 f202 	mul.w	r2, r1, r2
 80044c8:	fba6 6202 	umull	r6, r2, r6, r2
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80044cc:	492f      	ldr	r1, [pc, #188]	; (800458c <HALL_Init+0x104>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80044ce:	69c6      	ldr	r6, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80044d0:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80044d4:	0992      	lsrs	r2, r2, #6
 80044d6:	f8a0 20ae 	strh.w	r2, [r0, #174]	; 0xae
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80044da:	fba1 4104 	umull	r4, r1, r1, r4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80044de:	b292      	uxth	r2, r2
 80044e0:	0414      	lsls	r4, r2, #16
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80044e2:	0889      	lsrs	r1, r1, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80044e4:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80044e8:	eb01 0781 	add.w	r7, r1, r1, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80044ec:	8b44      	ldrh	r4, [r0, #26]
 80044ee:	fbb1 f1f4 	udiv	r1, r1, r4
 80044f2:	fb06 f101 	mul.w	r1, r6, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80044f6:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80044fa:	007f      	lsls	r7, r7, #1
                       / hMaxReliableElSpeedUnit);
 80044fc:	fbb7 f5f5 	udiv	r5, r7, r5
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004500:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004504:	6999      	ldr	r1, [r3, #24]

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004506:	f890 50c6 	ldrb.w	r5, [r0, #198]	; 0xc6

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 800450a:	f890 7048 	ldrb.w	r7, [r0, #72]	; 0x48
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800450e:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8004510:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8004514:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004518:	fb04 f405 	mul.w	r4, r4, r5
  pHandle->SensorIsReliable = true;
 800451c:	2501      	movs	r5, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800451e:	fb94 f4f6 	sdiv	r4, r4, r6
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004522:	3c01      	subs	r4, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004524:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
  pHandle->SensorIsReliable = true;
 8004528:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 800452c:	6199      	str	r1, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004530:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8004532:	2100      	movs	r1, #0
 8004534:	432a      	orrs	r2, r5
 8004536:	615a      	str	r2, [r3, #20]
 8004538:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f042 0204 	orr.w	r2, r2, #4
 8004540:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	f042 0202 	orr.w	r2, r2, #2
 8004548:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	432a      	orrs	r2, r5
 800454e:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8004550:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	432a      	orrs	r2, r5
 8004556:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	432a      	orrs	r2, r5
 800455c:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800455e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004562:	b163      	cbz	r3, 800457e <HALL_Init+0xf6>
 8004564:	3b01      	subs	r3, #1
 8004566:	b2d9      	uxtb	r1, r3
 8004568:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800456c:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8004570:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004574:	304c      	adds	r0, #76	; 0x4c
 8004576:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800457a:	4298      	cmp	r0, r3
 800457c:	d1fb      	bne.n	8004576 <HALL_Init+0xee>
  }
}
 800457e:	bcf0      	pop	{r4, r5, r6, r7}
 8004580:	4770      	bx	lr
 8004582:	2196      	movs	r1, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8004584:	460f      	mov	r7, r1
 8004586:	e79a      	b.n	80044be <HALL_Init+0x36>
 8004588:	10624dd3 	.word	0x10624dd3
 800458c:	aaaaaaab 	.word	0xaaaaaaab

08004590 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004590:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8004592:	f8b0 c0ae 	ldrh.w	ip, [r0, #174]	; 0xae
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004596:	68d1      	ldr	r1, [r2, #12]
 8004598:	f021 0102 	bic.w	r1, r1, #2
  pHandle->RatioDec = false;
 800459c:	2300      	movs	r3, #0
{
 800459e:	b4f0      	push	{r4, r5, r6, r7}
 80045a0:	e9d0 740e 	ldrd	r7, r4, [r0, #56]	; 0x38
 80045a4:	e9d0 6510 	ldrd	r6, r5, [r0, #64]	; 0x40
 80045a8:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 80045aa:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 80045ac:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 80045b0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 80045b4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 80045b8:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 80045bc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 80045c0:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 80045c2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 80045c6:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 80045c8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 80045cc:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 80045d0:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 80045d4:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80045d8:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	e9d0 c10c 	ldrd	ip, r1, [r0, #48]	; 0x30
 80045e4:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80045e6:	68d3      	ldr	r3, [r2, #12]
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80045ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 80045f2:	b9e3      	cbnz	r3, 800462e <HALL_Clear+0x9e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80045f4:	6933      	ldr	r3, [r6, #16]
 80045f6:	693e      	ldr	r6, [r7, #16]
 80045f8:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80045fc:	ea35 0303 	bics.w	r3, r5, r3
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004600:	bf0c      	ite	eq
 8004602:	2304      	moveq	r3, #4
 8004604:	2300      	movne	r3, #0
 8004606:	43b4      	bics	r4, r6
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004608:	bf0c      	ite	eq
 800460a:	2402      	moveq	r4, #2
 800460c:	2400      	movne	r4, #0
 800460e:	4323      	orrs	r3, r4
 8004610:	ea31 0202 	bics.w	r2, r1, r2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004614:	bf08      	it	eq
 8004616:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 800461a:	1e5a      	subs	r2, r3, #1
 800461c:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8004620:	2a05      	cmp	r2, #5
 8004622:	d854      	bhi.n	80046ce <HALL_Clear+0x13e>
 8004624:	e8df f002 	tbb	[pc, r2]
 8004628:	3f352b21 	.word	0x3f352b21
 800462c:	1749      	.short	0x1749
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	6933      	ldr	r3, [r6, #16]
 8004632:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8004636:	ea35 0303 	bics.w	r3, r5, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800463a:	bf0c      	ite	eq
 800463c:	2302      	moveq	r3, #2
 800463e:	2300      	movne	r3, #0
 8004640:	43b1      	bics	r1, r6
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004642:	bf08      	it	eq
 8004644:	f043 0301 	orreq.w	r3, r3, #1
 8004648:	ea34 0202 	bics.w	r2, r4, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800464c:	bf14      	ite	ne
 800464e:	2204      	movne	r2, #4
 8004650:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004652:	4313      	orrs	r3, r2
 8004654:	e7e1      	b.n	800461a <HALL_Clear+0x8a>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004656:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004658:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 800465c:	3b3f      	subs	r3, #63	; 0x3f
 800465e:	b21b      	sxth	r3, r3
 8004660:	8083      	strh	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004662:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8004666:	bcf0      	pop	{r4, r5, r6, r7}
 8004668:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800466a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800466c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004670:	333f      	adds	r3, #63	; 0x3f
 8004672:	b21b      	sxth	r3, r3
 8004674:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004676:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800467a:	bcf0      	pop	{r4, r5, r6, r7}
 800467c:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 800467e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004680:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8004684:	3b2a      	subs	r3, #42	; 0x2a
 8004686:	b21b      	sxth	r3, r3
 8004688:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800468a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800468e:	bcf0      	pop	{r4, r5, r6, r7}
 8004690:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004692:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004694:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004698:	332a      	adds	r3, #42	; 0x2a
 800469a:	b21b      	sxth	r3, r3
 800469c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800469e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80046a2:	bcf0      	pop	{r4, r5, r6, r7}
 80046a4:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80046a6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80046a8:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80046ac:	3b15      	subs	r3, #21
 80046ae:	b21b      	sxth	r3, r3
 80046b0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80046b2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80046b6:	bcf0      	pop	{r4, r5, r6, r7}
 80046b8:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80046ba:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80046bc:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80046c0:	3315      	adds	r3, #21
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80046c6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80046ca:	bcf0      	pop	{r4, r5, r6, r7}
 80046cc:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 80046ce:	2200      	movs	r2, #0
 80046d0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80046d4:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80046d8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80046dc:	bcf0      	pop	{r4, r5, r6, r7}
 80046de:	4770      	bx	lr

080046e0 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80046e0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80046e4:	8883      	ldrh	r3, [r0, #4]
 80046e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80046ea:	428a      	cmp	r2, r1
 80046ec:	d011      	beq.n	8004712 <HALL_CalcElAngle+0x32>
{
 80046ee:	b430      	push	{r4, r5}
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80046f0:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80046f2:	f8b0 50ac 	ldrh.w	r5, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80046f6:	f8b0 40aa 	ldrh.w	r4, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80046fa:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80046fe:	440b      	add	r3, r1
 8004700:	442b      	add	r3, r5
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004702:	4421      	add	r1, r4
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004704:	b21b      	sxth	r3, r3
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004706:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 800470a:	8083      	strh	r3, [r0, #4]
}
 800470c:	bc30      	pop	{r4, r5}
 800470e:	4618      	mov	r0, r3
 8004710:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8004712:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8004716:	4413      	add	r3, r2
 8004718:	b21b      	sxth	r3, r3
 800471a:	8083      	strh	r3, [r0, #4]
}
 800471c:	4618      	mov	r0, r3
 800471e:	4770      	bx	lr

08004720 <HALL_CalcAvrgMecSpeedUnit>:
{
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8004724:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8004728:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 800472a:	b180      	cbz	r0, 800474e <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800472c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 800472e:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	429a      	cmp	r2, r3
 8004736:	d811      	bhi.n	800475c <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 800473c:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 800473e:	4629      	mov	r1, r5
 8004740:	4620      	mov	r0, r4
 8004742:	f000 ffe9 	bl	8005718 <SPD_IsMecSpeedReliable>
 8004746:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800474a:	81a3      	strh	r3, [r4, #12]
}
 800474c:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800474e:	78e3      	ldrb	r3, [r4, #3]
 8004750:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8004752:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8004754:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8004756:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004758:	81a3      	strh	r3, [r4, #12]
}
 800475a:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800475c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8004760:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8004762:	b1cb      	cbz	r3, 8004798 <HALL_CalcAvrgMecSpeedUnit+0x78>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004764:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HALL_CalcAvrgMecSpeedUnit+0x74>
          if (pHandle->HallMtpa == true)
 800476c:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8004770:	b1a2      	cbz	r2, 800479c <HALL_CalcAvrgMecSpeedUnit+0x7c>
            pHandle->CompSpeed = 0;
 8004772:	2200      	movs	r2, #0
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004774:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004776:	7861      	ldrb	r1, [r4, #1]
 8004778:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800477c:	fb03 f300 	mul.w	r3, r3, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004780:	69e2      	ldr	r2, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8004782:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004786:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8004788:	fb02 f201 	mul.w	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800478c:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8004790:	802b      	strh	r3, [r5, #0]
 8004792:	e7d4      	b.n	800473e <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8004794:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8004798:	802b      	strh	r3, [r5, #0]
 800479a:	e7d0      	b.n	800473e <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800479c:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 80047a0:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80047a2:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80047a6:	1a12      	subs	r2, r2, r0
 80047a8:	b212      	sxth	r2, r2
 80047aa:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80047ae:	fb92 f2f1 	sdiv	r2, r2, r1
 80047b2:	e7df      	b.n	8004774 <HALL_CalcAvrgMecSpeedUnit+0x54>

080047b4 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80047b4:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d042      	beq.n	8004842 <HALL_TIMx_CC_IRQHandler+0x8e>
{
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80047be:	f890 e020 	ldrb.w	lr, [r0, #32]
    bPrevHallState = pHandle->HallState;
 80047c2:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 80047c6:	f990 50a2 	ldrsb.w	r5, [r0, #162]	; 0xa2
 80047ca:	e9d0 c20e 	ldrd	ip, r2, [r0, #56]	; 0x38
 80047ce:	e9d0 7310 	ldrd	r7, r3, [r0, #64]	; 0x40
 80047d2:	e9d0 640c 	ldrd	r6, r4, [r0, #48]	; 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80047d6:	f1be 0f00 	cmp.w	lr, #0
 80047da:	d01d      	beq.n	8004818 <HALL_TIMx_CC_IRQHandler+0x64>
 80047dc:	f8dc c010 	ldr.w	ip, [ip, #16]
 80047e0:	693f      	ldr	r7, [r7, #16]
 80047e2:	6936      	ldr	r6, [r6, #16]
 80047e4:	43bb      	bics	r3, r7
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80047e6:	bf0c      	ite	eq
 80047e8:	2302      	moveq	r3, #2
 80047ea:	2300      	movne	r3, #0
 80047ec:	43b4      	bics	r4, r6
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80047ee:	bf08      	it	eq
 80047f0:	f043 0301 	orreq.w	r3, r3, #1
 80047f4:	ea32 020c 	bics.w	r2, r2, ip
 80047f8:	bf14      	ite	ne
 80047fa:	2204      	movne	r2, #4
 80047fc:	2200      	moveq	r2, #0
 80047fe:	4313      	orrs	r3, r2
    switch ( pHandle->HallState )
 8004800:	1e5a      	subs	r2, r3, #1
 8004802:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004806:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8004808:	2a05      	cmp	r2, #5
 800480a:	f200 8102 	bhi.w	8004a12 <HALL_TIMx_CC_IRQHandler+0x25e>
 800480e:	e8df f002 	tbb	[pc, r2]
 8004812:	c1d3      	.short	0xc1d3
 8004814:	1a8fa0af 	.word	0x1a8fa0af
 8004818:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800481c:	f8dc 7010 	ldr.w	r7, [ip, #16]
 8004820:	6936      	ldr	r6, [r6, #16]
 8004822:	ea33 030e 	bics.w	r3, r3, lr
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004826:	bf0c      	ite	eq
 8004828:	2304      	moveq	r3, #4
 800482a:	2300      	movne	r3, #0
 800482c:	43ba      	bics	r2, r7
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800482e:	bf0c      	ite	eq
 8004830:	2202      	moveq	r2, #2
 8004832:	2200      	movne	r2, #0
 8004834:	4313      	orrs	r3, r2
 8004836:	ea34 0206 	bics.w	r2, r4, r6
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800483a:	bf08      	it	eq
 800483c:	f043 0301 	orreq.w	r3, r3, #1
 8004840:	e7de      	b.n	8004800 <HALL_TIMx_CC_IRQHandler+0x4c>
}
 8004842:	2000      	movs	r0, #0
 8004844:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8004846:	2902      	cmp	r1, #2
 8004848:	f000 8127 	beq.w	8004a9a <HALL_TIMx_CC_IRQHandler+0x2e6>
        else if ( bPrevHallState == STATE_4 )
 800484c:	2904      	cmp	r1, #4
 800484e:	f000 8111 	beq.w	8004a74 <HALL_TIMx_CC_IRQHandler+0x2c0>
    PrevDirection = pHandle->Direction;
 8004852:	4629      	mov	r1, r5
    if (pHandle->HallMtpa == true)
 8004854:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8004858:	b113      	cbz	r3, 8004860 <HALL_TIMx_CC_IRQHandler+0xac>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800485a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
 800485e:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8004860:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80c1 	beq.w	80049ec <HALL_TIMx_CC_IRQHandler+0x238>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800486a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800486e:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
 8004872:	42ab      	cmp	r3, r5
 8004874:	d205      	bcs.n	8004882 <HALL_TIMx_CC_IRQHandler+0xce>
        pHandle->BufferFilled++;
 8004876:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800487a:	3301      	adds	r3, #1
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8004882:	6b67      	ldr	r7, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004884:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004886:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 800488a:	f890 604e 	ldrb.w	r6, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 800488e:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8004890:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8004892:	fa13 f387 	uxtah	r3, r3, r7
      if ( pHandle->OVFCounter != 0u )
 8004896:	f006 0cff 	and.w	ip, r6, #255	; 0xff
 800489a:	2e00      	cmp	r6, #0
 800489c:	f000 80af 	beq.w	80049fe <HALL_TIMx_CC_IRQHandler+0x24a>
        hAux = hPrscBuf + 1u;
 80048a0:	3201      	adds	r2, #1
        if ( pHandle->RatioInc )
 80048a2:	f890 604b 	ldrb.w	r6, [r0, #75]	; 0x4b
        wCaptBuf *= hAux;
 80048a6:	b292      	uxth	r2, r2
 80048a8:	fb03 f302 	mul.w	r3, r3, r2
        if ( pHandle->RatioInc )
 80048ac:	2e00      	cmp	r6, #0
 80048ae:	f000 80b7 	beq.w	8004a20 <HALL_TIMx_CC_IRQHandler+0x26c>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80048b2:	2200      	movs	r2, #0
 80048b4:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 80048b8:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 80048bc:	429a      	cmp	r2, r3
 80048be:	d832      	bhi.n	8004926 <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048c0:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80048c4:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048c8:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80048cc:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80048d0:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048d2:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80048d6:	bf88      	it	hi
 80048d8:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048dc:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 80048e0:	f102 0201 	add.w	r2, r2, #1
 80048e4:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80048e6:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80048ea:	bf8a      	itet	hi
 80048ec:	19a4      	addhi	r4, r4, r6
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80048ee:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80048f0:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80048f4:	4295      	cmp	r5, r2
 80048f6:	f8cc 6050 	str.w	r6, [ip, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 80048fa:	bf08      	it	eq
 80048fc:	2200      	moveq	r2, #0
 80048fe:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8004902:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 8004906:	2a00      	cmp	r2, #0
 8004908:	f000 8087 	beq.w	8004a1a <HALL_TIMx_CC_IRQHandler+0x266>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800490c:	f890 404d 	ldrb.w	r4, [r0, #77]	; 0x4d
 8004910:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8004914:	42a5      	cmp	r5, r4
 8004916:	f240 80a4 	bls.w	8004a62 <HALL_TIMx_CC_IRQHandler+0x2ae>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	fb13 f101 	smulbb	r1, r3, r1
 8004922:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 8004926:	2300      	movs	r3, #0
 8004928:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 800492c:	2000      	movs	r0, #0
 800492e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8004930:	2904      	cmp	r1, #4
 8004932:	f000 80ab 	beq.w	8004a8c <HALL_TIMx_CC_IRQHandler+0x2d8>
        else if ( bPrevHallState == STATE_1 )
 8004936:	2901      	cmp	r1, #1
 8004938:	d18b      	bne.n	8004852 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800493a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800493c:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8004940:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8004942:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8004944:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004948:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 800494c:	f04f 31ff 	mov.w	r1, #4294967295
 8004950:	e043      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_6 )
 8004952:	2906      	cmp	r1, #6
 8004954:	f000 80b4 	beq.w	8004ac0 <HALL_TIMx_CC_IRQHandler+0x30c>
        else if ( bPrevHallState == STATE_5 )
 8004958:	2905      	cmp	r1, #5
 800495a:	f47f af7a 	bne.w	8004852 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->Direction = NEGATIVE;
 800495e:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8004960:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = NEGATIVE;
 8004962:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8004966:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 800496a:	f04f 31ff 	mov.w	r1, #4294967295
 800496e:	e034      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_1 )
 8004970:	2901      	cmp	r1, #1
 8004972:	f000 809c 	beq.w	8004aae <HALL_TIMx_CC_IRQHandler+0x2fa>
        else if ( bPrevHallState == STATE_2 )
 8004976:	2902      	cmp	r1, #2
 8004978:	f47f af6b 	bne.w	8004852 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800497c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800497e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004982:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 8004984:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004986:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800498a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 800498e:	f04f 31ff 	mov.w	r1, #4294967295
 8004992:	e022      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_3 )
 8004994:	2903      	cmp	r1, #3
 8004996:	f000 80a7 	beq.w	8004ae8 <HALL_TIMx_CC_IRQHandler+0x334>
        else if ( bPrevHallState == STATE_6 )
 800499a:	2906      	cmp	r1, #6
 800499c:	f47f af59 	bne.w	8004852 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80049a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80049a2:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80049a6:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80049a8:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80049aa:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80049ae:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80049b2:	f04f 31ff 	mov.w	r1, #4294967295
 80049b6:	e010      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_5 )
 80049b8:	2905      	cmp	r1, #5
 80049ba:	f000 808b 	beq.w	8004ad4 <HALL_TIMx_CC_IRQHandler+0x320>
        else if ( bPrevHallState == STATE_3 )
 80049be:	2903      	cmp	r1, #3
 80049c0:	f47f af47 	bne.w	8004852 <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80049c4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80049c6:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80049ca:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80049cc:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80049ce:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80049d2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80049d6:	f04f 31ff 	mov.w	r1, #4294967295
    if (pHandle->Direction != PrevDirection)
 80049da:	428d      	cmp	r5, r1
 80049dc:	f43f af3a 	beq.w	8004854 <HALL_TIMx_CC_IRQHandler+0xa0>
      pHandle->BufferFilled = 0 ;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 80049e6:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 80049ea:	e733      	b.n	8004854 <HALL_TIMx_CC_IRQHandler+0xa0>
      pHandle->FirstCapt++;
 80049ec:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80049f0:	3301      	adds	r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80049f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 80049fa:	2000      	movs	r0, #0
 80049fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80049fe:	f890 604a 	ldrb.w	r6, [r0, #74]	; 0x4a
 8004a02:	b1d6      	cbz	r6, 8004a3a <HALL_TIMx_CC_IRQHandler+0x286>
          hAux = hPrscBuf + 2u;
 8004a04:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8004a06:	b292      	uxth	r2, r2
 8004a08:	fb03 f302 	mul.w	r3, r3, r2
          pHandle->RatioDec = false;
 8004a0c:	f880 c04a 	strb.w	ip, [r0, #74]	; 0x4a
 8004a10:	e752      	b.n	80048b8 <HALL_TIMx_CC_IRQHandler+0x104>
        pHandle->SensorIsReliable = false;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8004a18:	e71b      	b.n	8004852 <HALL_TIMx_CC_IRQHandler+0x9e>
            pHandle->AvrElSpeedDpp = 0;
 8004a1a:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 8004a1e:	e782      	b.n	8004926 <HALL_TIMx_CC_IRQHandler+0x172>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004a20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8004a22:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	; 0xae
 8004a26:	4296      	cmp	r6, r2
 8004a28:	f67f af46 	bls.w	80048b8 <HALL_TIMx_CC_IRQHandler+0x104>
 8004a2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004a2e:	2601      	movs	r6, #1
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8004a30:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004a32:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8004a34:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
 8004a38:	e73e      	b.n	80048b8 <HALL_TIMx_CC_IRQHandler+0x104>
          uint16_t hAux = hPrscBuf + 1u;
 8004a3a:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004a3c:	b2bf      	uxth	r7, r7
          wCaptBuf *= hAux;
 8004a3e:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004a40:	f5b7 4faa 	cmp.w	r7, #21760	; 0x5500
          wCaptBuf *= hAux;
 8004a44:	fb03 f302 	mul.w	r3, r3, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8004a48:	f4bf af36 	bcs.w	80048b8 <HALL_TIMx_CC_IRQHandler+0x104>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004a4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	f43f af32 	beq.w	80048b8 <HALL_TIMx_CC_IRQHandler+0x104>
 8004a54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8004a56:	2601      	movs	r6, #1
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8004a58:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8004a5a:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8004a5c:	f880 604a 	strb.w	r6, [r0, #74]	; 0x4a
 8004a60:	e72a      	b.n	80048b8 <HALL_TIMx_CC_IRQHandler+0x104>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8004a62:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8004a66:	fb93 f5f5 	sdiv	r5, r3, r5
 8004a6a:	fb92 f2f5 	sdiv	r2, r2, r5
 8004a6e:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 8004a72:	e758      	b.n	8004926 <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004a74:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004a76:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8004a7a:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8004a7c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004a7e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8004a82:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8004a86:	f04f 31ff 	mov.w	r1, #4294967295
 8004a8a:	e7a6      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->Direction = POSITIVE;
 8004a8c:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8004a8e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 8004a90:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8004a94:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 8004a98:	e79f      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004a9a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004a9c:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8004aa0:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8004aa2:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004aa4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004aa8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 8004aac:	e795      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004aae:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 8004ab0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004ab4:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8004ab8:	3355      	adds	r3, #85	; 0x55
 8004aba:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 8004abe:	e78c      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004ac0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004ac2:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8004ac6:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8004ac8:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8004aca:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004ace:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 8004ad2:	e782      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004ad4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004ad6:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8004ada:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8004adc:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004ade:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004ae2:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 8004ae6:	e778      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>
                                                  + S16_60_PHASE_SHIFT );
 8004ae8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004aea:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004aee:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8004af0:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004af2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004af6:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 8004afa:	e76e      	b.n	80049da <HALL_TIMx_CC_IRQHandler+0x226>

08004afc <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8004afc:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8004b00:	b1e3      	cbz	r3, 8004b3c <HALL_TIMx_UP_IRQHandler+0x40>
{
 8004b02:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 8004b04:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004b08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004b0a:	f8b0 40c0 	ldrh.w	r4, [r0, #192]	; 0xc0
 8004b0e:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
    pHandle->OVFCounter++;
 8004b12:	3201      	adds	r2, #1
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004b1a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004b1c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b24:	fb05 2202 	mla	r2, r5, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004b28:	fb03 f304 	mul.w	r3, r3, r4
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004b2c:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4299      	cmp	r1, r3
 8004b34:	d204      	bcs.n	8004b40 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8004b36:	2000      	movs	r0, #0
 8004b38:	bcf0      	pop	{r4, r5, r6, r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004b40:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8004b44:	f04f 0c00 	mov.w	ip, #0
 8004b48:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	; 0x38
 8004b4c:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	; 0x40
 8004b50:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	; 0x30
 8004b54:	f8a0 c00e 	strh.w	ip, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004b58:	b9d7      	cbnz	r7, 8004b90 <HALL_TIMx_UP_IRQHandler+0x94>
 8004b5a:	692f      	ldr	r7, [r5, #16]
 8004b5c:	6935      	ldr	r5, [r6, #16]
 8004b5e:	6924      	ldr	r4, [r4, #16]
 8004b60:	43bb      	bics	r3, r7
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004b62:	bf0c      	ite	eq
 8004b64:	2304      	moveq	r3, #4
 8004b66:	4663      	movne	r3, ip
 8004b68:	43aa      	bics	r2, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2202      	moveq	r2, #2
 8004b6e:	4662      	movne	r2, ip
 8004b70:	4313      	orrs	r3, r2
 8004b72:	ea31 0204 	bics.w	r2, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004b76:	bf08      	it	eq
 8004b78:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8004b82:	2a05      	cmp	r2, #5
 8004b84:	d864      	bhi.n	8004c50 <HALL_TIMx_UP_IRQHandler+0x154>
 8004b86:	e8df f002 	tbb	[pc, r2]
 8004b8a:	555c      	.short	0x555c
 8004b8c:	1440474e 	.word	0x1440474e
 8004b90:	6936      	ldr	r6, [r6, #16]
 8004b92:	692d      	ldr	r5, [r5, #16]
 8004b94:	6924      	ldr	r4, [r4, #16]
 8004b96:	43ab      	bics	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004b98:	bf0c      	ite	eq
 8004b9a:	2302      	moveq	r3, #2
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	43a1      	bics	r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004ba0:	bf08      	it	eq
 8004ba2:	f043 0301 	orreq.w	r3, r3, #1
 8004ba6:	43b2      	bics	r2, r6
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004ba8:	bf14      	ite	ne
 8004baa:	2204      	movne	r2, #4
 8004bac:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	e7e4      	b.n	8004b7c <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004bb2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004bb4:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8004bb8:	3b3f      	subs	r3, #63	; 0x3f
 8004bba:	b21b      	sxth	r3, r3
 8004bbc:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004bbe:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004bc2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
 8004bcc:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
      pHandle->FirstCapt = 0u;
 8004bd0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004bd4:	b16c      	cbz	r4, 8004bf2 <HALL_TIMx_UP_IRQHandler+0xf6>
 8004bd6:	1e62      	subs	r2, r4, #1
 8004bd8:	b2d3      	uxtb	r3, r2
 8004bda:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8004bde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004be2:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004be6:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d1fb      	bne.n	8004be6 <HALL_TIMx_UP_IRQHandler+0xea>
 8004bee:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8004bf8:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004bfc:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8004c00:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8004c04:	bcf0      	pop	{r4, r5, r6, r7}
 8004c06:	2000      	movs	r0, #0
 8004c08:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004c0a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004c0c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8004c10:	3315      	adds	r3, #21
 8004c12:	b21b      	sxth	r3, r3
 8004c14:	8083      	strh	r3, [r0, #4]
 8004c16:	e7d2      	b.n	8004bbe <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004c18:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004c1a:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8004c1e:	3b15      	subs	r3, #21
 8004c20:	b21b      	sxth	r3, r3
 8004c22:	8083      	strh	r3, [r0, #4]
 8004c24:	e7cb      	b.n	8004bbe <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004c26:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004c28:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004c2c:	332a      	adds	r3, #42	; 0x2a
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	8083      	strh	r3, [r0, #4]
 8004c32:	e7c4      	b.n	8004bbe <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004c34:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004c36:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8004c3a:	3b2a      	subs	r3, #42	; 0x2a
 8004c3c:	b21b      	sxth	r3, r3
 8004c3e:	8083      	strh	r3, [r0, #4]
 8004c40:	e7bd      	b.n	8004bbe <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004c42:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004c44:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004c48:	333f      	adds	r3, #63	; 0x3f
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	8083      	strh	r3, [r0, #4]
 8004c4e:	e7b6      	b.n	8004bbe <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->SensorIsReliable = false;
 8004c50:	2200      	movs	r2, #0
 8004c52:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8004c56:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 8004c5a:	e7b0      	b.n	8004bbe <HALL_TIMx_UP_IRQHandler+0xc2>

08004c5c <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004c5c:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <ICS_GetPhaseCurrents+0x88>)
{
 8004c60:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004c62:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8004c64:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 8004c66:	6a22      	ldr	r2, [r4, #32]
 8004c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c6c:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8004c70:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8004c72:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	1b5b      	subs	r3, r3, r5
  if ( aux < -INT16_MAX )
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	da1c      	bge.n	8004cb6 <ICS_GetPhaseCurrents+0x5a>
  {
    pStator_Currents->a = -INT16_MAX;
 8004c7c:	800a      	strh	r2, [r1, #0]
 8004c7e:	4615      	mov	r5, r2
 8004c80:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <ICS_GetPhaseCurrents+0x90>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8004c86:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8004c8a:	4c17      	ldr	r4, [pc, #92]	; (8004ce8 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8004c8c:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	db21      	blt.n	8004cda <ICS_GetPhaseCurrents+0x7e>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9a:	da19      	bge.n	8004cd0 <ICS_GetPhaseCurrents+0x74>
  {
    pStator_Currents->b = INT16_MAX;
  }
  else
  {
    pStator_Currents->b = ( int16_t )aux;
 8004c9c:	b21c      	sxth	r4, r3
 8004c9e:	804c      	strh	r4, [r1, #2]
 8004ca0:	b29b      	uxth	r3, r3
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004ca2:	4413      	add	r3, r2
 8004ca4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8004ca6:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8004caa:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004cae:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 8004cb2:	bc70      	pop	{r4, r5, r6}
 8004cb4:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 8004cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cba:	db05      	blt.n	8004cc8 <ICS_GetPhaseCurrents+0x6c>
    pStator_Currents->a = INT16_MAX;
 8004cbc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	800b      	strh	r3, [r1, #0]
 8004cc4:	461d      	mov	r5, r3
 8004cc6:	e7dd      	b.n	8004c84 <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->a = ( int16_t )aux;
 8004cc8:	b21d      	sxth	r5, r3
 8004cca:	800d      	strh	r5, [r1, #0]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	e7d9      	b.n	8004c84 <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->b = INT16_MAX;
 8004cd0:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	804c      	strh	r4, [r1, #2]
 8004cd8:	e7e3      	b.n	8004ca2 <ICS_GetPhaseCurrents+0x46>
    pStator_Currents->b = -INT16_MAX;
 8004cda:	804c      	strh	r4, [r1, #2]
 8004cdc:	f248 0301 	movw	r3, #32769	; 0x8001
 8004ce0:	e7df      	b.n	8004ca2 <ICS_GetPhaseCurrents+0x46>
 8004ce2:	bf00      	nop
 8004ce4:	40012000 	.word	0x40012000
 8004ce8:	ffff8001 	.word	0xffff8001
 8004cec:	40012100 	.word	0x40012100

08004cf0 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004cf0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	6a13      	ldr	r3, [r2, #32]
 8004cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfa:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004cfc:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8004d00:	2b0f      	cmp	r3, #15
 8004d02:	d814      	bhi.n	8004d2e <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8004d04:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <ICS_HFCurrentsCalibration+0x44>)
 8004d06:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8004d08:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8004d0a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8004d0c:	4c0a      	ldr	r4, [pc, #40]	; (8004d38 <ICS_HFCurrentsCalibration+0x48>)
 8004d0e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8004d10:	442b      	add	r3, r5
 8004d12:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8004d14:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 8004d16:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8004d1e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8004d20:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004d24:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8004d26:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8004d28:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8004d2a:	600b      	str	r3, [r1, #0]
}
 8004d2c:	4770      	bx	lr
  pStator_Currents->a = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	600b      	str	r3, [r1, #0]
 8004d32:	4770      	bx	lr
 8004d34:	40012000 	.word	0x40012000
 8004d38:	40012100 	.word	0x40012100

08004d3c <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004d3c:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8004d3e:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d40:	681a      	ldr	r2, [r3, #0]
{
 8004d42:	b410      	push	{r4}
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8004d44:	f891 402c 	ldrb.w	r4, [r1, #44]	; 0x2c
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	b134      	cbz	r4, 8004d5e <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d54:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d5c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 8004d66:	790a      	ldrb	r2, [r1, #4]
 8004d68:	2a02      	cmp	r2, #2
 8004d6a:	d036      	beq.n	8004dda <ICS_Init+0x9e>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 8004d6c:	780a      	ldrb	r2, [r1, #0]
 8004d6e:	2a01      	cmp	r2, #1
 8004d70:	d03f      	beq.n	8004df2 <ICS_Init+0xb6>
  SET_BIT(TIMx->CCER, Channels);
 8004d72:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8004d74:	4921      	ldr	r1, [pc, #132]	; (8004dfc <ICS_Init+0xc0>)
}
 8004d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d7a:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 8004d7e:	f042 0205 	orr.w	r2, r2, #5
 8004d82:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8004d84:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <ICS_Init+0xc4>)
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8004d86:	428b      	cmp	r3, r1
 8004d88:	68d3      	ldr	r3, [r2, #12]
 8004d8a:	bf0c      	ite	eq
 8004d8c:	f043 0301 	orreq.w	r3, r3, #1
 8004d90:	f043 0302 	orrne.w	r3, r3, #2
 8004d94:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8004d96:	bf08      	it	eq
 8004d98:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <ICS_Init+0xc8>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 8004d9e:	bf18      	it	ne
 8004da0:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 8004da4:	6681      	str	r1, [r0, #104]	; 0x68
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	4917      	ldr	r1, [pc, #92]	; (8004e08 <ICS_Init+0xcc>)
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	688a      	ldr	r2, [r1, #8]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004dba:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004dbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004dc4:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004dc6:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 8004dd4:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8004dd8:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8004dda:	794a      	ldrb	r2, [r1, #5]
 8004ddc:	2a01      	cmp	r2, #1
 8004dde:	d108      	bne.n	8004df2 <ICS_Init+0xb6>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8004de0:	7a09      	ldrb	r1, [r1, #8]
 8004de2:	2903      	cmp	r1, #3
 8004de4:	d105      	bne.n	8004df2 <ICS_Init+0xb6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004df0:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8004df2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8004df6:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dfa:	e7ba      	b.n	8004d72 <ICS_Init+0x36>
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	e0042000 	.word	0xe0042000
 8004e04:	40012000 	.word	0x40012000
 8004e08:	40012100 	.word	0x40012100

08004e0c <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004e0c:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8004e0e:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004e10:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8004e12:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e16:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e18:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e22:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	07d2      	lsls	r2, r2, #31
 8004e28:	d5fc      	bpl.n	8004e24 <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004e2c:	7c08      	ldrb	r0, [r1, #16]
 8004e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e32:	2802      	cmp	r0, #2
 8004e34:	645a      	str	r2, [r3, #68]	; 0x44
 8004e36:	d000      	beq.n	8004e3a <ICS_TurnOnLowSides+0x2e>
 8004e38:	4770      	bx	lr
{
 8004e3a:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004e3c:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004e3e:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004e40:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004e42:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004e44:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004e46:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004e48:	61ae      	str	r6, [r5, #24]
 8004e4a:	6184      	str	r4, [r0, #24]
 8004e4c:	619a      	str	r2, [r3, #24]
  }
}
 8004e4e:	bc70      	pop	{r4, r5, r6}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004e54:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8004e56:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004e5a:	68cb      	ldr	r3, [r1, #12]
{
 8004e5c:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004e5e:	2400      	movs	r4, #0
 8004e60:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8004e64:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e66:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8004e6a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e6c:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e6e:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004e70:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e74:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	07d2      	lsls	r2, r2, #31
 8004e7a:	d5fc      	bpl.n	8004e76 <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e7c:	f06f 0201 	mvn.w	r2, #1
 8004e80:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004e84:	7c08      	ldrb	r0, [r1, #16]
 8004e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e8a:	2802      	cmp	r0, #2
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
 8004e8e:	d112      	bne.n	8004eb6 <ICS_SwitchOnPWM+0x62>
 8004e90:	e9d1 7405 	ldrd	r7, r4, [r1, #20]
 8004e94:	e9d1 6007 	ldrd	r6, r0, [r1, #28]
 8004e98:	e9d1 5209 	ldrd	r5, r2, [r1, #36]	; 0x24
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004e9c:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8004ea0:	f240 5155 	movw	r1, #1365	; 0x555
 8004ea4:	ea31 010c 	bics.w	r1, r1, ip
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004ea8:	bf1e      	ittt	ne
 8004eaa:	0424      	lslne	r4, r4, #16
 8004eac:	0400      	lslne	r0, r0, #16
 8004eae:	0412      	lslne	r2, r2, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004eb0:	61bc      	str	r4, [r7, #24]
 8004eb2:	61b0      	str	r0, [r6, #24]
 8004eb4:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004eb6:	f06f 0201 	mvn.w	r2, #1
 8004eba:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8004ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8004ec6:	4770      	bx	lr

08004ec8 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004ec8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004eca:	68d3      	ldr	r3, [r2, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	f021 0101 	bic.w	r1, r1, #1
{
 8004ed2:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004ed4:	7c14      	ldrb	r4, [r2, #16]
 8004ed6:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004ed8:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004eda:	2500      	movs	r5, #0
 8004edc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004ee0:	2c02      	cmp	r4, #2
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004ee2:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8004ee6:	6459      	str	r1, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004ee8:	d10b      	bne.n	8004f02 <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004eea:	6994      	ldr	r4, [r2, #24]
 8004eec:	6a10      	ldr	r0, [r2, #32]
 8004eee:	6a91      	ldr	r1, [r2, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004ef0:	6957      	ldr	r7, [r2, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004ef2:	69d6      	ldr	r6, [r2, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004ef4:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8004ef6:	0424      	lsls	r4, r4, #16
 8004ef8:	0400      	lsls	r0, r0, #16
 8004efa:	0409      	lsls	r1, r1, #16
 8004efc:	61bc      	str	r4, [r7, #24]
 8004efe:	61b0      	str	r0, [r6, #24]
 8004f00:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004f02:	f06f 0201 	mvn.w	r2, #1
 8004f06:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	07d2      	lsls	r2, r2, #31
 8004f0c:	d5fc      	bpl.n	8004f08 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004f0e:	f06f 0201 	mvn.w	r2, #1
 8004f12:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8004f14:	bcf0      	pop	{r4, r5, r6, r7}
 8004f16:	4770      	bx	lr

08004f18 <ICS_CurrentReadingCalibration>:
{
 8004f18:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004f1a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8004f1c:	4924      	ldr	r1, [pc, #144]	; (8004fb0 <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004f1e:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 8004f20:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 8004f22:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 8004f26:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 8004f28:	65c2      	str	r2, [r0, #92]	; 0x5c
 8004f2a:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8004f2e:	4605      	mov	r5, r0
 8004f30:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 8004f34:	6602      	str	r2, [r0, #96]	; 0x60
 8004f36:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8004f38:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 8004f3a:	f7ff ff8b 	bl	8004e54 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8004f3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004f40:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8004f44:	7a1a      	ldrb	r2, [r3, #8]
 8004f46:	4620      	mov	r0, r4
 8004f48:	f105 0366 	add.w	r3, r5, #102	; 0x66
 8004f4c:	f000 fa06 	bl	800535c <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 8004f50:	4628      	mov	r0, r5
 8004f52:	f7ff ffb9 	bl	8004ec8 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 8004f56:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 8004f5a:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 8004f5c:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 8004f5e:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f62:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8004f64:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8004f68:	4912      	ldr	r1, [pc, #72]	; (8004fb4 <ICS_CurrentReadingCalibration+0x9c>)
 8004f6a:	f022 0208 	bic.w	r2, r2, #8
 8004f6e:	61a2      	str	r2, [r4, #24]
 8004f70:	69a2      	ldr	r2, [r4, #24]
 8004f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f76:	61a2      	str	r2, [r4, #24]
 8004f78:	69e2      	ldr	r2, [r4, #28]
 8004f7a:	f022 0208 	bic.w	r2, r2, #8
 8004f7e:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004f80:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004f82:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004f84:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f86:	69a3      	ldr	r3, [r4, #24]
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	61a3      	str	r3, [r4, #24]
 8004f8e:	69a3      	ldr	r3, [r4, #24]
 8004f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f94:	61a3      	str	r3, [r4, #24]
 8004f96:	69e3      	ldr	r3, [r4, #28]
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8004f9e:	6a23      	ldr	r3, [r4, #32]
 8004fa0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8004fa4:	f043 0305 	orr.w	r3, r3, #5
 8004fa8:	6223      	str	r3, [r4, #32]
 8004faa:	6069      	str	r1, [r5, #4]
}
 8004fac:	bd38      	pop	{r3, r4, r5, pc}
 8004fae:	bf00      	nop
 8004fb0:	08004cf1 	.word	0x08004cf1
 8004fb4:	08004c5d 	.word	0x08004c5d

08004fb8 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004fb8:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8004fba:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004fbc:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8004fbe:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8004fc0:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8004fc2:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004fc4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004fc6:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004fca:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8004fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd0:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8004fd8:	4a22      	ldr	r2, [pc, #136]	; (8005064 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8004fda:	6813      	ldr	r3, [r2, #0]
{
 8004fdc:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8004fde:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004fe2:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8004fe4:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004fe6:	68e9      	ldr	r1, [r5, #12]
  if ( adcinjflags == CONV_STARTED )
 8004fe8:	d026      	beq.n	8005038 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8004fea:	b94b      	cbnz	r3, 8005000 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8004fec:	886a      	ldrh	r2, [r5, #2]
 8004fee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d3fc      	bcc.n	8004fee <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8004ff6:	6813      	ldr	r3, [r2, #0]
 8004ff8:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d026      	beq.n	800504e <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8005000:	4f18      	ldr	r7, [pc, #96]	; (8005064 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005002:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4e18      	ldr	r6, [pc, #96]	; (8005068 <ICS_TIMx_UP_IRQHandler+0x90>)
 8005008:	f403 2470 	and.w	r4, r3, #983040	; 0xf0000
 800500c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005010:	4322      	orrs	r2, r4
 8005012:	60ba      	str	r2, [r7, #8]
 8005014:	68b3      	ldr	r3, [r6, #8]
 8005016:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800501a:	4323      	orrs	r3, r4
 800501c:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 800501e:	79ab      	ldrb	r3, [r5, #6]
 8005020:	03db      	lsls	r3, r3, #15
 8005022:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8005024:	79eb      	ldrb	r3, [r5, #7]
 8005026:	03db      	lsls	r3, r3, #15
 8005028:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 800502a:	6a0b      	ldr	r3, [r1, #32]
 800502c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8005030:	3046      	adds	r0, #70	; 0x46
 8005032:	620b      	str	r3, [r1, #32]
 8005034:	bcf0      	pop	{r4, r5, r6, r7}
 8005036:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005038:	6813      	ldr	r3, [r2, #0]
 800503a:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d0de      	beq.n	8005000 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d1f5      	bne.n	8005038 <ICS_TIMx_UP_IRQHandler+0x60>
 800504c:	e7d8      	b.n	8005000 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d0d3      	beq.n	8005000 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005058:	6813      	ldr	r3, [r2, #0]
 800505a:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d1f5      	bne.n	800504e <ICS_TIMx_UP_IRQHandler+0x76>
 8005062:	e7cd      	b.n	8005000 <ICS_TIMx_UP_IRQHandler+0x28>
 8005064:	40012000 	.word	0x40012000
 8005068:	40012100 	.word	0x40012100

0800506c <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800506c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800506e:	7c1a      	ldrb	r2, [r3, #16]
 8005070:	2a02      	cmp	r2, #2
 8005072:	d004      	beq.n	800507e <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8005074:	2301      	movs	r3, #1
 8005076:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 800507a:	3046      	adds	r0, #70	; 0x46
 800507c:	4770      	bx	lr
{
 800507e:	b4f0      	push	{r4, r5, r6, r7}
 8005080:	6a19      	ldr	r1, [r3, #32]
 8005082:	699c      	ldr	r4, [r3, #24]
 8005084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005086:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005088:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800508a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800508c:	0424      	lsls	r4, r4, #16
 800508e:	0409      	lsls	r1, r1, #16
 8005090:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005092:	2301      	movs	r3, #1
 8005094:	61bc      	str	r4, [r7, #24]
}
 8005096:	3046      	adds	r0, #70	; 0x46
 8005098:	61b1      	str	r1, [r6, #24]
 800509a:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 800509c:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 80050a0:	bcf0      	pop	{r4, r5, r6, r7}
 80050a2:	4770      	bx	lr

080050a4 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 80050a4:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 80050a8:	b90b      	cbnz	r3, 80050ae <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 80050aa:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 80050ac:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 80050b4:	2040      	movs	r0, #64	; 0x40
 80050b6:	4770      	bx	lr

080050b8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80050b8:	b508      	push	{r3, lr}
 80050ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050be:	2100      	movs	r1, #0
 80050c0:	f000 fe74 	bl	8005dac <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80050ca:	bd08      	pop	{r3, pc}

080050cc <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80050cc:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80050d0:	1c53      	adds	r3, r2, #1
 80050d2:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80050d4:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80050d6:	bf88      	it	hi
 80050d8:	2300      	movhi	r3, #0
{
 80050da:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80050dc:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80050e0:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80050e4:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80050e8:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 80050ec:	2200      	movs	r2, #0
 80050ee:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80050f0:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80050f4:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80050f6:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80050f8:	d1fa      	bne.n	80050f0 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	bfb8      	it	lt
 80050fe:	327f      	addlt	r2, #127	; 0x7f
 8005100:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005102:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005106:	bc30      	pop	{r4, r5}
 8005108:	4608      	mov	r0, r1
 800510a:	4770      	bx	lr

0800510c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 800510c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop

08005114 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005114:	8a03      	ldrh	r3, [r0, #16]
 8005116:	8b42      	ldrh	r2, [r0, #26]
 8005118:	429a      	cmp	r2, r3
 800511a:	d306      	bcc.n	800512a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800511c:	8b82      	ldrh	r2, [r0, #28]
 800511e:	429a      	cmp	r2, r3
 8005120:	d801      	bhi.n	8005126 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 8005122:	8ac0      	ldrh	r0, [r0, #22]
 8005124:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 8005126:	2000      	movs	r0, #0
  }
  return hFault;
}
 8005128:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 800512a:	2008      	movs	r0, #8
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005130:	2300      	movs	r3, #0
 8005132:	8203      	strh	r3, [r0, #16]
}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop

08005138 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005138:	7803      	ldrb	r3, [r0, #0]
 800513a:	b123      	cbz	r3, 8005146 <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 800513c:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800513e:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8005140:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005142:	8203      	strh	r3, [r0, #16]
 8005144:	4770      	bx	lr
{
 8005146:	b510      	push	{r4, lr}
 8005148:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800514a:	3004      	adds	r0, #4
 800514c:	f7fc fcf4 	bl	8001b38 <RCM_RegisterRegConv>
 8005150:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff ffeb 	bl	8005130 <NTC_Clear>
}
 800515a:	bd10      	pop	{r4, pc}

0800515c <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800515c:	7803      	ldrb	r3, [r0, #0]
 800515e:	b11b      	cbz	r3, 8005168 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005160:	2300      	movs	r3, #0
 8005162:	82c3      	strh	r3, [r0, #22]
 8005164:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 8005166:	4770      	bx	lr
{
 8005168:	b510      	push	{r4, lr}
 800516a:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800516c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005170:	f7fc fd9e 	bl	8001cb0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005178:	4298      	cmp	r0, r3
 800517a:	d007      	beq.n	800518c <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800517c:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800517e:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005180:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8005182:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005186:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800518a:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff ffc1 	bl	8005114 <NTC_SetFaultState>
 8005192:	82e0      	strh	r0, [r4, #22]
}
 8005194:	bd10      	pop	{r4, pc}
 8005196:	bf00      	nop

08005198 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005198:	7803      	ldrb	r3, [r0, #0]
 800519a:	b113      	cbz	r3, 80051a2 <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800519c:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 800519e:	b200      	sxth	r0, r0
 80051a0:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80051a2:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80051a4:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80051a6:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80051aa:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80051ac:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 80051ae:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bfbc      	itt	lt
 80051b6:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80051ba:	33ff      	addlt	r3, #255	; 0xff
 80051bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 80051c0:	b200      	sxth	r0, r0
 80051c2:	4770      	bx	lr

080051c4 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80051c4:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80051c6:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80051c8:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80051ca:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80051cc:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80051ce:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80051d0:	6283      	str	r3, [r0, #40]	; 0x28
}
 80051d2:	4770      	bx	lr

080051d4 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80051d4:	8081      	strh	r1, [r0, #4]
}
 80051d6:	4770      	bx	lr

080051d8 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80051d8:	80c1      	strh	r1, [r0, #6]
}
 80051da:	4770      	bx	lr

080051dc <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80051dc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80051e4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop

080051ec <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80051ec:	6081      	str	r1, [r0, #8]

  return;
}
 80051ee:	4770      	bx	lr

080051f0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80051f0:	8b00      	ldrh	r0, [r0, #24]
 80051f2:	4770      	bx	lr

080051f4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80051f4:	8b40      	ldrh	r0, [r0, #26]
 80051f6:	4770      	bx	lr

080051f8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80051f8:	8441      	strh	r1, [r0, #34]	; 0x22
}
 80051fa:	4770      	bx	lr

080051fc <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80051fc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop

08005204 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005204:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005208:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 800520c:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800520e:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005212:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005216:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 800521a:	b18b      	cbz	r3, 8005240 <PI_Controller+0x3c>
 800521c:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005220:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 8005224:	187b      	adds	r3, r7, r1
 8005226:	d424      	bmi.n	8005272 <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8005228:	2f00      	cmp	r7, #0
 800522a:	da04      	bge.n	8005236 <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 800522c:	4f16      	ldr	r7, [pc, #88]	; (8005288 <PI_Controller+0x84>)
 800522e:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8005232:	bf28      	it	cs
 8005234:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005236:	42a3      	cmp	r3, r4
 8005238:	dc03      	bgt.n	8005242 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800523a:	6904      	ldr	r4, [r0, #16]
 800523c:	429c      	cmp	r4, r3
 800523e:	dc00      	bgt.n	8005242 <PI_Controller+0x3e>
 8005240:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005242:	8b81      	ldrh	r1, [r0, #28]
 8005244:	8bc3      	ldrh	r3, [r0, #30]
 8005246:	410a      	asrs	r2, r1
 8005248:	fa44 f303 	asr.w	r3, r4, r3
 800524c:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800524e:	429d      	cmp	r5, r3
 8005250:	db08      	blt.n	8005264 <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8005252:	429e      	cmp	r6, r3
 8005254:	dd02      	ble.n	800525c <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8005256:	1af3      	subs	r3, r6, r3
 8005258:	441c      	add	r4, r3
 800525a:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800525c:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800525e:	b218      	sxth	r0, r3
}
 8005260:	bcf0      	pop	{r4, r5, r6, r7}
 8005262:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8005264:	1aeb      	subs	r3, r5, r3
 8005266:	441c      	add	r4, r3
 8005268:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 800526a:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 800526c:	b218      	sxth	r0, r3
}
 800526e:	bcf0      	pop	{r4, r5, r6, r7}
 8005270:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8005272:	2f00      	cmp	r7, #0
 8005274:	dddf      	ble.n	8005236 <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 8005276:	2900      	cmp	r1, #0
 8005278:	dddd      	ble.n	8005236 <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800527a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800527e:	429c      	cmp	r4, r3
 8005280:	d1df      	bne.n	8005242 <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8005282:	4623      	mov	r3, r4
 8005284:	e7dc      	b.n	8005240 <PI_Controller+0x3c>
 8005286:	bf00      	nop
 8005288:	80000001 	.word	0x80000001

0800528c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800528c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8005290:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005292:	8b0c      	ldrh	r4, [r1, #24]
 8005294:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005296:	898a      	ldrh	r2, [r1, #12]
 8005298:	8acb      	ldrh	r3, [r1, #22]
{
 800529a:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800529c:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80052a0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80052a4:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80052a8:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80052ac:	f7ff f888 	bl	80043c0 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80052b0:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80052b4:	490f      	ldr	r1, [pc, #60]	; (80052f4 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80052b6:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 80052ba:	bfb8      	it	lt
 80052bc:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80052c0:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 80052c4:	bfb8      	it	lt
 80052c6:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80052c8:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 80052ca:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80052cc:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 80052d0:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 80052d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80052d8:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 80052da:	fb81 2103 	smull	r2, r1, r1, r3
 80052de:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80052e0:	4630      	mov	r0, r6
 80052e2:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80052e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80052ea:	f7ff beef 	b.w	80050cc <MPM_CalcElMotorPower>
 80052ee:	bf00      	nop
 80052f0:	1b4e81b5 	.word	0x1b4e81b5
 80052f4:	66666667 	.word	0x66666667

080052f8 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80052f8:	4b17      	ldr	r3, [pc, #92]	; (8005358 <startTimers+0x60>)
 80052fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 80052fc:	07d2      	lsls	r2, r2, #31
 80052fe:	d514      	bpl.n	800532a <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005304:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005306:	6859      	ldr	r1, [r3, #4]
 8005308:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800530c:	f041 0120 	orr.w	r1, r1, #32
 8005310:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005312:	6959      	ldr	r1, [r3, #20]
 8005314:	f041 0101 	orr.w	r1, r1, #1
 8005318:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005320:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 800532a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005334:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800533a:	f002 0201 	and.w	r2, r2, #1
 800533e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005340:	9a01      	ldr	r2, [sp, #4]
 8005342:	694a      	ldr	r2, [r1, #20]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800534a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8005352:	b002      	add	sp, #8
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800

0800535c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800535c:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800535e:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005360:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8005364:	3201      	adds	r2, #1
 8005366:	2c60      	cmp	r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8005368:	bf18      	it	ne
 800536a:	0852      	lsrne	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800536c:	f06f 0602 	mvn.w	r6, #2
 8005370:	0155      	lsls	r5, r2, #5
 8005372:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8005374:	2400      	movs	r4, #0
  while (*cnt < NB_CONVERSIONS)
 8005376:	e002      	b.n	800537e <waitForPolarizationEnd+0x22>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005378:	6902      	ldr	r2, [r0, #16]
 800537a:	0792      	lsls	r2, r2, #30
 800537c:	d404      	bmi.n	8005388 <waitForPolarizationEnd+0x2c>
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	2a0f      	cmp	r2, #15
 8005382:	d9f9      	bls.n	8005378 <waitForPolarizationEnd+0x1c>
          break;
        }
      }
    }
  }
}
 8005384:	bc70      	pop	{r4, r5, r6}
 8005386:	4770      	bx	lr
      hCalibrationPeriodCounter++;
 8005388:	3401      	adds	r4, #1
 800538a:	b2a4      	uxth	r4, r4
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800538c:	42a5      	cmp	r5, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800538e:	6106      	str	r6, [r0, #16]
 8005390:	d8f5      	bhi.n	800537e <waitForPolarizationEnd+0x22>
        if (*cnt < NB_CONVERSIONS)
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	2a0f      	cmp	r2, #15
 8005396:	d8f2      	bhi.n	800537e <waitForPolarizationEnd+0x22>
          *SWerror = 1u;
 8005398:	2301      	movs	r3, #1
 800539a:	800b      	strh	r3, [r1, #0]
          break;
 800539c:	e7f2      	b.n	8005384 <waitForPolarizationEnd+0x28>
 800539e:	bf00      	nop

080053a0 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80053a0:	6843      	ldr	r3, [r0, #4]
 80053a2:	4718      	bx	r3

080053a4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80053a4:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80053a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80053aa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80053ac:	140c      	asrs	r4, r1, #16
{
 80053ae:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80053b0:	fb02 f404 	mul.w	r4, r2, r4
{
 80053b4:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80053b6:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80053ba:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80053bc:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80053be:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 80053c2:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 80053c4:	4421      	add	r1, r4
 80053c6:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 80053ca:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 80053ce:	106d      	asrs	r5, r5, #1
 80053d0:	ea4f 0292 	mov.w	r2, r2, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 80053d4:	ea4f 0666 	mov.w	r6, r6, asr #1
  if ( wY < 0 )
 80053d8:	d46e      	bmi.n	80054b8 <PWMC_SetPhaseVoltage+0x114>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 80053da:	2e00      	cmp	r6, #0
 80053dc:	db4c      	blt.n	8005478 <PWMC_SetPhaseVoltage+0xd4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80053de:	1bad      	subs	r5, r5, r6
 80053e0:	bf44      	itt	mi
 80053e2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80053e6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bfbc      	itt	lt
 80053ee:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 80053f2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80053f6:	2900      	cmp	r1, #0
 80053f8:	bfb8      	it	lt
 80053fa:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80053fe:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005402:	bfb8      	it	lt
 8005404:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8005408:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 800540a:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800540e:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 8005412:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005416:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 800541a:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800541c:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 800541e:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005422:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800542a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800542e:	b292      	uxth	r2, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	b289      	uxth	r1, r1
 8005434:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005436:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005438:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800543a:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 800543c:	d118      	bne.n	8005470 <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800543e:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
 8005442:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8005446:	2d00      	cmp	r5, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005448:	bfcc      	ite	gt
 800544a:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800544c:	1b12      	suble	r2, r2, r4
 800544e:	b292      	uxth	r2, r2
    }

    if ( pHandle->Ib > 0 )
 8005450:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
 8005454:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005456:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 800545a:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 800545c:	bfcc      	ite	gt
 800545e:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005460:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8005462:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005464:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005466:	bfcc      	ite	gt
 8005468:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800546a:	1b09      	suble	r1, r1, r4
 800546c:	8683      	strh	r3, [r0, #52]	; 0x34
 800546e:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005470:	6983      	ldr	r3, [r0, #24]
}
 8005472:	b003      	add	sp, #12
 8005474:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005476:	4718      	bx	r3
      if ( wX <= 0 )
 8005478:	2c00      	cmp	r4, #0
 800547a:	dd3c      	ble.n	80054f6 <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 800547c:	2b00      	cmp	r3, #0
 800547e:	bfb8      	it	lt
 8005480:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005484:	f04f 0100 	mov.w	r1, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005488:	bfb8      	it	lt
 800548a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800548e:	1ba5      	subs	r5, r4, r6
        pHandle->Sector = SECTOR_1;
 8005490:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8005494:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005496:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800549a:	bfb8      	it	lt
 800549c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80054a0:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80054a4:	bfb8      	it	lt
 80054a6:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 80054aa:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhC;
 80054ae:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 80054b2:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80054b4:	87c3      	strh	r3, [r0, #62]	; 0x3e
 80054b6:	e7b2      	b.n	800541e <PWMC_SetPhaseVoltage+0x7a>
    if ( wZ < 0 )
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	db5d      	blt.n	8005578 <PWMC_SetPhaseVoltage+0x1d4>
      if ( wX <= 0 )
 80054bc:	2c00      	cmp	r4, #0
 80054be:	dd38      	ble.n	8005532 <PWMC_SetPhaseVoltage+0x18e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80054c0:	1b2d      	subs	r5, r5, r4
 80054c2:	bf44      	itt	mi
 80054c4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80054c8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80054cc:	2900      	cmp	r1, #0
 80054ce:	bfb8      	it	lt
 80054d0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80054d4:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80054d8:	bfb8      	it	lt
 80054da:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_3;
 80054de:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 80054e0:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_3;
 80054e4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 80054e8:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 80054ec:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80054ee:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80054f0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80054f4:	e793      	b.n	800541e <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 80054f6:	2900      	cmp	r1, #0
 80054f8:	bfb8      	it	lt
 80054fa:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 80054fe:	f04f 0305 	mov.w	r3, #5
        wTimePhC = wTimePhA - wY / 131072;
 8005502:	bfb8      	it	lt
 8005504:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005508:	1b2d      	subs	r5, r5, r4
        pHandle->Sector = SECTOR_6;
 800550a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800550e:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005510:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005514:	bfb8      	it	lt
 8005516:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800551a:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800551e:	bfb8      	it	lt
 8005520:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005524:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhB;
 8005528:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800552c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800552e:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8005530:	e775      	b.n	800541e <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005532:	1ba5      	subs	r5, r4, r6
 8005534:	bf44      	itt	mi
 8005536:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800553a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800553e:	2b00      	cmp	r3, #0
 8005540:	bfb8      	it	lt
 8005542:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8005546:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 800554a:	bfb8      	it	lt
 800554c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8005550:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8005554:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005556:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800555a:	bfb8      	it	lt
 800555c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005560:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005564:	bfb8      	it	lt
 8005566:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800556a:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhC;
 800556e:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005570:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005572:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005576:	e752      	b.n	800541e <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005578:	1bad      	subs	r5, r5, r6
 800557a:	bf44      	itt	mi
 800557c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005580:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005584:	2b00      	cmp	r3, #0
 8005586:	bfbc      	itt	lt
 8005588:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800558c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005590:	2900      	cmp	r1, #0
 8005592:	bfb8      	it	lt
 8005594:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005598:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800559c:	bfb8      	it	lt
 800559e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 80055a2:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 80055a4:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80055a8:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_5;
 80055ac:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 80055b0:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80055b2:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 80055b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80055b8:	e731      	b.n	800541e <PWMC_SetPhaseVoltage+0x7a>
 80055ba:	bf00      	nop

080055bc <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80055bc:	6883      	ldr	r3, [r0, #8]
 80055be:	4718      	bx	r3

080055c0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
 80055c4:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80055c6:	b1a1      	cbz	r1, 80055f2 <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80055c8:	2901      	cmp	r1, #1
 80055ca:	d002      	beq.n	80055d2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80055cc:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80055ce:	b002      	add	sp, #8
 80055d0:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80055d2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80055d6:	b1d3      	cbz	r3, 800560e <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29b      	uxth	r3, r3
 80055dc:	9101      	str	r1, [sp, #4]
 80055de:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f2      	bne.n	80055cc <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80055e6:	6903      	ldr	r3, [r0, #16]
 80055e8:	4798      	blx	r3
        retVal = true;
 80055ea:	9901      	ldr	r1, [sp, #4]
 80055ec:	4608      	mov	r0, r1
}
 80055ee:	b002      	add	sp, #8
 80055f0:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 80055f2:	f7ff ffe3 	bl	80055bc <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80055f6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80055fa:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e4      	bne.n	80055cc <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005602:	4620      	mov	r0, r4
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	4798      	blx	r3
      retVal = true;
 8005608:	2001      	movs	r0, #1
}
 800560a:	b002      	add	sp, #8
 800560c:	bd10      	pop	{r4, pc}
      retVal = true;
 800560e:	4608      	mov	r0, r1
}
 8005610:	b002      	add	sp, #8
 8005612:	bd10      	pop	{r4, pc}

08005614 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005614:	69c3      	ldr	r3, [r0, #28]
 8005616:	4718      	bx	r3

08005618 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005618:	8b42      	ldrh	r2, [r0, #26]
 800561a:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800561c:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800561e:	440a      	add	r2, r1
 8005620:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005622:	b18b      	cbz	r3, 8005648 <RVBS_Clear+0x30>
{
 8005624:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 8005626:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005628:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 800562a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800562e:	3301      	adds	r3, #1
 8005630:	8b01      	ldrh	r1, [r0, #24]
 8005632:	b29b      	uxth	r3, r3
 8005634:	4299      	cmp	r1, r3
 8005636:	d8f8      	bhi.n	800562a <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8005638:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 800563a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800563c:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 800563e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8005642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005646:	4770      	bx	lr
  pHandle->index = 0;
 8005648:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 800564a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800564c:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 800564e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8005652:	4770      	bx	lr

08005654 <RVBS_Init>:
{
 8005654:	b510      	push	{r4, lr}
 8005656:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005658:	300c      	adds	r0, #12
 800565a:	f7fc fa6d 	bl	8001b38 <RCM_RegisterRegConv>
 800565e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff ffd8 	bl	8005618 <RVBS_Clear>
}
 8005668:	bd10      	pop	{r4, pc}
 800566a:	bf00      	nop

0800566c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800566c:	88c3      	ldrh	r3, [r0, #6]
 800566e:	8b42      	ldrh	r2, [r0, #26]
 8005670:	429a      	cmp	r2, r3
 8005672:	d305      	bcc.n	8005680 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005674:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8005676:	4298      	cmp	r0, r3
 8005678:	bf8c      	ite	hi
 800567a:	2004      	movhi	r0, #4
 800567c:	2000      	movls	r0, #0
 800567e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005680:	2002      	movs	r0, #2
  }
  return fault;
}
 8005682:	4770      	bx	lr

08005684 <RVBS_CalcAvVbus>:
{
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005688:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800568c:	f7fc fb10 	bl	8001cb0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005694:	4298      	cmp	r0, r3
 8005696:	d01b      	beq.n	80056d0 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005698:	6a26      	ldr	r6, [r4, #32]
 800569a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800569e:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80056a2:	8b25      	ldrh	r5, [r4, #24]
 80056a4:	b1cd      	cbz	r5, 80056da <RVBS_CalcAvVbus+0x56>
 80056a6:	2300      	movs	r3, #0
    wtemp = 0;
 80056a8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80056aa:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80056ae:	3301      	adds	r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 80056b4:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80056b6:	d3f8      	bcc.n	80056aa <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80056b8:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80056bc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80056c0:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80056c2:	3d01      	subs	r5, #1
 80056c4:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 80056c6:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80056c8:	da09      	bge.n	80056de <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 80056ca:	3301      	adds	r3, #1
 80056cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7ff ffcb 	bl	800566c <RVBS_CheckFaultState>
 80056d6:	8120      	strh	r0, [r4, #8]
}
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80056da:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 80056dc:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7ff ffc1 	bl	800566c <RVBS_CheckFaultState>
 80056ea:	8120      	strh	r0, [r4, #8]
}
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
 80056ee:	bf00      	nop

080056f0 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 80056f0:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80056f2:	2201      	movs	r2, #1
 80056f4:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 80056f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80056fa:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80056fe:	4770      	bx	lr

08005700 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8005700:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005708:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop

08005710 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8005710:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005718:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 800571c:	b430      	push	{r4, r5}
 800571e:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 8005720:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 8005722:	bfb8      	it	lt
 8005724:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005726:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005728:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800572a:	7803      	ldrb	r3, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800572c:	8a81      	ldrh	r1, [r0, #20]
    hAux = -( *pMecSpeedUnit );
 800572e:	bfb8      	it	lt
 8005730:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005732:	4295      	cmp	r5, r2
 8005734:	d819      	bhi.n	800576a <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005736:	4291      	cmp	r1, r2
 8005738:	bf2c      	ite	cs
 800573a:	2200      	movcs	r2, #0
 800573c:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800573e:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 8005742:	b2a9      	uxth	r1, r5
 8005744:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8005746:	bfb8      	it	lt
 8005748:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800574a:	8b05      	ldrh	r5, [r0, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 800574c:	bfb8      	it	lt
 800574e:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005750:	428d      	cmp	r5, r1
 8005752:	d300      	bcc.n	8005756 <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005754:	b15a      	cbz	r2, 800576e <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005756:	429c      	cmp	r4, r3
 8005758:	d901      	bls.n	800575e <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 800575a:	3301      	adds	r3, #1
 800575c:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800575e:	7003      	strb	r3, [r0, #0]

  return ( SpeedSensorReliability );
}
 8005760:	1b18      	subs	r0, r3, r4
 8005762:	bf18      	it	ne
 8005764:	2001      	movne	r0, #1
 8005766:	bc30      	pop	{r4, r5}
 8005768:	4770      	bx	lr
    SpeedError = true;
 800576a:	2201      	movs	r2, #1
 800576c:	e7e7      	b.n	800573e <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 800576e:	429c      	cmp	r4, r3
 8005770:	bf88      	it	hi
 8005772:	2300      	movhi	r3, #0
 8005774:	e7f3      	b.n	800575e <SPD_IsMecSpeedReliable+0x46>
 8005776:	bf00      	nop

08005778 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8005778:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800577c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8005780:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005784:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8005788:	b200      	sxth	r0, r0
 800578a:	4770      	bx	lr

0800578c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800578c:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800578e:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005792:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 8005796:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 8005798:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800579a:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800579c:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 800579e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 80057a2:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80057a4:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80057a8:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 80057aa:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80057ac:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80057ae:	6183      	str	r3, [r0, #24]
}
 80057b0:	bc30      	pop	{r4, r5}
 80057b2:	4770      	bx	lr

080057b4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80057b4:	6940      	ldr	r0, [r0, #20]
 80057b6:	4770      	bx	lr

080057b8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80057b8:	7803      	ldrb	r3, [r0, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d000      	beq.n	80057c0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80057be:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80057c0:	6900      	ldr	r0, [r0, #16]
 80057c2:	2100      	movs	r1, #0
 80057c4:	f7ff bd12 	b.w	80051ec <PID_SetIntegralTerm>

080057c8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80057c8:	6840      	ldr	r0, [r0, #4]
 80057ca:	2800      	cmp	r0, #0
 80057cc:	bfbc      	itt	lt
 80057ce:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80057d2:	30ff      	addlt	r0, #255	; 0xff
}
 80057d4:	1400      	asrs	r0, r0, #16
 80057d6:	4770      	bx	lr

080057d8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80057d8:	6880      	ldr	r0, [r0, #8]
 80057da:	2800      	cmp	r0, #0
 80057dc:	bfbc      	itt	lt
 80057de:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80057e2:	30ff      	addlt	r0, #255	; 0xff
}
 80057e4:	1400      	asrs	r0, r0, #16
 80057e6:	4770      	bx	lr

080057e8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80057e8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80057ea:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80057ec:	60c3      	str	r3, [r0, #12]
}
 80057ee:	4770      	bx	lr

080057f0 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80057f0:	7803      	ldrb	r3, [r0, #0]
{
 80057f2:	b570      	push	{r4, r5, r6, lr}
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80057fa:	b313      	cbz	r3, 8005842 <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80057fc:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80057fe:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005800:	2800      	cmp	r0, #0
 8005802:	bfbc      	itt	lt
 8005804:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005808:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800580a:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800580c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005810:	db1c      	blt.n	800584c <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005812:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8005816:	428b      	cmp	r3, r1
 8005818:	dc18      	bgt.n	800584c <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800581a:	8c23      	ldrh	r3, [r4, #32]
 800581c:	428b      	cmp	r3, r1
 800581e:	dd03      	ble.n	8005828 <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005820:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005824:	428b      	cmp	r3, r1
 8005826:	db11      	blt.n	800584c <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8005828:	b9c6      	cbnz	r6, 800585c <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800582a:	7823      	ldrb	r3, [r4, #0]
 800582c:	042d      	lsls	r5, r5, #16
 800582e:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 8005830:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005834:	bf0c      	ite	eq
 8005836:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005838:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800583a:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800583c:	61a3      	str	r3, [r4, #24]
 800583e:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005840:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005842:	f7ff ffc9 	bl	80057d8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005846:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005848:	42ab      	cmp	r3, r5
 800584a:	da01      	bge.n	8005850 <STC_ExecRamp+0x60>
      AllowedRange = false;
 800584c:	2000      	movs	r0, #0
}
 800584e:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005850:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8005854:	42ab      	cmp	r3, r5
 8005856:	dcf9      	bgt.n	800584c <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 8005858:	2e00      	cmp	r6, #0
 800585a:	d0e6      	beq.n	800582a <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800585c:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800585e:	4a08      	ldr	r2, [pc, #32]	; (8005880 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 8005860:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005862:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800586c:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800586e:	1a2d      	subs	r5, r5, r0
 8005870:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8005872:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005874:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8005878:	2001      	movs	r0, #1
 800587a:	61a5      	str	r5, [r4, #24]
}
 800587c:	bd70      	pop	{r4, r5, r6, pc}
 800587e:	bf00      	nop
 8005880:	10624dd3 	.word	0x10624dd3

08005884 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005884:	2300      	movs	r3, #0
 8005886:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005888:	6183      	str	r3, [r0, #24]
}
 800588a:	4770      	bx	lr

0800588c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800588c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800588e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005892:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005894:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8005896:	2a00      	cmp	r2, #0
 8005898:	bf18      	it	ne
 800589a:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 800589c:	2b01      	cmp	r3, #1
 800589e:	d910      	bls.n	80058c2 <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80058a0:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80058a2:	3b01      	subs	r3, #1
 80058a4:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 80058a6:	440d      	add	r5, r1
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	4629      	mov	r1, r5
 80058ac:	bfbc      	itt	lt
 80058ae:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 80058b2:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80058b4:	2a01      	cmp	r2, #1
 80058b6:	ea4f 4621 	mov.w	r6, r1, asr #16
 80058ba:	d009      	beq.n	80058d0 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80058bc:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80058be:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80058c2:	d1f1      	bne.n	80058a8 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80058c4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80058c8:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80058ca:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 80058cc:	60c3      	str	r3, [r0, #12]
 80058ce:	e7eb      	b.n	80058a8 <STC_CalcTorqueReference+0x1c>
 80058d0:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80058d2:	6940      	ldr	r0, [r0, #20]
 80058d4:	f7ff ff18 	bl	8005708 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80058d8:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80058da:	b201      	sxth	r1, r0
 80058dc:	6920      	ldr	r0, [r4, #16]
 80058de:	f7ff fc91 	bl	8005204 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80058e2:	0403      	lsls	r3, r0, #16
 80058e4:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 80058e8:	bd70      	pop	{r4, r5, r6, pc}
 80058ea:	bf00      	nop

080058ec <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 80058ec:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop

080058f4 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 80058f4:	8bc0      	ldrh	r0, [r0, #30]
 80058f6:	4770      	bx	lr

080058f8 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 80058f8:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8005900:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005904:	2000      	movs	r0, #0
 8005906:	b29a      	uxth	r2, r3
 8005908:	f362 000f 	bfi	r0, r2, #0, #16
 800590c:	0c1b      	lsrs	r3, r3, #16
{
 800590e:	b082      	sub	sp, #8
  return IqdRefDefault;
 8005910:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005914:	b002      	add	sp, #8
 8005916:	4770      	bx	lr

08005918 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005918:	b510      	push	{r4, lr}
 800591a:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800591c:	6940      	ldr	r0, [r0, #20]
 800591e:	f7ff fef3 	bl	8005708 <SPD_GetAvrgMecSpeedUnit>
 8005922:	0400      	lsls	r0, r0, #16
 8005924:	6060      	str	r0, [r4, #4]
}
 8005926:	bd10      	pop	{r4, pc}

08005928 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005928:	2300      	movs	r3, #0
 800592a:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800592c:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop

08005934 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005934:	8843      	ldrh	r3, [r0, #2]
{
 8005936:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 8005938:	8885      	ldrh	r5, [r0, #4]
{
 800593a:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 800593c:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800593e:	430b      	orrs	r3, r1
 8005940:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8005944:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8005946:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 8005948:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800594a:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 800594c:	d006      	beq.n	800595c <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800594e:	b90a      	cbnz	r2, 8005954 <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8005950:	bc30      	pop	{r4, r5}
 8005952:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8005954:	200a      	movs	r0, #10
 8005956:	7020      	strb	r0, [r4, #0]
}
 8005958:	bc30      	pop	{r4, r5}
 800595a:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800595c:	2a00      	cmp	r2, #0
 800595e:	d1f7      	bne.n	8005950 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8005960:	200b      	movs	r0, #11
 8005962:	7020      	strb	r0, [r4, #0]
}
 8005964:	bc30      	pop	{r4, r5}
 8005966:	4770      	bx	lr

08005968 <STM_NextState>:
{
 8005968:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 800596a:	7803      	ldrb	r3, [r0, #0]
 800596c:	2b14      	cmp	r3, #20
 800596e:	d819      	bhi.n	80059a4 <STM_NextState+0x3c>
 8005970:	e8df f003 	tbb	[pc, r3]
 8005974:	240d1257 	.word	0x240d1257
 8005978:	3c0d352e 	.word	0x3c0d352e
 800597c:	1818423f 	.word	0x1818423f
 8005980:	4a650b47 	.word	0x4a650b47
 8005984:	53505e4d 	.word	0x53505e4d
 8005988:	39          	.byte	0x39
 8005989:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800598a:	290e      	cmp	r1, #14
 800598c:	d001      	beq.n	8005992 <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 800598e:	2907      	cmp	r1, #7
 8005990:	d108      	bne.n	80059a4 <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 8005992:	7001      	strb	r1, [r0, #0]
 8005994:	2001      	movs	r0, #1
}
 8005996:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005998:	2907      	cmp	r1, #7
 800599a:	d0fa      	beq.n	8005992 <STM_NextState+0x2a>
 800599c:	f1a1 030d 	sub.w	r3, r1, #13
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d9f6      	bls.n	8005992 <STM_NextState+0x2a>
 80059a4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d00f      	beq.n	80059cc <STM_NextState+0x64>
 80059ac:	2907      	cmp	r1, #7
 80059ae:	d00d      	beq.n	80059cc <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	f7ff ffbe 	bl	8005934 <STM_FaultProcessing>
 80059b8:	2000      	movs	r0, #0
}
 80059ba:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80059bc:	2911      	cmp	r1, #17
 80059be:	d8f7      	bhi.n	80059b0 <STM_NextState+0x48>
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <STM_NextState+0xe0>)
 80059c2:	40cb      	lsrs	r3, r1
 80059c4:	07da      	lsls	r2, r3, #31
 80059c6:	d4e4      	bmi.n	8005992 <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80059c8:	2903      	cmp	r1, #3
 80059ca:	d1f1      	bne.n	80059b0 <STM_NextState+0x48>
 80059cc:	2000      	movs	r0, #0
}
 80059ce:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80059d0:	2913      	cmp	r1, #19
 80059d2:	d0de      	beq.n	8005992 <STM_NextState+0x2a>
 80059d4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d1e5      	bne.n	80059a8 <STM_NextState+0x40>
 80059dc:	e7d9      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80059de:	1f8b      	subs	r3, r1, #6
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d8df      	bhi.n	80059a4 <STM_NextState+0x3c>
 80059e4:	e7d5      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80059e6:	2912      	cmp	r1, #18
 80059e8:	d1d1      	bne.n	800598e <STM_NextState+0x26>
 80059ea:	e7d2      	b.n	8005992 <STM_NextState+0x2a>
      if ( bState == STOP )
 80059ec:	2908      	cmp	r1, #8
 80059ee:	d1d9      	bne.n	80059a4 <STM_NextState+0x3c>
 80059f0:	e7cf      	b.n	8005992 <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 80059f2:	2909      	cmp	r1, #9
 80059f4:	d1d6      	bne.n	80059a4 <STM_NextState+0x3c>
 80059f6:	e7cc      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d0ca      	beq.n	8005992 <STM_NextState+0x2a>
 80059fc:	290c      	cmp	r1, #12
 80059fe:	d1d1      	bne.n	80059a4 <STM_NextState+0x3c>
 8005a00:	e7c7      	b.n	8005992 <STM_NextState+0x2a>
      if ( bState == IDLE )
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d1ce      	bne.n	80059a4 <STM_NextState+0x3c>
 8005a06:	e7c4      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005a08:	2902      	cmp	r1, #2
 8005a0a:	d1c0      	bne.n	800598e <STM_NextState+0x26>
 8005a0c:	e7c1      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005a0e:	2911      	cmp	r1, #17
 8005a10:	d1bd      	bne.n	800598e <STM_NextState+0x26>
 8005a12:	e7be      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005a14:	2904      	cmp	r1, #4
 8005a16:	d1ba      	bne.n	800598e <STM_NextState+0x26>
 8005a18:	e7bb      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005a1a:	1f0b      	subs	r3, r1, #4
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d8b6      	bhi.n	800598e <STM_NextState+0x26>
 8005a20:	e7b7      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005a22:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d0b3      	beq.n	8005992 <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 8005a2a:	290c      	cmp	r1, #12
 8005a2c:	d1be      	bne.n	80059ac <STM_NextState+0x44>
 8005a2e:	e7b0      	b.n	8005992 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005a30:	2914      	cmp	r1, #20
 8005a32:	d8b7      	bhi.n	80059a4 <STM_NextState+0x3c>
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <STM_NextState+0xe4>)
 8005a36:	40cb      	lsrs	r3, r1
 8005a38:	07db      	lsls	r3, r3, #31
 8005a3a:	d4aa      	bmi.n	8005992 <STM_NextState+0x2a>
 8005a3c:	e7b2      	b.n	80059a4 <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8005a3e:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8005a42:	2b07      	cmp	r3, #7
 8005a44:	d1ae      	bne.n	80059a4 <STM_NextState+0x3c>
 8005a46:	e7a4      	b.n	8005992 <STM_NextState+0x2a>
 8005a48:	00030092 	.word	0x00030092
 8005a4c:	00140080 	.word	0x00140080

08005a50 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8005a50:	7800      	ldrb	r0, [r0, #0]
 8005a52:	4770      	bx	lr

08005a54 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005a54:	7803      	ldrb	r3, [r0, #0]
 8005a56:	2b0b      	cmp	r3, #11
 8005a58:	d001      	beq.n	8005a5e <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8005a5a:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8005a5c:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8005a5e:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005a60:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8005a62:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005a64:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8005a66:	2001      	movs	r0, #1
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop

08005a6c <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005a6c:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005a6e:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8005a70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005a78:	f7fe bcda 	b.w	8004430 <FCP_Init>

08005a7c <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005a7c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8005a80:	b192      	cbz	r2, 8005aa8 <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005a82:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 8005a86:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	b199      	cbz	r1, 8005ab6 <UFCP_TX_IRQ_Handler+0x3a>
 8005a8e:	2901      	cmp	r1, #1
 8005a90:	d00b      	beq.n	8005aaa <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005a92:	7d40      	ldrb	r0, [r0, #21]
 8005a94:	3001      	adds	r0, #1
 8005a96:	4281      	cmp	r1, r0
 8005a98:	dc0f      	bgt.n	8005aba <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005a9a:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8005a9c:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005a9e:	7d00      	ldrb	r0, [r0, #20]
 8005aa0:	6050      	str	r0, [r2, #4]
 8005aa2:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005aa6:	4770      	bx	lr
 8005aa8:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8005aaa:	7d40      	ldrb	r0, [r0, #21]
 8005aac:	6050      	str	r0, [r2, #4]
      pBaseHandle->TxFrameLevel++;
 8005aae:	3101      	adds	r1, #1
 8005ab0:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 8005ab4:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8005ab6:	7d00      	ldrb	r0, [r0, #20]
        break;
 8005ab8:	e7f8      	b.n	8005aac <UFCP_TX_IRQ_Handler+0x30>
{
 8005aba:	b430      	push	{r4, r5}
 8005abc:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 8005ac0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005ac2:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005ac4:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005ac8:	2500      	movs	r5, #0
 8005aca:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ace:	60d1      	str	r1, [r2, #12]
 8005ad0:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005ad4:	4623      	mov	r3, r4
}
 8005ad6:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005ad8:	4718      	bx	r3
 8005ada:	bf00      	nop

08005adc <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005adc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8005ae0:	b10b      	cbz	r3, 8005ae6 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005ae2:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005ae4:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005ae6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 8005aea:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005aee:	68d3      	ldr	r3, [r2, #12]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005af0:	2101      	movs	r1, #1
 8005af2:	f043 0320 	orr.w	r3, r3, #32
 8005af6:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005afa:	2002      	movs	r0, #2
 8005afc:	60d3      	str	r3, [r2, #12]
 8005afe:	4770      	bx	lr

08005b00 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b04:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005b06:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8005b0a:	b110      	cbz	r0, 8005b12 <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005b0c:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 8005b12:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8005b14:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8005b16:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005b18:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005b1a:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d05d      	beq.n	8005bde <UFCP_Send+0xde>
 8005b22:	1d10      	adds	r0, r2, #4
 8005b24:	f104 051a 	add.w	r5, r4, #26
 8005b28:	4295      	cmp	r5, r2
 8005b2a:	bf88      	it	hi
 8005b2c:	42b8      	cmphi	r0, r7
 8005b2e:	d86b      	bhi.n	8005c08 <UFCP_Send+0x108>
 8005b30:	2b0b      	cmp	r3, #11
 8005b32:	d969      	bls.n	8005c08 <UFCP_Send+0x108>
 8005b34:	4250      	negs	r0, r2
 8005b36:	f000 0003 	and.w	r0, r0, #3
 8005b3a:	1cc5      	adds	r5, r0, #3
 8005b3c:	42a9      	cmp	r1, r5
 8005b3e:	d339      	bcc.n	8005bb4 <UFCP_Send+0xb4>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d06c      	beq.n	8005c1e <UFCP_Send+0x11e>
 8005b44:	7811      	ldrb	r1, [r2, #0]
 8005b46:	75a1      	strb	r1, [r4, #22]
 8005b48:	2801      	cmp	r0, #1
 8005b4a:	f1a3 0102 	sub.w	r1, r3, #2
 8005b4e:	b2c9      	uxtb	r1, r1
 8005b50:	f102 0c01 	add.w	ip, r2, #1
 8005b54:	f104 0717 	add.w	r7, r4, #23
 8005b58:	d012      	beq.n	8005b80 <UFCP_Send+0x80>
 8005b5a:	7851      	ldrb	r1, [r2, #1]
 8005b5c:	75e1      	strb	r1, [r4, #23]
 8005b5e:	2803      	cmp	r0, #3
 8005b60:	f1a3 0103 	sub.w	r1, r3, #3
 8005b64:	b2c9      	uxtb	r1, r1
 8005b66:	f102 0c02 	add.w	ip, r2, #2
 8005b6a:	f104 0718 	add.w	r7, r4, #24
 8005b6e:	d107      	bne.n	8005b80 <UFCP_Send+0x80>
 8005b70:	7891      	ldrb	r1, [r2, #2]
 8005b72:	7621      	strb	r1, [r4, #24]
 8005b74:	1f19      	subs	r1, r3, #4
 8005b76:	b2c9      	uxtb	r1, r1
 8005b78:	f102 0c03 	add.w	ip, r2, #3
 8005b7c:	f104 0719 	add.w	r7, r4, #25
 8005b80:	1a1b      	subs	r3, r3, r0
 8005b82:	b2dd      	uxtb	r5, r3
 8005b84:	f100 0316 	add.w	r3, r0, #22
 8005b88:	4402      	add	r2, r0
 8005b8a:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8005b8e:	18e0      	adds	r0, r4, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	3301      	adds	r3, #1
 8005b94:	b2de      	uxtb	r6, r3
 8005b96:	f852 eb04 	ldr.w	lr, [r2], #4
 8005b9a:	f840 eb04 	str.w	lr, [r0], #4
 8005b9e:	45b0      	cmp	r8, r6
 8005ba0:	d8f7      	bhi.n	8005b92 <UFCP_Send+0x92>
 8005ba2:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 8005ba6:	1ac9      	subs	r1, r1, r3
 8005ba8:	429d      	cmp	r5, r3
 8005baa:	b2c9      	uxtb	r1, r1
 8005bac:	eb0c 0203 	add.w	r2, ip, r3
 8005bb0:	441f      	add	r7, r3
 8005bb2:	d014      	beq.n	8005bde <UFCP_Send+0xde>
 8005bb4:	7813      	ldrb	r3, [r2, #0]
 8005bb6:	703b      	strb	r3, [r7, #0]
 8005bb8:	b189      	cbz	r1, 8005bde <UFCP_Send+0xde>
 8005bba:	7853      	ldrb	r3, [r2, #1]
 8005bbc:	707b      	strb	r3, [r7, #1]
 8005bbe:	2901      	cmp	r1, #1
 8005bc0:	d00d      	beq.n	8005bde <UFCP_Send+0xde>
 8005bc2:	7893      	ldrb	r3, [r2, #2]
 8005bc4:	70bb      	strb	r3, [r7, #2]
 8005bc6:	2902      	cmp	r1, #2
 8005bc8:	d009      	beq.n	8005bde <UFCP_Send+0xde>
 8005bca:	78d3      	ldrb	r3, [r2, #3]
 8005bcc:	70fb      	strb	r3, [r7, #3]
 8005bce:	2903      	cmp	r1, #3
 8005bd0:	d005      	beq.n	8005bde <UFCP_Send+0xde>
 8005bd2:	7913      	ldrb	r3, [r2, #4]
 8005bd4:	713b      	strb	r3, [r7, #4]
 8005bd6:	2904      	cmp	r1, #4
 8005bd8:	d001      	beq.n	8005bde <UFCP_Send+0xde>
 8005bda:	7953      	ldrb	r3, [r2, #5]
 8005bdc:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005bde:	f104 0014 	add.w	r0, r4, #20
 8005be2:	f7fe fc3b 	bl	800445c <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8005be6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005bea:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005bf4:	68d3      	ldr	r3, [r2, #12]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8005c00:	2002      	movs	r0, #2
 8005c02:	60d3      	str	r3, [r2, #12]
}
 8005c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c08:	3101      	adds	r1, #1
 8005c0a:	4411      	add	r1, r2
 8005c0c:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8005c10:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005c14:	f803 0f01 	strb.w	r0, [r3, #1]!
 8005c18:	428a      	cmp	r2, r1
 8005c1a:	d1f9      	bne.n	8005c10 <UFCP_Send+0x110>
 8005c1c:	e7df      	b.n	8005bde <UFCP_Send+0xde>
 8005c1e:	4694      	mov	ip, r2
 8005c20:	e7ae      	b.n	8005b80 <UFCP_Send+0x80>
 8005c22:	bf00      	nop

08005c24 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005c24:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8005c28:	b1b3      	cbz	r3, 8005c58 <UFCP_RX_IRQ_Handler+0x34>
{
 8005c2a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8005c2c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 8005c30:	4604      	mov	r4, r0
{
 8005c32:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 8005c34:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 8005c36:	b1e3      	cbz	r3, 8005c72 <UFCP_RX_IRQ_Handler+0x4e>
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d00f      	beq.n	8005c5c <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8005c3c:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 8005c40:	3101      	adds	r1, #1
 8005c42:	428b      	cmp	r3, r1
 8005c44:	dc1f      	bgt.n	8005c86 <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005c46:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 8005c48:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005c4a:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005c4e:	4823      	ldr	r0, [pc, #140]	; (8005cdc <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 8005c50:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8005c54:	b003      	add	sp, #12
 8005c56:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005c58:	4820      	ldr	r0, [pc, #128]	; (8005cdc <UFCP_RX_IRQ_Handler+0xb8>)
}
 8005c5a:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8005c5c:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8005c5e:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005c62:	481e      	ldr	r0, [pc, #120]	; (8005cdc <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 8005c64:	bf54      	ite	pl
 8005c66:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8005c68:	2300      	movmi	r3, #0
 8005c6a:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8005c6e:	b003      	add	sp, #12
 8005c70:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005c72:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8005c74:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8005c78:	4819      	ldr	r0, [pc, #100]	; (8005ce0 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005c7a:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8005c82:	b003      	add	sp, #12
 8005c84:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8005c86:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005c8a:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005c8e:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 8005c90:	2200      	movs	r2, #0
 8005c92:	f023 0320 	bic.w	r3, r3, #32
 8005c96:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005c98:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8005c9c:	60cb      	str	r3, [r1, #12]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005c9e:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005ca2:	f7fe fbdb 	bl	800445c <FCP_CalcCRC>
 8005ca6:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8005caa:	4283      	cmp	r3, r0
 8005cac:	d10a      	bne.n	8005cc4 <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	68a5      	ldr	r5, [r4, #8]
 8005cb2:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8005cb6:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8005cba:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8005cbe:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005cc0:	4808      	ldr	r0, [pc, #32]	; (8005ce4 <UFCP_RX_IRQ_Handler+0xc0>)
 8005cc2:	e7c7      	b.n	8005c54 <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 8005cc4:	aa02      	add	r2, sp, #8
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005ccc:	4620      	mov	r0, r4
 8005cce:	2301      	movs	r3, #1
 8005cd0:	21ff      	movs	r1, #255	; 0xff
 8005cd2:	f7ff ff15 	bl	8005b00 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005cd6:	4803      	ldr	r0, [pc, #12]	; (8005ce4 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8005cd8:	e7bc      	b.n	8005c54 <UFCP_RX_IRQ_Handler+0x30>
 8005cda:	bf00      	nop
 8005cdc:	0800603c 	.word	0x0800603c
 8005ce0:	0800603e 	.word	0x0800603e
 8005ce4:	08006040 	.word	0x08006040

08005ce8 <UFCP_OVR_IRQ_Handler>:
{
 8005ce8:	b500      	push	{lr}
 8005cea:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8005cec:	aa02      	add	r2, sp, #8
 8005cee:	2308      	movs	r3, #8
 8005cf0:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005cf4:	21ff      	movs	r1, #255	; 0xff
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f7ff ff02 	bl	8005b00 <UFCP_Send>
}
 8005cfc:	b003      	add	sp, #12
 8005cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d02:	bf00      	nop

08005d04 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8005d0a:	4770      	bx	lr

08005d0c <RUC_SetPhaseDurationms>:
 8005d0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d14:	818a      	strh	r2, [r1, #12]
 8005d16:	4770      	bx	lr

08005d18 <RUC_SetPhaseFinalMecSpeedUnit>:
 8005d18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d20:	81ca      	strh	r2, [r1, #14]
 8005d22:	4770      	bx	lr

08005d24 <RUC_SetPhaseFinalTorque>:
 8005d24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d2c:	820a      	strh	r2, [r1, #16]
 8005d2e:	4770      	bx	lr

08005d30 <RUC_GetPhaseDurationms>:
 8005d30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d38:	8988      	ldrh	r0, [r1, #12]
 8005d3a:	4770      	bx	lr

08005d3c <RUC_GetPhaseFinalMecSpeedUnit>:
 8005d3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d44:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop

08005d4c <RUC_GetPhaseFinalTorque>:
 8005d4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d54:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop

08005d5c <RUC_GetNumberOfPhases>:
 8005d5c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4e0d      	ldr	r6, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1ba4      	subs	r4, r4, r6
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2500      	movs	r5, #0
 8005d70:	42a5      	cmp	r5, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4e0b      	ldr	r6, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f000 f820 	bl	8005dbc <_init>
 8005d7c:	1ba4      	subs	r4, r4, r6
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2500      	movs	r5, #0
 8005d82:	42a5      	cmp	r5, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d8c:	4798      	blx	r3
 8005d8e:	3501      	adds	r5, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d96:	4798      	blx	r3
 8005d98:	3501      	adds	r5, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	0800604c 	.word	0x0800604c
 8005da0:	0800604c 	.word	0x0800604c
 8005da4:	0800604c 	.word	0x0800604c
 8005da8:	08006050 	.word	0x08006050

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
