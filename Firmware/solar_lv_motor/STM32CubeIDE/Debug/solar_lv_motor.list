
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a8  080077a8  0002076c  2**0
                  CONTENTS
  4 .ARM          00000008  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b0  080077b0  0002076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000076c  20000000  080077b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000076c  08007f24  0002076c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08007f24  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002276b  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00045a6a  00000000  00000000  00042f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006a2d  00000000  00000000  00088971  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015e8  00000000  00000000  0008f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f1ce6  00000000  00000000  00090988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002a90  00000000  00000000  00182670  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00015608  00000000  00000000  00185100  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002bf00  00000000  00000000  0019a708  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fa  00000000  00000000  001c6608  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004268  00000000  00000000  001c6704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000076c 	.word	0x2000076c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074e4 	.word	0x080074e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000770 	.word	0x20000770
 800020c:	080074e4 	.word	0x080074e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr  r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ea:	f002 fe61 	bl	80032b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f006 fb47 	bl	8006c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f000 f893 	bl	800071c <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005fc:	080077b8 	.word	0x080077b8
  ldr  r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000604:	2000076c 	.word	0x2000076c
  ldr  r2, =_sbss
 8000608:	2000076c 	.word	0x2000076c
  ldr  r3, = _ebss
 800060c:	20000b14 	.word	0x20000b14

08000610 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <BusFault_Handler>
	...

08000614 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000614:	4a02      	ldr	r2, [pc, #8]	; (8000620 <DAC_Init+0xc>)
 8000616:	6813      	ldr	r3, [r2, #0]
 8000618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061c:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel2 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);
}
 800061e:	4770      	bx	lr
 8000620:	40007400 	.word	0x40007400

08000624 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000624:	b510      	push	{r4, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH1];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000626:	2200      	movs	r2, #0
 8000628:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 800062c:	f002 fb14 	bl	8002c58 <UI_GetReg>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000630:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8000634:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8000638:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800063c:	fab3 f383 	clz	r3, r3
 8000640:	40da      	lsrs	r2, r3
 8000642:	4c09      	ldr	r4, [pc, #36]	; (8000668 <DAC_Exec+0x44>)
  SET_BIT(DACx->SWTRIGR,
 8000644:	4909      	ldr	r1, [pc, #36]	; (800066c <DAC_Exec+0x48>)
  
  MODIFY_REG(*preg,
 8000646:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800064a:	b200      	sxth	r0, r0
 800064c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000654:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8000658:	4318      	orrs	r0, r3
 800065a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800065e:	684b      	ldr	r3, [r1, #4]
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	604b      	str	r3, [r1, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 8000666:	bd10      	pop	{r4, pc}
 8000668:	40007408 	.word	0x40007408
 800066c:	40007400 	.word	0x40007400

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2300      	movs	r3, #0
{
 8000674:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800067a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000682:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4923      	ldr	r1, [pc, #140]	; (8000714 <SystemClock_Config+0xa4>)
 8000688:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000694:	6408      	str	r0, [r1, #64]	; 0x40
 8000696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000698:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800069c:	9100      	str	r1, [sp, #0]
 800069e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	6813      	ldr	r3, [r2, #0]
 80006a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	6813      	ldr	r3, [r2, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b6:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006be:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c4:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	9d01      	ldr	r5, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f003 fb96 	bl	8003e08 <HAL_RCC_OscConfig>
 80006dc:	b108      	cbz	r0, 80006e2 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 80006de:	b672      	cpsid	i
 80006e0:	e7fe      	b.n	80006e0 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e2:	f003 fa37 	bl	8003b54 <HAL_PWREx_EnableOverDrive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b108      	cbz	r0, 80006ee <SystemClock_Config+0x7e>
 80006ea:	b672      	cpsid	i
 80006ec:	e7fe      	b.n	80006ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f8:	a802      	add	r0, sp, #8
 80006fa:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f003 fa63 	bl	8003bd0 <HAL_RCC_ClockConfig>
 800070a:	b108      	cbz	r0, 8000710 <SystemClock_Config+0xa0>
 800070c:	b672      	cpsid	i
 800070e:	e7fe      	b.n	800070e <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 8000710:	b014      	add	sp, #80	; 0x50
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <main>:
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	b0a1      	sub	sp, #132	; 0x84
	PotentiometerConv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8000722:	2600      	movs	r6, #0
	PotentiometerConv.regADC = ADC1 ; /* to be modify to match your ADC */
 8000724:	4ba3      	ldr	r3, [pc, #652]	; (80009b4 <main+0x298>)
 8000726:	9309      	str	r3, [sp, #36]	; 0x24
	PotentiometerConv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 8000728:	2208      	movs	r2, #8
	PotentiometerHandle = RCM_RegisterRegConv (&PotentiometerConv);
 800072a:	a809      	add	r0, sp, #36	; 0x24
	PotentiometerConv.regADC = ADC1 ; /* to be modify to match your ADC */
 800072c:	9301      	str	r3, [sp, #4]
	PotentiometerConv.channel = ADC_CHANNEL_8;/* to be modify to match your ADC channel */
 800072e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	PotentiometerConv.samplingTime = ADC_SAMPLETIME_3CYCLES; /* to be modify to match your sampling time */
 8000732:	960b      	str	r6, [sp, #44]	; 0x2c
	PotentiometerHandle = RCM_RegisterRegConv (&PotentiometerConv);
 8000734:	f001 fb78 	bl	8001e28 <RCM_RegisterRegConv>
 8000738:	9000      	str	r0, [sp, #0]
  HAL_Init();
 800073a:	f002 fdeb 	bl	8003314 <HAL_Init>
  SystemClock_Config();
 800073e:	f7ff ff97 	bl	8000670 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4a9d      	ldr	r2, [pc, #628]	; (80009b8 <main+0x29c>)
 8000744:	9603      	str	r6, [sp, #12]
 8000746:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000748:	4c9c      	ldr	r4, [pc, #624]	; (80009bc <main+0x2a0>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80009d8 <main+0x2bc>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000752:	6311      	str	r1, [r2, #48]	; 0x30
 8000754:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000756:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800075a:	9103      	str	r1, [sp, #12]
 800075c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	9604      	str	r6, [sp, #16]
 8000760:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000762:	f041 0101 	orr.w	r1, r1, #1
 8000766:	6311      	str	r1, [r2, #48]	; 0x30
 8000768:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800076a:	f001 0101 	and.w	r1, r1, #1
 800076e:	9104      	str	r1, [sp, #16]
 8000770:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	9605      	str	r6, [sp, #20]
 8000774:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000776:	f041 0104 	orr.w	r1, r1, #4
 800077a:	6311      	str	r1, [r2, #48]	; 0x30
 800077c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800077e:	f001 0104 	and.w	r1, r1, #4
 8000782:	9105      	str	r1, [sp, #20]
 8000784:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	9606      	str	r6, [sp, #24]
 8000788:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800078a:	f041 0102 	orr.w	r1, r1, #2
 800078e:	6311      	str	r1, [r2, #48]	; 0x30
 8000790:	6b12      	ldr	r2, [r2, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000792:	2720      	movs	r7, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	f002 0202 	and.w	r2, r2, #2
 8000798:	9206      	str	r2, [sp, #24]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800079a:	4631      	mov	r1, r6
 800079c:	a818      	add	r0, sp, #96	; 0x60
 800079e:	463a      	mov	r2, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	9d06      	ldr	r5, [sp, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007a6:	f006 fa8f 	bl	8006cc8 <memset>
  hadc1.Init.ScanConvMode = ENABLE;
 80007aa:	2501      	movs	r5, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007ac:	f44f 6900 	mov.w	r9, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 80007b0:	f04f 0802 	mov.w	r8, #2
  hadc1.Instance = ADC1;
 80007b4:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b8:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80007ba:	6023      	str	r3, [r4, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	60a6      	str	r6, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007be:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	f884 6020 	strb.w	r6, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c4:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c6:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
 80007ce:	9614      	str	r6, [sp, #80]	; 0x50
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d0:	f8c4 b004 	str.w	fp, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007dc:	f8c4 900c 	str.w	r9, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007e0:	f8c4 801c 	str.w	r8, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e4:	f002 fdc2 	bl	800336c <HAL_ADC_Init>
 80007e8:	b108      	cbz	r0, 80007ee <main+0xd2>
 80007ea:	b672      	cpsid	i
 80007ec:	e7fe      	b.n	80007ec <main+0xd0>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007f4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007f8:	2201      	movs	r2, #1
 80007fa:	2301      	movs	r3, #1
 80007fc:	4606      	mov	r6, r0
 80007fe:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000802:	a918      	add	r1, sp, #96	; 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000804:	2201      	movs	r2, #1
 8000806:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000808:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 1;
 800080a:	951c      	str	r5, [sp, #112]	; 0x70
  sConfigInjected.AutoInjectedConv = DISABLE;
 800080c:	f88d 6075 	strb.w	r6, [sp, #117]	; 0x75
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000810:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000814:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000818:	f002 ff12 	bl	8003640 <HAL_ADCEx_InjectedConfigChannel>
 800081c:	b108      	cbz	r0, 8000822 <main+0x106>
 800081e:	b672      	cpsid	i
 8000820:	e7fe      	b.n	8000820 <main+0x104>
  sConfig.Channel = ADC_CHANNEL_15;
 8000822:	230f      	movs	r3, #15
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000824:	e9cd 5012 	strd	r5, r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	a911      	add	r1, sp, #68	; 0x44
 800082a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800082c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	f002 fe4f 	bl	80034d0 <HAL_ADC_ConfigChannel>
 8000832:	b108      	cbz	r0, 8000838 <main+0x11c>
 8000834:	b672      	cpsid	i
 8000836:	e7fe      	b.n	8000836 <main+0x11a>
  sConfig.Channel = ADC_CHANNEL_14;
 8000838:	230e      	movs	r3, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	4620      	mov	r0, r4
 800083c:	a911      	add	r1, sp, #68	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800083e:	e9cd 8812 	strd	r8, r8, [sp, #72]	; 0x48
  sConfig.Channel = ADC_CHANNEL_14;
 8000842:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	f002 fe44 	bl	80034d0 <HAL_ADC_ConfigChannel>
 8000848:	4606      	mov	r6, r0
 800084a:	b108      	cbz	r0, 8000850 <main+0x134>
 800084c:	b672      	cpsid	i
 800084e:	e7fe      	b.n	800084e <main+0x132>
  hadc2.Instance = ADC2;
 8000850:	4c5b      	ldr	r4, [pc, #364]	; (80009c0 <main+0x2a4>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000852:	4601      	mov	r1, r0
 8000854:	463a      	mov	r2, r7
 8000856:	a818      	add	r0, sp, #96	; 0x60
 8000858:	f006 fa36 	bl	8006cc8 <memset>
  hadc2.Instance = ADC2;
 800085c:	4b59      	ldr	r3, [pc, #356]	; (80009c4 <main+0x2a8>)
 800085e:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000860:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	9611      	str	r6, [sp, #68]	; 0x44
 8000864:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
 8000868:	9614      	str	r6, [sp, #80]	; 0x50
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800086a:	e9c4 b601 	strd	fp, r6, [r4, #4]
  hadc2.Init.ScanConvMode = ENABLE;
 800086e:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000870:	7626      	strb	r6, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000872:	f884 6020 	strb.w	r6, [r4, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000876:	e9c4 a60a 	strd	sl, r6, [r4, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800087a:	f8c4 900c 	str.w	r9, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 800087e:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000880:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000884:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000886:	f002 fd71 	bl	800336c <HAL_ADC_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	b108      	cbz	r0, 8000892 <main+0x176>
 800088e:	b672      	cpsid	i
 8000890:	e7fe      	b.n	8000890 <main+0x174>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000892:	f04f 0900 	mov.w	r9, #0
 8000896:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800089a:	e9cd 9a1e 	strd	r9, sl, [sp, #120]	; 0x78
  sConfigInjected.AutoInjectedConv = DISABLE;
 800089e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80008a2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80008a6:	2204      	movs	r2, #4
 80008a8:	2301      	movs	r3, #1
 80008aa:	f04f 0901 	mov.w	r9, #1
 80008ae:	f04f 0a00 	mov.w	sl, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80008b2:	a918      	add	r1, sp, #96	; 0x60
 80008b4:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 1;
 80008b6:	951c      	str	r5, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80008b8:	e9cd 9a1a 	strd	r9, sl, [sp, #104]	; 0x68
 80008bc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80008c0:	f002 febe 	bl	8003640 <HAL_ADCEx_InjectedConfigChannel>
 80008c4:	b108      	cbz	r0, 80008ca <main+0x1ae>
 80008c6:	b672      	cpsid	i
 80008c8:	e7fe      	b.n	80008c8 <main+0x1ac>
  sConfig.Channel = ADC_CHANNEL_4;
 80008ca:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008cc:	4620      	mov	r0, r4
 80008ce:	a911      	add	r1, sp, #68	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008d0:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  sConfig.Channel = ADC_CHANNEL_4;
 80008d4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d6:	f002 fdfb 	bl	80034d0 <HAL_ADC_ConfigChannel>
 80008da:	b108      	cbz	r0, 80008e0 <main+0x1c4>
 80008dc:	b672      	cpsid	i
 80008de:	e7fe      	b.n	80008de <main+0x1c2>
  hdac.Instance = DAC;
 80008e0:	4c39      	ldr	r4, [pc, #228]	; (80009c8 <main+0x2ac>)
 80008e2:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <main+0x2b0>)
 80008e4:	6023      	str	r3, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 80008e6:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008ea:	4620      	mov	r0, r4
 80008ec:	f003 f802 	bl	80038f4 <HAL_DAC_Init>
 80008f0:	b108      	cbz	r0, 80008f6 <main+0x1da>
 80008f2:	b672      	cpsid	i
 80008f4:	e7fe      	b.n	80008f4 <main+0x1d8>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008f6:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008f8:	233c      	movs	r3, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008fa:	2210      	movs	r2, #16
 80008fc:	a918      	add	r1, sp, #96	; 0x60
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008fe:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000902:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000904:	f003 f80c 	bl	8003920 <HAL_DAC_ConfigChannel>
 8000908:	4604      	mov	r4, r0
 800090a:	b108      	cbz	r0, 8000910 <main+0x1f4>
 800090c:	b672      	cpsid	i
 800090e:	e7fe      	b.n	800090e <main+0x1f2>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000910:	4601      	mov	r1, r0
 8000912:	463a      	mov	r2, r7
 8000914:	a818      	add	r0, sp, #96	; 0x60
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000916:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800091e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000922:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8000926:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000928:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800092c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	9408      	str	r4, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000932:	f006 f9c9 	bl	8006cc8 <memset>
  htim1.Instance = TIM1;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <main+0x2b4>)
 8000938:	4e26      	ldr	r6, [pc, #152]	; (80009d4 <main+0x2b8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800093a:	605c      	str	r4, [r3, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800093c:	f241 1194 	movw	r1, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000940:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000944:	4618      	mov	r0, r3
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000946:	609f      	str	r7, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	e9c3 5405 	strd	r5, r4, [r3, #20]
  htim1.Instance = TIM1;
 800094c:	601e      	str	r6, [r3, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800094e:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000952:	f003 fc2d 	bl	80041b0 <HAL_TIM_Base_Init>
 8000956:	b108      	cbz	r0, 800095c <main+0x240>
 8000958:	b672      	cpsid	i
 800095a:	e7fe      	b.n	800095a <main+0x23e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <main+0x2b4>)
 800095e:	f003 fcad 	bl	80042bc <HAL_TIM_PWM_Init>
 8000962:	b108      	cbz	r0, 8000968 <main+0x24c>
 8000964:	b672      	cpsid	i
 8000966:	e7fe      	b.n	8000966 <main+0x24a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000968:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800096a:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800096c:	a90c      	add	r1, sp, #48	; 0x30
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <main+0x2b4>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000970:	920c      	str	r2, [sp, #48]	; 0x30
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000972:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000974:	f003 fed6 	bl	8004724 <HAL_TIM_SlaveConfigSynchro>
 8000978:	b108      	cbz	r0, 800097e <main+0x262>
 800097a:	b672      	cpsid	i
 800097c:	e7fe      	b.n	800097c <main+0x260>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800097e:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	a907      	add	r1, sp, #28
 8000984:	4812      	ldr	r0, [pc, #72]	; (80009d0 <main+0x2b4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000986:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000988:	f004 f882 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	b108      	cbz	r0, 8000992 <main+0x276>
 800098e:	b672      	cpsid	i
 8000990:	e7fe      	b.n	8000990 <main+0x274>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099e:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	a911      	add	r1, sp, #68	; 0x44
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <main+0x2b4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a8:	f003 fd0c 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	b1b0      	cbz	r0, 80009dc <main+0x2c0>
 80009ae:	b672      	cpsid	i
 80009b0:	e7fe      	b.n	80009b0 <main+0x294>
 80009b2:	bf00      	nop
 80009b4:	40012000 	.word	0x40012000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	200007f8 	.word	0x200007f8
 80009c0:	200007b0 	.word	0x200007b0
 80009c4:	40012100 	.word	0x40012100
 80009c8:	20000840 	.word	0x20000840
 80009cc:	40007400 	.word	0x40007400
 80009d0:	20000854 	.word	0x20000854
 80009d4:	40010000 	.word	0x40010000
 80009d8:	0f000001 	.word	0x0f000001
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009dc:	2204      	movs	r2, #4
 80009de:	a911      	add	r1, sp, #68	; 0x44
 80009e0:	4866      	ldr	r0, [pc, #408]	; (8000b7c <main+0x460>)
 80009e2:	f003 fcef 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	b108      	cbz	r0, 80009ec <main+0x2d0>
 80009e8:	b672      	cpsid	i
 80009ea:	e7fe      	b.n	80009ea <main+0x2ce>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ec:	2208      	movs	r2, #8
 80009ee:	a911      	add	r1, sp, #68	; 0x44
 80009f0:	4862      	ldr	r0, [pc, #392]	; (8000b7c <main+0x460>)
 80009f2:	f003 fce7 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	b108      	cbz	r0, 80009fc <main+0x2e0>
 80009f8:	b672      	cpsid	i
 80009fa:	e7fe      	b.n	80009fa <main+0x2de>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009fc:	2070      	movs	r0, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009fe:	f241 1393 	movw	r3, #4499	; 0x1193
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a02:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a04:	220c      	movs	r2, #12
 8000a06:	a911      	add	r1, sp, #68	; 0x44
 8000a08:	485c      	ldr	r0, [pc, #368]	; (8000b7c <main+0x460>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000a0a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a0c:	f003 fcda 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 8000a10:	b108      	cbz	r0, 8000a16 <main+0x2fa>
 8000a12:	b672      	cpsid	i
 8000a14:	e7fe      	b.n	8000a14 <main+0x2f8>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a1e:	f44f 6400 	mov.w	r4, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a22:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a24:	2248      	movs	r2, #72	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a26:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000a28:	911a      	str	r1, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a2e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a32:	a918      	add	r1, sp, #96	; 0x60
 8000a34:	4851      	ldr	r0, [pc, #324]	; (8000b7c <main+0x460>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a36:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a38:	921b      	str	r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3a:	e9cd 631c 	strd	r6, r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a3e:	f004 f86d 	bl	8004b1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a42:	4604      	mov	r4, r0
 8000a44:	b108      	cbz	r0, 8000a4a <main+0x32e>
 8000a46:	b672      	cpsid	i
 8000a48:	e7fe      	b.n	8000a48 <main+0x32c>
  htim2.Instance = TIM2;
 8000a4a:	4d4d      	ldr	r5, [pc, #308]	; (8000b80 <main+0x464>)
  HAL_TIM_MspPostInit(&htim1);
 8000a4c:	484b      	ldr	r0, [pc, #300]	; (8000b7c <main+0x460>)
 8000a4e:	f001 fc97 	bl	8002380 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5a:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000a60:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000a64:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8000a68:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8000a78:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000a7a:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7c:	f003 fb98 	bl	80041b0 <HAL_TIM_Base_Init>
 8000a80:	b108      	cbz	r0, 8000a86 <main+0x36a>
 8000a82:	b672      	cpsid	i
 8000a84:	e7fe      	b.n	8000a84 <main+0x368>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a86:	a911      	add	r1, sp, #68	; 0x44
 8000a88:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a8c:	f003 fda4 	bl	80045d8 <HAL_TIM_ConfigClockSource>
 8000a90:	b108      	cbz	r0, 8000a96 <main+0x37a>
 8000a92:	b672      	cpsid	i
 8000a94:	e7fe      	b.n	8000a94 <main+0x378>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a96:	2300      	movs	r3, #0
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000a98:	250c      	movs	r5, #12
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a9a:	a918      	add	r1, sp, #96	; 0x60
 8000a9c:	4838      	ldr	r0, [pc, #224]	; (8000b80 <main+0x464>)
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a9e:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000aa2:	e9cd 531a 	strd	r5, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000aa6:	f003 ff99 	bl	80049dc <HAL_TIMEx_HallSensor_Init>
 8000aaa:	b108      	cbz	r0, 8000ab0 <main+0x394>
 8000aac:	b672      	cpsid	i
 8000aae:	e7fe      	b.n	8000aae <main+0x392>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000ab0:	2350      	movs	r3, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab4:	a90c      	add	r1, sp, #48	; 0x30
 8000ab6:	4832      	ldr	r0, [pc, #200]	; (8000b80 <main+0x464>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000ab8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aba:	f003 ffe9 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	b108      	cbz	r0, 8000ac4 <main+0x3a8>
 8000ac0:	b672      	cpsid	i
 8000ac2:	e7fe      	b.n	8000ac2 <main+0x3a6>
  huart2.Instance = USART2;
 8000ac4:	4c2f      	ldr	r4, [pc, #188]	; (8000b84 <main+0x468>)
 8000ac6:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <main+0x46c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8000ad0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad8:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000ada:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	f004 f847 	bl	8004b70 <HAL_UART_Init>
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	b108      	cbz	r0, 8000aea <main+0x3ce>
 8000ae6:	b672      	cpsid	i
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x3cc>
  MX_MotorControl_Init();
 8000aea:	f001 f977 	bl	8001ddc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000aee:	462a      	mov	r2, r5
 8000af0:	2102      	movs	r1, #2
 8000af2:	2012      	movs	r0, #18
 8000af4:	f002 fe9a 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000af8:	2012      	movs	r0, #18
 8000afa:	f002 fecd 	bl	8003898 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000afe:	462a      	mov	r2, r5
 8000b00:	4629      	mov	r1, r5
 8000b02:	2019      	movs	r0, #25
 8000b04:	f002 fe92 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b08:	2019      	movs	r0, #25
 8000b0a:	f002 fec5 	bl	8003898 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2104      	movs	r1, #4
 8000b12:	2018      	movs	r0, #24
 8000b14:	f002 fe8a 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000b18:	2018      	movs	r0, #24
 8000b1a:	f002 febd 	bl	8003898 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000b1e:	462a      	mov	r2, r5
 8000b20:	2103      	movs	r1, #3
 8000b22:	201c      	movs	r0, #28
 8000b24:	f002 fe82 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f002 feb5 	bl	8003898 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2103      	movs	r1, #3
 8000b32:	2026      	movs	r0, #38	; 0x26
 8000b34:	f002 fe7a 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b38:	2026      	movs	r0, #38	; 0x26
 8000b3a:	f002 fead 	bl	8003898 <HAL_NVIC_EnableIRQ>
	       sprintf(msg_debug, "%hu\r\n", potentiometer_value);
 8000b3e:	4d13      	ldr	r5, [pc, #76]	; (8000b8c <main+0x470>)
	  if (RCM_GetUserConvState() == RCM_USERCONV_IDLE)
 8000b40:	f001 fad4 	bl	80020ec <RCM_GetUserConvState>
 8000b44:	b918      	cbnz	r0, 8000b4e <main+0x432>
	       RCM_RequestUserConv(PotentiometerHandle );
 8000b46:	9800      	ldr	r0, [sp, #0]
 8000b48:	f001 fa5e 	bl	8002008 <RCM_RequestUserConv>
 8000b4c:	e7f8      	b.n	8000b40 <main+0x424>
	      else if (RCM_GetUserConvState() == RCM_USERCONV_EOC)
 8000b4e:	f001 facd 	bl	80020ec <RCM_GetUserConvState>
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d1f4      	bne.n	8000b40 <main+0x424>
	       potentiometer_value = RCM_GetUserConv();
 8000b56:	f001 fa67 	bl	8002028 <RCM_GetUserConv>
	       sprintf(msg_debug, "%hu\r\n", potentiometer_value);
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	a818      	add	r0, sp, #96	; 0x60
 8000b60:	f006 f8ba 	bl	8006cd8 <siprintf>
	       HAL_UART_Transmit(&huart2, (uint8_t*)msg_debug, strlen(msg_debug), HAL_MAX_DELAY);
 8000b64:	a818      	add	r0, sp, #96	; 0x60
 8000b66:	f7ff fb53 	bl	8000210 <strlen>
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	b282      	uxth	r2, r0
 8000b70:	a918      	add	r1, sp, #96	; 0x60
 8000b72:	4620      	mov	r0, r4
 8000b74:	f004 f89e 	bl	8004cb4 <HAL_UART_Transmit>
 8000b78:	e7e2      	b.n	8000b40 <main+0x424>
 8000b7a:	bf00      	nop
 8000b7c:	20000854 	.word	0x20000854
 8000b80:	20000894 	.word	0x20000894
 8000b84:	200008d4 	.word	0x200008d4
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	080074fc 	.word	0x080074fc

08000b90 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000b90:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000b92:	2400      	movs	r4, #0
 8000b94:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000b96:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000b9a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000b9c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000b9e:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000ba2:	6083      	str	r3, [r0, #8]
}
 8000ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000bac:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8000bae:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000bb0:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000bb2:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bb4:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000bb6:	7643      	strb	r3, [r0, #25]
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000bbc:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000bbe:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000bc0:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bc2:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000bc4:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bc6:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8000bc8:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000bca:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000bcc:	7643      	strb	r3, [r0, #25]
}
 8000bce:	bc30      	pop	{r4, r5}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000bd4:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bd6:	2201      	movs	r2, #1
{
 8000bd8:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000bda:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000bdc:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 8000bde:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000be2:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000be4:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000be6:	7643      	strb	r3, [r0, #25]
}
 8000be8:	b003      	add	sp, #12
 8000bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000bf0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000bf2:	2103      	movs	r1, #3
{
 8000bf4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000bf6:	6800      	ldr	r0, [r0, #0]
 8000bf8:	f005 fbd2 	bl	80063a0 <STM_NextState>

  if ( RetVal == true )
 8000bfc:	b108      	cbz	r0, 8000c02 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000c02:	bd10      	pop	{r4, pc}

08000c04 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000c04:	6800      	ldr	r0, [r0, #0]
 8000c06:	2107      	movs	r1, #7
 8000c08:	f005 bbca 	b.w	80063a0 <STM_NextState>

08000c0c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000c0c:	6800      	ldr	r0, [r0, #0]
 8000c0e:	f005 bc3d 	b.w	800648c <STM_FaultAcknowledged>
 8000c12:	bf00      	nop

08000c14 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000c14:	6800      	ldr	r0, [r0, #0]
 8000c16:	2101      	movs	r1, #1
 8000c18:	f005 bbc2 	b.w	80063a0 <STM_NextState>

08000c1c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000c1c:	b110      	cbz	r0, 8000c24 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000c1e:	7e03      	ldrb	r3, [r0, #24]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d000      	beq.n	8000c26 <MCI_ExecBufferedCommands+0xa>
 8000c24:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8000c26:	7b01      	ldrb	r1, [r0, #12]
 8000c28:	2902      	cmp	r1, #2
{
 8000c2a:	b510      	push	{r4, lr}
 8000c2c:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8000c2e:	d01f      	beq.n	8000c70 <MCI_ExecBufferedCommands+0x54>
 8000c30:	2903      	cmp	r1, #3
 8000c32:	d004      	beq.n	8000c3e <MCI_ExecBufferedCommands+0x22>
 8000c34:	2901      	cmp	r1, #1
 8000c36:	d00b      	beq.n	8000c50 <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
}
 8000c3c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c3e:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000c40:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8000c44:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c46:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	7623      	strb	r3, [r4, #24]
}
 8000c4e:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c50:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c5a:	f005 fae1 	bl	8006220 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000c5e:	8ae2      	ldrh	r2, [r4, #22]
 8000c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c64:	6860      	ldr	r0, [r4, #4]
 8000c66:	f005 fadf 	bl	8006228 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d0e4      	beq.n	8000c38 <MCI_ExecBufferedCommands+0x1c>
 8000c6e:	e7ec      	b.n	8000c4a <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000c70:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c74:	2100      	movs	r1, #0
 8000c76:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000c7a:	f005 fad1 	bl	8006220 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000c7e:	8ae2      	ldrh	r2, [r4, #22]
 8000c80:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000c84:	6860      	ldr	r0, [r4, #4]
 8000c86:	f005 facf 	bl	8006228 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d0d4      	beq.n	8000c38 <MCI_ExecBufferedCommands+0x1c>
 8000c8e:	e7dc      	b.n	8000c4a <MCI_ExecBufferedCommands+0x2e>

08000c90 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000c90:	6800      	ldr	r0, [r0, #0]
 8000c92:	f005 bbf9 	b.w	8006488 <STM_GetState>
 8000c96:	bf00      	nop

08000c98 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000c98:	7e40      	ldrb	r0, [r0, #25]
 8000c9a:	4770      	bx	lr

08000c9c <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000c9c:	7b03      	ldrb	r3, [r0, #12]
 8000c9e:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000ca0:	bf0c      	ite	eq
 8000ca2:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000ca6:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000cac:	6840      	ldr	r0, [r0, #4]
 8000cae:	f005 bb05 	b.w	80062bc <STC_StopRamp>
 8000cb2:	bf00      	nop

08000cb4 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000cb4:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000cb6:	6840      	ldr	r0, [r0, #4]
 8000cb8:	f005 fa98 	bl	80061ec <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000cbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000cc0:	f005 ba3e 	b.w	8006140 <SPD_GetAvrgMecSpeedUnit>

08000cc4 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000cc4:	6840      	ldr	r0, [r0, #4]
 8000cc6:	f005 ba9b 	b.w	8006200 <STC_GetMecSpeedRefUnit>
 8000cca:	bf00      	nop

08000ccc <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000ccc:	6883      	ldr	r3, [r0, #8]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	b283      	uxth	r3, r0
{
 8000cd2:	b082      	sub	sp, #8
}
 8000cd4:	f363 000f 	bfi	r0, r3, #0, #16
 8000cd8:	b002      	add	sp, #8
 8000cda:	4770      	bx	lr

08000cdc <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000cdc:	6883      	ldr	r3, [r0, #8]
 8000cde:	6858      	ldr	r0, [r3, #4]
 8000ce0:	b283      	uxth	r3, r0
{
 8000ce2:	b082      	sub	sp, #8
}
 8000ce4:	f363 000f 	bfi	r0, r3, #0, #16
 8000ce8:	b002      	add	sp, #8
 8000cea:	4770      	bx	lr

08000cec <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000cec:	6883      	ldr	r3, [r0, #8]
 8000cee:	68d8      	ldr	r0, [r3, #12]
 8000cf0:	b283      	uxth	r3, r0
{
 8000cf2:	b082      	sub	sp, #8
}
 8000cf4:	f363 000f 	bfi	r0, r3, #0, #16
 8000cf8:	b002      	add	sp, #8
 8000cfa:	4770      	bx	lr

08000cfc <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000cfc:	6883      	ldr	r3, [r0, #8]
 8000cfe:	6918      	ldr	r0, [r3, #16]
 8000d00:	b283      	uxth	r3, r0
{
 8000d02:	b082      	sub	sp, #8
}
 8000d04:	f363 000f 	bfi	r0, r3, #0, #16
 8000d08:	b002      	add	sp, #8
 8000d0a:	4770      	bx	lr

08000d0c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000d0c:	6883      	ldr	r3, [r0, #8]
 8000d0e:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8000d12:	b283      	uxth	r3, r0
{
 8000d14:	b082      	sub	sp, #8
}
 8000d16:	f363 000f 	bfi	r0, r3, #0, #16
 8000d1a:	b002      	add	sp, #8
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000d20:	6883      	ldr	r3, [r0, #8]
 8000d22:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8000d26:	b283      	uxth	r3, r0
{
 8000d28:	b082      	sub	sp, #8
}
 8000d2a:	f363 000f 	bfi	r0, r3, #0, #16
 8000d2e:	b002      	add	sp, #8
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000d34:	6883      	ldr	r3, [r0, #8]
}
 8000d36:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000d3a:	4770      	bx	lr

08000d3c <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000d3c:	6883      	ldr	r3, [r0, #8]
 8000d3e:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000d40:	8299      	strh	r1, [r3, #20]
}
 8000d42:	4770      	bx	lr

08000d44 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000d44:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000d46:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000d4a:	f005 faf5 	bl	8006338 <STC_GetDefaultIqdref>
 8000d4e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000d52:	8220      	strh	r0, [r4, #16]
 8000d54:	8263      	strh	r3, [r4, #18]
}
 8000d56:	bd10      	pop	{r4, pc}

08000d58 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d58:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000d5c:	b202      	sxth	r2, r0
 8000d5e:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000d62:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d66:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000d70:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000d72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8000d76:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000d78:	da04      	bge.n	8000d84 <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000d7a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000d7e:	da0c      	bge.n	8000d9a <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MCM_Clarke+0x48>)
 8000d82:	e001      	b.n	8000d88 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8000d84:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f362 000f 	bfi	r0, r2, #0, #16
 8000d92:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d96:	b004      	add	sp, #16
 8000d98:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000d9a:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8000d9c:	d1f4      	bne.n	8000d88 <MCM_Clarke+0x30>
 8000d9e:	e7ef      	b.n	8000d80 <MCM_Clarke+0x28>
 8000da0:	ffff8001 	.word	0xffff8001

08000da4 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000da4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000da8:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000dac:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000db0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8000db4:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000db6:	d031      	beq.n	8000e1c <MCM_Trig_Functions+0x78>
 8000db8:	d921      	bls.n	8000dfe <MCM_Trig_Functions+0x5a>
 8000dba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000dbe:	d015      	beq.n	8000dec <MCM_Trig_Functions+0x48>
 8000dc0:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000dc4:	d109      	bne.n	8000dda <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dc6:	b2c0      	uxtb	r0, r0
 8000dc8:	491a      	ldr	r1, [pc, #104]	; (8000e34 <MCM_Trig_Functions+0x90>)
 8000dca:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dcc:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dd0:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dd2:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dd4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dd8:	b212      	sxth	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	2000      	movs	r0, #0
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f362 000f 	bfi	r0, r2, #0, #16
 8000de4:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000de8:	b002      	add	sp, #8
 8000dea:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000dec:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000dee:	43c3      	mvns	r3, r0
 8000df0:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000df2:	4910      	ldr	r1, [pc, #64]	; (8000e34 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000df4:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000df8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 8000dfc:	e7ed      	b.n	8000dda <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d1eb      	bne.n	8000dda <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e02:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e04:	43c3      	mvns	r3, r0
 8000e06:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e08:	490a      	ldr	r1, [pc, #40]	; (8000e34 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e0a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e0e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e12:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e14:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e16:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e18:	b21b      	sxth	r3, r3
      break;
 8000e1a:	e7de      	b.n	8000dda <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e1c:	b2c0      	uxtb	r0, r0
 8000e1e:	43c3      	mvns	r3, r0
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <MCM_Trig_Functions+0x90>)
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e28:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	b21b      	sxth	r3, r3
      break;
 8000e30:	e7d3      	b.n	8000dda <MCM_Trig_Functions+0x36>
 8000e32:	bf00      	nop
 8000e34:	08007504 	.word	0x08007504

08000e38 <MCM_Park>:
{
 8000e38:	b530      	push	{r4, r5, lr}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	b204      	sxth	r4, r0
 8000e3e:	9001      	str	r0, [sp, #4]
 8000e40:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e42:	4608      	mov	r0, r1
 8000e44:	f7ff ffae 	bl	8000da4 <MCM_Trig_Functions>
 8000e48:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000e4a:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e4e:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000e50:	fb05 3310 	mls	r3, r5, r0, r3
 8000e54:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e5a:	da04      	bge.n	8000e66 <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 8000e5c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000e60:	da1e      	bge.n	8000ea0 <MCM_Park+0x68>
    Output.q = -32767;
 8000e62:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <MCM_Park+0x70>)
 8000e64:	e001      	b.n	8000e6a <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8000e66:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000e6a:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000e6e:	fb04 1000 	mla	r0, r4, r0, r1
 8000e72:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000e74:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e78:	da04      	bge.n	8000e84 <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 8000e7a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000e7e:	da0c      	bge.n	8000e9a <MCM_Park+0x62>
    Output.d = -32767;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MCM_Park+0x70>)
 8000e82:	e001      	b.n	8000e88 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8000e84:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f362 000f 	bfi	r0, r2, #0, #16
 8000e92:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000e96:	b005      	add	sp, #20
 8000e98:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000e9a:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 8000e9c:	d1f4      	bne.n	8000e88 <MCM_Park+0x50>
 8000e9e:	e7ef      	b.n	8000e80 <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000ea0:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8000ea2:	d1e2      	bne.n	8000e6a <MCM_Park+0x32>
 8000ea4:	e7dd      	b.n	8000e62 <MCM_Park+0x2a>
 8000ea6:	bf00      	nop
 8000ea8:	ffff8001 	.word	0xffff8001

08000eac <MCM_Rev_Park>:
{
 8000eac:	b530      	push	{r4, r5, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	b204      	sxth	r4, r0
 8000eb2:	1405      	asrs	r5, r0, #16
 8000eb4:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	f7ff ff74 	bl	8000da4 <MCM_Trig_Functions>
 8000ebc:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000ebe:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ec2:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000ec4:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000ec8:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000ecc:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000ed0:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000eda:	f362 000f 	bfi	r0, r2, #0, #16
 8000ede:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ee2:	b005      	add	sp, #20
 8000ee4:	bd30      	pop	{r4, r5, pc}
 8000ee6:	bf00      	nop

08000ee8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <FOC_Clear+0x68>)
 8000ef0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8000efa:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8000efe:	509c      	str	r4, [r3, r2]
{
 8000f00:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8000f02:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000f06:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8000f08:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000f0a:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8000f0e:	50b4      	str	r4, [r6, r2]
 8000f10:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000f14:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000f16:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000f18:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f1a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000f1e:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f20:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8000f22:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000f24:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f26:	f004 fe7d 	bl	8005c24 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <FOC_Clear+0x70>)
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f32:	f004 fe77 	bl	8005c24 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <FOC_Clear+0x74>)
 8000f38:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f3c:	f005 f958 	bl	80061f0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <FOC_Clear+0x78>)
 8000f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000f4a:	f005 b853 	b.w	8005ff4 <PWMC_SwitchOffPWM>
 8000f4e:	bf00      	nop
 8000f50:	20000944 	.word	0x20000944
 8000f54:	20000938 	.word	0x20000938
 8000f58:	200009f4 	.word	0x200009f4
 8000f5c:	200009f8 	.word	0x200009f8
 8000f60:	20000930 	.word	0x20000930

08000f64 <MCboot>:
{
 8000f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8000f68:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 800113c <MCboot+0x1d8>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f6c:	4c5c      	ldr	r4, [pc, #368]	; (80010e0 <MCboot+0x17c>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000f6e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001140 <MCboot+0x1dc>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000f72:	4d5c      	ldr	r5, [pc, #368]	; (80010e4 <MCboot+0x180>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000f74:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8001144 <MCboot+0x1e0>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000f78:	4f5b      	ldr	r7, [pc, #364]	; (80010e8 <MCboot+0x184>)
  NTC_Init(&TempSensorParamsM1);
 8000f7a:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8001148 <MCboot+0x1e4>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000f7e:	4e5b      	ldr	r6, [pc, #364]	; (80010ec <MCboot+0x188>)
{
 8000f80:	b087      	sub	sp, #28
 8000f82:	9002      	str	r0, [sp, #8]
  STM_Init(&STM[M1]);
 8000f84:	4658      	mov	r0, fp
{
 8000f86:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000f88:	f005 f9ea 	bl	8006360 <STM_Init>
  bMCBootCompleted = 0;
 8000f8c:	4958      	ldr	r1, [pc, #352]	; (80010f0 <MCboot+0x18c>)
  pCLM[M1] = &CircleLimitationM1;
 8000f8e:	4b59      	ldr	r3, [pc, #356]	; (80010f4 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f90:	4859      	ldr	r0, [pc, #356]	; (80010f8 <MCboot+0x194>)
  pCLM[M1] = &CircleLimitationM1;
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <MCboot+0x198>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000f94:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 8000f96:	2400      	movs	r4, #0
 8000f98:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000f9a:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8000f9c:	f004 fbea 	bl	8005774 <ICS_Init>
  startTimers();
 8000fa0:	f004 fec6 	bl	8005d30 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	f004 fe29 	bl	8005bfc <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000faa:	4b55      	ldr	r3, [pc, #340]	; (8001100 <MCboot+0x19c>)
  HALL_Init (&HALL_M1);
 8000fac:	4855      	ldr	r0, [pc, #340]	; (8001104 <MCboot+0x1a0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000fae:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000fb0:	f8ca 8000 	str.w	r8, [sl]
  HALL_Init (&HALL_M1);
 8000fb4:	f003 ff84 	bl	8004ec0 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000fb8:	f8da 1000 	ldr.w	r1, [sl]
 8000fbc:	4a51      	ldr	r2, [pc, #324]	; (8001104 <MCboot+0x1a0>)
 8000fbe:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000fc0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800114c <MCboot+0x1e8>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000fc4:	f005 f8fe 	bl	80061c4 <STC_Init>
  STO_PLL_Init (&STO_PLL_M1);
 8000fc8:	484f      	ldr	r0, [pc, #316]	; (8001108 <MCboot+0x1a4>)
 8000fca:	f005 fdc9 	bl	8006b60 <STO_PLL_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000fce:	484f      	ldr	r0, [pc, #316]	; (800110c <MCboot+0x1a8>)
 8000fd0:	f004 fe14 	bl	8005bfc <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000fd4:	484e      	ldr	r0, [pc, #312]	; (8001110 <MCboot+0x1ac>)
 8000fd6:	f004 fe11 	bl	8005bfc <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000fda:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <MCboot+0x1b0>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000fdc:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <MCboot+0x1b4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000fde:	484b      	ldr	r0, [pc, #300]	; (800110c <MCboot+0x1a8>)
 8000fe0:	6010      	str	r0, [r2, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000fe2:	4a4e      	ldr	r2, [pc, #312]	; (800111c <MCboot+0x1b8>)
 8000fe4:	494a      	ldr	r1, [pc, #296]	; (8001110 <MCboot+0x1ac>)
 8000fe6:	6011      	str	r1, [r2, #0]
  RVBS_Init(pBusSensorM1);
 8000fe8:	4618      	mov	r0, r3
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000fea:	603b      	str	r3, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8000fec:	f005 f84e 	bl	800608c <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ff0:	494b      	ldr	r1, [pc, #300]	; (8001120 <MCboot+0x1bc>)
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <MCboot+0x1c0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000ff4:	683a      	ldr	r2, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ff6:	600b      	str	r3, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8000ff8:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000ffa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000ffe:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001002:	f004 fdb5 	bl	8005b70 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MCboot+0x1c4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001008:	4848      	ldr	r0, [pc, #288]	; (800112c <MCboot+0x1c8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800100c:	f8c0 9000 	str.w	r9, [r0]
  REMNG_Init(pREMNG[M1]);
 8001010:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001012:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001014:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8001018:	f005 f886 	bl	8006128 <REMNG_Init>
  FOC_Clear(M1);
 800101c:	4620      	mov	r0, r4
 800101e:	f7ff ff63 	bl	8000ee8 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001022:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001026:	6828      	ldr	r0, [r5, #0]
 8001028:	f005 f986 	bl	8006338 <STC_GetDefaultIqdref>
 800102c:	4603      	mov	r3, r0
 800102e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8001032:	8233      	strh	r3, [r6, #16]
 8001034:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001036:	6828      	ldr	r0, [r5, #0]
 8001038:	f005 f97e 	bl	8006338 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 800103c:	493d      	ldr	r1, [pc, #244]	; (8001134 <MCboot+0x1d0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800103e:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001040:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001044:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001048:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800104a:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800104e:	4608      	mov	r0, r1
 8001050:	4659      	mov	r1, fp
 8001052:	f7ff fd9d 	bl	8000b90 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001056:	6828      	ldr	r0, [r5, #0]
 8001058:	f8d8 6000 	ldr.w	r6, [r8]
 800105c:	f005 f962 	bl	8006324 <STC_GetMecSpeedRefUnitDefault>
 8001060:	4622      	mov	r2, r4
 8001062:	4601      	mov	r1, r0
 8001064:	4630      	mov	r0, r6
 8001066:	f7ff fda1 	bl	8000bac <MCI_ExecSpeedRamp>
  MCT[M1].pPIDId = pPIDId[M1];
 800106a:	4a2c      	ldr	r2, [pc, #176]	; (800111c <MCboot+0x1b8>)
  pMCIList[M1] = oMCInterface[M1];
 800106c:	f8d8 6000 	ldr.w	r6, [r8]
  MCT[M1].pPIDId = pPIDId[M1];
 8001070:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001072:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <MCboot+0x17c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001074:	f8da c000 	ldr.w	ip, [sl]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001078:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800107a:	4a29      	ldr	r2, [pc, #164]	; (8001120 <MCboot+0x1bc>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800107c:	f8d5 a000 	ldr.w	sl, [r5]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001080:	f8d2 e000 	ldr.w	lr, [r2]
  pMCIList[M1] = oMCInterface[M1];
 8001084:	9a02      	ldr	r2, [sp, #8]
 8001086:	9601      	str	r6, [sp, #4]
 8001088:	4690      	mov	r8, r2
  MCT[M1].pPIDIq = pPIDIq[M1];
 800108a:	4e22      	ldr	r6, [pc, #136]	; (8001114 <MCboot+0x1b0>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800108c:	4d27      	ldr	r5, [pc, #156]	; (800112c <MCboot+0x1c8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MCboot+0x1d4>)
  pMCIList[M1] = oMCInterface[M1];
 8001090:	9a01      	ldr	r2, [sp, #4]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001092:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001094:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001096:	683f      	ldr	r7, [r7, #0]
  pMCIList[M1] = oMCInterface[M1];
 8001098:	f8c8 2000 	str.w	r2, [r8]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <MCboot+0x1a0>)
 800109e:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <MCboot+0x1a4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80010a2:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 80010a4:	e9c3 2407 	strd	r2, r4, [r3, #28]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80010a8:	e9c3 c600 	strd	ip, r6, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 80010ac:	6098      	str	r0, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80010ae:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80010b2:	e9c3 570b 	strd	r5, r7, [r3, #44]	; 0x2c
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80010b6:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80010ba:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 80010bc:	615c      	str	r4, [r3, #20]
  MCT[M1].pStateMachine = &STM[M1];
 80010be:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80010c2:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 80010c6:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  bMCBootCompleted = 1;
 80010ca:	4909      	ldr	r1, [pc, #36]	; (80010f0 <MCboot+0x18c>)
  MCT[M1].pSCC = MC_NULL;
 80010cc:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  pMCTList[M1] = &MCT[M1];
 80010d0:	9a03      	ldr	r2, [sp, #12]
  MCT[M1].pOTT = MC_NULL;
 80010d2:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80010d4:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 80010d6:	f881 9000 	strb.w	r9, [r1]
}
 80010da:	b007      	add	sp, #28
 80010dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010e0:	20000930 	.word	0x20000930
 80010e4:	200009f8 	.word	0x200009f8
 80010e8:	200009c4 	.word	0x200009c4
 80010ec:	20000944 	.word	0x20000944
 80010f0:	20000788 	.word	0x20000788
 80010f4:	200009c0 	.word	0x200009c0
 80010f8:	20000350 	.word	0x20000350
 80010fc:	20000000 	.word	0x20000000
 8001100:	2000052c 	.word	0x2000052c
 8001104:	200000f0 	.word	0x200000f0
 8001108:	20000404 	.word	0x20000404
 800110c:	200001e4 	.word	0x200001e4
 8001110:	200001b8 	.word	0x200001b8
 8001114:	20000938 	.word	0x20000938
 8001118:	200003dc 	.word	0x200003dc
 800111c:	200009f4 	.word	0x200009f4
 8001120:	200009f0 	.word	0x200009f0
 8001124:	2000023c 	.word	0x2000023c
 8001128:	200003c4 	.word	0x200003c4
 800112c:	2000092c 	.word	0x2000092c
 8001130:	200009ec 	.word	0x200009ec
 8001134:	200009c8 	.word	0x200009c8
 8001138:	2000096c 	.word	0x2000096c
 800113c:	200009e4 	.word	0x200009e4
 8001140:	20000210 	.word	0x20000210
 8001144:	20000934 	.word	0x20000934
 8001148:	20000560 	.word	0x20000560
 800114c:	2000093c 	.word	0x2000093c

08001150 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <FOC_CalcCurrRef+0x24>)
{
 8001156:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001158:	2426      	movs	r4, #38	; 0x26
 800115a:	fb04 3400 	mla	r4, r4, r0, r3
 800115e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001162:	b103      	cbz	r3, 8001166 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001164:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <FOC_CalcCurrRef+0x28>)
 8001168:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800116c:	f005 f8aa 	bl	80062c4 <STC_CalcTorqueReference>
 8001170:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001172:	8220      	strh	r0, [r4, #16]
}
 8001174:	bd10      	pop	{r4, pc}
 8001176:	bf00      	nop
 8001178:	20000944 	.word	0x20000944
 800117c:	200009f8 	.word	0x200009f8

08001180 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001182:	8018      	strh	r0, [r3, #0]
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000078a 	.word	0x2000078a

0800118c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800118e:	8818      	ldrh	r0, [r3, #0]
 8001190:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001192:	fab0 f080 	clz	r0, r0
 8001196:	0940      	lsrs	r0, r0, #5
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000078a 	.word	0x2000078a

080011a0 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80011a0:	4b01      	ldr	r3, [pc, #4]	; (80011a8 <TSK_SetStopPermanencyTimeM1+0x8>)
 80011a2:	8018      	strh	r0, [r3, #0]
}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	2000078e 	.word	0x2000078e

080011ac <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80011ae:	8818      	ldrh	r0, [r3, #0]
 80011b0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80011b2:	fab0 f080 	clz	r0, r0
 80011b6:	0940      	lsrs	r0, r0, #5
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000078e 	.word	0x2000078e

080011c0 <TSK_MediumFrequencyTaskM1>:
{
 80011c0:	b530      	push	{r4, r5, lr}
 80011c2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80011c4:	ac02      	add	r4, sp, #8
 80011c6:	2300      	movs	r3, #0
 80011c8:	f824 3d02 	strh.w	r3, [r4, #-2]!
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011cc:	484f      	ldr	r0, [pc, #316]	; (800130c <TSK_MediumFrequencyTaskM1+0x14c>)
  PQD_CalcElMotorPower( pMPM[M1] );
 80011ce:	4d50      	ldr	r5, [pc, #320]	; (8001310 <TSK_MediumFrequencyTaskM1+0x150>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80011d0:	4621      	mov	r1, r4
 80011d2:	f005 fbcd 	bl	8006970 <STO_PLL_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80011d6:	4621      	mov	r1, r4
 80011d8:	484e      	ldr	r0, [pc, #312]	; (8001314 <TSK_MediumFrequencyTaskM1+0x154>)
 80011da:	f003 ffbd 	bl	8005158 <HALL_CalcAvrgMecSpeedUnit>
 80011de:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80011e0:	6828      	ldr	r0, [r5, #0]
 80011e2:	f004 fd6f 	bl	8005cc4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80011e6:	484c      	ldr	r0, [pc, #304]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 80011e8:	f005 f94e 	bl	8006488 <STM_GetState>
  switch ( StateM1 )
 80011ec:	3803      	subs	r0, #3
 80011ee:	280f      	cmp	r0, #15
 80011f0:	d80d      	bhi.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
 80011f2:	e8df f000 	tbb	[pc, r0]
 80011f6:	2e22      	.short	0x2e22
 80011f8:	68554633 	.word	0x68554633
 80011fc:	0c0c0c08 	.word	0x0c0c0c08
 8001200:	710c0c0c 	.word	0x710c0c0c
 8001204:	0e7f      	.short	0x0e7f
    STM_NextState( &STM[M1], IDLE );
 8001206:	2100      	movs	r1, #0
 8001208:	4843      	ldr	r0, [pc, #268]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 800120a:	f005 f8c9 	bl	80063a0 <STM_NextState>
}
 800120e:	b003      	add	sp, #12
 8001210:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8001212:	4840      	ldr	r0, [pc, #256]	; (8001314 <TSK_MediumFrequencyTaskM1+0x154>)
 8001214:	f003 fed8 	bl	8004fc8 <HALL_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001218:	483c      	ldr	r0, [pc, #240]	; (800130c <TSK_MediumFrequencyTaskM1+0x14c>)
 800121a:	f005 fc73 	bl	8006b04 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800121e:	2104      	movs	r1, #4
 8001220:	483d      	ldr	r0, [pc, #244]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 8001222:	f005 f8bd 	bl	80063a0 <STM_NextState>
 8001226:	2800      	cmp	r0, #0
 8001228:	d0f1      	beq.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
      FOC_Clear( M1 );
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fe5c 	bl	8000ee8 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <TSK_MediumFrequencyTaskM1+0x15c>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f004 fb2a 	bl	800588c <ICS_SwitchOnPWM>
 8001238:	e7e9      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <TSK_MediumFrequencyTaskM1+0x15c>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f004 fb01 	bl	8005844 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001242:	2014      	movs	r0, #20
 8001244:	f7ff ff9c 	bl	8001180 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001248:	2110      	movs	r1, #16
 800124a:	4833      	ldr	r0, [pc, #204]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 800124c:	f005 f8a8 	bl	80063a0 <STM_NextState>
    break;
 8001250:	e7dd      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001252:	2105      	movs	r1, #5
 8001254:	4830      	ldr	r0, [pc, #192]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 8001256:	f005 f8a3 	bl	80063a0 <STM_NextState>
    break;
 800125a:	e7d8      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
	  FOC_InitAdditionalMethods(M1);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff77 	bl	8001150 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ff76 	bl	8001154 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001268:	2106      	movs	r1, #6
 800126a:	482b      	ldr	r0, [pc, #172]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 800126c:	f005 f898 	bl	80063a0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <TSK_MediumFrequencyTaskM1+0x160>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	f005 f86c 	bl	8006350 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <TSK_MediumFrequencyTaskM1+0x164>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f7ff fcce 	bl	8000c1c <MCI_ExecBufferedCommands>
    break;
 8001280:	e7c5      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <TSK_MediumFrequencyTaskM1+0x164>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	f7ff fcc9 	bl	8000c1c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff62 	bl	8001154 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001290:	2c00      	cmp	r4, #0
 8001292:	d1bc      	bne.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001294:	4622      	mov	r2, r4
 8001296:	2120      	movs	r1, #32
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 800129a:	f005 f867 	bl	800636c <STM_FaultProcessing>
 800129e:	e7b6      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <TSK_MediumFrequencyTaskM1+0x15c>)
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	f004 fb2c 	bl	8005900 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fe1d 	bl	8000ee8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80012ae:	6828      	ldr	r0, [r5, #0]
 80012b0:	f004 fc1e 	bl	8005af0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80012b4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80012b8:	f7ff ff72 	bl	80011a0 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80012bc:	2108      	movs	r1, #8
 80012be:	4816      	ldr	r0, [pc, #88]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 80012c0:	f005 f86e 	bl	80063a0 <STM_NextState>
    break;
 80012c4:	e7a3      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80012c6:	f7ff ff71 	bl	80011ac <TSK_StopPermanencyTimeHasElapsedM1>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d09f      	beq.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
      STM_NextState( &STM[M1], STOP_IDLE );
 80012ce:	2109      	movs	r1, #9
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 80012d2:	f005 f865 	bl	80063a0 <STM_NextState>
 80012d6:	e79a      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80012d8:	f7ff ff58 	bl	800118c <TSK_ChargeBootCapDelayHasElapsedM1>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d096      	beq.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <TSK_MediumFrequencyTaskM1+0x15c>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	f004 fe87 	bl	8005ff8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80012ea:	2111      	movs	r1, #17
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 80012ee:	f005 f857 	bl	80063a0 <STM_NextState>
 80012f2:	e78c      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <TSK_MediumFrequencyTaskM1+0x15c>)
 80012f6:	2101      	movs	r1, #1
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f004 fe7d 	bl	8005ff8 <PWMC_CurrentReadingCalibr>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d085      	beq.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
      STM_NextState( &STM[M1], CLEAR );
 8001302:	2112      	movs	r1, #18
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <TSK_MediumFrequencyTaskM1+0x158>)
 8001306:	f005 f84b 	bl	80063a0 <STM_NextState>
 800130a:	e780      	b.n	800120e <TSK_MediumFrequencyTaskM1+0x4e>
 800130c:	20000404 	.word	0x20000404
 8001310:	200009f0 	.word	0x200009f0
 8001314:	200000f0 	.word	0x200000f0
 8001318:	200009e4 	.word	0x200009e4
 800131c:	20000930 	.word	0x20000930
 8001320:	200009f8 	.word	0x200009f8
 8001324:	2000093c 	.word	0x2000093c

08001328 <MC_Scheduler>:
{
 8001328:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MC_Scheduler+0x4c>)
 800132c:	781c      	ldrb	r4, [r3, #0]
 800132e:	2c01      	cmp	r4, #1
 8001330:	d000      	beq.n	8001334 <MC_Scheduler+0xc>
}
 8001332:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001334:	4d10      	ldr	r5, [pc, #64]	; (8001378 <MC_Scheduler+0x50>)
 8001336:	882b      	ldrh	r3, [r5, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	b1b3      	cbz	r3, 800136a <MC_Scheduler+0x42>
      hMFTaskCounterM1--;
 800133c:	882b      	ldrh	r3, [r5, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <MC_Scheduler+0x54>)
 8001346:	8813      	ldrh	r3, [r2, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	b94b      	cbnz	r3, 8001360 <MC_Scheduler+0x38>
    if(hStopPermanencyCounterM1 > 0u)
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <MC_Scheduler+0x58>)
 800134e:	8813      	ldrh	r3, [r2, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0ed      	beq.n	8001332 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001356:	8813      	ldrh	r3, [r2, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	b29b      	uxth	r3, r3
 800135c:	8013      	strh	r3, [r2, #0]
}
 800135e:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 8001360:	8813      	ldrh	r3, [r2, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	b29b      	uxth	r3, r3
 8001366:	8013      	strh	r3, [r2, #0]
 8001368:	e7f0      	b.n	800134c <MC_Scheduler+0x24>
      TSK_MediumFrequencyTaskM1();
 800136a:	f7ff ff29 	bl	80011c0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800136e:	802c      	strh	r4, [r5, #0]
 8001370:	e7e8      	b.n	8001344 <MC_Scheduler+0x1c>
 8001372:	bf00      	nop
 8001374:	20000788 	.word	0x20000788
 8001378:	2000078c 	.word	0x2000078c
 800137c:	2000078a 	.word	0x2000078a
 8001380:	2000078e 	.word	0x2000078e

08001384 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  Observer_Inputs_t STO_aux_Inputs; /*  only if sensorless aux*/
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001388:	4c3b      	ldr	r4, [pc, #236]	; (8001478 <TSK_HighFrequencyTask+0xf4>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800138a:	4f3c      	ldr	r7, [pc, #240]	; (800147c <TSK_HighFrequencyTask+0xf8>)
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800138c:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001390:	b088      	sub	sp, #32
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001392:	9005      	str	r0, [sp, #20]
  HALL_CalcElAngle (&HALL_M1);
 8001394:	483a      	ldr	r0, [pc, #232]	; (8001480 <TSK_HighFrequencyTask+0xfc>)
 8001396:	f003 febf 	bl	8005118 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <TSK_HighFrequencyTask+0x100>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f004 ff25 	bl	80061ec <STC_GetSpeedSensor>
 80013a2:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80013a4:	f004 fec8 	bl	8006138 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80013a8:	a902      	add	r1, sp, #8
  hElAngle = SPD_GetElAngle(speedHandle);
 80013aa:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f004 fd13 	bl	8005dd8 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80013b2:	9802      	ldr	r0, [sp, #8]
 80013b4:	f7ff fcd0 	bl	8000d58 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013b8:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80013ba:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013bc:	f7ff fd3c 	bl	8000e38 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <TSK_HighFrequencyTask+0x104>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80013c2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80013c6:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80013c8:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013ca:	1a09      	subs	r1, r1, r0
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f004 fc35 	bl	8005c3c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80013d2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <TSK_HighFrequencyTask+0x108>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80013d8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80013dc:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80013de:	1a89      	subs	r1, r1, r2
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f004 fc2b 	bl	8005c3c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <TSK_HighFrequencyTask+0x10c>)
 80013e8:	f8ad 8004 	strh.w	r8, [sp, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8ad 0006 	strh.w	r0, [sp, #6]
 80013f2:	9901      	ldr	r1, [sp, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fcf3 	bl	8004de0 <Circle_Limitation>
 80013fa:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80013fc:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80013fe:	fa0f f883 	sxth.w	r8, r3
 8001402:	141d      	asrs	r5, r3, #16
 8001404:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001406:	f004 fe9f 	bl	8006148 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800140a:	4631      	mov	r1, r6
 800140c:	9801      	ldr	r0, [sp, #4]
 800140e:	f7ff fd4d 	bl	8000eac <MCM_Rev_Park>
 8001412:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001414:	4601      	mov	r1, r0
 8001416:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001418:	9304      	str	r3, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800141a:	f004 fcdf 	bl	8005ddc <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800141e:	4623      	mov	r3, r4
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001420:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8001422:	9802      	ldr	r0, [sp, #8]
 8001424:	f843 0b04 	str.w	r0, [r3], #4
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001428:	9803      	ldr	r0, [sp, #12]
 800142a:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800142c:	9800      	ldr	r0, [sp, #0]
 800142e:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001430:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001432:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001434:	f8a4 8016 	strh.w	r8, [r4, #22]
 8001438:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800143a:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800143c:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001440:	d012      	beq.n	8001468 <TSK_HighFrequencyTask+0xe4>
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <TSK_HighFrequencyTask+0x110>)
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	9006      	str	r0, [sp, #24]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001448:	6810      	ldr	r0, [r2, #0]
 800144a:	f003 fcc1 	bl	8004dd0 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 800144e:	a905      	add	r1, sp, #20
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001450:	f8ad 001c 	strh.w	r0, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <TSK_HighFrequencyTask+0x114>)
 8001456:	f005 f9a1 	bl	800679c <STO_PLL_CalcElAngle>
	STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <TSK_HighFrequencyTask+0x114>)
 800145c:	f005 fb28 	bl	8006ab0 <STO_PLL_CalcAvrgElSpeedDpp>
}
 8001460:	2000      	movs	r0, #0
 8001462:	b008      	add	sp, #32
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <TSK_HighFrequencyTask+0x118>)
 800146c:	f004 ff7e 	bl	800636c <STM_FaultProcessing>
}
 8001470:	2000      	movs	r0, #0
 8001472:	b008      	add	sp, #32
 8001474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001478:	20000944 	.word	0x20000944
 800147c:	20000930 	.word	0x20000930
 8001480:	200000f0 	.word	0x200000f0
 8001484:	200009f8 	.word	0x200009f8
 8001488:	20000938 	.word	0x20000938
 800148c:	200009f4 	.word	0x200009f4
 8001490:	200009c0 	.word	0x200009c0
 8001494:	200009c4 	.word	0x200009c4
 8001498:	20000404 	.word	0x20000404
 800149c:	200009e4 	.word	0x200009e4

080014a0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80014a4:	4f20      	ldr	r7, [pc, #128]	; (8001528 <TSK_SafetyTask_PWMOFF+0x88>)
{
 80014a6:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80014a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80014ac:	f004 fb72 	bl	8005b94 <NTC_CalcAvTemp>
 80014b0:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80014b2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80014b6:	f004 fdc9 	bl	800604c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80014ba:	f024 040c 	bic.w	r4, r4, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80014be:	4304      	orrs	r4, r0
 80014c0:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80014c2:	b335      	cbz	r5, 8001512 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80014c4:	4e19      	ldr	r6, [pc, #100]	; (800152c <TSK_SafetyTask_PWMOFF+0x8c>)
 80014c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80014ca:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80014ce:	43e2      	mvns	r2, r4
 80014d0:	b292      	uxth	r2, r2
 80014d2:	4621      	mov	r1, r4
 80014d4:	4630      	mov	r0, r6
 80014d6:	f004 ff49 	bl	800636c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80014da:	4630      	mov	r0, r6
 80014dc:	f004 ffd4 	bl	8006488 <STM_GetState>
 80014e0:	280a      	cmp	r0, #10
 80014e2:	d008      	beq.n	80014f6 <TSK_SafetyTask_PWMOFF+0x56>
 80014e4:	280b      	cmp	r0, #11
 80014e6:	d105      	bne.n	80014f4 <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014e8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80014ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014f0:	f004 bd80 	b.w	8005ff4 <PWMC_SwitchOffPWM>
}
 80014f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014f6:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80014fa:	f004 fd7b 	bl	8005ff4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80014fe:	4628      	mov	r0, r5
 8001500:	f7ff fcf2 	bl	8000ee8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <TSK_SafetyTask_PWMOFF+0x90>)
 8001506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 800150a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800150e:	f004 baef 	b.w	8005af0 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <TSK_SafetyTask_PWMOFF+0x94>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f004 fdd1 	bl	80060bc <RVBS_CalcAvVbus>
 800151a:	f020 000c 	bic.w	r0, r0, #12
 800151e:	4304      	orrs	r4, r0
 8001520:	b2a4      	uxth	r4, r4
 8001522:	e7cf      	b.n	80014c4 <TSK_SafetyTask_PWMOFF+0x24>
 8001524:	2000092c 	.word	0x2000092c
 8001528:	20000930 	.word	0x20000930
 800152c:	200009e4 	.word	0x200009e4
 8001530:	200009f0 	.word	0x200009f0
 8001534:	200009c4 	.word	0x200009c4

08001538 <TSK_SafetyTask>:
{
 8001538:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <TSK_SafetyTask+0x1c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d000      	beq.n	8001544 <TSK_SafetyTask+0xc>
}
 8001542:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff ffab 	bl	80014a0 <TSK_SafetyTask_PWMOFF>
}
 800154a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800154e:	f000 bd7b 	b.w	8002048 <RCM_ExecUserConv>
 8001552:	bf00      	nop
 8001554:	20000788 	.word	0x20000788

08001558 <MC_RunMotorControlTasks>:
{
 8001558:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MC_RunMotorControlTasks+0x1c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b903      	cbnz	r3, 8001562 <MC_RunMotorControlTasks+0xa>
}
 8001560:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001562:	f7ff fee1 	bl	8001328 <MC_Scheduler>
    TSK_SafetyTask();
 8001566:	f7ff ffe7 	bl	8001538 <TSK_SafetyTask>
}
 800156a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800156e:	f001 b8fb 	b.w	8002768 <UI_Scheduler>
 8001572:	bf00      	nop
 8001574:	20000788 	.word	0x20000788

08001578 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <TSK_HardwareFaultTask+0x18>)
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	f004 f9bf 	bl	8005900 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	4803      	ldr	r0, [pc, #12]	; (8001594 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800158c:	f004 beee 	b.w	800636c <STM_FaultProcessing>
 8001590:	20000930 	.word	0x20000930
 8001594:	200009e4 	.word	0x200009e4

08001598 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <mc_lock_pins+0x148>)
 800159e:	4951      	ldr	r1, [pc, #324]	; (80016e4 <mc_lock_pins+0x14c>)
 80015a0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015a2:	2510      	movs	r5, #16
 80015a4:	61dd      	str	r5, [r3, #28]
 80015a6:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015a8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015aa:	69d8      	ldr	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ac:	4a4e      	ldr	r2, [pc, #312]	; (80016e8 <mc_lock_pins+0x150>)
  temp = READ_REG(GPIOx->LCKR);
 80015ae:	900d      	str	r0, [sp, #52]	; 0x34
  (void) temp;
 80015b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015b2:	484e      	ldr	r0, [pc, #312]	; (80016ec <mc_lock_pins+0x154>)
 80015b4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015b6:	2408      	movs	r4, #8
 80015b8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ba:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015bc:	69d0      	ldr	r0, [r2, #28]
 80015be:	900c      	str	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015c0:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015c4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  (void) temp;
 80015c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ca:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015cc:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ce:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015d0:	69d0      	ldr	r0, [r2, #28]
 80015d2:	900b      	str	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015d4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015d8:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
  (void) temp;
 80015dc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015e0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015e2:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015e4:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015e6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80015ea:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  (void) temp;
 80015ee:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015f2:	f8df c104 	ldr.w	ip, [pc, #260]	; 80016f8 <mc_lock_pins+0x160>
 80015f6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015fa:	f44f 7e80 	mov.w	lr, #256	; 0x100
 80015fe:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001602:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001606:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800160a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 800160e:	f44f 7e00 	mov.w	lr, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001612:	f44f 3c81 	mov.w	ip, #66048	; 0x10200
  (void) temp;
 8001616:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800161a:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800161e:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001622:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001626:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800162a:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 800162e:	f8dd e020 	ldr.w	lr, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001632:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80016fc <mc_lock_pins+0x164>
 8001636:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800163a:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800163e:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001642:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001646:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800164a:	f8cd c01c 	str.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800164e:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001652:	f44f 3ca0 	mov.w	ip, #81920	; 0x14000
  (void) temp;
 8001656:	f8dd 801c 	ldr.w	r8, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800165a:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800165e:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001662:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001666:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800166a:	f8cd c018 	str.w	ip, [sp, #24]
  (void) temp;
 800166e:	f8dd c018 	ldr.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001672:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001674:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001676:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001678:	69dc      	ldr	r4, [r3, #28]
 800167a:	9405      	str	r4, [sp, #20]
  (void) temp;
 800167c:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800167e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001680:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001682:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001684:	69d0      	ldr	r0, [r2, #28]
 8001686:	9004      	str	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001688:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800168c:	f44f 3090 	mov.w	r0, #73728	; 0x12000
  (void) temp;
 8001690:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001692:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001694:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001696:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001698:	69d0      	ldr	r0, [r2, #28]
 800169a:	9003      	str	r0, [sp, #12]
  (void) temp;
 800169c:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <mc_lock_pins+0x158>)
 80016a0:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016a4:	2420      	movs	r4, #32
 80016a6:	f8c2 441c 	str.w	r4, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016aa:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 80016ae:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
 80016b2:	9002      	str	r0, [sp, #8]
  (void) temp;
 80016b4:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <mc_lock_pins+0x15c>)
 80016b8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016ba:	2402      	movs	r4, #2
 80016bc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016be:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	9301      	str	r3, [sp, #4]
  (void) temp;
 80016c4:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016c6:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016ca:	f8c2 541c 	str.w	r5, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ce:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  temp = READ_REG(GPIOx->LCKR);
 80016d2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80016d6:	9300      	str	r3, [sp, #0]
  (void) temp;
 80016d8:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 80016da:	b00e      	add	sp, #56	; 0x38
 80016dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016e0:	40020000 	.word	0x40020000
 80016e4:	00010010 	.word	0x00010010
 80016e8:	40020400 	.word	0x40020400
 80016ec:	00010008 	.word	0x00010008
 80016f0:	00010020 	.word	0x00010020
 80016f4:	00010002 	.word	0x00010002
 80016f8:	00010100 	.word	0x00010100
 80016fc:	00010040 	.word	0x00010040

08001700 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001704:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001706:	2700      	movs	r7, #0
{
 8001708:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 800170a:	094a      	lsrs	r2, r1, #5
{
 800170c:	460c      	mov	r4, r1
 800170e:	4699      	mov	r9, r3
  bool bNoError = false; // Default is error
 8001710:	f88d 7009 	strb.w	r7, [sp, #9]
{
 8001714:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 8001716:	d123      	bne.n	8001760 <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001718:	2912      	cmp	r1, #18
 800171a:	d814      	bhi.n	8001746 <MCP_ReceivedFrame+0x46>
 800171c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001720:	00580016 	.word	0x00580016
 8001724:	017c00ea 	.word	0x017c00ea
 8001728:	00130013 	.word	0x00130013
 800172c:	01b30186 	.word	0x01b30186
 8001730:	01fb01c8 	.word	0x01fb01c8
 8001734:	022e021d 	.word	0x022e021d
 8001738:	02620245 	.word	0x02620245
 800173c:	00130013 	.word	0x00130013
 8001740:	00130013 	.word	0x00130013
 8001744:	0016      	.short	0x0016
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001746:	2301      	movs	r3, #1
 8001748:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800174c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001750:	2301      	movs	r3, #1
 8001752:	f10d 020e 	add.w	r2, sp, #14
 8001756:	21ff      	movs	r1, #255	; 0xff
 8001758:	47a0      	blx	r4
    }
  }
}
 800175a:	b00d      	add	sp, #52	; 0x34
 800175c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001760:	f102 38ff 	add.w	r8, r2, #4294967295
 8001764:	4642      	mov	r2, r8
 8001766:	4639      	mov	r1, r7
 8001768:	f001 f852 	bl	8002810 <UI_SetReg>
 800176c:	b300      	cbz	r0, 80017b0 <MCP_ReceivedFrame+0xb0>
      if (pHandle->pDAC)
 800176e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001772:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001776:	b118      	cbz	r0, 8001780 <MCP_ReceivedFrame+0x80>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001778:	4642      	mov	r2, r8
 800177a:	4639      	mov	r1, r7
 800177c:	f001 f848 	bl	8002810 <UI_SetReg>
  switch (Code)
 8001780:	2c12      	cmp	r4, #18
 8001782:	f200 82de 	bhi.w	8001d42 <MCP_ReceivedFrame+0x642>
 8001786:	e8df f014 	tbh	[pc, r4, lsl #1]
 800178a:	01c3      	.short	0x01c3
 800178c:	00b50023 	.word	0x00b50023
 8001790:	02dc0147 	.word	0x02dc0147
 8001794:	015102dc 	.word	0x015102dc
 8001798:	0193017e 	.word	0x0193017e
 800179c:	01e801c6 	.word	0x01e801c6
 80017a0:	021001f9 	.word	0x021001f9
 80017a4:	02dc022d 	.word	0x02dc022d
 80017a8:	02dc02dc 	.word	0x02dc02dc
 80017ac:	01c302dc 	.word	0x01c302dc
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80017b0:	230b      	movs	r3, #11
 80017b2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80017b6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d0c6      	beq.n	800174c <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80017be:	2300      	movs	r3, #0
 80017c0:	461a      	mov	r2, r3
 80017c2:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80017c6:	21f0      	movs	r1, #240	; 0xf0
 80017c8:	47a0      	blx	r4
}
 80017ca:	b00d      	add	sp, #52	; 0x34
 80017cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80017d0:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80017d2:	2305      	movs	r3, #5
 80017d4:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80017d8:	2988      	cmp	r1, #136	; 0x88
 80017da:	f200 82b8 	bhi.w	8001d4e <MCP_ReceivedFrame+0x64e>
 80017de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80017e2:	02a1      	.short	0x02a1
 80017e4:	02b602b6 	.word	0x02b602b6
 80017e8:	02b6029a 	.word	0x02b6029a
 80017ec:	02900290 	.word	0x02900290
 80017f0:	02900290 	.word	0x02900290
 80017f4:	02900290 	.word	0x02900290
 80017f8:	02900290 	.word	0x02900290
 80017fc:	02900290 	.word	0x02900290
 8001800:	02800290 	.word	0x02800290
 8001804:	02b60280 	.word	0x02b60280
 8001808:	029002b6 	.word	0x029002b6
 800180c:	02900290 	.word	0x02900290
 8001810:	02900290 	.word	0x02900290
 8001814:	02b602b6 	.word	0x02b602b6
 8001818:	027602b6 	.word	0x027602b6
 800181c:	02b6026c 	.word	0x02b6026c
 8001820:	02b602b6 	.word	0x02b602b6
 8001824:	02b602b6 	.word	0x02b602b6
 8001828:	02b602b6 	.word	0x02b602b6
 800182c:	02b602b6 	.word	0x02b602b6
 8001830:	02b602b6 	.word	0x02b602b6
 8001834:	02b602b6 	.word	0x02b602b6
 8001838:	02b602b6 	.word	0x02b602b6
 800183c:	02b602b6 	.word	0x02b602b6
 8001840:	02b602b6 	.word	0x02b602b6
 8001844:	02b602b6 	.word	0x02b602b6
 8001848:	02b602b6 	.word	0x02b602b6
 800184c:	02b602b6 	.word	0x02b602b6
 8001850:	02b602b6 	.word	0x02b602b6
 8001854:	02b602b6 	.word	0x02b602b6
 8001858:	02b602b6 	.word	0x02b602b6
 800185c:	02b602b6 	.word	0x02b602b6
 8001860:	02b602b6 	.word	0x02b602b6
 8001864:	02b60290 	.word	0x02b60290
 8001868:	02b602b6 	.word	0x02b602b6
 800186c:	028002b6 	.word	0x028002b6
 8001870:	02800280 	.word	0x02800280
 8001874:	02b602b6 	.word	0x02b602b6
 8001878:	02b602b6 	.word	0x02b602b6
 800187c:	02b602b6 	.word	0x02b602b6
 8001880:	02b60290 	.word	0x02b60290
 8001884:	02b602b6 	.word	0x02b602b6
 8001888:	02900290 	.word	0x02900290
 800188c:	02900290 	.word	0x02900290
 8001890:	02900290 	.word	0x02900290
 8001894:	02b60290 	.word	0x02b60290
 8001898:	02b60280 	.word	0x02b60280
 800189c:	02b602b6 	.word	0x02b602b6
 80018a0:	02b602b6 	.word	0x02b602b6
 80018a4:	02b60290 	.word	0x02b60290
 80018a8:	029002b6 	.word	0x029002b6
 80018ac:	02b60290 	.word	0x02b60290
 80018b0:	02b602b6 	.word	0x02b602b6
 80018b4:	02b602b6 	.word	0x02b602b6
 80018b8:	02b602b6 	.word	0x02b602b6
 80018bc:	02b602b6 	.word	0x02b602b6
 80018c0:	02b602b6 	.word	0x02b602b6
 80018c4:	02b602b6 	.word	0x02b602b6
 80018c8:	029a02b6 	.word	0x029a02b6
 80018cc:	02800280 	.word	0x02800280
 80018d0:	02800280 	.word	0x02800280
 80018d4:	02b60280 	.word	0x02b60280
 80018d8:	02b602b6 	.word	0x02b602b6
 80018dc:	02800280 	.word	0x02800280
 80018e0:	02b602b6 	.word	0x02b602b6
 80018e4:	02b602b6 	.word	0x02b602b6
 80018e8:	02b602b6 	.word	0x02b602b6
 80018ec:	029002b6 	.word	0x029002b6
 80018f0:	02900290 	.word	0x02900290
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80018f4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80018f6:	2303      	movs	r3, #3
 80018f8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80018fc:	2988      	cmp	r1, #136	; 0x88
 80018fe:	f200 8107 	bhi.w	8001b10 <MCP_ReceivedFrame+0x410>
 8001902:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001906:	0191      	.short	0x0191
 8001908:	0191017f 	.word	0x0191017f
 800190c:	017f0191 	.word	0x017f0191
 8001910:	01c801c8 	.word	0x01c801c8
 8001914:	01c801c8 	.word	0x01c801c8
 8001918:	01c801c8 	.word	0x01c801c8
 800191c:	01c801c8 	.word	0x01c801c8
 8001920:	01c801c8 	.word	0x01c801c8
 8001924:	01c801c8 	.word	0x01c801c8
 8001928:	01c801c8 	.word	0x01c801c8
 800192c:	01c801c8 	.word	0x01c801c8
 8001930:	01c801c8 	.word	0x01c801c8
 8001934:	01c801c8 	.word	0x01c801c8
 8001938:	01c801c8 	.word	0x01c801c8
 800193c:	01b701c8 	.word	0x01b701c8
 8001940:	017f01a3 	.word	0x017f01a3
 8001944:	01c801c8 	.word	0x01c801c8
 8001948:	019101c8 	.word	0x019101c8
 800194c:	01050105 	.word	0x01050105
 8001950:	01050105 	.word	0x01050105
 8001954:	01050105 	.word	0x01050105
 8001958:	01050105 	.word	0x01050105
 800195c:	01050105 	.word	0x01050105
 8001960:	01050105 	.word	0x01050105
 8001964:	01050105 	.word	0x01050105
 8001968:	01050105 	.word	0x01050105
 800196c:	01050105 	.word	0x01050105
 8001970:	01050105 	.word	0x01050105
 8001974:	01050105 	.word	0x01050105
 8001978:	01050105 	.word	0x01050105
 800197c:	01050105 	.word	0x01050105
 8001980:	01050105 	.word	0x01050105
 8001984:	01050105 	.word	0x01050105
 8001988:	010501c8 	.word	0x010501c8
 800198c:	01050105 	.word	0x01050105
 8001990:	017f0105 	.word	0x017f0105
 8001994:	017f017f 	.word	0x017f017f
 8001998:	01c801c8 	.word	0x01c801c8
 800199c:	01c801c8 	.word	0x01c801c8
 80019a0:	017f0191 	.word	0x017f0191
 80019a4:	01c801c8 	.word	0x01c801c8
 80019a8:	01c801c8 	.word	0x01c801c8
 80019ac:	01c801c8 	.word	0x01c801c8
 80019b0:	01c801c8 	.word	0x01c801c8
 80019b4:	01c801c8 	.word	0x01c801c8
 80019b8:	019101c8 	.word	0x019101c8
 80019bc:	0105017f 	.word	0x0105017f
 80019c0:	01c801c8 	.word	0x01c801c8
 80019c4:	01c801c8 	.word	0x01c801c8
 80019c8:	010501c8 	.word	0x010501c8
 80019cc:	01c80105 	.word	0x01c80105
 80019d0:	019101c8 	.word	0x019101c8
 80019d4:	017f0191 	.word	0x017f0191
 80019d8:	017f017f 	.word	0x017f017f
 80019dc:	017f017f 	.word	0x017f017f
 80019e0:	01c80191 	.word	0x01c80191
 80019e4:	017f01c8 	.word	0x017f01c8
 80019e8:	01c80105 	.word	0x01c80105
 80019ec:	019101c8 	.word	0x019101c8
 80019f0:	017f017f 	.word	0x017f017f
 80019f4:	017f017f 	.word	0x017f017f
 80019f8:	017f017f 	.word	0x017f017f
 80019fc:	017f017f 	.word	0x017f017f
 8001a00:	017f017f 	.word	0x017f017f
 8001a04:	0191017f 	.word	0x0191017f
 8001a08:	01910105 	.word	0x01910105
 8001a0c:	017f017f 	.word	0x017f017f
 8001a10:	01c8017f 	.word	0x01c8017f
 8001a14:	01c801c8 	.word	0x01c801c8
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001a18:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 8001a1a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001a1c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001a20:	4628      	mov	r0, r5
 8001a22:	f001 f865 	bl	8002af0 <UI_ExecCmd>
 8001a26:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a2a:	e6c6      	b.n	80017ba <MCP_ReceivedFrame+0xba>
 8001a2c:	ac04      	add	r4, sp, #16
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4620      	mov	r0, r4
 8001a32:	2220      	movs	r2, #32
 8001a34:	f005 f948 	bl	8006cc8 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a38:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 8001a3c:	f10d 0012 	add.w	r0, sp, #18
 8001a40:	1e71      	subs	r1, r6, #1
 8001a42:	2300      	movs	r3, #0
 8001a44:	e005      	b.n	8001a52 <MCP_ReceivedFrame+0x352>
 8001a46:	3301      	adds	r3, #1
 8001a48:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001a4a:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a4e:	f000 8182 	beq.w	8001d56 <MCP_ReceivedFrame+0x656>
 8001a52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001a56:	2a09      	cmp	r2, #9
 8001a58:	d1f5      	bne.n	8001a46 <MCP_ReceivedFrame+0x346>
 8001a5a:	1d5a      	adds	r2, r3, #5
 8001a5c:	1dd9      	adds	r1, r3, #7
 8001a5e:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a60:	5cb2      	ldrb	r2, [r6, r2]
 8001a62:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a66:	5c72      	ldrb	r2, [r6, r1]
 8001a68:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a6c:	5cf3      	ldrb	r3, [r6, r3]
 8001a6e:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a72:	4622      	mov	r2, r4
 8001a74:	2320      	movs	r3, #32
 8001a76:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a7a:	21f0      	movs	r1, #240	; 0xf0
 8001a7c:	47a0      	blx	r4
      bNoError = true;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f88d 3009 	strb.w	r3, [sp, #9]
 8001a84:	e69b      	b.n	80017be <MCP_ReceivedFrame+0xbe>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a86:	7877      	ldrb	r7, [r6, #1]
 8001a88:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a8a:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a8c:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a8e:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a90:	78f1      	ldrb	r1, [r6, #3]
 8001a92:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001a96:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a9a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a9e:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f001 f861 	bl	8002b6c <UI_ExecSpeedRamp>
 8001aaa:	f88d 0009 	strb.w	r0, [sp, #9]
 8001aae:	e684      	b.n	80017ba <MCP_ReceivedFrame+0xba>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001ab0:	f10d 030e 	add.w	r3, sp, #14
 8001ab4:	7831      	ldrb	r1, [r6, #0]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f10d 020a 	add.w	r2, sp, #10
 8001abc:	ab03      	add	r3, sp, #12
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f001 f870 	bl	8002ba4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001ac4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 8001ac8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001acc:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8001ad0:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001ad4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ad8:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001ada:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001adc:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001ade:	f363 0207 	bfi	r2, r3, #0, #8
 8001ae2:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001ae6:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 8001ae8:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001aec:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 8001aee:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001af2:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001af4:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001af6:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001af8:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001afc:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001b00:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001b04:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001b08:	2308      	movs	r3, #8
 8001b0a:	aa04      	add	r2, sp, #16
 8001b0c:	21f0      	movs	r1, #240	; 0xf0
 8001b0e:	47a0      	blx	r4
 8001b10:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001b14:	e651      	b.n	80017ba <MCP_ReceivedFrame+0xba>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b16:	78b1      	ldrb	r1, [r6, #2]
 8001b18:	7873      	ldrb	r3, [r6, #1]
 8001b1a:	78f2      	ldrb	r2, [r6, #3]
 8001b1c:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b1e:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001b20:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b22:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001b26:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b2a:	4a8d      	ldr	r2, [pc, #564]	; (8001d60 <MCP_ReceivedFrame+0x660>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b2c:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b2e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b32:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001b36:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b38:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b3c:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001b40:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001b42:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001b46:	7831      	ldrb	r1, [r6, #0]
 8001b48:	9000      	str	r0, [sp, #0]
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f001 f846 	bl	8002be0 <UI_SetRevupData>
 8001b54:	f88d 0009 	strb.w	r0, [sp, #9]
 8001b58:	e62f      	b.n	80017ba <MCP_ReceivedFrame+0xba>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001b5a:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001b5c:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001b5e:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001b60:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001b62:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001b66:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001b6a:	b212      	sxth	r2, r2
 8001b6c:	b209      	sxth	r1, r1
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f001 f850 	bl	8002c14 <UI_SetCurrentReferences>
      bNoError = true;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f88d 3009 	strb.w	r3, [sp, #9]
 8001b7a:	e620      	b.n	80017be <MCP_ReceivedFrame+0xbe>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b7c:	4c79      	ldr	r4, [pc, #484]	; (8001d64 <MCP_ReceivedFrame+0x664>)
      stepList.data = buffer;
 8001b7e:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001b80:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b82:	4621      	mov	r1, r4
 8001b84:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001b86:	f88d 9014 	strb.w	r9, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001b8a:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b8e:	f001 f84f 	bl	8002c30 <UI_GetMPInfo>
 8001b92:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001b96:	2800      	cmp	r0, #0
 8001b98:	f43f add8 	beq.w	800174c <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001b9c:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8001ba0:	7923      	ldrb	r3, [r4, #4]
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	21f0      	movs	r1, #240	; 0xf0
 8001ba6:	47b0      	blx	r6
 8001ba8:	e5d7      	b.n	800175a <MCP_ReceivedFrame+0x5a>
 8001baa:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8001bae:	ac04      	add	r4, sp, #16
 8001bb0:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	ae0c      	add	r6, sp, #48	; 0x30
 8001bb6:	e004      	b.n	8001bc2 <MCP_ReceivedFrame+0x4c2>
        outBuff[i] = pHandle->s_fwVer[i];
 8001bb8:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001bbc:	429e      	cmp	r6, r3
 8001bbe:	f43f af58 	beq.w	8001a72 <MCP_ReceivedFrame+0x372>
 8001bc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001bc6:	1b18      	subs	r0, r3, r4
 8001bc8:	b2c0      	uxtb	r0, r0
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	d1f4      	bne.n	8001bb8 <MCP_ReceivedFrame+0x4b8>
      for (; i < 32; i++)
 8001bce:	281f      	cmp	r0, #31
 8001bd0:	f63f af4f 	bhi.w	8001a72 <MCP_ReceivedFrame+0x372>
        outBuff[i] = 0;
 8001bd4:	f1c0 021f 	rsb	r2, r0, #31
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	3201      	adds	r2, #1
 8001bdc:	4420      	add	r0, r4
 8001bde:	f005 f873 	bl	8006cc8 <memset>
 8001be2:	e746      	b.n	8001a72 <MCP_ReceivedFrame+0x372>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001be4:	7970      	ldrb	r0, [r6, #5]
 8001be6:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001be8:	7873      	ldrb	r3, [r6, #1]
 8001bea:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001bec:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001bf0:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	b209      	sxth	r1, r1
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f000 ffc9 	bl	8002b90 <UI_ExecTorqueRamp>
 8001bfe:	f88d 0009 	strb.w	r0, [sp, #9]
 8001c02:	e5da      	b.n	80017ba <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001c04:	f10d 0209 	add.w	r2, sp, #9
 8001c08:	4628      	mov	r0, r5
 8001c0a:	f001 f825 	bl	8002c58 <UI_GetReg>
          if ( bNoError == true )
 8001c0e:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001c12:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f43f ad99 	beq.w	800174c <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001c1a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001c1e:	2304      	movs	r3, #4
 8001c20:	aa04      	add	r2, sp, #16
 8001c22:	21f0      	movs	r1, #240	; 0xf0
 8001c24:	47a0      	blx	r4
 8001c26:	e598      	b.n	800175a <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001c28:	f10d 0209 	add.w	r2, sp, #9
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f001 f813 	bl	8002c58 <UI_GetReg>
           if ( bNoError == true )
 8001c32:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001c36:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f43f ad87 	beq.w	800174c <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c3e:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001c42:	2301      	movs	r3, #1
 8001c44:	aa04      	add	r2, sp, #16
 8001c46:	21f0      	movs	r1, #240	; 0xf0
 8001c48:	47a0      	blx	r4
 8001c4a:	e586      	b.n	800175a <MCP_ReceivedFrame+0x5a>
          if (pHandle->pDAC)
 8001c4c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f43f af5d 	beq.w	8001b10 <MCP_ReceivedFrame+0x410>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001c56:	2101      	movs	r1, #1
 8001c58:	f000 fff8 	bl	8002c4c <UI_GetDAC>
 8001c5c:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c5e:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001c60:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c64:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001c66:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c68:	21f0      	movs	r1, #240	; 0xf0
 8001c6a:	47a0      	blx	r4
            bNoError = true;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f88d 3009 	strb.w	r3, [sp, #9]
 8001c72:	e5a4      	b.n	80017be <MCP_ReceivedFrame+0xbe>
          if (pHandle->pDAC)
 8001c74:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	f43f af49 	beq.w	8001b10 <MCP_ReceivedFrame+0x410>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f000 ffe4 	bl	8002c4c <UI_GetDAC>
 8001c84:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c86:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001c88:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c90:	21f0      	movs	r1, #240	; 0xf0
 8001c92:	47a0      	blx	r4
 8001c94:	e561      	b.n	800175a <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001c96:	f10d 0209 	add.w	r2, sp, #9
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f000 ffdc 	bl	8002c58 <UI_GetReg>
          if ( bNoError == true )
 8001ca0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ca4:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f43f ad50 	beq.w	800174c <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001cac:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	aa04      	add	r2, sp, #16
 8001cb4:	21f0      	movs	r1, #240	; 0xf0
 8001cb6:	47a0      	blx	r4
 8001cb8:	e54f      	b.n	800175a <MCP_ReceivedFrame+0x5a>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001cba:	7872      	ldrb	r2, [r6, #1]
 8001cbc:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	f000 ffbf 	bl	8002c44 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f88d 3009 	strb.w	r3, [sp, #9]
 8001ccc:	e577      	b.n	80017be <MCP_ReceivedFrame+0xbe>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001cce:	7872      	ldrb	r2, [r6, #1]
 8001cd0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f000 ffb5 	bl	8002c44 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f88d 3009 	strb.w	r3, [sp, #9]
 8001ce0:	e56d      	b.n	80017be <MCP_ReceivedFrame+0xbe>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001ce2:	78b4      	ldrb	r4, [r6, #2]
 8001ce4:	7873      	ldrb	r3, [r6, #1]
 8001ce6:	78f0      	ldrb	r0, [r6, #3]
 8001ce8:	7932      	ldrb	r2, [r6, #4]
 8001cea:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001cee:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001cf2:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f000 fd8a 	bl	8002810 <UI_SetReg>
 8001cfc:	f88d 0009 	strb.w	r0, [sp, #9]
 8001d00:	e55b      	b.n	80017ba <MCP_ReceivedFrame+0xba>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001d02:	78b2      	ldrb	r2, [r6, #2]
 8001d04:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001d06:	4628      	mov	r0, r5
 8001d08:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001d0c:	f000 fd80 	bl	8002810 <UI_SetReg>
 8001d10:	f88d 0009 	strb.w	r0, [sp, #9]
 8001d14:	e551      	b.n	80017ba <MCP_ReceivedFrame+0xba>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001d16:	7872      	ldrb	r2, [r6, #1]
 8001d18:	4628      	mov	r0, r5
 8001d1a:	f000 fd79 	bl	8002810 <UI_SetReg>
 8001d1e:	f88d 0009 	strb.w	r0, [sp, #9]
 8001d22:	e54a      	b.n	80017ba <MCP_ReceivedFrame+0xba>
          int32_t wValue = (int32_t)(buffer[1]);
 8001d24:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001d26:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f000 fd6f 	bl	8002810 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001d32:	4622      	mov	r2, r4
 8001d34:	2100      	movs	r1, #0
 8001d36:	4628      	mov	r0, r5
 8001d38:	f000 fd6a 	bl	8002810 <UI_SetReg>
 8001d3c:	f88d 0009 	strb.w	r0, [sp, #9]
 8001d40:	e53b      	b.n	80017ba <MCP_ReceivedFrame+0xba>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001d48:	f88d 300e 	strb.w	r3, [sp, #14]
 8001d4c:	e535      	b.n	80017ba <MCP_ReceivedFrame+0xba>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f88d 300e 	strb.w	r3, [sp, #14]
 8001d54:	e6dc      	b.n	8001b10 <MCP_ReceivedFrame+0x410>
 8001d56:	2326      	movs	r3, #38	; 0x26
 8001d58:	2124      	movs	r1, #36	; 0x24
 8001d5a:	2222      	movs	r2, #34	; 0x22
 8001d5c:	e680      	b.n	8001a60 <MCP_ReceivedFrame+0x360>
 8001d5e:	bf00      	nop
 8001d60:	2aaaaaab 	.word	0x2aaaaaab
 8001d64:	20000790 	.word	0x20000790

08001d68 <MCP_WaitNextFrame>:
{
 8001d68:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001d6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8001d6c:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001d6e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001d70:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8001d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d80:	4718      	bx	r3
 8001d82:	bf00      	nop

08001d84 <MCP_Init>:
{
 8001d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	4604      	mov	r4, r0
 8001d8a:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 8001d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001d8e:	6301      	str	r1, [r0, #48]	; 0x30
  FCP_SetClient( pFCP, pHandle,
 8001d90:	4f0b      	ldr	r7, [pc, #44]	; (8001dc0 <MCP_Init+0x3c>)
  pHandle->pDAC = pDAC;
 8001d92:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 8001d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d98:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001d9c:	4608      	mov	r0, r1
{
 8001d9e:	4615      	mov	r5, r2
  FCP_SetClient( pFCP, pHandle,
 8001da0:	4621      	mov	r1, r4
 8001da2:	9700      	str	r7, [sp, #0]
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MCP_Init+0x40>)
{
 8001da6:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <MCP_Init+0x44>)
 8001daa:	f003 f86b 	bl	8004e84 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001dae:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001db2:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ffd7 	bl	8001d68 <MCP_WaitNextFrame>
}
 8001dba:	b003      	add	sp, #12
 8001dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	08001dcd 	.word	0x08001dcd
 8001dc4:	08001701 	.word	0x08001701
 8001dc8:	08001dd5 	.word	0x08001dd5

08001dcc <MCP_OnTimeOut>:
{
 8001dcc:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001dce:	f7ff ffcb 	bl	8001d68 <MCP_WaitNextFrame>
}
 8001dd2:	bd08      	pop	{r3, pc}

08001dd4 <MCP_SentFrame>:
{
 8001dd4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001dd6:	f7ff ffc7 	bl	8001d68 <MCP_WaitNextFrame>
}
 8001dda:	bd08      	pop	{r3, pc}

08001ddc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001ddc:	b530      	push	{r4, r5, lr}
 8001dde:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001de0:	f001 ff94 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001de6:	4d0c      	ldr	r5, [pc, #48]	; (8001e18 <MX_MotorControl_Init+0x3c>)
 8001de8:	4c0c      	ldr	r4, [pc, #48]	; (8001e1c <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001dea:	fba3 3000 	umull	r3, r0, r3, r0
 8001dee:	09c0      	lsrs	r0, r0, #7
 8001df0:	f001 fd60 	bl	80038b4 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001df4:	4629      	mov	r1, r5
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff f8b4 	bl	8000f64 <MCboot>
  mc_lock_pins();
 8001dfc:	f7ff fbcc 	bl	8001598 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_MotorControl_Init+0x44>)
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4622      	mov	r2, r4
 8001e06:	462b      	mov	r3, r5
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_MotorControl_Init+0x48>)
 8001e0c:	f000 fc3c 	bl	8002688 <UI_TaskInit>
}
 8001e10:	b003      	add	sp, #12
 8001e12:	bd30      	pop	{r4, r5, pc}
 8001e14:	10624dd3 	.word	0x10624dd3
 8001e18:	20000a00 	.word	0x20000a00
 8001e1c:	200009fc 	.word	0x200009fc
 8001e20:	08007734 	.word	0x08007734
 8001e24:	200006f4 	.word	0x200006f4

08001e28 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e28:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <RCM_RegisterRegConv+0x170>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
{
 8001e2c:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d079      	beq.n	8001f26 <RCM_RegisterRegConv+0xfe>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e32:	7919      	ldrb	r1, [r3, #4]
 8001e34:	7904      	ldrb	r4, [r0, #4]
 8001e36:	42a1      	cmp	r1, r4
 8001e38:	d01e      	beq.n	8001e78 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e3a:	6851      	ldr	r1, [r2, #4]
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	f000 8085 	beq.w	8001f4c <RCM_RegisterRegConv+0x124>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e42:	790d      	ldrb	r5, [r1, #4]
 8001e44:	42ac      	cmp	r4, r5
  uint8_t handle=255;
 8001e46:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e4a:	d073      	beq.n	8001f34 <RCM_RegisterRegConv+0x10c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e4c:	6895      	ldr	r5, [r2, #8]
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	f000 8093 	beq.w	8001f7a <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e54:	7929      	ldrb	r1, [r5, #4]
 8001e56:	42a1      	cmp	r1, r4
 8001e58:	d072      	beq.n	8001f40 <RCM_RegisterRegConv+0x118>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e5a:	68d1      	ldr	r1, [r2, #12]
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	f000 8087 	beq.w	8001f70 <RCM_RegisterRegConv+0x148>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e62:	790d      	ldrb	r5, [r1, #4]
 8001e64:	42a5      	cmp	r5, r4
 8001e66:	d07c      	beq.n	8001f62 <RCM_RegisterRegConv+0x13a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	bf88      	it	hi
 8001e6c:	23ff      	movhi	r3, #255	; 0xff
 8001e6e:	f240 8089 	bls.w	8001f84 <RCM_RegisterRegConv+0x15c>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bcf0      	pop	{r4, r5, r6, r7}
 8001e76:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6801      	ldr	r1, [r0, #0]
 8001e7c:	4299      	cmp	r1, r3
 8001e7e:	d1dc      	bne.n	8001e3a <RCM_RegisterRegConv+0x12>
  uint8_t i=0;
 8001e80:	2300      	movs	r3, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001e82:	688c      	ldr	r4, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001e84:	4d45      	ldr	r5, [pc, #276]	; (8001f9c <RCM_RegisterRegConv+0x174>)
      RCM_handle_array [handle] = regConv;
 8001e86:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001e90:	07e2      	lsls	r2, r4, #31
 8001e92:	d411      	bmi.n	8001eb8 <RCM_RegisterRegConv+0x90>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001e94:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001e96:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001e9a:	f022 0220 	bic.w	r2, r2, #32
 8001e9e:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001ea0:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001ea2:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001ea4:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eac:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001eae:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001eb0:	688a      	ldr	r2, [r1, #8]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001eb8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001eba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ebe:	62ca      	str	r2, [r1, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001ec0:	7902      	ldrb	r2, [r0, #4]
 8001ec2:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8001ec6:	2a09      	cmp	r2, #9
 8001ec8:	bf94      	ite	ls
 8001eca:	f042 7200 	orrls.w	r2, r2, #33554432	; 0x2000000
 8001ece:	3c1e      	subhi	r4, #30
 8001ed0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001ed8:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001edc:	fab7 f487 	clz	r4, r7
 8001ee0:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001ee4:	40e7      	lsrs	r7, r4
 8001ee6:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8001ee8:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001eec:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
 8001ef0:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001ef4:	fa94 f6a4 	rbit	r6, r4
 8001ef8:	fab6 f686 	clz	r6, r6
 8001efc:	fa94 f4a4 	rbit	r4, r4
 8001f00:	f04f 0c07 	mov.w	ip, #7
 8001f04:	fab4 f484 	clz	r4, r4
 8001f08:	fa22 f606 	lsr.w	r6, r2, r6
 8001f0c:	6880      	ldr	r0, [r0, #8]
 8001f0e:	40e2      	lsrs	r2, r4
 8001f10:	fa0c f606 	lsl.w	r6, ip, r6
 8001f14:	4090      	lsls	r0, r2
 8001f16:	ea25 0206 	bic.w	r2, r5, r6
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bcf0      	pop	{r4, r5, r6, r7}
 8001f24:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f26:	6851      	ldr	r1, [r2, #4]
 8001f28:	2900      	cmp	r1, #0
 8001f2a:	d02d      	beq.n	8001f88 <RCM_RegisterRegConv+0x160>
 8001f2c:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f2e:	790d      	ldrb	r5, [r1, #4]
 8001f30:	42ac      	cmp	r4, r5
 8001f32:	d18b      	bne.n	8001e4c <RCM_RegisterRegConv+0x24>
 8001f34:	680d      	ldr	r5, [r1, #0]
 8001f36:	6801      	ldr	r1, [r0, #0]
 8001f38:	428d      	cmp	r5, r1
 8001f3a:	d187      	bne.n	8001e4c <RCM_RegisterRegConv+0x24>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e7a0      	b.n	8001e82 <RCM_RegisterRegConv+0x5a>
 8001f40:	682d      	ldr	r5, [r5, #0]
 8001f42:	6801      	ldr	r1, [r0, #0]
 8001f44:	428d      	cmp	r5, r1
 8001f46:	d188      	bne.n	8001e5a <RCM_RegisterRegConv+0x32>
      i++;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e79a      	b.n	8001e82 <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f4c:	6895      	ldr	r5, [r2, #8]
      i++;
 8001f4e:	2301      	movs	r3, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f50:	2d00      	cmp	r5, #0
 8001f52:	f47f af7f 	bne.w	8001e54 <RCM_RegisterRegConv+0x2c>
 8001f56:	68d1      	ldr	r1, [r2, #12]
 8001f58:	b1a1      	cbz	r1, 8001f84 <RCM_RegisterRegConv+0x15c>
 8001f5a:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001f5c:	790d      	ldrb	r5, [r1, #4]
 8001f5e:	42a5      	cmp	r5, r4
 8001f60:	d182      	bne.n	8001e68 <RCM_RegisterRegConv+0x40>
 8001f62:	680c      	ldr	r4, [r1, #0]
 8001f64:	6801      	ldr	r1, [r0, #0]
 8001f66:	428c      	cmp	r4, r1
 8001f68:	f47f af7e 	bne.w	8001e68 <RCM_RegisterRegConv+0x40>
      i++;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e788      	b.n	8001e82 <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	f67f af79 	bls.w	8001e68 <RCM_RegisterRegConv+0x40>
 8001f76:	6801      	ldr	r1, [r0, #0]
 8001f78:	e7f8      	b.n	8001f6c <RCM_RegisterRegConv+0x144>
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf8c      	ite	hi
 8001f7e:	2302      	movhi	r3, #2
 8001f80:	2300      	movls	r3, #0
 8001f82:	e7e8      	b.n	8001f56 <RCM_RegisterRegConv+0x12e>
 8001f84:	6801      	ldr	r1, [r0, #0]
 8001f86:	e77c      	b.n	8001e82 <RCM_RegisterRegConv+0x5a>
 8001f88:	6895      	ldr	r5, [r2, #8]
 8001f8a:	b115      	cbz	r5, 8001f92 <RCM_RegisterRegConv+0x16a>
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	7904      	ldrb	r4, [r0, #4]
 8001f90:	e760      	b.n	8001e54 <RCM_RegisterRegConv+0x2c>
 8001f92:	462b      	mov	r3, r5
 8001f94:	e7df      	b.n	8001f56 <RCM_RegisterRegConv+0x12e>
 8001f96:	bf00      	nop
 8001f98:	20000a2c 	.word	0x20000a2c
 8001f9c:	20000a08 	.word	0x20000a08

08001fa0 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001fa0:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <RCM_ExecRegularConv+0x64>)
 8001fa4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001fa8:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001fb0:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001fb2:	bf8c      	ite	hi
 8001fb4:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001fb6:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001fba:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001fbe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001fc2:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001fc6:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001fca:	fab1 f181 	clz	r1, r1
 8001fce:	40cd      	lsrs	r5, r1
 8001fd0:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001fdc:	f020 001f 	bic.w	r0, r0, #31
 8001fe0:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001fe2:	0151      	lsls	r1, r2, #5
 8001fe4:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8001fe8:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001fec:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001fee:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001ff0:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001ff4:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001ff6:	079b      	lsls	r3, r3, #30
 8001ff8:	d5fc      	bpl.n	8001ff4 <RCM_ExecRegularConv+0x54>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001ffa:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001ffc:	bc30      	pop	{r4, r5}
 8001ffe:	b280      	uxth	r0, r0
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000a2c 	.word	0x20000a2c

08002008 <RCM_RequestUserConv>:
 * @return true if the regular conversion could be scheduled and false otherwise.
 */
bool RCM_RequestUserConv(uint8_t handle)
{
  bool retVal = false;
  if (RCM_UserConvState == RCM_USERCONV_IDLE)
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <RCM_RequestUserConv+0x18>)
 800200a:	7813      	ldrb	r3, [r2, #0]
 800200c:	b92b      	cbnz	r3, 800201a <RCM_RequestUserConv+0x12>
  {
    RCM_UserConvHandle = handle;
 800200e:	4905      	ldr	r1, [pc, #20]	; (8002024 <RCM_RequestUserConv+0x1c>)
    /* must be done last so that RCM_UserConvHandle already has the right value */
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8002010:	2301      	movs	r3, #1
    RCM_UserConvHandle = handle;
 8002012:	7008      	strb	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_REQUESTED;
 8002014:	7013      	strb	r3, [r2, #0]
    retVal = true;
 8002016:	4618      	mov	r0, r3
 8002018:	4770      	bx	lr
  bool retVal = false;
 800201a:	2000      	movs	r0, #0
  }
  return retVal;
}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000a28 	.word	0x20000a28
 8002024:	20000a04 	.word	0x20000a04

08002028 <RCM_GetUserConv>:
 * @retval uint16_t The converted value or 0xFFFF in case of conversion error.
 */
uint16_t RCM_GetUserConv(void)
{
  uint16_t hRetVal = 0xFFFFu;
  if (RCM_UserConvState == RCM_USERCONV_EOC)
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <RCM_GetUserConv+0x18>)
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	2a02      	cmp	r2, #2
 800202e:	d104      	bne.n	800203a <RCM_GetUserConv+0x12>
  {
    hRetVal = RCM_UserConvValue;
 8002030:	4904      	ldr	r1, [pc, #16]	; (8002044 <RCM_GetUserConv+0x1c>)
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8002032:	2200      	movs	r2, #0
    hRetVal = RCM_UserConvValue;
 8002034:	8808      	ldrh	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_IDLE;
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	4770      	bx	lr
  uint16_t hRetVal = 0xFFFFu;
 800203a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  }
  return hRetVal;
}
 800203e:	4770      	bx	lr
 8002040:	20000a28 	.word	0x20000a28
 8002044:	20000a3c 	.word	0x20000a3c

08002048 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002048:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800204a:	4c23      	ldr	r4, [pc, #140]	; (80020d8 <RCM_ExecUserConv+0x90>)
 800204c:	7823      	ldrb	r3, [r4, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d001      	beq.n	8002056 <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002052:	bcf0      	pop	{r4, r5, r6, r7}
 8002054:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002056:	4a21      	ldr	r2, [pc, #132]	; (80020dc <RCM_ExecUserConv+0x94>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <RCM_ExecUserConv+0x98>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800205a:	7810      	ldrb	r0, [r2, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800205c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002060:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002068:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800206a:	bf8c      	ite	hi
 800206c:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800206e:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8002072:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002076:	f44f 7140 	mov.w	r1, #768	; 0x300
 800207a:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800207e:	f44f 7700 	mov.w	r7, #512	; 0x200
 8002082:	fab1 f181 	clz	r1, r1
 8002086:	40cf      	lsrs	r7, r1
 8002088:	f102 062c 	add.w	r6, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8002094:	f025 051f 	bic.w	r5, r5, #31
 8002098:	432b      	orrs	r3, r5
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 800209a:	0151      	lsls	r1, r2, #5
 800209c:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 80020a0:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 80020a4:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80020a6:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 80020a8:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80020ac:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80020ae:	079b      	lsls	r3, r3, #30
 80020b0:	d5fc      	bpl.n	80020ac <RCM_ExecUserConv+0x64>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <RCM_ExecUserConv+0x9c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80020b4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80020b6:	4e0c      	ldr	r6, [pc, #48]	; (80020e8 <RCM_ExecUserConv+0xa0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80020b8:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 80020bc:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 80020be:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80020c0:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80020c2:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	d0c4      	beq.n	8002052 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80020c8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80020cc:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80020ce:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80020d0:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80020d2:	462b      	mov	r3, r5
}
 80020d4:	bcf0      	pop	{r4, r5, r6, r7}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80020d6:	4718      	bx	r3
 80020d8:	20000a28 	.word	0x20000a28
 80020dc:	20000a04 	.word	0x20000a04
 80020e0:	20000a2c 	.word	0x20000a2c
 80020e4:	20000a08 	.word	0x20000a08
 80020e8:	20000a3c 	.word	0x20000a3c

080020ec <RCM_GetUserConvState>:
 *
 * @retval The state of the last user-defined regular conversion.
 */
RCM_UserConvState_t RCM_GetUserConvState(void)
{
  return RCM_UserConvState;
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <RCM_GetUserConvState+0x8>)
}
 80020ee:	7818      	ldrb	r0, [r3, #0]
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000a28 	.word	0x20000a28

080020f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_MspInit+0x38>)
 80020fc:	2100      	movs	r1, #0
 80020fe:	9100      	str	r1, [sp, #0]
 8002100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
 8002108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800210a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800210e:	9200      	str	r2, [sp, #0]
 8002110:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	9101      	str	r1, [sp, #4]
 8002114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002116:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002126:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002128:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800212a:	f001 bb6d 	b.w	8003808 <HAL_NVIC_SetPriorityGrouping>
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002134:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	4a38      	ldr	r2, [pc, #224]	; (800221c <HAL_ADC_MspInit+0xe8>)
{
 800213a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800213e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002144:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002148:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 800214a:	d023      	beq.n	8002194 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800214c:	4a34      	ldr	r2, [pc, #208]	; (8002220 <HAL_ADC_MspInit+0xec>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d001      	beq.n	8002156 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002152:	b00d      	add	sp, #52	; 0x34
 8002154:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002156:	4b33      	ldr	r3, [pc, #204]	; (8002224 <HAL_ADC_MspInit+0xf0>)
 8002158:	9405      	str	r4, [sp, #20]
 800215a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
 8002164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002166:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800216a:	9205      	str	r2, [sp, #20]
 800216c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	9406      	str	r4, [sp, #24]
 8002170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002180:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002182:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002184:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	9c06      	ldr	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002188:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800218c:	f001 fbec 	bl	8003968 <HAL_GPIO_Init>
}
 8002190:	b00d      	add	sp, #52	; 0x34
 8002192:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_ADC_MspInit+0xf0>)
 8002196:	9401      	str	r4, [sp, #4]
 8002198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 800219a:	4823      	ldr	r0, [pc, #140]	; (8002228 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800219c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
 80021a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021a4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021a8:	9201      	str	r2, [sp, #4]
 80021aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	9402      	str	r4, [sp, #8]
 80021ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
 80021b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b8:	f002 0201 	and.w	r2, r2, #1
 80021bc:	9202      	str	r2, [sp, #8]
 80021be:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c0:	9403      	str	r4, [sp, #12]
 80021c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c4:	f042 0204 	orr.w	r2, r2, #4
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021cc:	f002 0204 	and.w	r2, r2, #4
 80021d0:	9203      	str	r2, [sp, #12]
 80021d2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	9404      	str	r4, [sp, #16]
 80021d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d8:	f042 0202 	orr.w	r2, r2, #2
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80021e8:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80021ea:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	e9cd 3507 	strd	r3, r5, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f001 fbb9 	bl	8003968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80021f6:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	a907      	add	r1, sp, #28
 80021fa:	480c      	ldr	r0, [pc, #48]	; (800222c <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 80021fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f001 fbb1 	bl	8003968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002206:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	a907      	add	r1, sp, #28
 800220a:	4809      	ldr	r0, [pc, #36]	; (8002230 <HAL_ADC_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800220c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f001 fba9 	bl	8003968 <HAL_GPIO_Init>
}
 8002216:	b00d      	add	sp, #52	; 0x34
 8002218:	bd30      	pop	{r4, r5, pc}
 800221a:	bf00      	nop
 800221c:	40012000 	.word	0x40012000
 8002220:	40012100 	.word	0x40012100
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020800 	.word	0x40020800
 8002230:	40020400 	.word	0x40020400

08002234 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002234:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002236:	6801      	ldr	r1, [r0, #0]
 8002238:	4a15      	ldr	r2, [pc, #84]	; (8002290 <HAL_DAC_MspInit+0x5c>)
{
 800223a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 800223e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002244:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002248:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 800224a:	d001      	beq.n	8002250 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800224c:	b008      	add	sp, #32
 800224e:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8002250:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002258:	480e      	ldr	r0, [pc, #56]	; (8002294 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800225a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800225e:	6411      	str	r1, [r2, #64]	; 0x40
 8002260:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002262:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8002266:	9101      	str	r1, [sp, #4]
 8002268:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6313      	str	r3, [r2, #48]	; 0x30
 8002274:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH2_Pin;
 800227c:	2220      	movs	r2, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227e:	2303      	movs	r3, #3
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002280:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002284:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(DBG_DAC_CH2_GPIO_Port, &GPIO_InitStruct);
 8002288:	f001 fb6e 	bl	8003968 <HAL_GPIO_Init>
}
 800228c:	b008      	add	sp, #32
 800228e:	bd10      	pop	{r4, pc}
 8002290:	40007400 	.word	0x40007400
 8002294:	40020000 	.word	0x40020000

08002298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002298:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	4a34      	ldr	r2, [pc, #208]	; (8002370 <HAL_TIM_Base_MspInit+0xd8>)
{
 800229e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 80022a2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80022a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80022ac:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 80022ae:	d03d      	beq.n	800232c <HAL_TIM_Base_MspInit+0x94>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d001      	beq.n	80022ba <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022b6:	b00a      	add	sp, #40	; 0x28
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ba:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80022be:	9402      	str	r4, [sp, #8]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	482c      	ldr	r0, [pc, #176]	; (8002374 <HAL_TIM_Base_MspInit+0xdc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022cc:	f002 0201 	and.w	r2, r2, #1
 80022d0:	9202      	str	r2, [sp, #8]
 80022d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	9403      	str	r4, [sp, #12]
 80022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d8:	f042 0202 	orr.w	r2, r2, #2
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e0:	f002 0202 	and.w	r2, r2, #2
 80022e4:	9203      	str	r2, [sp, #12]
 80022e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	9404      	str	r4, [sp, #16]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fc:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 80022fe:	f44f 6381 	mov.w	r3, #1032	; 0x408
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230a:	e9cd 5608 	strd	r5, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f001 fb2b 	bl	8003968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002316:	a905      	add	r1, sp, #20
 8002318:	4817      	ldr	r0, [pc, #92]	; (8002378 <HAL_TIM_Base_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800231c:	e9cd 5608 	strd	r5, r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002322:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002324:	f001 fb20 	bl	8003968 <HAL_GPIO_Init>
}
 8002328:	b00a      	add	sp, #40	; 0x28
 800232a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_TIM_Base_MspInit+0xe4>)
 800232e:	9400      	str	r4, [sp, #0]
 8002330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002332:	4811      	ldr	r0, [pc, #68]	; (8002378 <HAL_TIM_Base_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
 800233a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233c:	f002 0201 	and.w	r2, r2, #1
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	9401      	str	r4, [sp, #4]
 8002346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002356:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800235a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800235c:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002360:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002366:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002368:	f001 fafe 	bl	8003968 <HAL_GPIO_Init>
}
 800236c:	b00a      	add	sp, #40	; 0x28
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	40010000 	.word	0x40010000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020000 	.word	0x40020000
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002380:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002382:	6801      	ldr	r1, [r0, #0]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_TIM_MspPostInit+0x7c>)
{
 8002386:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800238a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002390:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002394:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8002396:	d001      	beq.n	800239c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002398:	b009      	add	sp, #36	; 0x24
 800239a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	4816      	ldr	r0, [pc, #88]	; (8002400 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	f041 0102 	orr.w	r1, r1, #2
 80023aa:	6311      	str	r1, [r2, #48]	; 0x30
 80023ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023ae:	f001 0102 	and.w	r1, r1, #2
 80023b2:	9101      	str	r1, [sp, #4]
 80023b4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
 80023c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ca:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80023cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023d4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023da:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f001 fac3 	bl	8003968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80023e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	a903      	add	r1, sp, #12
 80023e8:	4806      	ldr	r0, [pc, #24]	; (8002404 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80023ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f001 fab8 	bl	8003968 <HAL_GPIO_Init>
}
 80023f8:	b009      	add	sp, #36	; 0x24
 80023fa:	bd30      	pop	{r4, r5, pc}
 80023fc:	40010000 	.word	0x40010000
 8002400:	40020400 	.word	0x40020400
 8002404:	40020000 	.word	0x40020000

08002408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002408:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800240a:	6801      	ldr	r1, [r0, #0]
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <HAL_UART_MspInit+0x60>)
{
 800240e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002412:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002418:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800241c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800241e:	d001      	beq.n	8002424 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002420:	b009      	add	sp, #36	; 0x24
 8002422:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002424:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800242e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002432:	6411      	str	r1, [r2, #64]	; 0x40
 8002434:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002436:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800243a:	9101      	str	r1, [sp, #4]
 800243c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	9302      	str	r3, [sp, #8]
 8002440:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002452:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002456:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002458:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f001 fa82 	bl	8003968 <HAL_GPIO_Init>
}
 8002464:	b009      	add	sp, #36	; 0x24
 8002466:	bd30      	pop	{r4, r5, pc}
 8002468:	40004400 	.word	0x40004400
 800246c:	40020000 	.word	0x40020000

08002470 <ADC_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC_IRQHandler(void)
{
 8002470:	b508      	push	{r3, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <ADC_IRQHandler+0x34>)
 8002474:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002476:	0752      	lsls	r2, r2, #29
 8002478:	d40a      	bmi.n	8002490 <ADC_IRQHandler+0x20>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <ADC_IRQHandler+0x38>)
 800247c:	6813      	ldr	r3, [r2, #0]
 800247e:	f023 030c 	bic.w	r3, r3, #12
 8002482:	6013      	str	r3, [r2, #0]

    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8002484:	f7fe ff7e 	bl	8001384 <TSK_HighFrequencyTask>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 800248c:	f000 b98c 	b.w	80027a8 <UI_DACUpdate>
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f022 020c 	bic.w	r2, r2, #12
 8002496:	601a      	str	r2, [r3, #0]
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 8002498:	f7fe ff74 	bl	8001384 <TSK_HighFrequencyTask>
}
 800249c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_DACUpdate(TSK_HighFrequencyTask());  /*GUI, this section is present only if DAC is enabled*/
 80024a0:	f000 b982 	b.w	80027a8 <UI_DACUpdate>
 80024a4:	40012000 	.word	0x40012000
 80024a8:	40012200 	.word	0x40012200

080024ac <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80024b0:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80024b2:	f06f 0201 	mvn.w	r2, #1
 80024b6:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80024b8:	f003 baaa 	b.w	8005a10 <ICS_TIMx_UP_IRQHandler>
 80024bc:	20000350 	.word	0x20000350

080024c0 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80024c0:	4807      	ldr	r0, [pc, #28]	; (80024e0 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80024c2:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80024c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80024c6:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	0612      	lsls	r2, r2, #24
 80024cc:	d504      	bpl.n	80024d8 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80024ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d2:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 80024d4:	f003 fae6 	bl	8005aa4 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80024d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80024dc:	f7fe bf24 	b.w	8001328 <MC_Scheduler>
 80024e0:	20000350 	.word	0x20000350

080024e4 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80024e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80024e6:	4c0c      	ldr	r4, [pc, #48]	; (8002518 <TIM2_IRQHandler+0x34>)
 80024e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	07d1      	lsls	r1, r2, #31
 80024ee:	d40b      	bmi.n	8002508 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	0792      	lsls	r2, r2, #30
 80024f4:	d400      	bmi.n	80024f8 <TIM2_IRQHandler+0x14>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80024f6:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80024f8:	f06f 0202 	mvn.w	r2, #2
 80024fc:	611a      	str	r2, [r3, #16]
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80024fe:	4806      	ldr	r0, [pc, #24]	; (8002518 <TIM2_IRQHandler+0x34>)
}
 8002500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002504:	f002 be72 	b.w	80051ec <HALL_TIMx_CC_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002508:	f06f 0201 	mvn.w	r2, #1
 800250c:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 800250e:	4620      	mov	r0, r4
 8002510:	f003 f810 	bl	8005534 <HALL_TIMx_UP_IRQHandler>
 8002514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002516:	e7eb      	b.n	80024f0 <TIM2_IRQHandler+0xc>
 8002518:	200000f0 	.word	0x200000f0

0800251c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 800251c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800251e:	4c1d      	ldr	r4, [pc, #116]	; (8002594 <USART2_IRQHandler+0x78>)
 8002520:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	0691      	lsls	r1, r2, #26
{
 8002528:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800252a:	d41d      	bmi.n	8002568 <USART2_IRQHandler+0x4c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800252c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800252e:	0612      	lsls	r2, r2, #24
 8002530:	d414      	bmi.n	800255c <USART2_IRQHandler+0x40>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002532:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002534:	071b      	lsls	r3, r3, #28
 8002536:	d401      	bmi.n	800253c <USART2_IRQHandler+0x20>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002538:	b002      	add	sp, #8
 800253a:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 800253c:	4815      	ldr	r0, [pc, #84]	; (8002594 <USART2_IRQHandler+0x78>)
 800253e:	f004 f8ef 	bl	8006720 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002542:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800254a:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002550:	9b01      	ldr	r3, [sp, #4]
}
 8002552:	b002      	add	sp, #8
 8002554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002558:	f000 b936 	b.w	80027c8 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 800255c:	480d      	ldr	r0, [pc, #52]	; (8002594 <USART2_IRQHandler+0x78>)
 800255e:	f003 ffa9 	bl	80064b4 <UFCP_TX_IRQ_Handler>
 8002562:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002566:	e7e4      	b.n	8002532 <USART2_IRQHandler+0x16>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002568:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 800256a:	4620      	mov	r0, r4
 800256c:	b2c9      	uxtb	r1, r1
 800256e:	f004 f875 	bl	800665c <UFCP_RX_IRQ_Handler>
 8002572:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002574:	2b01      	cmp	r3, #1
 8002576:	d007      	beq.n	8002588 <USART2_IRQHandler+0x6c>
    if (retVal == 2)
 8002578:	2b02      	cmp	r3, #2
 800257a:	d002      	beq.n	8002582 <USART2_IRQHandler+0x66>
 800257c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002580:	e7d4      	b.n	800252c <USART2_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 8002582:	f000 f921 	bl	80027c8 <UI_SerialCommunicationTimeOutStop>
 8002586:	e7f9      	b.n	800257c <USART2_IRQHandler+0x60>
      UI_SerialCommunicationTimeOutStart();
 8002588:	f000 f924 	bl	80027d4 <UI_SerialCommunicationTimeOutStart>
 800258c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002590:	e7cc      	b.n	800252c <USART2_IRQHandler+0x10>
 8002592:	bf00      	nop
 8002594:	200005b8 	.word	0x200005b8

08002598 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002598:	b530      	push	{r4, r5, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	4c1c      	ldr	r4, [pc, #112]	; (8002610 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800259e:	f7fe ffeb 	bl	8001578 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80025a2:	4625      	mov	r5, r4
 80025a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80025a8:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80025aa:	0712      	lsls	r2, r2, #28
 80025ac:	d41d      	bmi.n	80025ea <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80025ae:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80025b0:	0610      	lsls	r0, r2, #24
 80025b2:	d40f      	bmi.n	80025d4 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80025b4:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80025b6:	0692      	lsls	r2, r2, #26
 80025b8:	d5f6      	bpl.n	80025a8 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80025ba:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80025bc:	4628      	mov	r0, r5
 80025be:	b2c9      	uxtb	r1, r1
 80025c0:	f004 f84c 	bl	800665c <UFCP_RX_IRQ_Handler>
 80025c4:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d01f      	beq.n	800260a <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d1ea      	bne.n	80025a4 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80025ce:	f000 f8fb 	bl	80027c8 <UI_SerialCommunicationTimeOutStop>
 80025d2:	e7e7      	b.n	80025a4 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80025d4:	4628      	mov	r0, r5
 80025d6:	f003 ff6d 	bl	80064b4 <UFCP_TX_IRQ_Handler>
 80025da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80025de:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80025e0:	0691      	lsls	r1, r2, #26
 80025e2:	d4ea      	bmi.n	80025ba <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80025e4:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80025e6:	0712      	lsls	r2, r2, #28
 80025e8:	d5e1      	bpl.n	80025ae <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80025ea:	4628      	mov	r0, r5
 80025ec:	f004 f898 	bl	8006720 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80025f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80025f8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80025fe:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002600:	f000 f8e2 	bl	80027c8 <UI_SerialCommunicationTimeOutStop>
 8002604:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002608:	e7d1      	b.n	80025ae <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 800260a:	f000 f8e3 	bl	80027d4 <UI_SerialCommunicationTimeOutStart>
 800260e:	e7c9      	b.n	80025a4 <HardFault_Handler+0xc>
 8002610:	200005b8 	.word	0x200005b8

08002614 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002614:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002616:	4c0a      	ldr	r4, [pc, #40]	; (8002640 <SysTick_Handler+0x2c>)
 8002618:	7823      	ldrb	r3, [r4, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d006      	beq.n	800262c <SysTick_Handler+0x18>
 800261e:	3301      	adds	r3, #1
 8002620:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002622:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002628:	f7fe bf96 	b.w	8001558 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800262c:	f000 fe8c 	bl	8003348 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002630:	f001 f95c 	bl	80038ec <HAL_SYSTICK_IRQHandler>
 8002634:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002636:	7023      	strb	r3, [r4, #0]
}
 8002638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800263c:	f7fe bf8c 	b.w	8001558 <MC_RunMotorControlTasks>
 8002640:	200006f8 	.word	0x200006f8

08002644 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002646:	4a0d      	ldr	r2, [pc, #52]	; (800267c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002648:	680b      	ldr	r3, [r1, #0]
{
 800264a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800264c:	4c0c      	ldr	r4, [pc, #48]	; (8002680 <_sbrk+0x3c>)
 800264e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002650:	b12b      	cbz	r3, 800265e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4418      	add	r0, r3
 8002654:	4290      	cmp	r0, r2
 8002656:	d807      	bhi.n	8002668 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002658:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <_sbrk+0x40>)
 8002660:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4418      	add	r0, r3
 8002664:	4290      	cmp	r0, r2
 8002666:	d9f7      	bls.n	8002658 <_sbrk+0x14>
    errno = ENOMEM;
 8002668:	f004 fb04 	bl	8006c74 <__errno>
 800266c:	230c      	movs	r3, #12
 800266e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd10      	pop	{r4, pc}
 8002678:	20000798 	.word	0x20000798
 800267c:	20020000 	.word	0x20020000
 8002680:	00000400 	.word	0x00000400
 8002684:	20000b18 	.word	0x20000b18

08002688 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268c:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 800268e:	4d2d      	ldr	r5, [pc, #180]	; (8002744 <UI_TaskInit+0xbc>)
{
 8002690:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002692:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 8002694:	462c      	mov	r4, r5
{
 8002696:	4682      	mov	sl, r0
 8002698:	460f      	mov	r7, r1
 800269a:	4690      	mov	r8, r2
 800269c:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 800269e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 80026a0:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 800275c <UI_TaskInit+0xd4>
 80026a4:	4e28      	ldr	r6, [pc, #160]	; (8002748 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 80026a6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8002760 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 80026aa:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 80026ae:	46f4      	mov	ip, lr
 80026b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80026be:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 80026c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80026c6:	464b      	mov	r3, r9
 80026c8:	4670      	mov	r0, lr
 80026ca:	4642      	mov	r2, r8
 80026cc:	4639      	mov	r1, r7
 80026ce:	f000 f887 	bl	80027e0 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80026d2:	6830      	ldr	r0, [r6, #0]
 80026d4:	f000 faae 	bl	8002c34 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 80026d8:	6830      	ldr	r0, [r6, #0]
 80026da:	2230      	movs	r2, #48	; 0x30
 80026dc:	2100      	movs	r1, #0
 80026de:	f000 fab1 	bl	8002c44 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 80026e2:	6830      	ldr	r0, [r6, #0]
 80026e4:	2230      	movs	r2, #48	; 0x30
 80026e6:	2101      	movs	r1, #1
 80026e8:	f000 faac 	bl	8002c44 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 80026ec:	46ae      	mov	lr, r5
 80026ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 80026f2:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002764 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 80026f6:	4665      	mov	r5, ip
 80026f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 8002704:	4c11      	ldr	r4, [pc, #68]	; (800274c <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 8002706:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 800270a:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 800270c:	f8c4 c000 	str.w	ip, [r4]
    UFCP_Init( & pUSART );
 8002710:	f003 fece 	bl	80064b0 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002714:	6832      	ldr	r2, [r6, #0]
 8002716:	9905      	ldr	r1, [sp, #20]
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <UI_TaskInit+0xc8>)
 800271a:	6820      	ldr	r0, [r4, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <UI_TaskInit+0xcc>)
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <UI_TaskInit+0xd0>)
 8002726:	4659      	mov	r1, fp
 8002728:	f7ff fb2c 	bl	8001d84 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002732:	464b      	mov	r3, r9
 8002734:	4642      	mov	r2, r8
 8002736:	4639      	mov	r1, r7

}
 8002738:	b007      	add	sp, #28
 800273a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800273e:	f000 b84f 	b.w	80027e0 <UI_Init>
 8002742:	bf00      	nop
 8002744:	20000588 	.word	0x20000588
 8002748:	200007a0 	.word	0x200007a0
 800274c:	200007a4 	.word	0x200007a4
 8002750:	0800673d 	.word	0x0800673d
 8002754:	08006515 	.word	0x08006515
 8002758:	08006539 	.word	0x08006539
 800275c:	200000b4 	.word	0x200000b4
 8002760:	200005b8 	.word	0x200005b8
 8002764:	20000a40 	.word	0x20000a40

08002768 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <UI_Scheduler+0x34>)
 800276a:	8813      	ldrh	r3, [r2, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	b11b      	cbz	r3, 8002778 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002770:	8813      	ldrh	r3, [r2, #0]
 8002772:	3b01      	subs	r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <UI_Scheduler+0x38>)
 800277a:	8813      	ldrh	r3, [r2, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d903      	bls.n	8002788 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 8002780:	8813      	ldrh	r3, [r2, #0]
 8002782:	3b01      	subs	r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <UI_Scheduler+0x3c>)
 800278a:	8813      	ldrh	r3, [r2, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d903      	bls.n	8002798 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 8002790:	8813      	ldrh	r3, [r2, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	8013      	strh	r3, [r2, #0]
  }
}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000079e 	.word	0x2000079e
 80027a0:	2000079c 	.word	0x2000079c
 80027a4:	200006fa 	.word	0x200006fa

080027a8 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80027a8:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80027aa:	4c06      	ldr	r4, [pc, #24]	; (80027c4 <UI_DACUpdate+0x1c>)
{
 80027ac:	4605      	mov	r5, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	f000 f82a 	bl	8002808 <UI_GetSelectedMC>
 80027b4:	42a8      	cmp	r0, r5
 80027b6:	d000      	beq.n	80027ba <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80027ba:	6820      	ldr	r0, [r4, #0]
}
 80027bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80027c0:	f000 ba3c 	b.w	8002c3c <UI_DACExec>
 80027c4:	200007a0 	.word	0x200007a0

080027c8 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <UI_SerialCommunicationTimeOutStop+0x8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
}
 80027ce:	4770      	bx	lr
 80027d0:	2000079c 	.word	0x2000079c

080027d4 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <UI_SerialCommunicationTimeOutStart+0x8>)
 80027d6:	224f      	movs	r2, #79	; 0x4f
 80027d8:	801a      	strh	r2, [r3, #0]
}
 80027da:	4770      	bx	lr
 80027dc:	2000079c 	.word	0x2000079c

080027e0 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80027e0:	b430      	push	{r4, r5}
 80027e2:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80027e4:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 80027e6:	2500      	movs	r5, #0
 80027e8:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->bDriveNum = bMCNum;
 80027ec:	7701      	strb	r1, [r0, #28]
  pHandle->pMCT = pMCT;
 80027ee:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 80027f2:	bc30      	pop	{r4, r5}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80027f8:	7f03      	ldrb	r3, [r0, #28]
 80027fa:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80027fc:	bf86      	itte	hi
 80027fe:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002802:	2001      	movhi	r0, #1
    retVal = false;
 8002804:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002806:	4770      	bx	lr

08002808 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002808:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002810:	b530      	push	{r4, r5, lr}
 8002812:	4614      	mov	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002814:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002818:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800281c:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800281e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002826:	295b      	cmp	r1, #91	; 0x5b
 8002828:	f200 8139 	bhi.w	8002a9e <UI_SetReg+0x28e>
 800282c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002830:	01370069 	.word	0x01370069
 8002834:	006d0137 	.word	0x006d0137
 8002838:	00770137 	.word	0x00770137
 800283c:	0083007d 	.word	0x0083007d
 8002840:	00950089 	.word	0x00950089
 8002844:	00a1009b 	.word	0x00a1009b
 8002848:	00b300a7 	.word	0x00b300a7
 800284c:	00bf00b9 	.word	0x00bf00b9
 8002850:	00df00c5 	.word	0x00df00c5
 8002854:	01370137 	.word	0x01370137
 8002858:	011500f9 	.word	0x011500f9
 800285c:	01370137 	.word	0x01370137
 8002860:	01370137 	.word	0x01370137
 8002864:	01370137 	.word	0x01370137
 8002868:	01370137 	.word	0x01370137
 800286c:	01370137 	.word	0x01370137
 8002870:	01370137 	.word	0x01370137
 8002874:	01370137 	.word	0x01370137
 8002878:	01370137 	.word	0x01370137
 800287c:	01370137 	.word	0x01370137
 8002880:	01370137 	.word	0x01370137
 8002884:	01370137 	.word	0x01370137
 8002888:	01370137 	.word	0x01370137
 800288c:	01370137 	.word	0x01370137
 8002890:	01370137 	.word	0x01370137
 8002894:	01370137 	.word	0x01370137
 8002898:	01370137 	.word	0x01370137
 800289c:	01370137 	.word	0x01370137
 80028a0:	01370137 	.word	0x01370137
 80028a4:	01370137 	.word	0x01370137
 80028a8:	01370137 	.word	0x01370137
 80028ac:	01370137 	.word	0x01370137
 80028b0:	01310137 	.word	0x01310137
 80028b4:	01370137 	.word	0x01370137
 80028b8:	01370137 	.word	0x01370137
 80028bc:	01370137 	.word	0x01370137
 80028c0:	01370137 	.word	0x01370137
 80028c4:	01370137 	.word	0x01370137
 80028c8:	01370137 	.word	0x01370137
 80028cc:	01370137 	.word	0x01370137
 80028d0:	01370137 	.word	0x01370137
 80028d4:	01370137 	.word	0x01370137
 80028d8:	01370137 	.word	0x01370137
 80028dc:	01370137 	.word	0x01370137
 80028e0:	01370137 	.word	0x01370137
 80028e4:	005c0137 	.word	0x005c0137
    }
    break;

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80028e8:	4980      	ldr	r1, [pc, #512]	; (8002aec <UI_SetReg+0x2dc>)
 80028ea:	fb81 3104 	smull	r3, r1, r1, r4
 80028ee:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 80028f2:	4628      	mov	r0, r5
 80028f4:	b209      	sxth	r1, r1
 80028f6:	2200      	movs	r2, #0
 80028f8:	f7fe f958 	bl	8000bac <MCI_ExecSpeedRamp>
  bool retVal = true;
 80028fc:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 80028fe:	b003      	add	sp, #12
 8002900:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002902:	b2e1      	uxtb	r1, r4
 8002904:	f7ff ff78 	bl	80027f8 <UI_SelectMC>
    break;
 8002908:	e7f9      	b.n	80028fe <UI_SetReg+0xee>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800290a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800290e:	f000 80d8 	beq.w	8002ac2 <UI_SetReg+0x2b2>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002912:	2c01      	cmp	r4, #1
 8002914:	f000 80df 	beq.w	8002ad6 <UI_SetReg+0x2c6>
  bool retVal = true;
 8002918:	2001      	movs	r0, #1
}
 800291a:	b003      	add	sp, #12
 800291c:	bd30      	pop	{r4, r5, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800291e:	6810      	ldr	r0, [r2, #0]
 8002920:	b221      	sxth	r1, r4
 8002922:	f003 f973 	bl	8005c0c <PID_SetKP>
  bool retVal = true;
 8002926:	2001      	movs	r0, #1
    break;
 8002928:	e7e9      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800292a:	6810      	ldr	r0, [r2, #0]
 800292c:	b221      	sxth	r1, r4
 800292e:	f003 f96f 	bl	8005c10 <PID_SetKI>
  bool retVal = true;
 8002932:	2001      	movs	r0, #1
    break;
 8002934:	e7e3      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002936:	6810      	ldr	r0, [r2, #0]
 8002938:	b221      	sxth	r1, r4
 800293a:	f003 f979 	bl	8005c30 <PID_SetKD>
  bool retVal = true;
 800293e:	2001      	movs	r0, #1
    break;
 8002940:	e7dd      	b.n	80028fe <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 8002942:	4628      	mov	r0, r5
 8002944:	f7fe f9da 	bl	8000cfc <MCI_GetIqdref>
 8002948:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 800294a:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800294e:	4628      	mov	r0, r5
 8002950:	9901      	ldr	r1, [sp, #4]
 8002952:	f7fe f93f 	bl	8000bd4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002956:	2001      	movs	r0, #1
    break;
 8002958:	e7d1      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 800295a:	6850      	ldr	r0, [r2, #4]
 800295c:	b221      	sxth	r1, r4
 800295e:	f003 f955 	bl	8005c0c <PID_SetKP>
  bool retVal = true;
 8002962:	2001      	movs	r0, #1
    break;
 8002964:	e7cb      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002966:	6850      	ldr	r0, [r2, #4]
 8002968:	b221      	sxth	r1, r4
 800296a:	f003 f951 	bl	8005c10 <PID_SetKI>
  bool retVal = true;
 800296e:	2001      	movs	r0, #1
    break;
 8002970:	e7c5      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002972:	6850      	ldr	r0, [r2, #4]
 8002974:	b221      	sxth	r1, r4
 8002976:	f003 f95b 	bl	8005c30 <PID_SetKD>
  bool retVal = true;
 800297a:	2001      	movs	r0, #1
    break;
 800297c:	e7bf      	b.n	80028fe <UI_SetReg+0xee>
      currComp = MCI_GetIqdref(pMCI);
 800297e:	4628      	mov	r0, r5
 8002980:	f7fe f9bc 	bl	8000cfc <MCI_GetIqdref>
 8002984:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002986:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 800298a:	4628      	mov	r0, r5
 800298c:	9901      	ldr	r1, [sp, #4]
 800298e:	f7fe f921 	bl	8000bd4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002992:	2001      	movs	r0, #1
    break;
 8002994:	e7b3      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002996:	6890      	ldr	r0, [r2, #8]
 8002998:	b221      	sxth	r1, r4
 800299a:	f003 f937 	bl	8005c0c <PID_SetKP>
  bool retVal = true;
 800299e:	2001      	movs	r0, #1
    break;
 80029a0:	e7ad      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80029a2:	6890      	ldr	r0, [r2, #8]
 80029a4:	b221      	sxth	r1, r4
 80029a6:	f003 f933 	bl	8005c10 <PID_SetKI>
  bool retVal = true;
 80029aa:	2001      	movs	r0, #1
    break;
 80029ac:	e7a7      	b.n	80028fe <UI_SetReg+0xee>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80029ae:	6890      	ldr	r0, [r2, #8]
 80029b0:	b221      	sxth	r1, r4
 80029b2:	f003 f93d 	bl	8005c30 <PID_SetKD>
  bool retVal = true;
 80029b6:	2001      	movs	r0, #1
    break;
 80029b8:	e7a1      	b.n	80028fe <UI_SetReg+0xee>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029ba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80029bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029c0:	0f19      	lsrs	r1, r3, #28
 80029c2:	2909      	cmp	r1, #9
 80029c4:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80029c8:	d06f      	beq.n	8002aaa <UI_SetReg+0x29a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d1a4      	bne.n	8002918 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 80029ce:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d0a1      	beq.n	8002918 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80029d4:	aa01      	add	r2, sp, #4
 80029d6:	f10d 0102 	add.w	r1, sp, #2
 80029da:	4628      	mov	r0, r5
 80029dc:	f004 f91a 	bl	8006c14 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 80029e0:	b221      	sxth	r1, r4
 80029e2:	4628      	mov	r0, r5
 80029e4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80029e8:	f004 f91c 	bl	8006c24 <STO_PLL_SetObserverGains>
 80029ec:	e794      	b.n	8002918 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029ee:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80029f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029f4:	0f19      	lsrs	r1, r3, #28
 80029f6:	2909      	cmp	r1, #9
 80029f8:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80029fc:	d051      	beq.n	8002aa2 <UI_SetReg+0x292>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	d18a      	bne.n	8002918 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002a02:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002a04:	2d00      	cmp	r5, #0
 8002a06:	d087      	beq.n	8002918 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002a08:	aa01      	add	r2, sp, #4
 8002a0a:	f10d 0102 	add.w	r1, sp, #2
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f004 f900 	bl	8006c14 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002a14:	b222      	sxth	r2, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002a1c:	f004 f902 	bl	8006c24 <STO_PLL_SetObserverGains>
 8002a20:	e77a      	b.n	8002918 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a22:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a28:	0f19      	lsrs	r1, r3, #28
 8002a2a:	2909      	cmp	r1, #9
 8002a2c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002a30:	d03f      	beq.n	8002ab2 <UI_SetReg+0x2a2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	f47f af70 	bne.w	8002918 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002a38:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	f43f af6c 	beq.w	8002918 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002a40:	aa01      	add	r2, sp, #4
 8002a42:	f10d 0102 	add.w	r1, sp, #2
 8002a46:	4628      	mov	r0, r5
 8002a48:	f004 f8f0 	bl	8006c2c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002a4c:	b222      	sxth	r2, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002a54:	f004 f8f8 	bl	8006c48 <STO_SetPLLGains>
 8002a58:	e75e      	b.n	8002918 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a5a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a60:	0f19      	lsrs	r1, r3, #28
 8002a62:	2909      	cmp	r1, #9
 8002a64:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002a68:	d027      	beq.n	8002aba <UI_SetReg+0x2aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	f47f af54 	bne.w	8002918 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002a70:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	f43f af50 	beq.w	8002918 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002a78:	aa01      	add	r2, sp, #4
 8002a7a:	f10d 0102 	add.w	r1, sp, #2
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f004 f8d4 	bl	8006c2c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002a84:	b221      	sxth	r1, r4
 8002a86:	4628      	mov	r0, r5
 8002a88:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002a8c:	f004 f8dc 	bl	8006c48 <STO_SetPLLGains>
 8002a90:	e742      	b.n	8002918 <UI_SetReg+0x108>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002a92:	4628      	mov	r0, r5
 8002a94:	b221      	sxth	r1, r4
 8002a96:	f7fe f951 	bl	8000d3c <MCI_SetIdref>
  bool retVal = true;
 8002a9a:	2001      	movs	r0, #1
    break;
 8002a9c:	e72f      	b.n	80028fe <UI_SetReg+0xee>
    retVal = false;
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e72d      	b.n	80028fe <UI_SetReg+0xee>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aa2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002aa4:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aa6:	d1ad      	bne.n	8002a04 <UI_SetReg+0x1f4>
 8002aa8:	e7ab      	b.n	8002a02 <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aaa:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002aac:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aae:	d18f      	bne.n	80029d0 <UI_SetReg+0x1c0>
 8002ab0:	e78d      	b.n	80029ce <UI_SetReg+0x1be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ab2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ab4:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ab6:	d1c0      	bne.n	8002a3a <UI_SetReg+0x22a>
 8002ab8:	e7be      	b.n	8002a38 <UI_SetReg+0x228>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aba:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002abc:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002abe:	d1d8      	bne.n	8002a72 <UI_SetReg+0x262>
 8002ac0:	e7d6      	b.n	8002a70 <UI_SetReg+0x260>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7fe f936 	bl	8000d34 <MCI_GetTeref>
 8002ac8:	4622      	mov	r2, r4
 8002aca:	4601      	mov	r1, r0
 8002acc:	4628      	mov	r0, r5
 8002ace:	f7fe f875 	bl	8000bbc <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	e713      	b.n	80028fe <UI_SetReg+0xee>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f7fe f8f4 	bl	8000cc4 <MCI_GetMecSpeedRefUnit>
 8002adc:	2200      	movs	r2, #0
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7fe f863 	bl	8000bac <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	e709      	b.n	80028fe <UI_SetReg+0xee>
 8002aea:	bf00      	nop
 8002aec:	2aaaaaab 	.word	0x2aaaaaab

08002af0 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002af0:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002af2:	6a03      	ldr	r3, [r0, #32]
 8002af4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8002af8:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002afa:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002afe:	290d      	cmp	r1, #13
 8002b00:	d82c      	bhi.n	8002b5c <UI_ExecCmd+0x6c>
 8002b02:	e8df f001 	tbb	[pc, r1]
 8002b06:	1217      	.short	0x1217
 8002b08:	0e0c0c07 	.word	0x0e0c0c07
 8002b0c:	2b21261c 	.word	0x2b21261c
 8002b10:	122b2b2b 	.word	0x122b2b2b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002b14:	4620      	mov	r0, r4
 8002b16:	f7fe f8bb 	bl	8000c90 <MCI_GetSTMState>
 8002b1a:	2806      	cmp	r0, #6
 8002b1c:	d020      	beq.n	8002b60 <UI_ExecCmd+0x70>
  bool retVal = true;
 8002b1e:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002b20:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7fe f8b4 	bl	8000c90 <MCI_GetSTMState>
 8002b28:	b120      	cbz	r0, 8002b34 <UI_ExecCmd+0x44>
        MCI_StopMotor(pMCI);
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7fe f86a 	bl	8000c04 <MCI_StopMotor>
  bool retVal = true;
 8002b30:	2001      	movs	r0, #1
}
 8002b32:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7fe f85b 	bl	8000bf0 <MCI_StartMotor>
  bool retVal = true;
 8002b3a:	2001      	movs	r0, #1
}
 8002b3c:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f864 	bl	8000c0c <MCI_FaultAcknowledged>
  bool retVal = true;
 8002b44:	2001      	movs	r0, #1
}
 8002b46:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7fe f8fb 	bl	8000d44 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002b4e:	2001      	movs	r0, #1
}
 8002b50:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7fe f85e 	bl	8000c14 <MCI_EncoderAlign>
  bool retVal = true;
 8002b58:	2001      	movs	r0, #1
}
 8002b5a:	bd10      	pop	{r4, pc}
    retVal = false;
 8002b5c:	2000      	movs	r0, #0
}
 8002b5e:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7fe f8a3 	bl	8000cac <MCI_StopRamp>
  bool retVal = true;
 8002b66:	2001      	movs	r0, #1
}
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	bf00      	nop

08002b6c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002b6c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b70:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002b74:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002b76:	fb83 c301 	smull	ip, r3, r3, r1
 8002b7a:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002b7e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002b82:	b209      	sxth	r1, r1
 8002b84:	f7fe f812 	bl	8000bac <MCI_ExecSpeedRamp>
  return true;
}
 8002b88:	2001      	movs	r0, #1
 8002b8a:	bd10      	pop	{r4, pc}
 8002b8c:	2aaaaaab 	.word	0x2aaaaaab

08002b90 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002b90:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b92:	6a03      	ldr	r3, [r0, #32]
 8002b94:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002b98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b9c:	f7fe f80e 	bl	8000bbc <MCI_ExecTorqueRamp>
  return true;
}
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	bd10      	pop	{r4, pc}

08002ba4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002ba6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002baa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002bac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002bb0:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002bb2:	b194      	cbz	r4, 8002bda <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	461e      	mov	r6, r3
 8002bb8:	4617      	mov	r7, r2
 8002bba:	460d      	mov	r5, r1
 8002bbc:	f003 fdd4 	bl	8006768 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002bc0:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002bc2:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f003 fdd5 	bl	8006774 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002bca:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002bcc:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f003 fdd8 	bl	8006784 <RUC_GetPhaseFinalTorque>
 8002bd4:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 8002bd6:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002bd8:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002bda:	4620      	mov	r0, r4
 8002bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bde:	bf00      	nop

08002be0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002be4:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002be8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002bea:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002bee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002bf2:	695c      	ldr	r4, [r3, #20]
{
 8002bf4:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f003 fda4 	bl	8006744 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002bfc:	463a      	mov	r2, r7
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4620      	mov	r0, r4
 8002c02:	f003 fda5 	bl	8006750 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002c06:	4620      	mov	r0, r4
 8002c08:	4632      	mov	r2, r6
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f003 fda6 	bl	800675c <RUC_SetPhaseFinalTorque>
  return true;
}
 8002c10:	2001      	movs	r0, #1
 8002c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c14 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002c14:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c16:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002c18:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c1c:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
  currComp.d = hIdRef;
 8002c20:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c24:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c28:	9901      	ldr	r1, [sp, #4]
}
 8002c2a:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c2c:	f7fd bfd2 	b.w	8000bd4 <MCI_SetCurrentReferences>

08002c30 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002c30:	2000      	movs	r0, #0
 8002c32:	4770      	bx	lr

08002c34 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002c34:	6943      	ldr	r3, [r0, #20]
 8002c36:	b103      	cbz	r3, 8002c3a <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002c38:	4718      	bx	r3
  }
}
 8002c3a:	4770      	bx	lr

08002c3c <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002c3c:	6983      	ldr	r3, [r0, #24]
 8002c3e:	b103      	cbz	r3, 8002c42 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002c40:	4718      	bx	r3
  }
}
 8002c42:	4770      	bx	lr

08002c44 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002c44:	6843      	ldr	r3, [r0, #4]
 8002c46:	b103      	cbz	r3, 8002c4a <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002c48:	4718      	bx	r3
  }
}
 8002c4a:	4770      	bx	lr

08002c4c <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002c4c:	6883      	ldr	r3, [r0, #8]
 8002c4e:	b103      	cbz	r3, 8002c52 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002c50:	4718      	bx	r3
  }
  return retVal;
}
 8002c52:	2089      	movs	r0, #137	; 0x89
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop

08002c58 <UI_GetReg>:
{
 8002c58:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c5a:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c5e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002c62:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c64:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c68:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 )
 8002c6c:	2a00      	cmp	r2, #0
 8002c6e:	f000 8089 	beq.w	8002d84 <UI_GetReg+0x12c>
    *success = true;
 8002c72:	2401      	movs	r4, #1
 8002c74:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 8002c76:	2981      	cmp	r1, #129	; 0x81
 8002c78:	f200 82bb 	bhi.w	80031f2 <UI_GetReg+0x59a>
 8002c7c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002c80:	01a1018a 	.word	0x01a1018a
 8002c84:	0199019d 	.word	0x0199019d
 8002c88:	01a90192 	.word	0x01a90192
 8002c8c:	01f901a5 	.word	0x01f901a5
 8002c90:	028e010e 	.word	0x028e010e
 8002c94:	0286028a 	.word	0x0286028a
 8002c98:	02800109 	.word	0x02800109
 8002c9c:	0278027c 	.word	0x0278027c
 8002ca0:	024b01fd 	.word	0x024b01fd
 8002ca4:	02b902b9 	.word	0x02b902b9
 8002ca8:	0229023c 	.word	0x0229023c
 8002cac:	02b902b9 	.word	0x02b902b9
 8002cb0:	022502b9 	.word	0x022502b9
 8002cb4:	025e0262 	.word	0x025e0262
 8002cb8:	02210266 	.word	0x02210266
 8002cbc:	02ad02b2 	.word	0x02ad02b2
 8002cc0:	02b902a8 	.word	0x02b902a8
 8002cc4:	029c02a1 	.word	0x029c02a1
 8002cc8:	02920297 	.word	0x02920297
 8002ccc:	02ad018d 	.word	0x02ad018d
 8002cd0:	010e02a8 	.word	0x010e02a8
 8002cd4:	020c0109 	.word	0x020c0109
 8002cd8:	01e601ef 	.word	0x01e601ef
 8002cdc:	00f801f4 	.word	0x00f801f4
 8002ce0:	01780211 	.word	0x01780211
 8002ce4:	01550167 	.word	0x01550167
 8002ce8:	01310143 	.word	0x01310143
 8002cec:	02b9011f 	.word	0x02b9011f
 8002cf0:	02b902b9 	.word	0x02b902b9
 8002cf4:	02b902b9 	.word	0x02b902b9
 8002cf8:	011902b9 	.word	0x011902b9
 8002cfc:	02710113 	.word	0x02710113
 8002d00:	0109026a 	.word	0x0109026a
 8002d04:	01ba01ce 	.word	0x01ba01ce
 8002d08:	02b902b9 	.word	0x02b902b9
 8002d0c:	02b902b9 	.word	0x02b902b9
 8002d10:	02b902b9 	.word	0x02b902b9
 8002d14:	02b902b9 	.word	0x02b902b9
 8002d18:	02b902b9 	.word	0x02b902b9
 8002d1c:	02b902b9 	.word	0x02b902b9
 8002d20:	02b902b9 	.word	0x02b902b9
 8002d24:	02b902b9 	.word	0x02b902b9
 8002d28:	02b902b9 	.word	0x02b902b9
 8002d2c:	02b902b9 	.word	0x02b902b9
 8002d30:	02b902b9 	.word	0x02b902b9
 8002d34:	01ad02b9 	.word	0x01ad02b9
 8002d38:	02b902b9 	.word	0x02b902b9
 8002d3c:	02b902b9 	.word	0x02b902b9
 8002d40:	02b902b9 	.word	0x02b902b9
 8002d44:	02b902b9 	.word	0x02b902b9
 8002d48:	02b902b9 	.word	0x02b902b9
 8002d4c:	02b902b9 	.word	0x02b902b9
 8002d50:	02b902b9 	.word	0x02b902b9
 8002d54:	02b902b9 	.word	0x02b902b9
 8002d58:	02b902b9 	.word	0x02b902b9
 8002d5c:	01e201eb 	.word	0x01e201eb
 8002d60:	02b90284 	.word	0x02b90284
 8002d64:	01060106 	.word	0x01060106
 8002d68:	02b902b9 	.word	0x02b902b9
 8002d6c:	02b902b9 	.word	0x02b902b9
 8002d70:	02b902b9 	.word	0x02b902b9
 8002d74:	02b902b9 	.word	0x02b902b9
 8002d78:	02b902b9 	.word	0x02b902b9
 8002d7c:	02b902b9 	.word	0x02b902b9
 8002d80:	010602b9 	.word	0x010602b9
 8002d84:	2970      	cmp	r1, #112	; 0x70
 8002d86:	f200 8081 	bhi.w	8002e8c <UI_GetReg+0x234>
 8002d8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d8e:	0103      	.short	0x0103
 8002d90:	0116011a 	.word	0x0116011a
 8002d94:	010b0112 	.word	0x010b0112
 8002d98:	011e0122 	.word	0x011e0122
 8002d9c:	00870172 	.word	0x00870172
 8002da0:	02030207 	.word	0x02030207
 8002da4:	008201ff 	.word	0x008201ff
 8002da8:	01f501f9 	.word	0x01f501f9
 8002dac:	017601f1 	.word	0x017601f1
 8002db0:	007f01c4 	.word	0x007f01c4
 8002db4:	01b5007f 	.word	0x01b5007f
 8002db8:	007f01a2 	.word	0x007f01a2
 8002dbc:	007f007f 	.word	0x007f007f
 8002dc0:	01db019e 	.word	0x01db019e
 8002dc4:	01df01d7 	.word	0x01df01d7
 8002dc8:	022b019a 	.word	0x022b019a
 8002dcc:	02210226 	.word	0x02210226
 8002dd0:	021a007f 	.word	0x021a007f
 8002dd4:	02100215 	.word	0x02100215
 8002dd8:	0106020b 	.word	0x0106020b
 8002ddc:	02210226 	.word	0x02210226
 8002de0:	00820087 	.word	0x00820087
 8002de4:	01680185 	.word	0x01680185
 8002de8:	016d015f 	.word	0x016d015f
 8002dec:	018a0071 	.word	0x018a0071
 8002df0:	00e000f1 	.word	0x00e000f1
 8002df4:	00bc00ce 	.word	0x00bc00ce
 8002df8:	009800aa 	.word	0x009800aa
 8002dfc:	007f007f 	.word	0x007f007f
 8002e00:	007f007f 	.word	0x007f007f
 8002e04:	007f007f 	.word	0x007f007f
 8002e08:	008c0092 	.word	0x008c0092
 8002e0c:	01e301ea 	.word	0x01e301ea
 8002e10:	01470082 	.word	0x01470082
 8002e14:	007f0133 	.word	0x007f0133
 8002e18:	007f007f 	.word	0x007f007f
 8002e1c:	007f007f 	.word	0x007f007f
 8002e20:	007f007f 	.word	0x007f007f
 8002e24:	007f007f 	.word	0x007f007f
 8002e28:	007f007f 	.word	0x007f007f
 8002e2c:	007f007f 	.word	0x007f007f
 8002e30:	007f007f 	.word	0x007f007f
 8002e34:	007f007f 	.word	0x007f007f
 8002e38:	007f007f 	.word	0x007f007f
 8002e3c:	007f007f 	.word	0x007f007f
 8002e40:	007f007f 	.word	0x007f007f
 8002e44:	007f0126 	.word	0x007f0126
 8002e48:	007f007f 	.word	0x007f007f
 8002e4c:	007f007f 	.word	0x007f007f
 8002e50:	007f007f 	.word	0x007f007f
 8002e54:	007f007f 	.word	0x007f007f
 8002e58:	007f007f 	.word	0x007f007f
 8002e5c:	007f007f 	.word	0x007f007f
 8002e60:	007f007f 	.word	0x007f007f
 8002e64:	007f007f 	.word	0x007f007f
 8002e68:	0164007f 	.word	0x0164007f
 8002e6c:	01fd015b 	.word	0x01fd015b
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e70:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e76:	0f1a      	lsrs	r2, r3, #28
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002e7e:	2a01      	cmp	r2, #1
 8002e80:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e84:	f240 81bd 	bls.w	8003202 <UI_GetReg+0x5aa>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d97c      	bls.n	8002f86 <UI_GetReg+0x32e>
  int32_t bRetVal = 0;
 8002e8c:	2000      	movs	r0, #0
}
 8002e8e:	b010      	add	sp, #64	; 0x40
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002e92:	4630      	mov	r0, r6
 8002e94:	f7fd ff32 	bl	8000cfc <MCI_GetIqdref>
 8002e98:	1400      	asrs	r0, r0, #16
    break;
 8002e9a:	e7f8      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f7fd ff2d 	bl	8000cfc <MCI_GetIqdref>
 8002ea2:	b200      	sxth	r0, r0
    break;
 8002ea4:	e7f3      	b.n	8002e8e <UI_GetReg+0x236>
      if (pHandle->pFctDACGetUserChannelValue)
 8002ea6:	6903      	ldr	r3, [r0, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002eac:	2101      	movs	r1, #1
 8002eae:	4798      	blx	r3
 8002eb0:	e7ed      	b.n	8002e8e <UI_GetReg+0x236>
      if (pHandle->pFctDACGetUserChannelValue)
 8002eb2:	6903      	ldr	r3, [r0, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0e9      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4798      	blx	r3
 8002ebc:	e7e7      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ebe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec4:	0f1a      	lsrs	r2, r3, #28
 8002ec6:	2a09      	cmp	r2, #9
 8002ec8:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002ecc:	f000 81a3 	beq.w	8003216 <UI_GetReg+0x5be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d1db      	bne.n	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002ed4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d0d8      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8002eda:	f003 fe7b 	bl	8006bd4 <STO_PLL_GetEstimatedBemf>
 8002ede:	1400      	asrs	r0, r0, #16
 8002ee0:	e7d5      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ee2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ee8:	0f1a      	lsrs	r2, r3, #28
 8002eea:	2a09      	cmp	r2, #9
 8002eec:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002ef0:	f000 8196 	beq.w	8003220 <UI_GetReg+0x5c8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d1c9      	bne.n	8002e8c <UI_GetReg+0x234>
        pSPD =  pMCT->pSpeedSensorAux;
 8002ef8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d0c6      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8002efe:	f003 fe69 	bl	8006bd4 <STO_PLL_GetEstimatedBemf>
 8002f02:	b200      	sxth	r0, r0
 8002f04:	e7c3      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f06:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f0c:	0f1a      	lsrs	r2, r3, #28
 8002f0e:	2a09      	cmp	r2, #9
 8002f10:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002f14:	f000 818e 	beq.w	8003234 <UI_GetReg+0x5dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	d1b7      	bne.n	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002f1c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d0b4      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8002f22:	f003 fe63 	bl	8006bec <STO_PLL_GetEstimatedCurrent>
 8002f26:	1400      	asrs	r0, r0, #16
 8002f28:	e7b1      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f30:	0f1a      	lsrs	r2, r3, #28
 8002f32:	2a09      	cmp	r2, #9
 8002f34:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002f38:	f000 819c 	beq.w	8003274 <UI_GetReg+0x61c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	d1a5      	bne.n	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002f40:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d0a2      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8002f46:	f003 fe51 	bl	8006bec <STO_PLL_GetEstimatedCurrent>
 8002f4a:	b200      	sxth	r0, r0
 8002f4c:	e79f      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f54:	0f1a      	lsrs	r2, r3, #28
 8002f56:	2a09      	cmp	r2, #9
 8002f58:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002f5c:	f000 8174 	beq.w	8003248 <UI_GetReg+0x5f0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d193      	bne.n	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002f64:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d090      	beq.n	8002e8c <UI_GetReg+0x234>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002f6a:	f003 f921 	bl	80061b0 <SPD_GetS16Speed>
 8002f6e:	e78e      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f70:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f76:	0f1a      	lsrs	r2, r3, #28
 8002f78:	2a09      	cmp	r2, #9
 8002f7a:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002f7e:	f000 815e 	beq.w	800323e <UI_GetReg+0x5e6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	d182      	bne.n	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8002f86:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	f43f af7f 	beq.w	8002e8c <UI_GetReg+0x234>
        bRetVal = SPD_GetElAngle(pSPD);
 8002f8e:	f003 f8d3 	bl	8006138 <SPD_GetElAngle>
 8002f92:	e77c      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002f94:	f7ff fc38 	bl	8002808 <UI_GetSelectedMC>
    break;
 8002f98:	e779      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	f7fd fe9e 	bl	8000cdc <MCI_GetIalphabeta>
 8002fa0:	1400      	asrs	r0, r0, #16
    break;
 8002fa2:	e774      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f7fd fe8d 	bl	8000cc4 <MCI_GetMecSpeedRefUnit>
 8002faa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fae:	0040      	lsls	r0, r0, #1
    break;
 8002fb0:	e76d      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f7fd fe70 	bl	8000c98 <MCI_GetControlMode>
    break;
 8002fb8:	e769      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002fba:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002fbc:	f003 fa64 	bl	8006488 <STM_GetState>
	break;
 8002fc0:	e765      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002fc2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002fc4:	f003 fa6e 	bl	80064a4 <STM_GetFaultState>
	break;
 8002fc8:	e761      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002fca:	6828      	ldr	r0, [r5, #0]
 8002fcc:	f002 fe26 	bl	8005c1c <PID_GetKI>
    break;
 8002fd0:	e75d      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002fd2:	6828      	ldr	r0, [r5, #0]
 8002fd4:	f002 fe1e 	bl	8005c14 <PID_GetKP>
    break;
 8002fd8:	e759      	b.n	8002e8e <UI_GetReg+0x236>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f7fd fe5c 	bl	8000c98 <MCI_GetControlMode>
 8002fe0:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002fe2:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002fe4:	f000 814b 	beq.w	800327e <UI_GetReg+0x626>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002fe8:	f7fd fe6c 	bl	8000cc4 <MCI_GetMecSpeedRefUnit>
 8002fec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ff0:	0040      	lsls	r0, r0, #1
 8002ff2:	e74c      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ff4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ffa:	0f1a      	lsrs	r2, r3, #28
 8002ffc:	2a09      	cmp	r2, #9
 8002ffe:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003002:	f000 8103 	beq.w	800320c <UI_GetReg+0x5b4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003006:	2b09      	cmp	r3, #9
 8003008:	f47f af40 	bne.w	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 800300c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800300e:	2800      	cmp	r0, #0
 8003010:	f43f af3c 	beq.w	8002e8c <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003014:	f003 fe2a 	bl	8006c6c <STO_PLL_GetObservedBemfLevel>
 8003018:	1400      	asrs	r0, r0, #16
 800301a:	e738      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800301c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003022:	0f1a      	lsrs	r2, r3, #28
 8003024:	2a09      	cmp	r2, #9
 8003026:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800302a:	f000 812e 	beq.w	800328a <UI_GetReg+0x632>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800302e:	2b09      	cmp	r3, #9
 8003030:	f47f af2c 	bne.w	8002e8c <UI_GetReg+0x234>
        pSPD = pMCT->pSpeedSensorAux;
 8003034:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003036:	2800      	cmp	r0, #0
 8003038:	f43f af28 	beq.w	8002e8c <UI_GetReg+0x234>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800303c:	f003 fe12 	bl	8006c64 <STO_PLL_GetEstimatedBemfLevel>
 8003040:	1400      	asrs	r0, r0, #16
 8003042:	e724      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003044:	6828      	ldr	r0, [r5, #0]
 8003046:	f002 fdf1 	bl	8005c2c <PID_GetKIDivisor>
    break;
 800304a:	e720      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800304c:	4630      	mov	r0, r6
 800304e:	f7fd fe67 	bl	8000d20 <MCI_GetValphabeta>
 8003052:	b200      	sxth	r0, r0
    break;
 8003054:	e71b      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003056:	6828      	ldr	r0, [r5, #0]
 8003058:	f002 fde6 	bl	8005c28 <PID_GetKPDivisor>
    break;
 800305c:	e717      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetVqd(pMCI).d;
 800305e:	4630      	mov	r0, r6
 8003060:	f7fd fe54 	bl	8000d0c <MCI_GetVqd>
 8003064:	1400      	asrs	r0, r0, #16
    break;
 8003066:	e712      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003068:	4630      	mov	r0, r6
 800306a:	f7fd fe59 	bl	8000d20 <MCI_GetValphabeta>
 800306e:	1400      	asrs	r0, r0, #16
    break;
 8003070:	e70d      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003072:	6828      	ldr	r0, [r5, #0]
 8003074:	f002 fdde 	bl	8005c34 <PID_GetKD>
    break;
 8003078:	e709      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800307a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003080:	0f1a      	lsrs	r2, r3, #28
 8003082:	2a09      	cmp	r2, #9
 8003084:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003088:	f000 8104 	beq.w	8003294 <UI_GetReg+0x63c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800308c:	2b09      	cmp	r3, #9
 800308e:	f000 8104 	beq.w	800329a <UI_GetReg+0x642>
      bRetVal = (int32_t)hPgain;
 8003092:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8003096:	e6fa      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003098:	4630      	mov	r0, r6
 800309a:	f7fd fe37 	bl	8000d0c <MCI_GetVqd>
 800309e:	b200      	sxth	r0, r0
    break;
 80030a0:	e6f5      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030a8:	0f1a      	lsrs	r2, r3, #28
 80030aa:	3a01      	subs	r2, #1
 80030ac:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80030b0:	2a01      	cmp	r2, #1
 80030b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80030b6:	f240 809f 	bls.w	80031f8 <UI_GetReg+0x5a0>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	f63f aee6 	bhi.w	8002e8c <UI_GetReg+0x234>
 80030c0:	e750      	b.n	8002f64 <UI_GetReg+0x30c>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 80030c2:	2101      	movs	r1, #1
 80030c4:	f7ff fdc2 	bl	8002c4c <UI_GetDAC>
    break;
 80030c8:	e6e1      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80030ca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80030cc:	f001 fe82 	bl	8004dd4 <VBS_GetAvBusVoltage_V>
    break;
 80030d0:	e6dd      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030d8:	0f1a      	lsrs	r2, r3, #28
 80030da:	2a09      	cmp	r2, #9
 80030dc:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80030e0:	f000 80c3 	beq.w	800326a <UI_GetReg+0x612>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d1d4      	bne.n	8003092 <UI_GetReg+0x43a>
        pSPD = pMCT->pSpeedSensorAux;
 80030e8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d0d1      	beq.n	8003092 <UI_GetReg+0x43a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80030ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80030f0:	a90e      	add	r1, sp, #56	; 0x38
 80030f2:	f003 fd9b 	bl	8006c2c <STO_GetPLLGains>
 80030f6:	e7cc      	b.n	8003092 <UI_GetReg+0x43a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80030f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80030fe:	0f1a      	lsrs	r2, r3, #28
 8003100:	2a09      	cmp	r2, #9
 8003102:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003106:	f000 80a4 	beq.w	8003252 <UI_GetReg+0x5fa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800310a:	2b09      	cmp	r3, #9
 800310c:	f000 80a4 	beq.w	8003258 <UI_GetReg+0x600>
      bRetVal = (int32_t)hIgain;
 8003110:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8003114:	e6bb      	b.n	8002e8e <UI_GetReg+0x236>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003116:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800311c:	0f1a      	lsrs	r2, r3, #28
 800311e:	2a09      	cmp	r2, #9
 8003120:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8003124:	f000 8081 	beq.w	800322a <UI_GetReg+0x5d2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003128:	2b09      	cmp	r3, #9
 800312a:	d1f1      	bne.n	8003110 <UI_GetReg+0x4b8>
        pSPD = pMCT->pSpeedSensorAux;
 800312c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800312e:	2800      	cmp	r0, #0
 8003130:	d0ee      	beq.n	8003110 <UI_GetReg+0x4b8>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003132:	aa0f      	add	r2, sp, #60	; 0x3c
 8003134:	a90e      	add	r1, sp, #56	; 0x38
 8003136:	f003 fd6d 	bl	8006c14 <STO_PLL_GetObserverGains>
 800313a:	e7e9      	b.n	8003110 <UI_GetReg+0x4b8>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800313c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800313e:	f002 fd01 	bl	8005b44 <MPM_GetAvrgElMotorPowerW>
    break;
 8003142:	e6a4      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003144:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003146:	f002 fd43 	bl	8005bd0 <NTC_GetAvTemp_C>
    break;
 800314a:	e6a0      	b.n	8002e8e <UI_GetReg+0x236>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 800314c:	2100      	movs	r1, #0
 800314e:	f7ff fd7d 	bl	8002c4c <UI_GetDAC>
    break;
 8003152:	e69c      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003154:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003156:	f003 f8eb 	bl	8006330 <STC_GetMinAppNegativeMecSpeedUnit>
 800315a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800315e:	0040      	lsls	r0, r0, #1
    break;
 8003160:	e695      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003162:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003164:	f003 f8e2 	bl	800632c <STC_GetMaxAppPositiveMecSpeedUnit>
 8003168:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800316c:	0040      	lsls	r0, r0, #1
    break;
 800316e:	e68e      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003170:	68a8      	ldr	r0, [r5, #8]
 8003172:	f002 fd5f 	bl	8005c34 <PID_GetKD>
    break;
 8003176:	e68a      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003178:	68a8      	ldr	r0, [r5, #8]
 800317a:	f002 fd4f 	bl	8005c1c <PID_GetKI>
    break;
 800317e:	e686      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003180:	68a8      	ldr	r0, [r5, #8]
 8003182:	f002 fd47 	bl	8005c14 <PID_GetKP>
    break;
 8003186:	e682      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)(MC_UID);
 8003188:	4848      	ldr	r0, [pc, #288]	; (80032ac <UI_GetReg+0x654>)
 800318a:	e680      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 800318c:	6868      	ldr	r0, [r5, #4]
 800318e:	f002 fd51 	bl	8005c34 <PID_GetKD>
    break;
 8003192:	e67c      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003194:	6868      	ldr	r0, [r5, #4]
 8003196:	f002 fd41 	bl	8005c1c <PID_GetKI>
    break;
 800319a:	e678      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800319c:	6868      	ldr	r0, [r5, #4]
 800319e:	f002 fd39 	bl	8005c14 <PID_GetKP>
    break;
 80031a2:	e674      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80031a4:	4630      	mov	r0, r6
 80031a6:	f7fd fd99 	bl	8000cdc <MCI_GetIalphabeta>
 80031aa:	b200      	sxth	r0, r0
    break;
 80031ac:	e66f      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIab(pMCI).b;
 80031ae:	4630      	mov	r0, r6
 80031b0:	f7fd fd8c 	bl	8000ccc <MCI_GetIab>
 80031b4:	1400      	asrs	r0, r0, #16
    break;
 80031b6:	e66a      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIab(pMCI).a;
 80031b8:	4630      	mov	r0, r6
 80031ba:	f7fd fd87 	bl	8000ccc <MCI_GetIab>
 80031be:	b200      	sxth	r0, r0
    break;
 80031c0:	e665      	b.n	8002e8e <UI_GetReg+0x236>
      if (pMCT->pRevupCtrl)
 80031c2:	6968      	ldr	r0, [r5, #20]
 80031c4:	2800      	cmp	r0, #0
 80031c6:	f43f ae61 	beq.w	8002e8c <UI_GetReg+0x234>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80031ca:	f003 fae3 	bl	8006794 <RUC_GetNumberOfPhases>
 80031ce:	e65e      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIqd(pMCI).d;
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7fd fd8b 	bl	8000cec <MCI_GetIqd>
 80031d6:	1400      	asrs	r0, r0, #16
    break;
 80031d8:	e659      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = MCI_GetIqd(pMCI).q;
 80031da:	4630      	mov	r0, r6
 80031dc:	f7fd fd86 	bl	8000cec <MCI_GetIqd>
 80031e0:	b200      	sxth	r0, r0
    break;
 80031e2:	e654      	b.n	8002e8e <UI_GetReg+0x236>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80031e4:	4630      	mov	r0, r6
 80031e6:	f7fd fd65 	bl	8000cb4 <MCI_GetAvrgMecSpeedUnit>
 80031ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031ee:	0040      	lsls	r0, r0, #1
    break;
 80031f0:	e64d      	b.n	8002e8e <UI_GetReg+0x236>
        *success = false;
 80031f2:	2000      	movs	r0, #0
 80031f4:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80031f6:	e64a      	b.n	8002e8e <UI_GetReg+0x236>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80031f8:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80031fa:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80031fc:	f63f aeb3 	bhi.w	8002f66 <UI_GetReg+0x30e>
 8003200:	e6b0      	b.n	8002f64 <UI_GetReg+0x30c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003202:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003204:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003206:	f63f aebf 	bhi.w	8002f88 <UI_GetReg+0x330>
 800320a:	e6bc      	b.n	8002f86 <UI_GetReg+0x32e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800320c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800320e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003210:	f47f aefd 	bne.w	800300e <UI_GetReg+0x3b6>
 8003214:	e6fa      	b.n	800300c <UI_GetReg+0x3b4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003216:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8003218:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800321a:	f47f ae5c 	bne.w	8002ed6 <UI_GetReg+0x27e>
 800321e:	e659      	b.n	8002ed4 <UI_GetReg+0x27c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003220:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003222:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003224:	f47f ae69 	bne.w	8002efa <UI_GetReg+0x2a2>
 8003228:	e666      	b.n	8002ef8 <UI_GetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800322a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800322c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800322e:	f47f af7e 	bne.w	800312e <UI_GetReg+0x4d6>
 8003232:	e77b      	b.n	800312c <UI_GetReg+0x4d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003234:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003236:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003238:	f47f ae71 	bne.w	8002f1e <UI_GetReg+0x2c6>
 800323c:	e66e      	b.n	8002f1c <UI_GetReg+0x2c4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800323e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003240:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003242:	f47f aea1 	bne.w	8002f88 <UI_GetReg+0x330>
 8003246:	e69e      	b.n	8002f86 <UI_GetReg+0x32e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003248:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800324a:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800324c:	f47f ae8b 	bne.w	8002f66 <UI_GetReg+0x30e>
 8003250:	e688      	b.n	8002f64 <UI_GetReg+0x30c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003252:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003254:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003256:	d100      	bne.n	800325a <UI_GetReg+0x602>
        pSPD = pMCT->pSpeedSensorAux;
 8003258:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800325a:	2800      	cmp	r0, #0
 800325c:	f43f af58 	beq.w	8003110 <UI_GetReg+0x4b8>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003260:	aa0f      	add	r2, sp, #60	; 0x3c
 8003262:	a90e      	add	r1, sp, #56	; 0x38
 8003264:	f003 fce2 	bl	8006c2c <STO_GetPLLGains>
 8003268:	e752      	b.n	8003110 <UI_GetReg+0x4b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800326a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800326c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800326e:	f47f af3c 	bne.w	80030ea <UI_GetReg+0x492>
 8003272:	e739      	b.n	80030e8 <UI_GetReg+0x490>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003274:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003276:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003278:	f47f ae63 	bne.w	8002f42 <UI_GetReg+0x2ea>
 800327c:	e660      	b.n	8002f40 <UI_GetReg+0x2e8>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800327e:	f7fd fd0d 	bl	8000c9c <MCI_GetLastRampFinalSpeed>
 8003282:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003286:	0040      	lsls	r0, r0, #1
 8003288:	e601      	b.n	8002e8e <UI_GetReg+0x236>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800328a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800328c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800328e:	f47f aed2 	bne.w	8003036 <UI_GetReg+0x3de>
 8003292:	e6cf      	b.n	8003034 <UI_GetReg+0x3dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003294:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003296:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003298:	d100      	bne.n	800329c <UI_GetReg+0x644>
        pSPD = pMCT->pSpeedSensorAux;
 800329a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800329c:	2800      	cmp	r0, #0
 800329e:	f43f aef8 	beq.w	8003092 <UI_GetReg+0x43a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80032a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80032a4:	a90e      	add	r1, sp, #56	; 0x38
 80032a6:	f003 fcb5 	bl	8006c14 <STO_PLL_GetObserverGains>
 80032aa:	e6f2      	b.n	8003092 <UI_GetReg+0x43a>
 80032ac:	34a6847a 	.word	0x34a6847a

080032b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <SystemInit+0x18>)
 80032b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80032be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032c2:	6099      	str	r1, [r3, #8]
#endif
}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ce:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_InitTick+0x3c>)
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_InitTick+0x40>)
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
{
 80032d6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032dc:	fbb0 f0f2 	udiv	r0, r0, r2
 80032e0:	fbb3 f0f0 	udiv	r0, r3, r0
 80032e4:	f000 fae6 	bl	80038b4 <HAL_SYSTICK_Config>
 80032e8:	b908      	cbnz	r0, 80032ee <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ea:	2d0f      	cmp	r5, #15
 80032ec:	d901      	bls.n	80032f2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f4:	4602      	mov	r2, r0
 80032f6:	4629      	mov	r1, r5
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f000 fa96 	bl	800382c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_InitTick+0x44>)
 8003302:	4620      	mov	r0, r4
 8003304:	601d      	str	r5, [r3, #0]
}
 8003306:	bd38      	pop	{r3, r4, r5, pc}
 8003308:	20000700 	.word	0x20000700
 800330c:	200006fc 	.word	0x200006fc
 8003310:	20000704 	.word	0x20000704

08003314 <HAL_Init>:
{
 8003314:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_Init+0x30>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003326:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003330:	2003      	movs	r0, #3
 8003332:	f000 fa69 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003336:	2004      	movs	r0, #4
 8003338:	f7ff ffc8 	bl	80032cc <HAL_InitTick>
  HAL_MspInit();
 800333c:	f7fe fedc 	bl	80020f8 <HAL_MspInit>
}
 8003340:	2000      	movs	r0, #0
 8003342:	bd08      	pop	{r3, pc}
 8003344:	40023c00 	.word	0x40023c00

08003348 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003348:	4a03      	ldr	r2, [pc, #12]	; (8003358 <HAL_IncTick+0x10>)
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <HAL_IncTick+0x14>)
 800334c:	6811      	ldr	r1, [r2, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	440b      	add	r3, r1
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000b0c 	.word	0x20000b0c
 800335c:	20000700 	.word	0x20000700

08003360 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003360:	4b01      	ldr	r3, [pc, #4]	; (8003368 <HAL_GetTick+0x8>)
 8003362:	6818      	ldr	r0, [r3, #0]
}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000b0c 	.word	0x20000b0c

0800336c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800336c:	2800      	cmp	r0, #0
 800336e:	f000 8091 	beq.w	8003494 <HAL_ADC_Init+0x128>
{
 8003372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003374:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003376:	4604      	mov	r4, r0
 8003378:	2d00      	cmp	r5, #0
 800337a:	f000 8081 	beq.w	8003480 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003380:	06db      	lsls	r3, r3, #27
 8003382:	d504      	bpl.n	800338e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003384:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8003386:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003388:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800338e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003392:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003394:	4d4d      	ldr	r5, [pc, #308]	; (80034cc <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 8003396:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800339a:	f022 0202 	bic.w	r2, r2, #2
 800339e:	f042 0202 	orr.w	r2, r2, #2
 80033a2:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033a4:	684a      	ldr	r2, [r1, #4]
 80033a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80033aa:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033ac:	684a      	ldr	r2, [r1, #4]
 80033ae:	6860      	ldr	r0, [r4, #4]
 80033b0:	4302      	orrs	r2, r0
 80033b2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033b4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033b6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033b8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033ba:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033bc:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80033c0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ca:	6858      	ldr	r0, [r3, #4]
 80033cc:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80033d0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033d2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033d6:	4339      	orrs	r1, r7
 80033d8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80033e0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e4:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e6:	ea42 0206 	orr.w	r2, r2, r6
 80033ea:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ec:	d054      	beq.n	8003498 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ee:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033f2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80033f6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	4310      	orrs	r0, r2
 80033fc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003404:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	432a      	orrs	r2, r5
 800340a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800340c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800340e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003410:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003414:	f021 0102 	bic.w	r1, r1, #2
 8003418:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8003420:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003422:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003424:	2800      	cmp	r0, #0
 8003426:	d140      	bne.n	80034aa <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003430:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003432:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003436:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003438:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800343e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003440:	3d01      	subs	r5, #1
 8003442:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8003446:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003448:	6898      	ldr	r0, [r3, #8]
 800344a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800344e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8003456:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800345e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003460:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003462:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003464:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003468:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800346a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800346c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003478:	2300      	movs	r3, #0
 800347a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003480:	f7fe fe58 	bl	8002134 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003484:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003486:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003488:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800348c:	06db      	lsls	r3, r3, #27
 800348e:	f53f af79 	bmi.w	8003384 <HAL_ADC_Init+0x18>
 8003492:	e77c      	b.n	800338e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8003494:	2001      	movs	r0, #1
}
 8003496:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800349e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	e7b0      	b.n	800340c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034b8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	3901      	subs	r1, #1
 80034be:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	e7b3      	b.n	800342e <HAL_ADC_Init+0xc2>
 80034c6:	bf00      	nop
 80034c8:	40012300 	.word	0x40012300
 80034cc:	0f000001 	.word	0x0f000001

080034d0 <HAL_ADC_ConfigChannel>:
{
 80034d0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80034d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80034d6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80034d8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80034da:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80034dc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80034de:	f000 8094 	beq.w	800360a <HAL_ADC_ConfigChannel+0x13a>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034e2:	680d      	ldr	r5, [r1, #0]
 80034e4:	688a      	ldr	r2, [r1, #8]
 80034e6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80034e8:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034ea:	2d09      	cmp	r5, #9
 80034ec:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 80034ee:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034f2:	d829      	bhi.n	8003548 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034f4:	691c      	ldr	r4, [r3, #16]
 80034f6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80034fa:	f04f 0c07 	mov.w	ip, #7
 80034fe:	fa0c fc06 	lsl.w	ip, ip, r6
 8003502:	ea24 040c 	bic.w	r4, r4, ip
 8003506:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003508:	691c      	ldr	r4, [r3, #16]
 800350a:	fa02 f606 	lsl.w	r6, r2, r6
 800350e:	4326      	orrs	r6, r4
 8003510:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 8003512:	684e      	ldr	r6, [r1, #4]
 8003514:	2e06      	cmp	r6, #6
 8003516:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800351a:	d82a      	bhi.n	8003572 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800351c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800351e:	3a05      	subs	r2, #5
 8003520:	241f      	movs	r4, #31
 8003522:	4094      	lsls	r4, r2
 8003524:	ea21 0104 	bic.w	r1, r1, r4
 8003528:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800352a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800352c:	fa07 f202 	lsl.w	r2, r7, r2
 8003530:	430a      	orrs	r2, r1
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003534:	4a3d      	ldr	r2, [pc, #244]	; (800362c <HAL_ADC_ConfigChannel+0x15c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02d      	beq.n	8003596 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800353a:	2300      	movs	r3, #0
 800353c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003540:	4618      	mov	r0, r3
}
 8003542:	b002      	add	sp, #8
 8003544:	bcf0      	pop	{r4, r5, r6, r7}
 8003546:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003548:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800354c:	68dc      	ldr	r4, [r3, #12]
 800354e:	3e1e      	subs	r6, #30
 8003550:	f04f 0c07 	mov.w	ip, #7
 8003554:	fa0c fc06 	lsl.w	ip, ip, r6
 8003558:	ea24 040c 	bic.w	r4, r4, ip
 800355c:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800355e:	68dc      	ldr	r4, [r3, #12]
 8003560:	fa02 f606 	lsl.w	r6, r2, r6
 8003564:	4326      	orrs	r6, r4
 8003566:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8003568:	684e      	ldr	r6, [r1, #4]
 800356a:	2e06      	cmp	r6, #6
 800356c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003570:	d9d4      	bls.n	800351c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8003572:	2e0c      	cmp	r6, #12
 8003574:	d831      	bhi.n	80035da <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003576:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800357a:	211f      	movs	r1, #31
 800357c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357e:	40a1      	lsls	r1, r4
 8003580:	ea22 0201 	bic.w	r2, r2, r1
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003588:	fa07 f204 	lsl.w	r2, r7, r4
 800358c:	430a      	orrs	r2, r1
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <HAL_ADC_ConfigChannel+0x15c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d1d1      	bne.n	800353a <HAL_ADC_ConfigChannel+0x6a>
 8003596:	2d12      	cmp	r5, #18
 8003598:	d02d      	beq.n	80035f6 <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800359a:	4b25      	ldr	r3, [pc, #148]	; (8003630 <HAL_ADC_ConfigChannel+0x160>)
 800359c:	429d      	cmp	r5, r3
 800359e:	d138      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x142>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_ADC_ConfigChannel+0x164>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035a2:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035a4:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035a6:	4c25      	ldr	r4, [pc, #148]	; (800363c <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035a8:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80035ac:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ae:	6851      	ldr	r1, [r2, #4]
 80035b0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80035b4:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	fba4 2303 	umull	r2, r3, r4, r3
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80035c6:	9b01      	ldr	r3, [sp, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0b6      	beq.n	800353a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80035cc:	9b01      	ldr	r3, [sp, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f9      	bne.n	80035cc <HAL_ADC_ConfigChannel+0xfc>
 80035d8:	e7af      	b.n	800353a <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035da:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80035de:	241f      	movs	r4, #31
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	408c      	lsls	r4, r1
 80035e4:	ea22 0204 	bic.w	r2, r2, r4
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80035ec:	fa07 f201 	lsl.w	r2, r7, r1
 80035f0:	4322      	orrs	r2, r4
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f4:	e79e      	b.n	8003534 <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_ADC_ConfigChannel+0x164>)
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80035fe:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	e797      	b.n	800353a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800360a:	2002      	movs	r0, #2
}
 800360c:	b002      	add	sp, #8
 800360e:	bcf0      	pop	{r4, r5, r6, r7}
 8003610:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003612:	2d11      	cmp	r5, #17
 8003614:	d191      	bne.n	800353a <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <HAL_ADC_ConfigChannel+0x164>)
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800361e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e787      	b.n	800353a <HAL_ADC_ConfigChannel+0x6a>
 800362a:	bf00      	nop
 800362c:	40012000 	.word	0x40012000
 8003630:	10000012 	.word	0x10000012
 8003634:	40012300 	.word	0x40012300
 8003638:	200006fc 	.word	0x200006fc
 800363c:	431bde83 	.word	0x431bde83

08003640 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003640:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	f000 80d5 	beq.w	80037f4 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
{
 800364a:	b4f0      	push	{r4, r5, r6, r7}
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800364c:	680d      	ldr	r5, [r1, #0]
 800364e:	688e      	ldr	r6, [r1, #8]
 8003650:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8003652:	2201      	movs	r2, #1
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003654:	2d09      	cmp	r5, #9
 8003656:	b2ac      	uxth	r4, r5
  __HAL_LOCK(hadc);
 8003658:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800365c:	d86b      	bhi.n	8003736 <HAL_ADCEx_InjectedConfigChannel+0xf6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800365e:	691f      	ldr	r7, [r3, #16]
 8003660:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003664:	f04f 0c07 	mov.w	ip, #7
 8003668:	fa0c fc02 	lsl.w	ip, ip, r2
 800366c:	ea27 070c 	bic.w	r7, r7, ip
 8003670:	611f      	str	r7, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003672:	691f      	ldr	r7, [r3, #16]
 8003674:	fa06 f202 	lsl.w	r2, r6, r2
 8003678:	433a      	orrs	r2, r7
 800367a:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800367c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800367e:	f8d1 c010 	ldr.w	ip, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003682:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003684:	f427 1740 	bic.w	r7, r7, #3145728	; 0x300000
 8003688:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800368a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800368c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003690:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003694:	1cf2      	adds	r2, r6, #3
 8003696:	eba2 020c 	sub.w	r2, r2, ip
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800369a:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80036a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80036a4:	f04f 0c1f 	mov.w	ip, #31
 80036a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80036ac:	ea27 070c 	bic.w	r7, r7, ip
 80036b0:	639f      	str	r7, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036b2:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036b6:	698f      	ldr	r7, [r1, #24]
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036b8:	fa04 f202 	lsl.w	r2, r4, r2
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036bc:	4c4e      	ldr	r4, [pc, #312]	; (80037f8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036be:	ea42 020c 	orr.w	r2, r2, ip
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036c2:	42a7      	cmp	r7, r4
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036c6:	d071      	beq.n	80037ac <HAL_ADCEx_InjectedConfigChannel+0x16c>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80036c8:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80036ca:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80036ce:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 80036d2:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	4317      	orrs	r7, r2
 80036d8:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80036da:	689c      	ldr	r4, [r3, #8]
 80036dc:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80036e0:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	ea42 020c 	orr.w	r2, r2, ip
 80036e8:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80036ea:	7d4a      	ldrb	r2, [r1, #21]
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	d058      	beq.n	80037a2 <HAL_ADCEx_InjectedConfigChannel+0x162>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f6:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80036f8:	7d0a      	ldrb	r2, [r1, #20]
 80036fa:	b36a      	cbz	r2, 8003758 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003702:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003704:	2e02      	cmp	r6, #2
 8003706:	68ca      	ldr	r2, [r1, #12]
 8003708:	d02d      	beq.n	8003766 <HAL_ADCEx_InjectedConfigChannel+0x126>
 800370a:	2e03      	cmp	r6, #3
 800370c:	d061      	beq.n	80037d2 <HAL_ADCEx_InjectedConfigChannel+0x192>
 800370e:	2e01      	cmp	r6, #1
 8003710:	d055      	beq.n	80037be <HAL_ADCEx_InjectedConfigChannel+0x17e>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003712:	6a19      	ldr	r1, [r3, #32]
 8003714:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003718:	f021 010f 	bic.w	r1, r1, #15
 800371c:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	430a      	orrs	r2, r1
 8003722:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003724:	4a35      	ldr	r2, [pc, #212]	; (80037fc <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d029      	beq.n	800377e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372a:	2300      	movs	r3, #0
 800372c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 8003730:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003732:	4618      	mov	r0, r3
}
 8003734:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003736:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800373a:	68df      	ldr	r7, [r3, #12]
 800373c:	3a1e      	subs	r2, #30
 800373e:	f04f 0c07 	mov.w	ip, #7
 8003742:	fa0c fc02 	lsl.w	ip, ip, r2
 8003746:	ea27 070c 	bic.w	r7, r7, ip
 800374a:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800374c:	68df      	ldr	r7, [r3, #12]
 800374e:	fa06 f202 	lsl.w	r2, r6, r2
 8003752:	433a      	orrs	r2, r7
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e791      	b.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800375e:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003760:	2e02      	cmp	r6, #2
 8003762:	68ca      	ldr	r2, [r1, #12]
 8003764:	d1d1      	bne.n	800370a <HAL_ADCEx_InjectedConfigChannel+0xca>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003766:	6999      	ldr	r1, [r3, #24]
 8003768:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800376c:	f021 010f 	bic.w	r1, r1, #15
 8003770:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003772:	6999      	ldr	r1, [r3, #24]
 8003774:	430a      	orrs	r2, r1
 8003776:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d1d5      	bne.n	800372a <HAL_ADCEx_InjectedConfigChannel+0xea>
 800377e:	2d12      	cmp	r5, #18
 8003780:	d031      	beq.n	80037e6 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_ADCEx_InjectedConfigChannel+0x1c0>)
 8003784:	429d      	cmp	r5, r3
 8003786:	d001      	beq.n	800378c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003788:	2d11      	cmp	r5, #17
 800378a:	d1ce      	bne.n	800372a <HAL_ADCEx_InjectedConfigChannel+0xea>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 800378e:	6853      	ldr	r3, [r2, #4]
 8003790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003794:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 8003796:	2300      	movs	r3, #0
 8003798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800379c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800379e:	4618      	mov	r0, r3
}
 80037a0:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e7a5      	b.n	80036f8 <HAL_ADCEx_InjectedConfigChannel+0xb8>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80037b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	e795      	b.n	80036ea <HAL_ADCEx_InjectedConfigChannel+0xaa>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80037be:	6959      	ldr	r1, [r3, #20]
 80037c0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80037c4:	f021 010f 	bic.w	r1, r1, #15
 80037c8:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80037ca:	6959      	ldr	r1, [r3, #20]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	615a      	str	r2, [r3, #20]
      break;
 80037d0:	e7a8      	b.n	8003724 <HAL_ADCEx_InjectedConfigChannel+0xe4>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80037d2:	69d9      	ldr	r1, [r3, #28]
 80037d4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80037d8:	f021 010f 	bic.w	r1, r1, #15
 80037dc:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80037de:	69d9      	ldr	r1, [r3, #28]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
      break;
 80037e4:	e79e      	b.n	8003724 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037e6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80037ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80037f2:	e79a      	b.n	800372a <HAL_ADCEx_InjectedConfigChannel+0xea>
  __HAL_LOCK(hadc);
 80037f4:	2002      	movs	r0, #2
}
 80037f6:	4770      	bx	lr
 80037f8:	000f0001 	.word	0x000f0001
 80037fc:	40012000 	.word	0x40012000
 8003800:	10000012 	.word	0x10000012
 8003804:	40012300 	.word	0x40012300

08003808 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003808:	4a07      	ldr	r2, [pc, #28]	; (8003828 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800380a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8003810:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003812:	0200      	lsls	r0, r0, #8
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003818:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003820:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003822:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_NVIC_SetPriority+0x64>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003834:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003836:	f1c3 0507 	rsb	r5, r3, #7
 800383a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003840:	bf28      	it	cs
 8003842:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003844:	2c06      	cmp	r4, #6
 8003846:	d919      	bls.n	800387c <HAL_NVIC_SetPriority+0x50>
 8003848:	3b03      	subs	r3, #3
 800384a:	f04f 34ff 	mov.w	r4, #4294967295
 800384e:	409c      	lsls	r4, r3
 8003850:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	f04f 32ff 	mov.w	r2, #4294967295
 8003858:	40aa      	lsls	r2, r5
 800385a:	ea21 0102 	bic.w	r1, r1, r2
 800385e:	fa01 f203 	lsl.w	r2, r1, r3
 8003862:	4322      	orrs	r2, r4
 8003864:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8003866:	2800      	cmp	r0, #0
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	db0a      	blt.n	8003882 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003870:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003874:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003878:	bc30      	pop	{r4, r5}
 800387a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387c:	2400      	movs	r4, #0
 800387e:	4623      	mov	r3, r4
 8003880:	e7e8      	b.n	8003854 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_NVIC_SetPriority+0x68>)
 8003884:	f000 000f 	and.w	r0, r0, #15
 8003888:	4403      	add	r3, r0
 800388a:	761a      	strb	r2, [r3, #24]
 800388c:	bc30      	pop	{r4, r5}
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	e000ecfc 	.word	0xe000ecfc

08003898 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003898:	2800      	cmp	r0, #0
 800389a:	db07      	blt.n	80038ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389c:	f000 011f 	and.w	r1, r0, #31
 80038a0:	2301      	movs	r3, #1
 80038a2:	0940      	lsrs	r0, r0, #5
 80038a4:	4a02      	ldr	r2, [pc, #8]	; (80038b0 <HAL_NVIC_EnableIRQ+0x18>)
 80038a6:	408b      	lsls	r3, r1
 80038a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	3801      	subs	r0, #1
 80038b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80038ba:	d20e      	bcs.n	80038da <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038be:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	4c08      	ldr	r4, [pc, #32]	; (80038e4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c4:	20f0      	movs	r0, #240	; 0xf0
 80038c6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038cc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80038d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2001      	movs	r0, #1
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <HAL_SYSTICK_IRQHandler>:
{
 80038ec:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80038ee:	f7ff fffb 	bl	80038e8 <HAL_SYSTICK_Callback>
}
 80038f2:	bd08      	pop	{r3, pc}

080038f4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80038f4:	b188      	cbz	r0, 800391a <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80038f6:	7903      	ldrb	r3, [r0, #4]
{ 
 80038f8:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 80038fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038fe:	4604      	mov	r4, r0
 8003900:	b13b      	cbz	r3, 8003912 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003904:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003906:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003908:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800390a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800390c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800390e:	7122      	strb	r2, [r4, #4]
}
 8003910:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003912:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003914:	f7fe fc8e 	bl	8002234 <HAL_DAC_MspInit>
 8003918:	e7f3      	b.n	8003902 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800391a:	2001      	movs	r0, #1
}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003920:	7943      	ldrb	r3, [r0, #5]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d01d      	beq.n	8003962 <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003926:	2302      	movs	r3, #2
{
 8003928:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 800392a:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800392c:	6804      	ldr	r4, [r0, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800392e:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003932:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8003936:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003938:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800393a:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800393c:	ea21 0105 	bic.w	r1, r1, r5
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003940:	4093      	lsls	r3, r2
 8003942:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003944:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	21c0      	movs	r1, #192	; 0xc0
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003952:	2101      	movs	r1, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003954:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003956:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003958:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 800395a:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 800395c:	bc70      	pop	{r4, r5, r6}
 800395e:	4618      	mov	r0, r3
 8003960:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003962:	2202      	movs	r2, #2
}
 8003964:	4610      	mov	r0, r2
 8003966:	4770      	bx	lr

08003968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396c:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003970:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8003b50 <HAL_GPIO_Init+0x1e8>
{
 8003974:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003976:	2400      	movs	r4, #0
 8003978:	e003      	b.n	8003982 <HAL_GPIO_Init+0x1a>
 800397a:	3401      	adds	r4, #1
 800397c:	2c10      	cmp	r4, #16
 800397e:	f000 8086 	beq.w	8003a8e <HAL_GPIO_Init+0x126>
    ioposition = 0x01U << position;
 8003982:	2301      	movs	r3, #1
 8003984:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003986:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800398a:	4293      	cmp	r3, r2
 800398c:	d1f5      	bne.n	800397a <HAL_GPIO_Init+0x12>
 800398e:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003992:	f026 0910 	bic.w	r9, r6, #16
 8003996:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800399a:	2303      	movs	r3, #3
 800399c:	f109 37ff 	add.w	r7, r9, #4294967295
 80039a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80039a4:	2f01      	cmp	r7, #1
 80039a6:	ea6f 0303 	mvn.w	r3, r3
 80039aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80039ae:	d971      	bls.n	8003a94 <HAL_GPIO_Init+0x12c>
      temp = GPIOx->PUPDR;
 80039b0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039b2:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80039b6:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 80039b8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ba:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039be:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c0:	fa05 f30c 	lsl.w	r3, r5, ip
 80039c4:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80039c6:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039c8:	00f3      	lsls	r3, r6, #3
 80039ca:	d5d6      	bpl.n	800397a <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039cc:	4d59      	ldr	r5, [pc, #356]	; (8003b34 <HAL_GPIO_Init+0x1cc>)
 80039ce:	2300      	movs	r3, #0
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	646b      	str	r3, [r5, #68]	; 0x44
 80039da:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 80039dc:	f024 0303 	bic.w	r3, r4, #3
 80039e0:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80039e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039e8:	9501      	str	r5, [sp, #4]
 80039ea:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039ee:	f004 0503 	and.w	r5, r4, #3
 80039f2:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	4d50      	ldr	r5, [pc, #320]	; (8003b38 <HAL_GPIO_Init+0x1d0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f8:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80039fa:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fe:	270f      	movs	r7, #15
 8003a00:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a04:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a06:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a0a:	d019      	beq.n	8003a40 <HAL_GPIO_Init+0xd8>
 8003a0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a10:	42a8      	cmp	r0, r5
 8003a12:	d070      	beq.n	8003af6 <HAL_GPIO_Init+0x18e>
 8003a14:	4d49      	ldr	r5, [pc, #292]	; (8003b3c <HAL_GPIO_Init+0x1d4>)
 8003a16:	42a8      	cmp	r0, r5
 8003a18:	d073      	beq.n	8003b02 <HAL_GPIO_Init+0x19a>
 8003a1a:	4d49      	ldr	r5, [pc, #292]	; (8003b40 <HAL_GPIO_Init+0x1d8>)
 8003a1c:	42a8      	cmp	r0, r5
 8003a1e:	d076      	beq.n	8003b0e <HAL_GPIO_Init+0x1a6>
 8003a20:	4d48      	ldr	r5, [pc, #288]	; (8003b44 <HAL_GPIO_Init+0x1dc>)
 8003a22:	42a8      	cmp	r0, r5
 8003a24:	d079      	beq.n	8003b1a <HAL_GPIO_Init+0x1b2>
 8003a26:	4d48      	ldr	r5, [pc, #288]	; (8003b48 <HAL_GPIO_Init+0x1e0>)
 8003a28:	42a8      	cmp	r0, r5
 8003a2a:	d07c      	beq.n	8003b26 <HAL_GPIO_Init+0x1be>
 8003a2c:	4d47      	ldr	r5, [pc, #284]	; (8003b4c <HAL_GPIO_Init+0x1e4>)
 8003a2e:	42a8      	cmp	r0, r5
 8003a30:	bf0c      	ite	eq
 8003a32:	f04f 0c06 	moveq.w	ip, #6
 8003a36:	f04f 0c07 	movne.w	ip, #7
 8003a3a:	fa0c f509 	lsl.w	r5, ip, r9
 8003a3e:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8003a42:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a48:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8003a4a:	bf54      	ite	pl
 8003a4c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003a4e:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8003a50:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003a54:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a58:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	bf54      	ite	pl
 8003a5c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003a5e:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8003a60:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a64:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a68:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8003a6a:	bf54      	ite	pl
 8003a6c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003a6e:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8003a70:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003a74:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a78:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7a:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	bf54      	ite	pl
 8003a80:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003a82:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a84:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8003a86:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	f47f af7a 	bne.w	8003982 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8003a8e:	b003      	add	sp, #12
 8003a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003a94:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a96:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a9a:	68cf      	ldr	r7, [r1, #12]
 8003a9c:	fa07 f70c 	lsl.w	r7, r7, ip
 8003aa0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003aa4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003aa6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003aaa:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aae:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ab2:	40a7      	lsls	r7, r4
 8003ab4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8003ab8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003aba:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003abc:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003abe:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ac0:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8003ac4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ac6:	f47f af77 	bne.w	80039b8 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8003aca:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8003ace:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad2:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8003ad6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ada:	00bf      	lsls	r7, r7, #2
 8003adc:	f04f 0b0f 	mov.w	fp, #15
 8003ae0:	fa0b fb07 	lsl.w	fp, fp, r7
 8003ae4:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae8:	690d      	ldr	r5, [r1, #16]
 8003aea:	40bd      	lsls	r5, r7
 8003aec:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003af0:	f8c9 5020 	str.w	r5, [r9, #32]
 8003af4:	e760      	b.n	80039b8 <HAL_GPIO_Init+0x50>
 8003af6:	f04f 0c01 	mov.w	ip, #1
 8003afa:	fa0c f509 	lsl.w	r5, ip, r9
 8003afe:	432f      	orrs	r7, r5
 8003b00:	e79e      	b.n	8003a40 <HAL_GPIO_Init+0xd8>
 8003b02:	f04f 0c02 	mov.w	ip, #2
 8003b06:	fa0c f509 	lsl.w	r5, ip, r9
 8003b0a:	432f      	orrs	r7, r5
 8003b0c:	e798      	b.n	8003a40 <HAL_GPIO_Init+0xd8>
 8003b0e:	f04f 0c03 	mov.w	ip, #3
 8003b12:	fa0c f509 	lsl.w	r5, ip, r9
 8003b16:	432f      	orrs	r7, r5
 8003b18:	e792      	b.n	8003a40 <HAL_GPIO_Init+0xd8>
 8003b1a:	f04f 0c04 	mov.w	ip, #4
 8003b1e:	fa0c f509 	lsl.w	r5, ip, r9
 8003b22:	432f      	orrs	r7, r5
 8003b24:	e78c      	b.n	8003a40 <HAL_GPIO_Init+0xd8>
 8003b26:	f04f 0c05 	mov.w	ip, #5
 8003b2a:	fa0c f509 	lsl.w	r5, ip, r9
 8003b2e:	432f      	orrs	r7, r5
 8003b30:	e786      	b.n	8003a40 <HAL_GPIO_Init+0xd8>
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40021400 	.word	0x40021400
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40013c00 	.word	0x40013c00

08003b54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b54:	b530      	push	{r4, r5, lr}
 8003b56:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b5a:	491a      	ldr	r1, [pc, #104]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b5c:	4c1a      	ldr	r4, [pc, #104]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	2200      	movs	r2, #0
 8003b60:	9201      	str	r2, [sp, #4]
 8003b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b72:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b76:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8003b78:	f7ff fbf2 	bl	8003360 <HAL_GetTick>
 8003b7c:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b7e:	e005      	b.n	8003b8c <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b80:	f7ff fbee 	bl	8003360 <HAL_GetTick>
 8003b84:	1b40      	subs	r0, r0, r5
 8003b86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b8a:	d816      	bhi.n	8003bba <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	03da      	lsls	r2, r3, #15
 8003b90:	d5f6      	bpl.n	8003b80 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b94:	4c0c      	ldr	r4, [pc, #48]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003b9a:	f7ff fbe1 	bl	8003360 <HAL_GetTick>
 8003b9e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ba0:	e005      	b.n	8003bae <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ba2:	f7ff fbdd 	bl	8003360 <HAL_GetTick>
 8003ba6:	1b40      	subs	r0, r0, r5
 8003ba8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bac:	d805      	bhi.n	8003bba <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	039b      	lsls	r3, r3, #14
 8003bb2:	d5f6      	bpl.n	8003ba2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003bb4:	2000      	movs	r0, #0
}
 8003bb6:	b003      	add	sp, #12
 8003bb8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003bba:	2003      	movs	r0, #3
}
 8003bbc:	b003      	add	sp, #12
 8003bbe:	bd30      	pop	{r4, r5, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	420e0040 	.word	0x420e0040
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	420e0044 	.word	0x420e0044

08003bd0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd0:	b160      	cbz	r0, 8003bec <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd2:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_RCC_ClockConfig+0x128>)
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	428b      	cmp	r3, r1
 8003bdc:	d208      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	b2cb      	uxtb	r3, r1
 8003be0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	428b      	cmp	r3, r1
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003bee:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	6803      	ldr	r3, [r0, #0]
{
 8003bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf6:	079d      	lsls	r5, r3, #30
 8003bf8:	d514      	bpl.n	8003c24 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfa:	075c      	lsls	r4, r3, #29
 8003bfc:	d504      	bpl.n	8003c08 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bfe:	4c3f      	ldr	r4, [pc, #252]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003c00:	68a2      	ldr	r2, [r4, #8]
 8003c02:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003c06:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	071a      	lsls	r2, r3, #28
 8003c0a:	d504      	bpl.n	8003c16 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4c3b      	ldr	r4, [pc, #236]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003c0e:	68a2      	ldr	r2, [r4, #8]
 8003c10:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003c14:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c16:	4c39      	ldr	r4, [pc, #228]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003c18:	6885      	ldr	r5, [r0, #8]
 8003c1a:	68a2      	ldr	r2, [r4, #8]
 8003c1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c20:	432a      	orrs	r2, r5
 8003c22:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c24:	07df      	lsls	r7, r3, #31
 8003c26:	4604      	mov	r4, r0
 8003c28:	460d      	mov	r5, r1
 8003c2a:	d522      	bpl.n	8003c72 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2c:	6842      	ldr	r2, [r0, #4]
 8003c2e:	2a01      	cmp	r2, #1
 8003c30:	d057      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	1e93      	subs	r3, r2, #2
 8003c34:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3a:	d959      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	0799      	lsls	r1, r3, #30
 8003c3e:	d525      	bpl.n	8003c8c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c40:	4e2e      	ldr	r6, [pc, #184]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003c42:	68b3      	ldr	r3, [r6, #8]
 8003c44:	f023 0303 	bic.w	r3, r3, #3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003c4c:	f7ff fb88 	bl	8003360 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003c54:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	e005      	b.n	8003c64 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c58:	f7ff fb82 	bl	8003360 <HAL_GetTick>
 8003c5c:	eba0 0008 	sub.w	r0, r0, r8
 8003c60:	42b8      	cmp	r0, r7
 8003c62:	d843      	bhi.n	8003cec <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c64:	68b3      	ldr	r3, [r6, #8]
 8003c66:	6862      	ldr	r2, [r4, #4]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c70:	d1f2      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <HAL_RCC_ClockConfig+0x128>)
 8003c74:	6813      	ldr	r3, [r2, #0]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	42ab      	cmp	r3, r5
 8003c7c:	d909      	bls.n	8003c92 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	b2eb      	uxtb	r3, r5
 8003c80:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	42ab      	cmp	r3, r5
 8003c8a:	d002      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003c8c:	2001      	movs	r0, #1
}
 8003c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	075a      	lsls	r2, r3, #29
 8003c96:	d506      	bpl.n	8003ca6 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4918      	ldr	r1, [pc, #96]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003c9a:	68e0      	ldr	r0, [r4, #12]
 8003c9c:	688a      	ldr	r2, [r1, #8]
 8003c9e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003ca2:	4302      	orrs	r2, r0
 8003ca4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca6:	071b      	lsls	r3, r3, #28
 8003ca8:	d412      	bmi.n	8003cd0 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003caa:	f000 f855 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003cb0:	4c13      	ldr	r4, [pc, #76]	; (8003d00 <HAL_RCC_ClockConfig+0x130>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8003cb4:	4913      	ldr	r1, [pc, #76]	; (8003d04 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <HAL_RCC_ClockConfig+0x138>)
 8003cb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cbc:	5ce3      	ldrb	r3, [r4, r3]
 8003cbe:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8003cc2:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cc4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8003cc6:	f7ff fb01 	bl	80032cc <HAL_InitTick>
  return HAL_OK;
 8003cca:	2000      	movs	r0, #0
}
 8003ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003cd2:	6921      	ldr	r1, [r4, #16]
 8003cd4:	6893      	ldr	r3, [r2, #8]
 8003cd6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cde:	6093      	str	r3, [r2, #8]
 8003ce0:	e7e3      	b.n	8003caa <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_ClockConfig+0x12c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	039e      	lsls	r6, r3, #14
 8003ce8:	d4aa      	bmi.n	8003c40 <HAL_RCC_ClockConfig+0x70>
 8003cea:	e7cf      	b.n	8003c8c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003cec:	2003      	movs	r0, #3
 8003cee:	e7ed      	b.n	8003ccc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	0198      	lsls	r0, r3, #6
 8003cf2:	d4a5      	bmi.n	8003c40 <HAL_RCC_ClockConfig+0x70>
 8003cf4:	e7ca      	b.n	8003c8c <HAL_RCC_ClockConfig+0xbc>
 8003cf6:	bf00      	nop
 8003cf8:	40023c00 	.word	0x40023c00
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	08007754 	.word	0x08007754
 8003d04:	20000704 	.word	0x20000704
 8003d08:	200006fc 	.word	0x200006fc

08003d0c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d0c:	4b01      	ldr	r3, [pc, #4]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200006fc 	.word	0x200006fc

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d1a:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d1e:	4905      	ldr	r1, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d20:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d28:	40d8      	lsrs	r0, r3
 8003d2a:	4770      	bx	lr
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	08007764 	.word	0x08007764
 8003d34:	200006fc 	.word	0x200006fc

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d3e:	4905      	ldr	r1, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d40:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d44:	6808      	ldr	r0, [r1, #0]
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d48:	40d8      	lsrs	r0, r3
 8003d4a:	4770      	bx	lr
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08007764 	.word	0x08007764
 8003d54:	200006fc 	.word	0x200006fc

08003d58 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d58:	4928      	ldr	r1, [pc, #160]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8003d5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5c:	688b      	ldr	r3, [r1, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d007      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1e>
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d01d      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d6c:	4825      	ldr	r0, [pc, #148]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf18      	it	ne
 8003d72:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d78:	684b      	ldr	r3, [r1, #4]
 8003d7a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d82:	d130      	bne.n	8003de6 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d84:	6849      	ldr	r1, [r1, #4]
 8003d86:	481e      	ldr	r0, [pc, #120]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d88:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003d8c:	fba1 0100 	umull	r0, r1, r1, r0
 8003d90:	f7fc fa96 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003da0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003da4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da8:	684b      	ldr	r3, [r1, #4]
 8003daa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db2:	d10e      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db4:	6849      	ldr	r1, [r1, #4]
 8003db6:	4812      	ldr	r0, [pc, #72]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003db8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003dbc:	fba1 0100 	umull	r0, r1, r1, r0
 8003dc0:	f7fc fa7e 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003dcc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003dd0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd2:	684b      	ldr	r3, [r1, #4]
 8003dd4:	480b      	ldr	r0, [pc, #44]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xac>)
 8003dd6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003dda:	fba3 0100 	umull	r0, r1, r3, r0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f7fc fa6e 	bl	80002c0 <__aeabi_uldivmod>
 8003de4:	e7ee      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	684b      	ldr	r3, [r1, #4]
 8003de8:	4806      	ldr	r0, [pc, #24]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xac>)
 8003dea:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003dee:	fba3 0100 	umull	r0, r1, r3, r0
 8003df2:	2300      	movs	r3, #0
 8003df4:	f7fc fa64 	bl	80002c0 <__aeabi_uldivmod>
 8003df8:	e7cc      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x3c>
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	007a1200 	.word	0x007a1200

08003e08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0c:	6803      	ldr	r3, [r0, #0]
 8003e0e:	07da      	lsls	r2, r3, #31
{
 8003e10:	b082      	sub	sp, #8
 8003e12:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e14:	d536      	bpl.n	8003e84 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e16:	49ae      	ldr	r1, [pc, #696]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003e18:	688a      	ldr	r2, [r1, #8]
 8003e1a:	f002 020c 	and.w	r2, r2, #12
 8003e1e:	2a04      	cmp	r2, #4
 8003e20:	f000 80d2 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x1c0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e24:	688a      	ldr	r2, [r1, #8]
 8003e26:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e2a:	2a08      	cmp	r2, #8
 8003e2c:	f000 80c8 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e30:	49a7      	ldr	r1, [pc, #668]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003e32:	688a      	ldr	r2, [r1, #8]
 8003e34:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e38:	2a0c      	cmp	r2, #12
 8003e3a:	f000 8104 	beq.w	8004046 <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	f000 8104 	beq.w	8004050 <HAL_RCC_OscConfig+0x248>
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	f000 8160 	beq.w	8004110 <HAL_RCC_OscConfig+0x308>
 8003e50:	4d9f      	ldr	r5, [pc, #636]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003e52:	682a      	ldr	r2, [r5, #0]
 8003e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e58:	602a      	str	r2, [r5, #0]
 8003e5a:	682a      	ldr	r2, [r5, #0]
 8003e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e60:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 80f9 	bne.w	800405a <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7ff fa7a 	bl	8003360 <HAL_GetTick>
 8003e6c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e005      	b.n	8003e7c <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7ff fa76 	bl	8003360 <HAL_GetTick>
 8003e74:	1b80      	subs	r0, r0, r6
 8003e76:	2864      	cmp	r0, #100	; 0x64
 8003e78:	f200 810d 	bhi.w	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	0399      	lsls	r1, r3, #14
 8003e80:	d4f6      	bmi.n	8003e70 <HAL_RCC_OscConfig+0x68>
 8003e82:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e84:	079a      	lsls	r2, r3, #30
 8003e86:	d52f      	bpl.n	8003ee8 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e88:	4a91      	ldr	r2, [pc, #580]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003e8a:	6891      	ldr	r1, [r2, #8]
 8003e8c:	f011 0f0c 	tst.w	r1, #12
 8003e90:	f000 80ab 	beq.w	8003fea <HAL_RCC_OscConfig+0x1e2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e94:	6891      	ldr	r1, [r2, #8]
 8003e96:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e9a:	2908      	cmp	r1, #8
 8003e9c:	f000 80a1 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x1da>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea0:	498b      	ldr	r1, [pc, #556]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003ea2:	688a      	ldr	r2, [r1, #8]
 8003ea4:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ea8:	2a0c      	cmp	r2, #12
 8003eaa:	f000 812c 	beq.w	8004106 <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8117 	beq.w	80040e4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb6:	4b87      	ldr	r3, [pc, #540]	; (80040d4 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	4d85      	ldr	r5, [pc, #532]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ebe:	f7ff fa4f 	bl	8003360 <HAL_GetTick>
 8003ec2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7ff fa4b 	bl	8003360 <HAL_GetTick>
 8003eca:	1b80      	subs	r0, r0, r6
 8003ecc:	2802      	cmp	r0, #2
 8003ece:	f200 80e2 	bhi.w	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	0798      	lsls	r0, r3, #30
 8003ed6:	d5f6      	bpl.n	8003ec6 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	6922      	ldr	r2, [r4, #16]
 8003edc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ee0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ee4:	602b      	str	r3, [r5, #0]
 8003ee6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee8:	071a      	lsls	r2, r3, #28
 8003eea:	d515      	bpl.n	8003f18 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eec:	6963      	ldr	r3, [r4, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 808d 	beq.w	800400e <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef4:	4b78      	ldr	r3, [pc, #480]	; (80040d8 <HAL_RCC_OscConfig+0x2d0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4d76      	ldr	r5, [pc, #472]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003efc:	f7ff fa30 	bl	8003360 <HAL_GetTick>
 8003f00:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	e005      	b.n	8003f10 <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f04:	f7ff fa2c 	bl	8003360 <HAL_GetTick>
 8003f08:	1b80      	subs	r0, r0, r6
 8003f0a:	2802      	cmp	r0, #2
 8003f0c:	f200 80c3 	bhi.w	8004096 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003f12:	079b      	lsls	r3, r3, #30
 8003f14:	d5f6      	bpl.n	8003f04 <HAL_RCC_OscConfig+0xfc>
 8003f16:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f18:	0758      	lsls	r0, r3, #29
 8003f1a:	d531      	bpl.n	8003f80 <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1c:	4a6c      	ldr	r2, [pc, #432]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003f1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f20:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003f24:	f000 8083 	beq.w	800402e <HAL_RCC_OscConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 8003f28:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4d6c      	ldr	r5, [pc, #432]	; (80040dc <HAL_RCC_OscConfig+0x2d4>)
 8003f2c:	682a      	ldr	r2, [r5, #0]
 8003f2e:	05d1      	lsls	r1, r2, #23
 8003f30:	f140 80a1 	bpl.w	8004076 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f34:	68a3      	ldr	r3, [r4, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f000 80b1 	beq.w	800409e <HAL_RCC_OscConfig+0x296>
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	f000 80f7 	beq.w	8004130 <HAL_RCC_OscConfig+0x328>
 8003f42:	4d63      	ldr	r5, [pc, #396]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003f44:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	672a      	str	r2, [r5, #112]	; 0x70
 8003f4c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 80a7 	bne.w	80040a8 <HAL_RCC_OscConfig+0x2a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7ff fa01 	bl	8003360 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	e006      	b.n	8003f74 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7ff f9fb 	bl	8003360 <HAL_GetTick>
 8003f6a:	eba0 0008 	sub.w	r0, r0, r8
 8003f6e:	42b8      	cmp	r0, r7
 8003f70:	f200 8091 	bhi.w	8004096 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f76:	0798      	lsls	r0, r3, #30
 8003f78:	d4f5      	bmi.n	8003f66 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7a:	2e00      	cmp	r6, #0
 8003f7c:	f040 80d2 	bne.w	8004124 <HAL_RCC_OscConfig+0x31c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f80:	69a2      	ldr	r2, [r4, #24]
 8003f82:	b1ca      	cbz	r2, 8003fb8 <HAL_RCC_OscConfig+0x1b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f84:	4d52      	ldr	r5, [pc, #328]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003f86:	68a9      	ldr	r1, [r5, #8]
 8003f88:	f001 010c 	and.w	r1, r1, #12
 8003f8c:	2908      	cmp	r1, #8
 8003f8e:	d024      	beq.n	8003fda <HAL_RCC_OscConfig+0x1d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4a53      	ldr	r2, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0x2d8>)
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9a:	f000 80d3 	beq.w	8004144 <HAL_RCC_OscConfig+0x33c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7ff f9df 	bl	8003360 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003fa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7ff f9da 	bl	8003360 <HAL_GetTick>
 8003fac:	1b40      	subs	r0, r0, r5
 8003fae:	2802      	cmp	r0, #2
 8003fb0:	d871      	bhi.n	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	d4f7      	bmi.n	8003fa8 <HAL_RCC_OscConfig+0x1a0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003fb8:	2000      	movs	r0, #0
}
 8003fba:	b002      	add	sp, #8
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fc0:	684a      	ldr	r2, [r1, #4]
 8003fc2:	0257      	lsls	r7, r2, #9
 8003fc4:	f57f af34 	bpl.w	8003e30 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	0395      	lsls	r5, r2, #14
 8003fce:	f57f af59 	bpl.w	8003e84 <HAL_RCC_OscConfig+0x7c>
 8003fd2:	6862      	ldr	r2, [r4, #4]
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	f47f af55 	bne.w	8003e84 <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
}
 8003fdc:	b002      	add	sp, #8
 8003fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fe2:	6852      	ldr	r2, [r2, #4]
 8003fe4:	0257      	lsls	r7, r2, #9
 8003fe6:	f53f af5b 	bmi.w	8003ea0 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	4a39      	ldr	r2, [pc, #228]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	0795      	lsls	r5, r2, #30
 8003ff0:	d502      	bpl.n	8003ff8 <HAL_RCC_OscConfig+0x1f0>
 8003ff2:	68e2      	ldr	r2, [r4, #12]
 8003ff4:	2a01      	cmp	r2, #1
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4935      	ldr	r1, [pc, #212]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8003ffa:	6920      	ldr	r0, [r4, #16]
 8003ffc:	680a      	ldr	r2, [r1, #0]
 8003ffe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004002:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004006:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004008:	071a      	lsls	r2, r3, #28
 800400a:	d585      	bpl.n	8003f18 <HAL_RCC_OscConfig+0x110>
 800400c:	e76e      	b.n	8003eec <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 800400e:	4a32      	ldr	r2, [pc, #200]	; (80040d8 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4d2f      	ldr	r5, [pc, #188]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8004012:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004014:	f7ff f9a4 	bl	8003360 <HAL_GetTick>
 8004018:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401a:	e004      	b.n	8004026 <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401c:	f7ff f9a0 	bl	8003360 <HAL_GetTick>
 8004020:	1b80      	subs	r0, r0, r6
 8004022:	2802      	cmp	r0, #2
 8004024:	d837      	bhi.n	8004096 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004026:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004028:	079f      	lsls	r7, r3, #30
 800402a:	d4f7      	bmi.n	800401c <HAL_RCC_OscConfig+0x214>
 800402c:	e773      	b.n	8003f16 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
 8004038:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004042:	2601      	movs	r6, #1
 8004044:	e771      	b.n	8003f2a <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004046:	684a      	ldr	r2, [r1, #4]
 8004048:	0256      	lsls	r6, r2, #9
 800404a:	f57f aef8 	bpl.w	8003e3e <HAL_RCC_OscConfig+0x36>
 800404e:	e7bb      	b.n	8003fc8 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800405a:	f7ff f981 	bl	8003360 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4d1c      	ldr	r5, [pc, #112]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004060:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	e004      	b.n	800406e <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004064:	f7ff f97c 	bl	8003360 <HAL_GetTick>
 8004068:	1b80      	subs	r0, r0, r6
 800406a:	2864      	cmp	r0, #100	; 0x64
 800406c:	d813      	bhi.n	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	0398      	lsls	r0, r3, #14
 8004072:	d5f7      	bpl.n	8004064 <HAL_RCC_OscConfig+0x25c>
 8004074:	e705      	b.n	8003e82 <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	682a      	ldr	r2, [r5, #0]
 8004078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407c:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800407e:	f7ff f96f 	bl	8003360 <HAL_GetTick>
 8004082:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	05da      	lsls	r2, r3, #23
 8004088:	f53f af54 	bmi.w	8003f34 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7ff f968 	bl	8003360 <HAL_GetTick>
 8004090:	1bc0      	subs	r0, r0, r7
 8004092:	2802      	cmp	r0, #2
 8004094:	d9f6      	bls.n	8004084 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 8004096:	2003      	movs	r0, #3
}
 8004098:	b002      	add	sp, #8
 800409a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409e:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
 80040a0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80040a8:	f7ff f95a 	bl	8003360 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	4d08      	ldr	r5, [pc, #32]	; (80040d0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80040ae:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b4:	e005      	b.n	80040c2 <HAL_RCC_OscConfig+0x2ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7ff f953 	bl	8003360 <HAL_GetTick>
 80040ba:	eba0 0008 	sub.w	r0, r0, r8
 80040be:	42b8      	cmp	r0, r7
 80040c0:	d8e9      	bhi.n	8004096 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80040c4:	079b      	lsls	r3, r3, #30
 80040c6:	d5f6      	bpl.n	80040b6 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 80040c8:	2e00      	cmp	r6, #0
 80040ca:	f43f af59 	beq.w	8003f80 <HAL_RCC_OscConfig+0x178>
 80040ce:	e029      	b.n	8004124 <HAL_RCC_OscConfig+0x31c>
 80040d0:	40023800 	.word	0x40023800
 80040d4:	42470000 	.word	0x42470000
 80040d8:	42470e80 	.word	0x42470e80
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42470060 	.word	0x42470060
        __HAL_RCC_HSI_DISABLE();
 80040e4:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <HAL_RCC_OscConfig+0x39c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4d30      	ldr	r5, [pc, #192]	; (80041a8 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_HSI_DISABLE();
 80040e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040ea:	f7ff f939 	bl	8003360 <HAL_GetTick>
 80040ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f0:	e004      	b.n	80040fc <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f2:	f7ff f935 	bl	8003360 <HAL_GetTick>
 80040f6:	1b80      	subs	r0, r0, r6
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d8cc      	bhi.n	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	0799      	lsls	r1, r3, #30
 8004100:	d4f7      	bmi.n	80040f2 <HAL_RCC_OscConfig+0x2ea>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	e6f0      	b.n	8003ee8 <HAL_RCC_OscConfig+0xe0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	684a      	ldr	r2, [r1, #4]
 8004108:	0256      	lsls	r6, r2, #9
 800410a:	f53f aed0 	bmi.w	8003eae <HAL_RCC_OscConfig+0xa6>
 800410e:	e76c      	b.n	8003fea <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_OscConfig+0x3a0>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e79a      	b.n	800405a <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <HAL_RCC_OscConfig+0x3a0>)
 8004126:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	e727      	b.n	8003f80 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCC_OscConfig+0x3a0>)
 8004132:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004134:	f042 0204 	orr.w	r2, r2, #4
 8004138:	671a      	str	r2, [r3, #112]	; 0x70
 800413a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	671a      	str	r2, [r3, #112]	; 0x70
 8004142:	e7b1      	b.n	80040a8 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 8004144:	f7ff f90c 	bl	8003360 <HAL_GetTick>
 8004148:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e004      	b.n	8004156 <HAL_RCC_OscConfig+0x34e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7ff f908 	bl	8003360 <HAL_GetTick>
 8004150:	1b80      	subs	r0, r0, r6
 8004152:	2802      	cmp	r0, #2
 8004154:	d89f      	bhi.n	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	0199      	lsls	r1, r3, #6
 800415a:	d4f7      	bmi.n	800414c <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004162:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004164:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004166:	4313      	orrs	r3, r2
 8004168:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4c0f      	ldr	r4, [pc, #60]	; (80041a8 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800416c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004170:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004174:	0852      	lsrs	r2, r2, #1
 8004176:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800417a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800417c:	490b      	ldr	r1, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x3a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004182:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004184:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004186:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004188:	f7ff f8ea 	bl	8003360 <HAL_GetTick>
 800418c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	e005      	b.n	800419c <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7ff f8e6 	bl	8003360 <HAL_GetTick>
 8004194:	1b40      	subs	r0, r0, r5
 8004196:	2802      	cmp	r0, #2
 8004198:	f63f af7d 	bhi.w	8004096 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	019a      	lsls	r2, r3, #6
 80041a0:	d5f6      	bpl.n	8004190 <HAL_RCC_OscConfig+0x388>
 80041a2:	e709      	b.n	8003fb8 <HAL_RCC_OscConfig+0x1b0>
 80041a4:	42470000 	.word	0x42470000
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470060 	.word	0x42470060

080041b0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d05c      	beq.n	800426e <HAL_TIM_Base_Init+0xbe>
{
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041ba:	4604      	mov	r4, r0
 80041bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041c0:	b3bb      	cbz	r3, 8004232 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	4e3a      	ldr	r6, [pc, #232]	; (80042b0 <HAL_TIM_Base_Init+0x100>)
 80041c6:	69a5      	ldr	r5, [r4, #24]
 80041c8:	68e0      	ldr	r0, [r4, #12]
 80041ca:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d2:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80041d4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d6:	d04c      	beq.n	8004272 <HAL_TIM_Base_Init+0xc2>
 80041d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80041dc:	d058      	beq.n	8004290 <HAL_TIM_Base_Init+0xe0>
 80041de:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80041e2:	42b2      	cmp	r2, r6
 80041e4:	d02a      	beq.n	800423c <HAL_TIM_Base_Init+0x8c>
 80041e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80041ea:	42b2      	cmp	r2, r6
 80041ec:	d026      	beq.n	800423c <HAL_TIM_Base_Init+0x8c>
 80041ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80041f2:	42b2      	cmp	r2, r6
 80041f4:	d022      	beq.n	800423c <HAL_TIM_Base_Init+0x8c>
 80041f6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80041fa:	42b2      	cmp	r2, r6
 80041fc:	d01e      	beq.n	800423c <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8004202:	42b2      	cmp	r2, r6
 8004204:	d013      	beq.n	800422e <HAL_TIM_Base_Init+0x7e>
 8004206:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800420a:	42b2      	cmp	r2, r6
 800420c:	d00f      	beq.n	800422e <HAL_TIM_Base_Init+0x7e>
 800420e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004212:	42b2      	cmp	r2, r6
 8004214:	d00b      	beq.n	800422e <HAL_TIM_Base_Init+0x7e>
 8004216:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800421a:	42b2      	cmp	r2, r6
 800421c:	d007      	beq.n	800422e <HAL_TIM_Base_Init+0x7e>
 800421e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004222:	42b2      	cmp	r2, r6
 8004224:	d003      	beq.n	800422e <HAL_TIM_Base_Init+0x7e>
 8004226:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800422a:	42b2      	cmp	r2, r6
 800422c:	d138      	bne.n	80042a0 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	6926      	ldr	r6, [r4, #16]
 8004230:	e033      	b.n	800429a <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8004232:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004236:	f7fe f82f 	bl	8002298 <HAL_TIM_Base_MspInit>
 800423a:	e7c2      	b.n	80041c2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800423c:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423e:	4f1d      	ldr	r7, [pc, #116]	; (80042b4 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004244:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004252:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8004256:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004258:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800425a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800425c:	d101      	bne.n	8004262 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425e:	6963      	ldr	r3, [r4, #20]
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004262:	2301      	movs	r3, #1
 8004264:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8004266:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004268:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800426e:	2001      	movs	r0, #1
}
 8004270:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004272:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004274:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800427a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800427c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004280:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004286:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004288:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800428c:	6291      	str	r1, [r2, #40]	; 0x28
 800428e:	e7e6      	b.n	800425e <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8004290:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004298:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80042a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042aa:	6291      	str	r1, [r2, #40]	; 0x28
 80042ac:	e7d9      	b.n	8004262 <HAL_TIM_Base_Init+0xb2>
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010400 	.word	0x40010400

080042b8 <HAL_TIM_PWM_MspInit>:
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop

080042bc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80042bc:	2800      	cmp	r0, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_PWM_Init+0xbe>
{
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042c6:	4604      	mov	r4, r0
 80042c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042cc:	b3bb      	cbz	r3, 800433e <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ce:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	4e3a      	ldr	r6, [pc, #232]	; (80043bc <HAL_TIM_PWM_Init+0x100>)
 80042d2:	69a5      	ldr	r5, [r4, #24]
 80042d4:	68e0      	ldr	r0, [r4, #12]
 80042d6:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	2302      	movs	r3, #2
 80042da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042de:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80042e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e2:	d04c      	beq.n	800437e <HAL_TIM_PWM_Init+0xc2>
 80042e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80042e8:	d058      	beq.n	800439c <HAL_TIM_PWM_Init+0xe0>
 80042ea:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80042ee:	42b2      	cmp	r2, r6
 80042f0:	d02a      	beq.n	8004348 <HAL_TIM_PWM_Init+0x8c>
 80042f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042f6:	42b2      	cmp	r2, r6
 80042f8:	d026      	beq.n	8004348 <HAL_TIM_PWM_Init+0x8c>
 80042fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042fe:	42b2      	cmp	r2, r6
 8004300:	d022      	beq.n	8004348 <HAL_TIM_PWM_Init+0x8c>
 8004302:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8004306:	42b2      	cmp	r2, r6
 8004308:	d01e      	beq.n	8004348 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800430e:	42b2      	cmp	r2, r6
 8004310:	d013      	beq.n	800433a <HAL_TIM_PWM_Init+0x7e>
 8004312:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004316:	42b2      	cmp	r2, r6
 8004318:	d00f      	beq.n	800433a <HAL_TIM_PWM_Init+0x7e>
 800431a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800431e:	42b2      	cmp	r2, r6
 8004320:	d00b      	beq.n	800433a <HAL_TIM_PWM_Init+0x7e>
 8004322:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8004326:	42b2      	cmp	r2, r6
 8004328:	d007      	beq.n	800433a <HAL_TIM_PWM_Init+0x7e>
 800432a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800432e:	42b2      	cmp	r2, r6
 8004330:	d003      	beq.n	800433a <HAL_TIM_PWM_Init+0x7e>
 8004332:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004336:	42b2      	cmp	r2, r6
 8004338:	d138      	bne.n	80043ac <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433a:	6926      	ldr	r6, [r4, #16]
 800433c:	e033      	b.n	80043a6 <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800433e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004342:	f7ff ffb9 	bl	80042b8 <HAL_TIM_PWM_MspInit>
 8004346:	e7c2      	b.n	80042ce <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8004348:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800434a:	4f1d      	ldr	r7, [pc, #116]	; (80043c0 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004350:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004358:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004360:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8004362:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004364:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004366:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 800436a:	6963      	ldr	r3, [r4, #20]
 800436c:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800436e:	2301      	movs	r3, #1
 8004370:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8004372:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004374:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800437a:	2001      	movs	r0, #1
}
 800437c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800437e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004380:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004386:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800438e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004392:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004394:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004396:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004398:	6291      	str	r1, [r2, #40]	; 0x28
 800439a:	e7e6      	b.n	800436a <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 800439c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80043a4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80043b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80043b6:	6291      	str	r1, [r2, #40]	; 0x28
 80043b8:	e7d9      	b.n	800436e <HAL_TIM_PWM_Init+0xb2>
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40010400 	.word	0x40010400

080043c4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80043c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	f000 80cc 	beq.w	8004566 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 80043ce:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80043d2:	2401      	movs	r4, #1
 80043d4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80043dc:	2a0c      	cmp	r2, #12
 80043de:	d835      	bhi.n	800444c <HAL_TIM_PWM_ConfigChannel+0x88>
 80043e0:	e8df f002 	tbb	[pc, r2]
 80043e4:	34343407 	.word	0x34343407
 80043e8:	3434346a 	.word	0x3434346a
 80043ec:	34343496 	.word	0x34343496
 80043f0:	3d          	.byte	0x3d
 80043f1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043f4:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80043fa:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043fc:	4e74      	ldr	r6, [pc, #464]	; (80045d0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	f025 0501 	bic.w	r5, r5, #1
 8004402:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004404:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004406:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004408:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800440a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800440e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004412:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8004414:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8004418:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800441c:	f000 80bb 	beq.w	8004596 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8004420:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004424:	42b3      	cmp	r3, r6
 8004426:	f000 80b6 	beq.w	8004596 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800442a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800442c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800442e:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004430:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004432:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004434:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004436:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004438:	f044 0408 	orr.w	r4, r4, #8
 800443c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	f021 0104 	bic.w	r1, r1, #4
 8004444:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	432a      	orrs	r2, r5
 800444a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800444c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800444e:	2201      	movs	r2, #1
 8004450:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004454:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004458:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800445a:	4618      	mov	r0, r3
}
 800445c:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004460:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004464:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004466:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	4e59      	ldr	r6, [pc, #356]	; (80045d0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800446a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800446e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004470:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004472:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004474:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800447a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004480:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004488:	d06f      	beq.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800448a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800448e:	42b3      	cmp	r3, r6
 8004490:	d06b      	beq.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004492:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004494:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004496:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004498:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800449c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800449e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80044a4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80044ac:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80044b4:	61da      	str	r2, [r3, #28]
      break;
 80044b6:	e7c9      	b.n	800444c <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044b8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ba:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044bc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044be:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c0:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80045d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c4:	f025 0510 	bic.w	r5, r5, #16
 80044c8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80044ca:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80044cc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80044ce:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80044d0:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044d8:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044da:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044de:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e2:	d065      	beq.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 80044e4:	4f3b      	ldr	r7, [pc, #236]	; (80045d4 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80044e6:	42bb      	cmp	r3, r7
 80044e8:	d062      	beq.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 80044ea:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80044ec:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80044ee:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80044f0:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80044f2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f4:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80044fc:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fe:	6999      	ldr	r1, [r3, #24]
 8004500:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004504:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800450c:	619a      	str	r2, [r3, #24]
      break;
 800450e:	e79d      	b.n	800444c <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004510:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004512:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004514:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004516:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004518:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80045d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004520:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004522:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004524:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004526:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004528:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800452c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004530:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004532:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004536:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800453a:	d01c      	beq.n	8004576 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 800453c:	4f25      	ldr	r7, [pc, #148]	; (80045d4 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800453e:	42bb      	cmp	r3, r7
 8004540:	d019      	beq.n	8004576 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 8004542:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004544:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004546:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004548:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800454a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800454c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004550:	f044 0408 	orr.w	r4, r4, #8
 8004554:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	f021 0104 	bic.w	r1, r1, #4
 800455c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	432a      	orrs	r2, r5
 8004562:	61da      	str	r2, [r3, #28]
      break;
 8004564:	e772      	b.n	800444c <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 8004566:	2002      	movs	r0, #2
}
 8004568:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800456a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800456c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004570:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004574:	e78d      	b.n	8004492 <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004576:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800457c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004580:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004584:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004588:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004590:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8004594:	e7d5      	b.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 8004596:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004598:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800459c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800459e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045a2:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a8:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ac:	4335      	orrs	r5, r6
 80045ae:	e73c      	b.n	800442a <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ba:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045be:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c2:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ca:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80045ce:	e78c      	b.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x126>
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010400 	.word	0x40010400

080045d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80045d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80045e2:	6803      	ldr	r3, [r0, #0]
{
 80045e4:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80045e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80045ea:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80045ec:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045f2:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 80045f6:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 80045f8:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80045fa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80045fe:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004600:	d074      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0x114>
 8004602:	d94a      	bls.n	800469a <HAL_TIM_ConfigClockSource+0xc2>
 8004604:	2c60      	cmp	r4, #96	; 0x60
 8004606:	d02d      	beq.n	8004664 <HAL_TIM_ConfigClockSource+0x8c>
 8004608:	d956      	bls.n	80046b8 <HAL_TIM_ConfigClockSource+0xe0>
 800460a:	2c70      	cmp	r4, #112	; 0x70
 800460c:	d01a      	beq.n	8004644 <HAL_TIM_ConfigClockSource+0x6c>
 800460e:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8004612:	d10e      	bne.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004614:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004618:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800461a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800461c:	432a      	orrs	r2, r5
 800461e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004622:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004626:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004628:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004630:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8004632:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004634:	2201      	movs	r2, #1
 8004636:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800463a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800463e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004640:	4618      	mov	r0, r3
}
 8004642:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004644:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004648:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800464a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800464c:	432a      	orrs	r2, r5
 800464e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004652:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004656:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004658:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800465a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004660:	609a      	str	r2, [r3, #8]
      break;
 8004662:	e7e6      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004664:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004666:	684d      	ldr	r5, [r1, #4]
 8004668:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466a:	f024 0410 	bic.w	r4, r4, #16
 800466e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004670:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004672:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004674:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004678:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800467c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004680:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004684:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004686:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004688:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800468a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800468e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	e7cd      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004696:	2002      	movs	r0, #2
}
 8004698:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800469a:	2c10      	cmp	r4, #16
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xd0>
 800469e:	d93d      	bls.n	800471c <HAL_TIM_ConfigClockSource+0x144>
 80046a0:	2c20      	cmp	r4, #32
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xd0>
 80046a4:	2c30      	cmp	r4, #48	; 0x30
 80046a6:	d1c4      	bne.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80046a8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046aa:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b2:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80046b4:	609c      	str	r4, [r3, #8]
 80046b6:	e7bc      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80046b8:	2c50      	cmp	r4, #80	; 0x50
 80046ba:	d1ba      	bne.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80046bc:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046be:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c0:	684c      	ldr	r4, [r1, #4]
 80046c2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c4:	f026 0601 	bic.w	r6, r6, #1
 80046c8:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ca:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046cc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80046d8:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80046da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046dc:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80046de:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	e7a2      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80046ec:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f0:	684c      	ldr	r4, [r1, #4]
 80046f2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f4:	f026 0601 	bic.w	r6, r6, #1
 80046f8:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004700:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004704:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004708:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800470e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004710:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004714:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	e78a      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800471c:	2c00      	cmp	r4, #0
 800471e:	d0c3      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xd0>
 8004720:	e787      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x5a>
 8004722:	bf00      	nop

08004724 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004724:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d047      	beq.n	80047bc <HAL_TIM_SlaveConfigSynchro+0x98>
  tmpsmcr = htim->Instance->SMCR;
 800472c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800472e:	2302      	movs	r3, #2
{
 8004730:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004732:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004736:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 800473a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800473c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004740:	432b      	orrs	r3, r5
 8004742:	4604      	mov	r4, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004744:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004748:	4333      	orrs	r3, r6
  __HAL_LOCK(htim);
 800474a:	2001      	movs	r0, #1
  switch (sSlaveConfig->InputTrigger)
 800474c:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 800474e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8004752:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8004754:	d04e      	beq.n	80047f4 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8004756:	d91f      	bls.n	8004798 <HAL_TIM_SlaveConfigSynchro+0x74>
 8004758:	2d60      	cmp	r5, #96	; 0x60
 800475a:	d038      	beq.n	80047ce <HAL_TIM_SlaveConfigSynchro+0xaa>
 800475c:	2d70      	cmp	r5, #112	; 0x70
 800475e:	d10a      	bne.n	8004776 <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004760:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004764:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8004766:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004768:	432b      	orrs	r3, r5
 800476a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004772:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004774:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004776:	68d3      	ldr	r3, [r2, #12]
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800477e:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004780:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8004782:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004788:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800478a:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 800478c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004790:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8004794:	bcf0      	pop	{r4, r5, r6, r7}
 8004796:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004798:	2d40      	cmp	r5, #64	; 0x40
 800479a:	d1ec      	bne.n	8004776 <HAL_TIM_SlaveConfigSynchro+0x52>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800479c:	2e05      	cmp	r6, #5
 800479e:	d00f      	beq.n	80047c0 <HAL_TIM_SlaveConfigSynchro+0x9c>
      tmpccer = htim->Instance->CCER;
 80047a0:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047a2:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047a4:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047a6:	f020 0001 	bic.w	r0, r0, #1
 80047aa:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047ac:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047b2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80047b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80047b8:	6215      	str	r5, [r2, #32]
 80047ba:	e7dc      	b.n	8004776 <HAL_TIM_SlaveConfigSynchro+0x52>
  __HAL_LOCK(htim);
 80047bc:	2002      	movs	r0, #2
}
 80047be:	4770      	bx	lr
    __HAL_UNLOCK(htim);
 80047c0:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80047c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80047c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80047ca:	bcf0      	pop	{r4, r5, r6, r7}
 80047cc:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ce:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d0:	688d      	ldr	r5, [r1, #8]
 80047d2:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d4:	f020 0010 	bic.w	r0, r0, #16
 80047d8:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047da:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80047dc:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047de:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80047ee:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	e7c0      	b.n	8004776 <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpccer = TIMx->CCER;
 80047f4:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f6:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f8:	6888      	ldr	r0, [r1, #8]
 80047fa:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fc:	f026 0601 	bic.w	r6, r6, #1
 8004800:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004802:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004804:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800480c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004812:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004814:	6211      	str	r1, [r2, #32]
 8004816:	e7ae      	b.n	8004776 <HAL_TIM_SlaveConfigSynchro+0x52>

08004818 <TIM_Base_SetConfig>:
{
 8004818:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800481a:	4e36      	ldr	r6, [pc, #216]	; (80048f4 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 800481c:	6803      	ldr	r3, [r0, #0]
 800481e:	694d      	ldr	r5, [r1, #20]
 8004820:	688c      	ldr	r4, [r1, #8]
 8004822:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004824:	42b0      	cmp	r0, r6
 8004826:	d055      	beq.n	80048d4 <TIM_Base_SetConfig+0xbc>
 8004828:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800482c:	d029      	beq.n	8004882 <TIM_Base_SetConfig+0x6a>
 800482e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8004832:	42b0      	cmp	r0, r6
 8004834:	d037      	beq.n	80048a6 <TIM_Base_SetConfig+0x8e>
 8004836:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800483a:	42b0      	cmp	r0, r6
 800483c:	d033      	beq.n	80048a6 <TIM_Base_SetConfig+0x8e>
 800483e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004842:	42b0      	cmp	r0, r6
 8004844:	d02f      	beq.n	80048a6 <TIM_Base_SetConfig+0x8e>
 8004846:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800484a:	42b0      	cmp	r0, r6
 800484c:	d02b      	beq.n	80048a6 <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8004852:	42b0      	cmp	r0, r6
 8004854:	d013      	beq.n	800487e <TIM_Base_SetConfig+0x66>
 8004856:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800485a:	42b0      	cmp	r0, r6
 800485c:	d00f      	beq.n	800487e <TIM_Base_SetConfig+0x66>
 800485e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004862:	42b0      	cmp	r0, r6
 8004864:	d00b      	beq.n	800487e <TIM_Base_SetConfig+0x66>
 8004866:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800486a:	42b0      	cmp	r0, r6
 800486c:	d007      	beq.n	800487e <TIM_Base_SetConfig+0x66>
 800486e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004872:	42b0      	cmp	r0, r6
 8004874:	d003      	beq.n	800487e <TIM_Base_SetConfig+0x66>
 8004876:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800487a:	42b0      	cmp	r0, r6
 800487c:	d109      	bne.n	8004892 <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	68c9      	ldr	r1, [r1, #12]
 8004880:	e004      	b.n	800488c <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8004882:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004884:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800488a:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800488c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004890:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004896:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004898:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800489c:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800489e:	2301      	movs	r3, #1
 80048a0:	6143      	str	r3, [r0, #20]
}
 80048a2:	bcf0      	pop	{r4, r5, r6, r7}
 80048a4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80048a6:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a8:	4f13      	ldr	r7, [pc, #76]	; (80048f8 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048ae:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b0:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048bc:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048be:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 80048c0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048c4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c6:	d1ea      	bne.n	800489e <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	690b      	ldr	r3, [r1, #16]
 80048ca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80048cc:	2301      	movs	r3, #1
 80048ce:	6143      	str	r3, [r0, #20]
}
 80048d0:	bcf0      	pop	{r4, r5, r6, r7}
 80048d2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80048d4:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048dc:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80048ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ec:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048ee:	6282      	str	r2, [r0, #40]	; 0x28
 80048f0:	e7ea      	b.n	80048c8 <TIM_Base_SetConfig+0xb0>
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40010400 	.word	0x40010400

080048fc <TIM_OC2_SetConfig>:
{
 80048fc:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fe:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004900:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004902:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004904:	4d15      	ldr	r5, [pc, #84]	; (800495c <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004906:	f024 0410 	bic.w	r4, r4, #16
 800490a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800490c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800490e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004910:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004912:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004916:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800491a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800491c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004924:	d00a      	beq.n	800493c <TIM_OC2_SetConfig+0x40>
 8004926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800492a:	42a8      	cmp	r0, r5
 800492c:	d006      	beq.n	800493c <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 800492e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004930:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004932:	6182      	str	r2, [r0, #24]
}
 8004934:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004936:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004938:	6203      	str	r3, [r0, #32]
}
 800493a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800493c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800493e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004942:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004946:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800494a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800494e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004954:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004958:	e7e9      	b.n	800492e <TIM_OC2_SetConfig+0x32>
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000

08004960 <TIM_TI1_SetConfig>:
{
 8004960:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004964:	4e1b      	ldr	r6, [pc, #108]	; (80049d4 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004966:	f024 0401 	bic.w	r4, r4, #1
 800496a:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800496c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800496e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004970:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004972:	d01d      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 8004974:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004978:	d01a      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 800497a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800497e:	42b0      	cmp	r0, r6
 8004980:	d016      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 8004982:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004986:	42b0      	cmp	r0, r6
 8004988:	d012      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 800498a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800498e:	42b0      	cmp	r0, r6
 8004990:	d00e      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 8004992:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8004996:	42b0      	cmp	r0, r6
 8004998:	d00a      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 800499a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800499e:	42b0      	cmp	r0, r6
 80049a0:	d006      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
 80049a2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80049a6:	42b0      	cmp	r0, r6
 80049a8:	d002      	beq.n	80049b0 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049aa:	f044 0201 	orr.w	r2, r4, #1
 80049ae:	e002      	b.n	80049b6 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049b0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80049b4:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049b6:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b8:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049bc:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049c2:	f001 010a 	and.w	r1, r1, #10
 80049c6:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049c8:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 80049ca:	6183      	str	r3, [r0, #24]
}
 80049cc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80049ce:	6201      	str	r1, [r0, #32]
}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000

080049d8 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop

080049dc <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80049dc:	2800      	cmp	r0, #0
 80049de:	d054      	beq.n	8004a8a <HAL_TIMEx_HallSensor_Init+0xae>
{
 80049e0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80049e6:	b088      	sub	sp, #32
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 80049ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d045      	beq.n	8004a80 <HAL_TIMEx_HallSensor_Init+0xa4>
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	2302      	movs	r3, #2
 80049f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	1d21      	adds	r1, r4, #4
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	f7ff ff0b 	bl	8004818 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004a02:	68ab      	ldr	r3, [r5, #8]
 8004a04:	6829      	ldr	r1, [r5, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	f7ff ffa9 	bl	8004960 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a0e:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004a10:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a12:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004a14:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a16:	f022 020c 	bic.w	r2, r2, #12
 8004a1a:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004a1c:	6983      	ldr	r3, [r0, #24]
 8004a1e:	4333      	orrs	r3, r6
 8004a20:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004a22:	6843      	ldr	r3, [r0, #4]
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004a2a:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004a2c:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004a34:	6883      	ldr	r3, [r0, #8]
 8004a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a3a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004a3c:	6883      	ldr	r3, [r0, #8]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004a44:	6883      	ldr	r3, [r0, #8]
 8004a46:	f043 0304 	orr.w	r3, r3, #4
 8004a4a:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004a4c:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004a4e:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004a50:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004a52:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a54:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a58:	9507      	str	r5, [sp, #28]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a5a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004a5e:	f7ff ff4d 	bl	80048fc <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a6a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004a6c:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004a70:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 8004a74:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004a76:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004a7c:	b008      	add	sp, #32
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004a84:	f7ff ffa8 	bl	80049d8 <HAL_TIMEx_HallSensor_MspInit>
 8004a88:	e7b4      	b.n	80049f4 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004a8a:	2001      	movs	r0, #1
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d03a      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	2202      	movs	r2, #2
{
 8004a9c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004aa2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	4d1b      	ldr	r5, [pc, #108]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aaa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aae:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8004ab2:	f04f 0601 	mov.w	r6, #1
 8004ab6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8004aba:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	d019      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d016      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004ada:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004ae2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004aea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d104      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afa:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004afc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004afe:	2201      	movs	r2, #1
 8004b00:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004b04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004b08:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004b0a:	4618      	mov	r0, r3
}
 8004b0c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b0e:	2002      	movs	r0, #2
}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400

08004b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d021      	beq.n	8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8004b24:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b26:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b2a:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b32:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b38:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b3e:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b42:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b48:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b4e:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b50:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b52:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8004b5a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004b5c:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 8004b5e:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8004b60:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8004b64:	4608      	mov	r0, r1
 8004b66:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b68:	2302      	movs	r3, #2
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop

08004b70 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f000 8093 	beq.w	8004c9c <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8004b7a:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b80:	4604      	mov	r4, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8085 	beq.w	8004c92 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b88:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	2224      	movs	r2, #36	; 0x24
 8004b8e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004b92:	68d8      	ldr	r0, [r3, #12]
 8004b94:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b98:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004b9c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ba0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004ba6:	4329      	orrs	r1, r5
 8004ba8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004baa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bac:	6965      	ldr	r5, [r4, #20]
 8004bae:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004bb0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004bb6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bba:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	69a1      	ldr	r1, [r4, #24]
 8004bc4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bc8:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bce:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd0:	4a36      	ldr	r2, [pc, #216]	; (8004cac <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd2:	d034      	beq.n	8004c3e <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d063      	beq.n	8004ca0 <HAL_UART_Init+0x130>
 8004bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d05f      	beq.n	8004ca0 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7ff f89a 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	4d32      	ldr	r5, [pc, #200]	; (8004cb0 <HAL_UART_Init+0x140>)
 8004be8:	2219      	movs	r2, #25
 8004bea:	fba0 0102 	umull	r0, r1, r0, r2
 8004bee:	009a      	lsls	r2, r3, #2
 8004bf0:	0f9b      	lsrs	r3, r3, #30
 8004bf2:	f7fb fb65 	bl	80002c0 <__aeabi_uldivmod>
 8004bf6:	fba5 2100 	umull	r2, r1, r5, r0
 8004bfa:	0949      	lsrs	r1, r1, #5
 8004bfc:	2264      	movs	r2, #100	; 0x64
 8004bfe:	fb02 0211 	mls	r2, r2, r1, r0
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	3232      	adds	r2, #50	; 0x32
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	fba5 0202 	umull	r0, r2, r5, r2
 8004c0c:	0109      	lsls	r1, r1, #4
 8004c0e:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8004c12:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c22:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004c24:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8004c30:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c32:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d031      	beq.n	8004ca6 <HAL_UART_Init+0x136>
 8004c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02d      	beq.n	8004ca6 <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c4a:	f7ff f865 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c4e:	6862      	ldr	r2, [r4, #4]
 8004c50:	2600      	movs	r6, #0
 8004c52:	1892      	adds	r2, r2, r2
 8004c54:	f04f 0119 	mov.w	r1, #25
 8004c58:	eb46 0306 	adc.w	r3, r6, r6
 8004c5c:	fba0 0101 	umull	r0, r1, r0, r1
 8004c60:	f7fb fb2e 	bl	80002c0 <__aeabi_uldivmod>
 8004c64:	4e12      	ldr	r6, [pc, #72]	; (8004cb0 <HAL_UART_Init+0x140>)
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	fba6 2100 	umull	r2, r1, r6, r0
 8004c6c:	094d      	lsrs	r5, r1, #5
 8004c6e:	2264      	movs	r2, #100	; 0x64
 8004c70:	fb02 0215 	mls	r2, r2, r5, r0
 8004c74:	00d2      	lsls	r2, r2, #3
 8004c76:	3232      	adds	r2, #50	; 0x32
 8004c78:	fba6 1202 	umull	r1, r2, r6, r2
 8004c7c:	0952      	lsrs	r2, r2, #5
 8004c7e:	f002 0107 	and.w	r1, r2, #7
 8004c82:	0052      	lsls	r2, r2, #1
 8004c84:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004c88:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004c8c:	440a      	add	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	e7c0      	b.n	8004c14 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004c92:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004c96:	f7fd fbb7 	bl	8002408 <HAL_UART_MspInit>
 8004c9a:	e775      	b.n	8004b88 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004c9c:	2001      	movs	r0, #1
}
 8004c9e:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7ff f84a 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8004ca4:	e79e      	b.n	8004be4 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca6:	f7ff f847 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8004caa:	e7d0      	b.n	8004c4e <HAL_UART_Init+0xde>
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	51eb851f 	.word	0x51eb851f

08004cb4 <HAL_UART_Transmit>:
{
 8004cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb8:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004cba:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8004cbe:	2920      	cmp	r1, #32
{
 8004cc0:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc2:	d132      	bne.n	8004d2a <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	d034      	beq.n	8004d32 <HAL_UART_Transmit+0x7e>
 8004cc8:	9201      	str	r2, [sp, #4]
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	d031      	beq.n	8004d32 <HAL_UART_Transmit+0x7e>
 8004cce:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8004cd0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	d027      	beq.n	8004d2a <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cda:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8004cde:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce2:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8004ce6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004cee:	f7fe fb37 	bl	8003360 <HAL_GetTick>
    huart->TxXferSize = Size;
 8004cf2:	9a01      	ldr	r2, [sp, #4]
 8004cf4:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cf6:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004cf8:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 8004cfa:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8004cfe:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8004d00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d03b      	beq.n	8004d80 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 8004d08:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d0a:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8004d0c:	3801      	subs	r0, #1
 8004d0e:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d10:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8004d14:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d16:	d01b      	beq.n	8004d50 <HAL_UART_Transmit+0x9c>
 8004d18:	1c78      	adds	r0, r7, #1
 8004d1a:	d13b      	bne.n	8004d94 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1c:	6810      	ldr	r0, [r2, #0]
 8004d1e:	0601      	lsls	r1, r0, #24
 8004d20:	d5fc      	bpl.n	8004d1c <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d22:	7833      	ldrb	r3, [r6, #0]
 8004d24:	6053      	str	r3, [r2, #4]
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ea      	b.n	8004d00 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 8004d2a:	2002      	movs	r0, #2
}
 8004d2c:	b002      	add	sp, #8
 8004d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004d32:	2001      	movs	r0, #1
}
 8004d34:	b002      	add	sp, #8
 8004d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	d40c      	bmi.n	8004d5a <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d40:	2f00      	cmp	r7, #0
 8004d42:	d031      	beq.n	8004da8 <HAL_UART_Transmit+0xf4>
 8004d44:	f7fe fb0c 	bl	8003360 <HAL_GetTick>
 8004d48:	1b40      	subs	r0, r0, r5
 8004d4a:	4287      	cmp	r7, r0
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	d32b      	bcc.n	8004da8 <HAL_UART_Transmit+0xf4>
 8004d50:	1c78      	adds	r0, r7, #1
 8004d52:	d1f2      	bne.n	8004d3a <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d54:	6810      	ldr	r0, [r2, #0]
 8004d56:	0601      	lsls	r1, r0, #24
 8004d58:	d5fc      	bpl.n	8004d54 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d5a:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d5c:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d64:	2900      	cmp	r1, #0
 8004d66:	d1de      	bne.n	8004d26 <HAL_UART_Transmit+0x72>
          pData += 2U;
 8004d68:	3602      	adds	r6, #2
 8004d6a:	e7c9      	b.n	8004d00 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	065b      	lsls	r3, r3, #25
 8004d70:	d40b      	bmi.n	8004d8a <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d72:	b1cf      	cbz	r7, 8004da8 <HAL_UART_Transmit+0xf4>
 8004d74:	f7fe faf4 	bl	8003360 <HAL_GetTick>
 8004d78:	1b40      	subs	r0, r0, r5
 8004d7a:	4287      	cmp	r7, r0
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	d313      	bcc.n	8004da8 <HAL_UART_Transmit+0xf4>
 8004d80:	1c78      	adds	r0, r7, #1
 8004d82:	d1f3      	bne.n	8004d6c <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	0659      	lsls	r1, r3, #25
 8004d88:	d5fc      	bpl.n	8004d84 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8004d90:	2000      	movs	r0, #0
 8004d92:	e7cb      	b.n	8004d2c <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	d4c3      	bmi.n	8004d22 <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d9a:	b12f      	cbz	r7, 8004da8 <HAL_UART_Transmit+0xf4>
 8004d9c:	f7fe fae0 	bl	8003360 <HAL_GetTick>
 8004da0:	1b40      	subs	r0, r0, r5
 8004da2:	4287      	cmp	r7, r0
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	d2b7      	bcs.n	8004d18 <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da8:	68d3      	ldr	r3, [r2, #12]
 8004daa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dae:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004db2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8004db8:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8004dba:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbc:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004dbe:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8004dc2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004dca:	b002      	add	sp, #8
 8004dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004dd0 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8004dd0:	88c0      	ldrh	r0, [r0, #6]
 8004dd2:	4770      	bx	lr

08004dd4 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004dd4:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004dd6:	8840      	ldrh	r0, [r0, #2]
 8004dd8:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004ddc:	0c00      	lsrs	r0, r0, #16
 8004dde:	4770      	bx	lr

08004de0 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8004de0:	b410      	push	{r4}
 8004de2:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004de4:	8802      	ldrh	r2, [r0, #0]
 8004de6:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004de8:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004dec:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004df0:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004df4:	42a2      	cmp	r2, r4
{
 8004df6:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004df8:	d219      	bcs.n	8004e2e <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004dfa:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8004dfe:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004e02:	b2e4      	uxtb	r4, r4
 8004e04:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004e08:	8882      	ldrh	r2, [r0, #4]
 8004e0a:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004e0e:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004e14:	bfbc      	itt	lt
 8004e16:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004e1a:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bfbc      	itt	lt
 8004e20:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004e24:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004e26:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004e2a:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8004e2e:	b289      	uxth	r1, r1
 8004e30:	2000      	movs	r0, #0
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f361 000f 	bfi	r0, r1, #0, #16
 8004e38:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004e3c:	b005      	add	sp, #20
 8004e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8004e44:	4401      	add	r1, r0
 8004e46:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8004e4a:	4770      	bx	lr

08004e4c <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8004e4c:	4401      	add	r1, r0
}
 8004e4e:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004e52:	4770      	bx	lr

08004e54 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8004e54:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8004e58:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8004e5a:	4770      	bx	lr

08004e5c <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8004e5c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8004e60:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop

08004e68 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	8243      	strh	r3, [r0, #18]
 8004e6c:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004e6e:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004e72:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004e76:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004e7a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8004e7e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8004e82:	4770      	bx	lr

08004e84 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004e84:	b120      	cbz	r0, 8004e90 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004e86:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004e8a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004e8c:	9b00      	ldr	r3, [sp, #0]
 8004e8e:	60c3      	str	r3, [r0, #12]
  }
}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop

08004e94 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004e94:	b190      	cbz	r0, 8004ebc <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004e96:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004e98:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8004e9a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004e9c:	b151      	cbz	r1, 8004eb4 <FCP_CalcCRC+0x20>
 8004e9e:	1e4a      	subs	r2, r1, #1
 8004ea0:	1c81      	adds	r1, r0, #2
 8004ea2:	fa51 f282 	uxtab	r2, r1, r2
 8004ea6:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8004ea8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8004eac:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004eae:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 8004eb0:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004eb2:	d1f9      	bne.n	8004ea8 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004eb4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8004eb8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004ec0:	b4f0      	push	{r4, r5, r6, r7}
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8004ec2:	8a85      	ldrh	r5, [r0, #20]
                                     pHandle->_Super.bElToMecRatio;
 8004ec4:	7842      	ldrb	r2, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004ec6:	8ac6      	ldrh	r6, [r0, #22]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004ec8:	e9d0 430a 	ldrd	r4, r3, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004ecc:	fb16 f602 	smulbb	r6, r6, r2
  hMaxReliableElSpeedUnit *= 2u;
 8004ed0:	006d      	lsls	r5, r5, #1
 8004ed2:	fb15 f502 	smulbb	r5, r5, r2
  hMinReliableElSpeedUnit /= 4u;
 8004ed6:	f3c6 068d 	ubfx	r6, r6, #2, #14

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004eda:	0c22      	lsrs	r2, r4, #16
  hMaxReliableElSpeedUnit *= 2u;
 8004edc:	b2ad      	uxth	r5, r5
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004ede:	f8a0 20c2 	strh.w	r2, [r0, #194]	; 0xc2

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	d069      	beq.n	8004fba <HALL_Init+0xfa>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8004ee6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004eea:	0076      	lsls	r6, r6, #1
 8004eec:	f242 7110 	movw	r1, #10000	; 0x2710
 8004ef0:	fbb1 f1f6 	udiv	r1, r1, r6
 8004ef4:	b28f      	uxth	r7, r1
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004ef6:	4e32      	ldr	r6, [pc, #200]	; (8004fc0 <HALL_Init+0x100>)
 8004ef8:	f8a0 70c0 	strh.w	r7, [r0, #192]	; 0xc0
 8004efc:	fb01 f202 	mul.w	r2, r1, r2
 8004f00:	fba6 6202 	umull	r6, r2, r6, r2
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f04:	492f      	ldr	r1, [pc, #188]	; (8004fc4 <HALL_Init+0x104>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004f06:	69c6      	ldr	r6, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004f08:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004f0c:	0992      	lsrs	r2, r2, #6
 8004f0e:	f8a0 20ae 	strh.w	r2, [r0, #174]	; 0xae
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f12:	fba1 4104 	umull	r4, r1, r1, r4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004f16:	b292      	uxth	r2, r2
 8004f18:	0414      	lsls	r4, r2, #16
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f1a:	0889      	lsrs	r1, r1, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004f1c:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004f20:	eb01 0781 	add.w	r7, r1, r1, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004f24:	8b44      	ldrh	r4, [r0, #26]
 8004f26:	fbb1 f1f4 	udiv	r1, r1, r4
 8004f2a:	fb06 f101 	mul.w	r1, r6, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f2e:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004f32:	007f      	lsls	r7, r7, #1
                       / hMaxReliableElSpeedUnit);
 8004f34:	fbb7 f5f5 	udiv	r5, r7, r5
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004f38:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004f3c:	6999      	ldr	r1, [r3, #24]

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004f3e:	f890 50c6 	ldrb.w	r5, [r0, #198]	; 0xc6

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8004f42:	f890 7048 	ldrb.w	r7, [r0, #72]	; 0x48
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004f46:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8004f48:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8004f4c:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004f50:	fb04 f405 	mul.w	r4, r4, r5
  pHandle->SensorIsReliable = true;
 8004f54:	2501      	movs	r5, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004f56:	fb94 f4f6 	sdiv	r4, r4, r6
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004f5a:	3c01      	subs	r4, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004f5c:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
  pHandle->SensorIsReliable = true;
 8004f60:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8004f64:	6199      	str	r1, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004f68:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	432a      	orrs	r2, r5
 8004f6e:	615a      	str	r2, [r3, #20]
 8004f70:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	f042 0204 	orr.w	r2, r2, #4
 8004f78:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	f042 0202 	orr.w	r2, r2, #2
 8004f80:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	432a      	orrs	r2, r5
 8004f86:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8004f88:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8004f8a:	6a1a      	ldr	r2, [r3, #32]
 8004f8c:	432a      	orrs	r2, r5
 8004f8e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	432a      	orrs	r2, r5
 8004f94:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8004f96:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004f9a:	b163      	cbz	r3, 8004fb6 <HALL_Init+0xf6>
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b2d9      	uxtb	r1, r3
 8004fa0:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004fa4:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8004fa8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004fac:	304c      	adds	r0, #76	; 0x4c
 8004fae:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d1fb      	bne.n	8004fae <HALL_Init+0xee>
  }
}
 8004fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8004fb8:	4770      	bx	lr
 8004fba:	2196      	movs	r1, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	e79a      	b.n	8004ef6 <HALL_Init+0x36>
 8004fc0:	10624dd3 	.word	0x10624dd3
 8004fc4:	aaaaaaab 	.word	0xaaaaaaab

08004fc8 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004fc8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8004fca:	f8b0 c0ae 	ldrh.w	ip, [r0, #174]	; 0xae
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004fce:	68d1      	ldr	r1, [r2, #12]
 8004fd0:	f021 0102 	bic.w	r1, r1, #2
  pHandle->RatioDec = false;
 8004fd4:	2300      	movs	r3, #0
{
 8004fd6:	b4f0      	push	{r4, r5, r6, r7}
 8004fd8:	e9d0 740e 	ldrd	r7, r4, [r0, #56]	; 0x38
 8004fdc:	e9d0 6510 	ldrd	r6, r5, [r0, #64]	; 0x40
 8004fe0:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8004fe2:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8004fe4:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 8004fe8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 8004fec:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8004ff0:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 8004ff4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8004ff8:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 8004ffa:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 8004ffe:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 8005000:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8005004:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8005008:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 800500c:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8005010:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	e9d0 c10c 	ldrd	ip, r1, [r0, #48]	; 0x30
 800501c:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800501e:	68d3      	ldr	r3, [r2, #12]
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005026:	f890 3020 	ldrb.w	r3, [r0, #32]
 800502a:	b9e3      	cbnz	r3, 8005066 <HALL_Clear+0x9e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800502c:	6933      	ldr	r3, [r6, #16]
 800502e:	693e      	ldr	r6, [r7, #16]
 8005030:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005034:	ea35 0303 	bics.w	r3, r5, r3
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005038:	bf0c      	ite	eq
 800503a:	2304      	moveq	r3, #4
 800503c:	2300      	movne	r3, #0
 800503e:	43b4      	bics	r4, r6
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005040:	bf0c      	ite	eq
 8005042:	2402      	moveq	r4, #2
 8005044:	2400      	movne	r4, #0
 8005046:	4323      	orrs	r3, r4
 8005048:	ea31 0202 	bics.w	r2, r1, r2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800504c:	bf08      	it	eq
 800504e:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8005058:	2a05      	cmp	r2, #5
 800505a:	d854      	bhi.n	8005106 <HALL_Clear+0x13e>
 800505c:	e8df f002 	tbb	[pc, r2]
 8005060:	3f352b21 	.word	0x3f352b21
 8005064:	1749      	.short	0x1749
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	6933      	ldr	r3, [r6, #16]
 800506a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800506e:	ea35 0303 	bics.w	r3, r5, r3
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005072:	bf0c      	ite	eq
 8005074:	2302      	moveq	r3, #2
 8005076:	2300      	movne	r3, #0
 8005078:	43b1      	bics	r1, r6
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800507a:	bf08      	it	eq
 800507c:	f043 0301 	orreq.w	r3, r3, #1
 8005080:	ea34 0202 	bics.w	r2, r4, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005084:	bf14      	ite	ne
 8005086:	2204      	movne	r2, #4
 8005088:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800508a:	4313      	orrs	r3, r2
 800508c:	e7e1      	b.n	8005052 <HALL_Clear+0x8a>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800508e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005090:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005094:	3b3f      	subs	r3, #63	; 0x3f
 8005096:	b21b      	sxth	r3, r3
 8005098:	8083      	strh	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800509a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800509e:	bcf0      	pop	{r4, r5, r6, r7}
 80050a0:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80050a2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80050a4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80050a8:	333f      	adds	r3, #63	; 0x3f
 80050aa:	b21b      	sxth	r3, r3
 80050ac:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80050ae:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80050b2:	bcf0      	pop	{r4, r5, r6, r7}
 80050b4:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80050b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80050b8:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80050bc:	3b2a      	subs	r3, #42	; 0x2a
 80050be:	b21b      	sxth	r3, r3
 80050c0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80050c2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80050c6:	bcf0      	pop	{r4, r5, r6, r7}
 80050c8:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80050ca:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80050cc:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80050d0:	332a      	adds	r3, #42	; 0x2a
 80050d2:	b21b      	sxth	r3, r3
 80050d4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80050d6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80050da:	bcf0      	pop	{r4, r5, r6, r7}
 80050dc:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80050de:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80050e0:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80050e4:	3b15      	subs	r3, #21
 80050e6:	b21b      	sxth	r3, r3
 80050e8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80050ea:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80050ee:	bcf0      	pop	{r4, r5, r6, r7}
 80050f0:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80050f2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80050f4:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80050f8:	3315      	adds	r3, #21
 80050fa:	b21b      	sxth	r3, r3
 80050fc:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80050fe:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005102:	bcf0      	pop	{r4, r5, r6, r7}
 8005104:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8005106:	2200      	movs	r2, #0
 8005108:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800510c:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005110:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005114:	bcf0      	pop	{r4, r5, r6, r7}
 8005116:	4770      	bx	lr

08005118 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005118:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800511c:	8883      	ldrh	r3, [r0, #4]
 800511e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005122:	428a      	cmp	r2, r1
 8005124:	d011      	beq.n	800514a <HALL_CalcElAngle+0x32>
{
 8005126:	b430      	push	{r4, r5}
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005128:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800512a:	f8b0 50ac 	ldrh.w	r5, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800512e:	f8b0 40aa 	ldrh.w	r4, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005132:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005136:	440b      	add	r3, r1
 8005138:	442b      	add	r3, r5
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800513a:	4421      	add	r1, r4
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800513c:	b21b      	sxth	r3, r3
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800513e:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8005142:	8083      	strh	r3, [r0, #4]
}
 8005144:	bc30      	pop	{r4, r5}
 8005146:	4618      	mov	r0, r3
 8005148:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 800514a:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 800514e:	4413      	add	r3, r2
 8005150:	b21b      	sxth	r3, r3
 8005152:	8083      	strh	r3, [r0, #4]
}
 8005154:	4618      	mov	r0, r3
 8005156:	4770      	bx	lr

08005158 <HALL_CalcAvrgMecSpeedUnit>:
{
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 800515c:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8005160:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8005162:	b180      	cbz	r0, 8005186 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8005166:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	429a      	cmp	r2, r3
 800516e:	d811      	bhi.n	8005194 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8005174:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8005176:	4629      	mov	r1, r5
 8005178:	4620      	mov	r0, r4
 800517a:	f000 ffe9 	bl	8006150 <SPD_IsMecSpeedReliable>
 800517e:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005182:	81a3      	strh	r3, [r4, #12]
}
 8005184:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005186:	78e3      	ldrb	r3, [r4, #3]
 8005188:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 800518a:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 800518c:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 800518e:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005190:	81a3      	strh	r3, [r4, #12]
}
 8005192:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8005194:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8005198:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 800519a:	b1cb      	cbz	r3, 80051d0 <HALL_CalcAvrgMecSpeedUnit+0x78>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800519c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HALL_CalcAvrgMecSpeedUnit+0x74>
          if (pHandle->HallMtpa == true)
 80051a4:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 80051a8:	b1a2      	cbz	r2, 80051d4 <HALL_CalcAvrgMecSpeedUnit+0x7c>
            pHandle->CompSpeed = 0;
 80051aa:	2200      	movs	r2, #0
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80051ac:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80051ae:	7861      	ldrb	r1, [r4, #1]
 80051b0:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80051b4:	fb03 f300 	mul.w	r3, r3, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80051b8:	69e2      	ldr	r2, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80051ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051be:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80051c0:	fb02 f201 	mul.w	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80051c4:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80051c8:	802b      	strh	r3, [r5, #0]
 80051ca:	e7d4      	b.n	8005176 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80051cc:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 80051d0:	802b      	strh	r3, [r5, #0]
 80051d2:	e7d0      	b.n	8005176 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80051d4:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 80051d8:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80051da:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80051de:	1a12      	subs	r2, r2, r0
 80051e0:	b212      	sxth	r2, r2
 80051e2:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80051e6:	fb92 f2f1 	sdiv	r2, r2, r1
 80051ea:	e7df      	b.n	80051ac <HALL_CalcAvrgMecSpeedUnit+0x54>

080051ec <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80051ec:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d042      	beq.n	800527a <HALL_TIMx_CC_IRQHandler+0x8e>
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80051f6:	f890 e020 	ldrb.w	lr, [r0, #32]
    bPrevHallState = pHandle->HallState;
 80051fa:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 80051fe:	f990 50a2 	ldrsb.w	r5, [r0, #162]	; 0xa2
 8005202:	e9d0 c20e 	ldrd	ip, r2, [r0, #56]	; 0x38
 8005206:	e9d0 7310 	ldrd	r7, r3, [r0, #64]	; 0x40
 800520a:	e9d0 640c 	ldrd	r6, r4, [r0, #48]	; 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800520e:	f1be 0f00 	cmp.w	lr, #0
 8005212:	d01d      	beq.n	8005250 <HALL_TIMx_CC_IRQHandler+0x64>
 8005214:	f8dc c010 	ldr.w	ip, [ip, #16]
 8005218:	693f      	ldr	r7, [r7, #16]
 800521a:	6936      	ldr	r6, [r6, #16]
 800521c:	43bb      	bics	r3, r7
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 800521e:	bf0c      	ite	eq
 8005220:	2302      	moveq	r3, #2
 8005222:	2300      	movne	r3, #0
 8005224:	43b4      	bics	r4, r6
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005226:	bf08      	it	eq
 8005228:	f043 0301 	orreq.w	r3, r3, #1
 800522c:	ea32 020c 	bics.w	r2, r2, ip
 8005230:	bf14      	ite	ne
 8005232:	2204      	movne	r2, #4
 8005234:	2200      	moveq	r2, #0
 8005236:	4313      	orrs	r3, r2
    switch ( pHandle->HallState )
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800523e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8005240:	2a05      	cmp	r2, #5
 8005242:	f200 8102 	bhi.w	800544a <HALL_TIMx_CC_IRQHandler+0x25e>
 8005246:	e8df f002 	tbb	[pc, r2]
 800524a:	c1d3      	.short	0xc1d3
 800524c:	1a8fa0af 	.word	0x1a8fa0af
 8005250:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005254:	f8dc 7010 	ldr.w	r7, [ip, #16]
 8005258:	6936      	ldr	r6, [r6, #16]
 800525a:	ea33 030e 	bics.w	r3, r3, lr
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800525e:	bf0c      	ite	eq
 8005260:	2304      	moveq	r3, #4
 8005262:	2300      	movne	r3, #0
 8005264:	43ba      	bics	r2, r7
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005266:	bf0c      	ite	eq
 8005268:	2202      	moveq	r2, #2
 800526a:	2200      	movne	r2, #0
 800526c:	4313      	orrs	r3, r2
 800526e:	ea34 0206 	bics.w	r2, r4, r6
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005272:	bf08      	it	eq
 8005274:	f043 0301 	orreq.w	r3, r3, #1
 8005278:	e7de      	b.n	8005238 <HALL_TIMx_CC_IRQHandler+0x4c>
}
 800527a:	2000      	movs	r0, #0
 800527c:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 800527e:	2902      	cmp	r1, #2
 8005280:	f000 8127 	beq.w	80054d2 <HALL_TIMx_CC_IRQHandler+0x2e6>
        else if ( bPrevHallState == STATE_4 )
 8005284:	2904      	cmp	r1, #4
 8005286:	f000 8111 	beq.w	80054ac <HALL_TIMx_CC_IRQHandler+0x2c0>
    PrevDirection = pHandle->Direction;
 800528a:	4629      	mov	r1, r5
    if (pHandle->HallMtpa == true)
 800528c:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8005290:	b113      	cbz	r3, 8005298 <HALL_TIMx_CC_IRQHandler+0xac>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8005292:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
 8005296:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8005298:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80c1 	beq.w	8005424 <HALL_TIMx_CC_IRQHandler+0x238>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80052a2:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80052a6:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
 80052aa:	42ab      	cmp	r3, r5
 80052ac:	d205      	bcs.n	80052ba <HALL_TIMx_CC_IRQHandler+0xce>
        pHandle->BufferFilled++;
 80052ae:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80052b2:	3301      	adds	r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80052ba:	6b67      	ldr	r7, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80052bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80052be:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 80052c2:	f890 604e 	ldrb.w	r6, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80052c6:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 80052c8:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80052ca:	fa13 f387 	uxtah	r3, r3, r7
      if ( pHandle->OVFCounter != 0u )
 80052ce:	f006 0cff 	and.w	ip, r6, #255	; 0xff
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	f000 80af 	beq.w	8005436 <HALL_TIMx_CC_IRQHandler+0x24a>
        hAux = hPrscBuf + 1u;
 80052d8:	3201      	adds	r2, #1
        if ( pHandle->RatioInc )
 80052da:	f890 604b 	ldrb.w	r6, [r0, #75]	; 0x4b
        wCaptBuf *= hAux;
 80052de:	b292      	uxth	r2, r2
 80052e0:	fb03 f302 	mul.w	r3, r3, r2
        if ( pHandle->RatioInc )
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	f000 80b7 	beq.w	8005458 <HALL_TIMx_CC_IRQHandler+0x26c>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80052ea:	2200      	movs	r2, #0
 80052ec:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 80052f0:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d832      	bhi.n	800535e <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80052f8:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80052fc:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005300:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8005304:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8005308:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800530a:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 800530e:	bf88      	it	hi
 8005310:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005314:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 8005318:	f102 0201 	add.w	r2, r2, #1
 800531c:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800531e:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8005322:	bf8a      	itet	hi
 8005324:	19a4      	addhi	r4, r4, r6
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8005326:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8005328:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 800532c:	4295      	cmp	r5, r2
 800532e:	f8cc 6050 	str.w	r6, [ip, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8005332:	bf08      	it	eq
 8005334:	2200      	moveq	r2, #0
 8005336:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 800533a:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 800533e:	2a00      	cmp	r2, #0
 8005340:	f000 8087 	beq.w	8005452 <HALL_TIMx_CC_IRQHandler+0x266>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8005344:	f890 404d 	ldrb.w	r4, [r0, #77]	; 0x4d
 8005348:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800534c:	42a5      	cmp	r5, r4
 800534e:	f240 80a4 	bls.w	800549a <HALL_TIMx_CC_IRQHandler+0x2ae>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	fb13 f101 	smulbb	r1, r3, r1
 800535a:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 800535e:	2300      	movs	r3, #0
 8005360:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 8005364:	2000      	movs	r0, #0
 8005366:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8005368:	2904      	cmp	r1, #4
 800536a:	f000 80ab 	beq.w	80054c4 <HALL_TIMx_CC_IRQHandler+0x2d8>
        else if ( bPrevHallState == STATE_1 )
 800536e:	2901      	cmp	r1, #1
 8005370:	d18b      	bne.n	800528a <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005372:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005374:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005378:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800537a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800537c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005380:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8005384:	f04f 31ff 	mov.w	r1, #4294967295
 8005388:	e043      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_6 )
 800538a:	2906      	cmp	r1, #6
 800538c:	f000 80b4 	beq.w	80054f8 <HALL_TIMx_CC_IRQHandler+0x30c>
        else if ( bPrevHallState == STATE_5 )
 8005390:	2905      	cmp	r1, #5
 8005392:	f47f af7a 	bne.w	800528a <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->Direction = NEGATIVE;
 8005396:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005398:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = NEGATIVE;
 800539a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 800539e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80053a2:	f04f 31ff 	mov.w	r1, #4294967295
 80053a6:	e034      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_1 )
 80053a8:	2901      	cmp	r1, #1
 80053aa:	f000 809c 	beq.w	80054e6 <HALL_TIMx_CC_IRQHandler+0x2fa>
        else if ( bPrevHallState == STATE_2 )
 80053ae:	2902      	cmp	r1, #2
 80053b0:	f47f af6b 	bne.w	800528a <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80053b4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053b6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80053ba:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80053bc:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80053be:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80053c2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80053c6:	f04f 31ff 	mov.w	r1, #4294967295
 80053ca:	e022      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_3 )
 80053cc:	2903      	cmp	r1, #3
 80053ce:	f000 80a7 	beq.w	8005520 <HALL_TIMx_CC_IRQHandler+0x334>
        else if ( bPrevHallState == STATE_6 )
 80053d2:	2906      	cmp	r1, #6
 80053d4:	f47f af59 	bne.w	800528a <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80053d8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053da:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80053de:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80053e0:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80053e2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80053e6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80053ea:	f04f 31ff 	mov.w	r1, #4294967295
 80053ee:	e010      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
        if ( bPrevHallState == STATE_5 )
 80053f0:	2905      	cmp	r1, #5
 80053f2:	f000 808b 	beq.w	800550c <HALL_TIMx_CC_IRQHandler+0x320>
        else if ( bPrevHallState == STATE_3 )
 80053f6:	2903      	cmp	r1, #3
 80053f8:	f47f af47 	bne.w	800528a <HALL_TIMx_CC_IRQHandler+0x9e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80053fc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053fe:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005402:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005404:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005406:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800540a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 800540e:	f04f 31ff 	mov.w	r1, #4294967295
    if (pHandle->Direction != PrevDirection)
 8005412:	428d      	cmp	r5, r1
 8005414:	f43f af3a 	beq.w	800528c <HALL_TIMx_CC_IRQHandler+0xa0>
      pHandle->BufferFilled = 0 ;
 8005418:	2300      	movs	r3, #0
 800541a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 800541e:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 8005422:	e733      	b.n	800528c <HALL_TIMx_CC_IRQHandler+0xa0>
      pHandle->FirstCapt++;
 8005424:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005428:	3301      	adds	r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8005430:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8005432:	2000      	movs	r0, #0
 8005434:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8005436:	f890 604a 	ldrb.w	r6, [r0, #74]	; 0x4a
 800543a:	b1d6      	cbz	r6, 8005472 <HALL_TIMx_CC_IRQHandler+0x286>
          hAux = hPrscBuf + 2u;
 800543c:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 800543e:	b292      	uxth	r2, r2
 8005440:	fb03 f302 	mul.w	r3, r3, r2
          pHandle->RatioDec = false;
 8005444:	f880 c04a 	strb.w	ip, [r0, #74]	; 0x4a
 8005448:	e752      	b.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x104>
        pHandle->SensorIsReliable = false;
 800544a:	2300      	movs	r3, #0
 800544c:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8005450:	e71b      	b.n	800528a <HALL_TIMx_CC_IRQHandler+0x9e>
            pHandle->AvrElSpeedDpp = 0;
 8005452:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 8005456:	e782      	b.n	800535e <HALL_TIMx_CC_IRQHandler+0x172>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005458:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 800545a:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	; 0xae
 800545e:	4296      	cmp	r6, r2
 8005460:	f67f af46 	bls.w	80052f0 <HALL_TIMx_CC_IRQHandler+0x104>
 8005464:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8005466:	2601      	movs	r6, #1
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8005468:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800546a:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800546c:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
 8005470:	e73e      	b.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x104>
          uint16_t hAux = hPrscBuf + 1u;
 8005472:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005474:	b2bf      	uxth	r7, r7
          wCaptBuf *= hAux;
 8005476:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005478:	f5b7 4faa 	cmp.w	r7, #21760	; 0x5500
          wCaptBuf *= hAux;
 800547c:	fb03 f302 	mul.w	r3, r3, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005480:	f4bf af36 	bcs.w	80052f0 <HALL_TIMx_CC_IRQHandler+0x104>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005484:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8005486:	2a00      	cmp	r2, #0
 8005488:	f43f af32 	beq.w	80052f0 <HALL_TIMx_CC_IRQHandler+0x104>
 800548c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800548e:	2601      	movs	r6, #1
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8005490:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005492:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8005494:	f880 604a 	strb.w	r6, [r0, #74]	; 0x4a
 8005498:	e72a      	b.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x104>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 800549a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800549e:	fb93 f5f5 	sdiv	r5, r3, r5
 80054a2:	fb92 f2f5 	sdiv	r2, r2, r5
 80054a6:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 80054aa:	e758      	b.n	800535e <HALL_TIMx_CC_IRQHandler+0x172>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80054ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054ae:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80054b2:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80054b4:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80054b6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80054ba:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80054be:	f04f 31ff 	mov.w	r1, #4294967295
 80054c2:	e7a6      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->Direction = POSITIVE;
 80054c4:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80054c6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80054c8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80054cc:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80054d0:	e79f      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80054d2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054d4:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80054d8:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80054da:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80054dc:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80054e0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 80054e4:	e795      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80054e6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80054e8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80054ec:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80054f0:	3355      	adds	r3, #85	; 0x55
 80054f2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80054f6:	e78c      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80054f8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054fa:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80054fe:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8005500:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005502:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005506:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 800550a:	e782      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800550c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800550e:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005512:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8005514:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005516:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 800551a:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 800551e:	e778      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>
                                                  + S16_60_PHASE_SHIFT );
 8005520:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005522:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8005526:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8005528:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 800552a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 800552e:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
 8005532:	e76e      	b.n	8005412 <HALL_TIMx_CC_IRQHandler+0x226>

08005534 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005534:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005538:	b1e3      	cbz	r3, 8005574 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800553a:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 800553c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005540:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005542:	f8b0 40c0 	ldrh.w	r4, [r0, #192]	; 0xc0
 8005546:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
    pHandle->OVFCounter++;
 800554a:	3201      	adds	r2, #1
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005552:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005554:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8005558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800555c:	fb05 2202 	mla	r2, r5, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005560:	fb03 f304 	mul.w	r3, r3, r4
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8005564:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005568:	b29b      	uxth	r3, r3
 800556a:	4299      	cmp	r1, r3
 800556c:	d204      	bcs.n	8005578 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800556e:	2000      	movs	r0, #0
 8005570:	bcf0      	pop	{r4, r5, r6, r7}
 8005572:	4770      	bx	lr
 8005574:	2000      	movs	r0, #0
 8005576:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005578:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 800557c:	f04f 0c00 	mov.w	ip, #0
 8005580:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	; 0x38
 8005584:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	; 0x40
 8005588:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	; 0x30
 800558c:	f8a0 c00e 	strh.w	ip, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005590:	b9d7      	cbnz	r7, 80055c8 <HALL_TIMx_UP_IRQHandler+0x94>
 8005592:	692f      	ldr	r7, [r5, #16]
 8005594:	6935      	ldr	r5, [r6, #16]
 8005596:	6924      	ldr	r4, [r4, #16]
 8005598:	43bb      	bics	r3, r7
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800559a:	bf0c      	ite	eq
 800559c:	2304      	moveq	r3, #4
 800559e:	4663      	movne	r3, ip
 80055a0:	43aa      	bics	r2, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80055a2:	bf0c      	ite	eq
 80055a4:	2202      	moveq	r2, #2
 80055a6:	4662      	movne	r2, ip
 80055a8:	4313      	orrs	r3, r2
 80055aa:	ea31 0204 	bics.w	r2, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80055ae:	bf08      	it	eq
 80055b0:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80055ba:	2a05      	cmp	r2, #5
 80055bc:	d864      	bhi.n	8005688 <HALL_TIMx_UP_IRQHandler+0x154>
 80055be:	e8df f002 	tbb	[pc, r2]
 80055c2:	555c      	.short	0x555c
 80055c4:	1440474e 	.word	0x1440474e
 80055c8:	6936      	ldr	r6, [r6, #16]
 80055ca:	692d      	ldr	r5, [r5, #16]
 80055cc:	6924      	ldr	r4, [r4, #16]
 80055ce:	43ab      	bics	r3, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80055d0:	bf0c      	ite	eq
 80055d2:	2302      	moveq	r3, #2
 80055d4:	2300      	movne	r3, #0
 80055d6:	43a1      	bics	r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80055d8:	bf08      	it	eq
 80055da:	f043 0301 	orreq.w	r3, r3, #1
 80055de:	43b2      	bics	r2, r6
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80055e0:	bf14      	ite	ne
 80055e2:	2204      	movne	r2, #4
 80055e4:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80055e6:	4313      	orrs	r3, r2
 80055e8:	e7e4      	b.n	80055b4 <HALL_TIMx_UP_IRQHandler+0x80>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80055ea:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80055ec:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80055f0:	3b3f      	subs	r3, #63	; 0x3f
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80055f6:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80055fa:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 80055fe:	2300      	movs	r3, #0
 8005600:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
 8005604:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
      pHandle->FirstCapt = 0u;
 8005608:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800560c:	b16c      	cbz	r4, 800562a <HALL_TIMx_UP_IRQHandler+0xf6>
 800560e:	1e62      	subs	r2, r4, #1
 8005610:	b2d3      	uxtb	r3, r2
 8005612:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005616:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800561a:	f100 034c 	add.w	r3, r0, #76	; 0x4c
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800561e:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005622:	429a      	cmp	r2, r3
 8005624:	d1fb      	bne.n	800561e <HALL_TIMx_UP_IRQHandler+0xea>
 8005626:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 800562a:	2300      	movs	r3, #0
 800562c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005630:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005634:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8005638:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 800563c:	bcf0      	pop	{r4, r5, r6, r7}
 800563e:	2000      	movs	r0, #0
 8005640:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005642:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005644:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005648:	3315      	adds	r3, #21
 800564a:	b21b      	sxth	r3, r3
 800564c:	8083      	strh	r3, [r0, #4]
 800564e:	e7d2      	b.n	80055f6 <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005650:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005652:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8005656:	3b15      	subs	r3, #21
 8005658:	b21b      	sxth	r3, r3
 800565a:	8083      	strh	r3, [r0, #4]
 800565c:	e7cb      	b.n	80055f6 <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800565e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005660:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8005664:	332a      	adds	r3, #42	; 0x2a
 8005666:	b21b      	sxth	r3, r3
 8005668:	8083      	strh	r3, [r0, #4]
 800566a:	e7c4      	b.n	80055f6 <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 800566c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800566e:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8005672:	3b2a      	subs	r3, #42	; 0x2a
 8005674:	b21b      	sxth	r3, r3
 8005676:	8083      	strh	r3, [r0, #4]
 8005678:	e7bd      	b.n	80055f6 <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800567a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800567c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005680:	333f      	adds	r3, #63	; 0x3f
 8005682:	b21b      	sxth	r3, r3
 8005684:	8083      	strh	r3, [r0, #4]
 8005686:	e7b6      	b.n	80055f6 <HALL_TIMx_UP_IRQHandler+0xc2>
      pHandle->SensorIsReliable = false;
 8005688:	2200      	movs	r2, #0
 800568a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800568e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 8005692:	e7b0      	b.n	80055f6 <HALL_TIMx_UP_IRQHandler+0xc2>

08005694 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005694:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8005696:	4b21      	ldr	r3, [pc, #132]	; (800571c <ICS_GetPhaseCurrents+0x88>)
{
 8005698:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800569a:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 800569c:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 800569e:	6a22      	ldr	r2, [r4, #32]
 80056a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056a4:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80056a8:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80056aa:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	1b5b      	subs	r3, r3, r5
  if ( aux < -INT16_MAX )
 80056b0:	4293      	cmp	r3, r2
 80056b2:	da1c      	bge.n	80056ee <ICS_GetPhaseCurrents+0x5a>
  {
    pStator_Currents->a = -INT16_MAX;
 80056b4:	800a      	strh	r2, [r1, #0]
 80056b6:	4615      	mov	r5, r2
 80056b8:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80056bc:	4b19      	ldr	r3, [pc, #100]	; (8005724 <ICS_GetPhaseCurrents+0x90>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80056be:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 80056c2:	4c17      	ldr	r4, [pc, #92]	; (8005720 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 80056c4:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	db21      	blt.n	8005712 <ICS_GetPhaseCurrents+0x7e>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	da19      	bge.n	8005708 <ICS_GetPhaseCurrents+0x74>
  {
    pStator_Currents->b = INT16_MAX;
  }
  else
  {
    pStator_Currents->b = ( int16_t )aux;
 80056d4:	b21c      	sxth	r4, r3
 80056d6:	804c      	strh	r4, [r1, #2]
 80056d8:	b29b      	uxth	r3, r3
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80056da:	4413      	add	r3, r2
 80056dc:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80056de:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80056e2:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80056e6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 80056ea:	bc70      	pop	{r4, r5, r6}
 80056ec:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 80056ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f2:	db05      	blt.n	8005700 <ICS_GetPhaseCurrents+0x6c>
    pStator_Currents->a = INT16_MAX;
 80056f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80056f8:	461a      	mov	r2, r3
 80056fa:	800b      	strh	r3, [r1, #0]
 80056fc:	461d      	mov	r5, r3
 80056fe:	e7dd      	b.n	80056bc <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->a = ( int16_t )aux;
 8005700:	b21d      	sxth	r5, r3
 8005702:	800d      	strh	r5, [r1, #0]
 8005704:	b29a      	uxth	r2, r3
 8005706:	e7d9      	b.n	80056bc <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->b = INT16_MAX;
 8005708:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800570c:	4623      	mov	r3, r4
 800570e:	804c      	strh	r4, [r1, #2]
 8005710:	e7e3      	b.n	80056da <ICS_GetPhaseCurrents+0x46>
    pStator_Currents->b = -INT16_MAX;
 8005712:	804c      	strh	r4, [r1, #2]
 8005714:	f248 0301 	movw	r3, #32769	; 0x8001
 8005718:	e7df      	b.n	80056da <ICS_GetPhaseCurrents+0x46>
 800571a:	bf00      	nop
 800571c:	40012000 	.word	0x40012000
 8005720:	ffff8001 	.word	0xffff8001
 8005724:	40012100 	.word	0x40012100

08005728 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005728:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	6a13      	ldr	r3, [r2, #32]
 800572e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005732:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005734:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d814      	bhi.n	8005766 <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 800573c:	4a0b      	ldr	r2, [pc, #44]	; (800576c <ICS_HFCurrentsCalibration+0x44>)
 800573e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8005740:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005742:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005744:	4c0a      	ldr	r4, [pc, #40]	; (8005770 <ICS_HFCurrentsCalibration+0x48>)
 8005746:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005748:	442b      	add	r3, r5
 800574a:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 800574c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 800574e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8005752:	3301      	adds	r3, #1
 8005754:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005756:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005758:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800575c:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 800575e:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 8005760:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8005762:	600b      	str	r3, [r1, #0]
}
 8005764:	4770      	bx	lr
  pStator_Currents->a = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	4770      	bx	lr
 800576c:	40012000 	.word	0x40012000
 8005770:	40012100 	.word	0x40012100

08005774 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005774:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8005776:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005778:	681a      	ldr	r2, [r3, #0]
{
 800577a:	b410      	push	{r4}
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 800577c:	f891 402c 	ldrb.w	r4, [r1, #44]	; 0x2c
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	b134      	cbz	r4, 8005796 <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005794:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 800579e:	790a      	ldrb	r2, [r1, #4]
 80057a0:	2a02      	cmp	r2, #2
 80057a2:	d036      	beq.n	8005812 <ICS_Init+0x9e>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80057a4:	780a      	ldrb	r2, [r1, #0]
 80057a6:	2a01      	cmp	r2, #1
 80057a8:	d03f      	beq.n	800582a <ICS_Init+0xb6>
  SET_BIT(TIMx->CCER, Channels);
 80057aa:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80057ac:	4921      	ldr	r1, [pc, #132]	; (8005834 <ICS_Init+0xc0>)
}
 80057ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b2:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 80057b6:	f042 0205 	orr.w	r2, r2, #5
 80057ba:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80057bc:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <ICS_Init+0xc4>)
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80057be:	428b      	cmp	r3, r1
 80057c0:	68d3      	ldr	r3, [r2, #12]
 80057c2:	bf0c      	ite	eq
 80057c4:	f043 0301 	orreq.w	r3, r3, #1
 80057c8:	f043 0302 	orrne.w	r3, r3, #2
 80057cc:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80057ce:	bf08      	it	eq
 80057d0:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <ICS_Init+0xc8>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 80057d6:	bf18      	it	ne
 80057d8:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 80057dc:	6681      	str	r1, [r0, #104]	; 0x68
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	4917      	ldr	r1, [pc, #92]	; (8005840 <ICS_Init+0xcc>)
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	609a      	str	r2, [r3, #8]
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80057f2:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80057f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80057fc:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80057fe:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 8005800:	2100      	movs	r1, #0
 8005802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 800580c:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8005810:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8005812:	794a      	ldrb	r2, [r1, #5]
 8005814:	2a01      	cmp	r2, #1
 8005816:	d108      	bne.n	800582a <ICS_Init+0xb6>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8005818:	7a09      	ldrb	r1, [r1, #8]
 800581a:	2903      	cmp	r1, #3
 800581c:	d105      	bne.n	800582a <ICS_Init+0xb6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005828:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800582a:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 800582e:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
 8005832:	e7ba      	b.n	80057aa <ICS_Init+0x36>
 8005834:	40010000 	.word	0x40010000
 8005838:	e0042000 	.word	0xe0042000
 800583c:	40012000 	.word	0x40012000
 8005840:	40012100 	.word	0x40012100

08005844 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005844:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005846:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005848:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800584a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800584e:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005850:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005854:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800585a:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	07d2      	lsls	r2, r2, #31
 8005860:	d5fc      	bpl.n	800585c <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005864:	7c08      	ldrb	r0, [r1, #16]
 8005866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800586a:	2802      	cmp	r0, #2
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
 800586e:	d000      	beq.n	8005872 <ICS_TurnOnLowSides+0x2e>
 8005870:	4770      	bx	lr
{
 8005872:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005874:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005876:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005878:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800587a:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800587c:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800587e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005880:	61ae      	str	r6, [r5, #24]
 8005882:	6184      	str	r4, [r0, #24]
 8005884:	619a      	str	r2, [r3, #24]
  }
}
 8005886:	bc70      	pop	{r4, r5, r6}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop

0800588c <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800588c:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800588e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005892:	68cb      	ldr	r3, [r1, #12]
{
 8005894:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005896:	2400      	movs	r4, #0
 8005898:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800589c:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800589e:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80058a2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80058a4:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80058a6:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80058a8:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80058ac:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	07d2      	lsls	r2, r2, #31
 80058b2:	d5fc      	bpl.n	80058ae <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80058b4:	f06f 0201 	mvn.w	r2, #1
 80058b8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80058ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80058bc:	7c08      	ldrb	r0, [r1, #16]
 80058be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c2:	2802      	cmp	r0, #2
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
 80058c6:	d112      	bne.n	80058ee <ICS_SwitchOnPWM+0x62>
 80058c8:	e9d1 7405 	ldrd	r7, r4, [r1, #20]
 80058cc:	e9d1 6007 	ldrd	r6, r0, [r1, #28]
 80058d0:	e9d1 5209 	ldrd	r5, r2, [r1, #36]	; 0x24
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80058d4:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80058d8:	f240 5155 	movw	r1, #1365	; 0x555
 80058dc:	ea31 010c 	bics.w	r1, r1, ip
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80058e0:	bf1e      	ittt	ne
 80058e2:	0424      	lslne	r4, r4, #16
 80058e4:	0400      	lslne	r0, r0, #16
 80058e6:	0412      	lslne	r2, r2, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 80058e8:	61bc      	str	r4, [r7, #24]
 80058ea:	61b0      	str	r0, [r6, #24]
 80058ec:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80058ee:	f06f 0201 	mvn.w	r2, #1
 80058f2:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 80058fc:	bcf0      	pop	{r4, r5, r6, r7}
 80058fe:	4770      	bx	lr

08005900 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005900:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8005902:	68d3      	ldr	r3, [r2, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005904:	68d9      	ldr	r1, [r3, #12]
 8005906:	f021 0101 	bic.w	r1, r1, #1
{
 800590a:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800590c:	7c14      	ldrb	r4, [r2, #16]
 800590e:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005910:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005912:	2500      	movs	r5, #0
 8005914:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005918:	2c02      	cmp	r4, #2
  pHandle->_Super.TurnOnLowSidesAction = false;
 800591a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800591e:	6459      	str	r1, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005920:	d10b      	bne.n	800593a <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005922:	6994      	ldr	r4, [r2, #24]
 8005924:	6a10      	ldr	r0, [r2, #32]
 8005926:	6a91      	ldr	r1, [r2, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005928:	6957      	ldr	r7, [r2, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800592a:	69d6      	ldr	r6, [r2, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800592c:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800592e:	0424      	lsls	r4, r4, #16
 8005930:	0400      	lsls	r0, r0, #16
 8005932:	0409      	lsls	r1, r1, #16
 8005934:	61bc      	str	r4, [r7, #24]
 8005936:	61b0      	str	r0, [r6, #24]
 8005938:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800593a:	f06f 0201 	mvn.w	r2, #1
 800593e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	07d2      	lsls	r2, r2, #31
 8005944:	d5fc      	bpl.n	8005940 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005946:	f06f 0201 	mvn.w	r2, #1
 800594a:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 800594c:	bcf0      	pop	{r4, r5, r6, r7}
 800594e:	4770      	bx	lr

08005950 <ICS_CurrentReadingCalibration>:
{
 8005950:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005952:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8005954:	4924      	ldr	r1, [pc, #144]	; (80059e8 <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005956:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 8005958:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 800595a:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 800595e:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 8005960:	65c2      	str	r2, [r0, #92]	; 0x5c
 8005962:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8005966:	4605      	mov	r5, r0
 8005968:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 800596c:	6602      	str	r2, [r0, #96]	; 0x60
 800596e:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8005970:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 8005972:	f7ff ff8b 	bl	800588c <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005976:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005978:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800597c:	7a1a      	ldrb	r2, [r3, #8]
 800597e:	4620      	mov	r0, r4
 8005980:	f105 0366 	add.w	r3, r5, #102	; 0x66
 8005984:	f000 fa06 	bl	8005d94 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 8005988:	4628      	mov	r0, r5
 800598a:	f7ff ffb9 	bl	8005900 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 800598e:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 8005992:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 8005994:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 8005996:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800599a:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 800599c:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 80059a0:	4912      	ldr	r1, [pc, #72]	; (80059ec <ICS_CurrentReadingCalibration+0x9c>)
 80059a2:	f022 0208 	bic.w	r2, r2, #8
 80059a6:	61a2      	str	r2, [r4, #24]
 80059a8:	69a2      	ldr	r2, [r4, #24]
 80059aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ae:	61a2      	str	r2, [r4, #24]
 80059b0:	69e2      	ldr	r2, [r4, #28]
 80059b2:	f022 0208 	bic.w	r2, r2, #8
 80059b6:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059b8:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059ba:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059bc:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80059be:	69a3      	ldr	r3, [r4, #24]
 80059c0:	f043 0308 	orr.w	r3, r3, #8
 80059c4:	61a3      	str	r3, [r4, #24]
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059cc:	61a3      	str	r3, [r4, #24]
 80059ce:	69e3      	ldr	r3, [r4, #28]
 80059d0:	f043 0308 	orr.w	r3, r3, #8
 80059d4:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 80059d6:	6a23      	ldr	r3, [r4, #32]
 80059d8:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80059dc:	f043 0305 	orr.w	r3, r3, #5
 80059e0:	6223      	str	r3, [r4, #32]
 80059e2:	6069      	str	r1, [r5, #4]
}
 80059e4:	bd38      	pop	{r3, r4, r5, pc}
 80059e6:	bf00      	nop
 80059e8:	08005729 	.word	0x08005729
 80059ec:	08005695 	.word	0x08005695

080059f0 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059f0:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 80059f2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059f4:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 80059f6:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 80059f8:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 80059fa:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059fc:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059fe:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a00:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005a02:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8005a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a08:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005a12:	6813      	ldr	r3, [r2, #0]
{
 8005a14:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005a16:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a1a:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8005a1c:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a1e:	68e9      	ldr	r1, [r5, #12]
  if ( adcinjflags == CONV_STARTED )
 8005a20:	d026      	beq.n	8005a70 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8005a22:	b94b      	cbnz	r3, 8005a38 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8005a24:	886a      	ldrh	r2, [r5, #2]
 8005a26:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d3fc      	bcc.n	8005a26 <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d026      	beq.n	8005a86 <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8005a38:	4f18      	ldr	r7, [pc, #96]	; (8005a9c <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005a3a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	4e18      	ldr	r6, [pc, #96]	; (8005aa0 <ICS_TIMx_UP_IRQHandler+0x90>)
 8005a40:	f403 2470 	and.w	r4, r3, #983040	; 0xf0000
 8005a44:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005a48:	4322      	orrs	r2, r4
 8005a4a:	60ba      	str	r2, [r7, #8]
 8005a4c:	68b3      	ldr	r3, [r6, #8]
 8005a4e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005a52:	4323      	orrs	r3, r4
 8005a54:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8005a56:	79ab      	ldrb	r3, [r5, #6]
 8005a58:	03db      	lsls	r3, r3, #15
 8005a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8005a5c:	79eb      	ldrb	r3, [r5, #7]
 8005a5e:	03db      	lsls	r3, r3, #15
 8005a60:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8005a62:	6a0b      	ldr	r3, [r1, #32]
 8005a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8005a68:	3046      	adds	r0, #70	; 0x46
 8005a6a:	620b      	str	r3, [r1, #32]
 8005a6c:	bcf0      	pop	{r4, r5, r6, r7}
 8005a6e:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005a70:	6813      	ldr	r3, [r2, #0]
 8005a72:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d0de      	beq.n	8005a38 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005a80:	2b0c      	cmp	r3, #12
 8005a82:	d1f5      	bne.n	8005a70 <ICS_TIMx_UP_IRQHandler+0x60>
 8005a84:	e7d8      	b.n	8005a38 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005a8c:	2b0c      	cmp	r3, #12
 8005a8e:	d0d3      	beq.n	8005a38 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	d1f5      	bne.n	8005a86 <ICS_TIMx_UP_IRQHandler+0x76>
 8005a9a:	e7cd      	b.n	8005a38 <ICS_TIMx_UP_IRQHandler+0x28>
 8005a9c:	40012000 	.word	0x40012000
 8005aa0:	40012100 	.word	0x40012100

08005aa4 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005aa4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005aa6:	7c1a      	ldrb	r2, [r3, #16]
 8005aa8:	2a02      	cmp	r2, #2
 8005aaa:	d004      	beq.n	8005ab6 <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 8005ab2:	3046      	adds	r0, #70	; 0x46
 8005ab4:	4770      	bx	lr
{
 8005ab6:	b4f0      	push	{r4, r5, r6, r7}
 8005ab8:	6a19      	ldr	r1, [r3, #32]
 8005aba:	699c      	ldr	r4, [r3, #24]
 8005abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005abe:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005ac0:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005ac2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005ac4:	0424      	lsls	r4, r4, #16
 8005ac6:	0409      	lsls	r1, r1, #16
 8005ac8:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61bc      	str	r4, [r7, #24]
}
 8005ace:	3046      	adds	r0, #70	; 0x46
 8005ad0:	61b1      	str	r1, [r6, #24]
 8005ad2:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8005ad4:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8005ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8005ada:	4770      	bx	lr

08005adc <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8005adc:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005ae0:	b90b      	cbnz	r3, 8005ae6 <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8005ae2:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8005ae4:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8005aec:	2040      	movs	r0, #64	; 0x40
 8005aee:	4770      	bx	lr

08005af0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005af0:	b508      	push	{r3, lr}
 8005af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af6:	2100      	movs	r1, #0
 8005af8:	f001 f8e6 	bl	8006cc8 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8005b02:	bd08      	pop	{r3, pc}

08005b04 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005b04:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005b08:	1c53      	adds	r3, r2, #1
 8005b0a:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005b0e:	bf88      	it	hi
 8005b10:	2300      	movhi	r3, #0
{
 8005b12:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005b14:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8005b18:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005b1c:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005b20:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8005b24:	2200      	movs	r2, #0
 8005b26:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005b28:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005b2c:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005b2e:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005b30:	d1fa      	bne.n	8005b28 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	bfb8      	it	lt
 8005b36:	327f      	addlt	r2, #127	; 0x7f
 8005b38:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005b3a:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005b3e:	bc30      	pop	{r4, r5}
 8005b40:	4608      	mov	r0, r1
 8005b42:	4770      	bx	lr

08005b44 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005b44:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop

08005b4c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005b4c:	8a03      	ldrh	r3, [r0, #16]
 8005b4e:	8b42      	ldrh	r2, [r0, #26]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d306      	bcc.n	8005b62 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005b54:	8b82      	ldrh	r2, [r0, #28]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d801      	bhi.n	8005b5e <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 8005b5a:	8ac0      	ldrh	r0, [r0, #22]
 8005b5c:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 8005b5e:	2000      	movs	r0, #0
  }
  return hFault;
}
 8005b60:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8005b62:	2008      	movs	r0, #8
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop

08005b68 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	8203      	strh	r3, [r0, #16]
}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop

08005b70 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005b70:	7803      	ldrb	r3, [r0, #0]
 8005b72:	b123      	cbz	r3, 8005b7e <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 8005b74:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005b76:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8005b78:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005b7a:	8203      	strh	r3, [r0, #16]
 8005b7c:	4770      	bx	lr
{
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005b82:	3004      	adds	r0, #4
 8005b84:	f7fc f950 	bl	8001e28 <RCM_RegisterRegConv>
 8005b88:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7ff ffeb 	bl	8005b68 <NTC_Clear>
}
 8005b92:	bd10      	pop	{r4, pc}

08005b94 <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005b94:	7803      	ldrb	r3, [r0, #0]
 8005b96:	b11b      	cbz	r3, 8005ba0 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	82c3      	strh	r3, [r0, #22]
 8005b9c:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 8005b9e:	4770      	bx	lr
{
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005ba4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005ba8:	f7fc f9fa 	bl	8001fa0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bb0:	4298      	cmp	r0, r3
 8005bb2:	d007      	beq.n	8005bc4 <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005bb4:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8005bb6:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005bb8:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8005bba:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005bbe:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8005bc2:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff ffc1 	bl	8005b4c <NTC_SetFaultState>
 8005bca:	82e0      	strh	r0, [r4, #22]
}
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop

08005bd0 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005bd0:	7803      	ldrb	r3, [r0, #0]
 8005bd2:	b113      	cbz	r3, 8005bda <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8005bd4:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 8005bd6:	b200      	sxth	r0, r0
 8005bd8:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005bda:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005bdc:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005bde:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005be2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005be4:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8005be6:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bfbc      	itt	lt
 8005bee:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005bf2:	33ff      	addlt	r3, #255	; 0xff
 8005bf4:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8005bf8:	b200      	sxth	r0, r0
 8005bfa:	4770      	bx	lr

08005bfc <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005bfc:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005bfe:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c00:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c02:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c04:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8005c06:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8005c08:	6283      	str	r3, [r0, #40]	; 0x28
}
 8005c0a:	4770      	bx	lr

08005c0c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005c0c:	8081      	strh	r1, [r0, #4]
}
 8005c0e:	4770      	bx	lr

08005c10 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005c10:	80c1      	strh	r1, [r0, #6]
}
 8005c12:	4770      	bx	lr

08005c14 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005c14:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop

08005c1c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005c1c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop

08005c24 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005c24:	6081      	str	r1, [r0, #8]

  return;
}
 8005c26:	4770      	bx	lr

08005c28 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8005c28:	8b00      	ldrh	r0, [r0, #24]
 8005c2a:	4770      	bx	lr

08005c2c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005c2c:	8b40      	ldrh	r0, [r0, #26]
 8005c2e:	4770      	bx	lr

08005c30 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005c30:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8005c32:	4770      	bx	lr

08005c34 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005c34:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop

08005c3c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005c3c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005c40:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8005c44:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005c46:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005c4a:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005c4e:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005c52:	b18b      	cbz	r3, 8005c78 <PI_Controller+0x3c>
 8005c54:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005c58:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	d424      	bmi.n	8005caa <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8005c60:	2f00      	cmp	r7, #0
 8005c62:	da04      	bge.n	8005c6e <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 8005c64:	4f16      	ldr	r7, [pc, #88]	; (8005cc0 <PI_Controller+0x84>)
 8005c66:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8005c6a:	bf28      	it	cs
 8005c6c:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	dc03      	bgt.n	8005c7a <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8005c72:	6904      	ldr	r4, [r0, #16]
 8005c74:	429c      	cmp	r4, r3
 8005c76:	dc00      	bgt.n	8005c7a <PI_Controller+0x3e>
 8005c78:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005c7a:	8b81      	ldrh	r1, [r0, #28]
 8005c7c:	8bc3      	ldrh	r3, [r0, #30]
 8005c7e:	410a      	asrs	r2, r1
 8005c80:	fa44 f303 	asr.w	r3, r4, r3
 8005c84:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8005c86:	429d      	cmp	r5, r3
 8005c88:	db08      	blt.n	8005c9c <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8005c8a:	429e      	cmp	r6, r3
 8005c8c:	dd02      	ble.n	8005c94 <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8005c8e:	1af3      	subs	r3, r6, r3
 8005c90:	441c      	add	r4, r3
 8005c92:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8005c94:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 8005c96:	b218      	sxth	r0, r3
}
 8005c98:	bcf0      	pop	{r4, r5, r6, r7}
 8005c9a:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8005c9c:	1aeb      	subs	r3, r5, r3
 8005c9e:	441c      	add	r4, r3
 8005ca0:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 8005ca2:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 8005ca4:	b218      	sxth	r0, r3
}
 8005ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ca8:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8005caa:	2f00      	cmp	r7, #0
 8005cac:	dddf      	ble.n	8005c6e <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	dddd      	ble.n	8005c6e <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005cb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005cb6:	429c      	cmp	r4, r3
 8005cb8:	d1df      	bne.n	8005c7a <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8005cba:	4623      	mov	r3, r4
 8005cbc:	e7dc      	b.n	8005c78 <PI_Controller+0x3c>
 8005cbe:	bf00      	nop
 8005cc0:	80000001 	.word	0x80000001

08005cc4 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005cc4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8005cc8:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005cca:	8b0c      	ldrh	r4, [r1, #24]
 8005ccc:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005cce:	898a      	ldrh	r2, [r1, #12]
 8005cd0:	8acb      	ldrh	r3, [r1, #22]
{
 8005cd2:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005cd4:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005cd8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8005cdc:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005ce0:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005ce4:	f7ff f876 	bl	8004dd4 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8005ce8:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8005cec:	490f      	ldr	r1, [pc, #60]	; (8005d2c <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005cee:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8005cf2:	bfb8      	it	lt
 8005cf4:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005cf8:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 8005cfc:	bfb8      	it	lt
 8005cfe:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005d00:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8005d02:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005d04:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8005d08:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005d0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d10:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8005d12:	fb81 2103 	smull	r2, r1, r1, r3
 8005d16:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005d18:	4630      	mov	r0, r6
 8005d1a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8005d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005d22:	f7ff beef 	b.w	8005b04 <MPM_CalcElMotorPower>
 8005d26:	bf00      	nop
 8005d28:	1b4e81b5 	.word	0x1b4e81b5
 8005d2c:	66666667 	.word	0x66666667

08005d30 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <startTimers+0x60>)
 8005d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005d34:	07d2      	lsls	r2, r2, #31
 8005d36:	d514      	bpl.n	8005d62 <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d3c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005d3e:	6859      	ldr	r1, [r3, #4]
 8005d40:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d44:	f041 0120 	orr.w	r1, r1, #32
 8005d48:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d4a:	6959      	ldr	r1, [r3, #20]
 8005d4c:	f041 0101 	orr.w	r1, r1, #1
 8005d50:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005d58:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005d6c:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005d72:	f002 0201 	and.w	r2, r2, #1
 8005d76:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005d78:	9a01      	ldr	r2, [sp, #4]
 8005d7a:	694a      	ldr	r2, [r1, #20]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8005d8a:	b002      	add	sp, #8
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40023800 	.word	0x40023800

08005d94 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8005d94:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8005d96:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005d98:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8005d9c:	3201      	adds	r2, #1
 8005d9e:	2c60      	cmp	r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8005da0:	bf18      	it	ne
 8005da2:	0852      	lsrne	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005da4:	f06f 0602 	mvn.w	r6, #2
 8005da8:	0155      	lsls	r5, r2, #5
 8005daa:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8005dac:	2400      	movs	r4, #0
  while (*cnt < NB_CONVERSIONS)
 8005dae:	e002      	b.n	8005db6 <waitForPolarizationEnd+0x22>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005db0:	6902      	ldr	r2, [r0, #16]
 8005db2:	0792      	lsls	r2, r2, #30
 8005db4:	d404      	bmi.n	8005dc0 <waitForPolarizationEnd+0x2c>
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	2a0f      	cmp	r2, #15
 8005dba:	d9f9      	bls.n	8005db0 <waitForPolarizationEnd+0x1c>
          break;
        }
      }
    }
  }
}
 8005dbc:	bc70      	pop	{r4, r5, r6}
 8005dbe:	4770      	bx	lr
      hCalibrationPeriodCounter++;
 8005dc0:	3401      	adds	r4, #1
 8005dc2:	b2a4      	uxth	r4, r4
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005dc4:	42a5      	cmp	r5, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005dc6:	6106      	str	r6, [r0, #16]
 8005dc8:	d8f5      	bhi.n	8005db6 <waitForPolarizationEnd+0x22>
        if (*cnt < NB_CONVERSIONS)
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	2a0f      	cmp	r2, #15
 8005dce:	d8f2      	bhi.n	8005db6 <waitForPolarizationEnd+0x22>
          *SWerror = 1u;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	800b      	strh	r3, [r1, #0]
          break;
 8005dd4:	e7f2      	b.n	8005dbc <waitForPolarizationEnd+0x28>
 8005dd6:	bf00      	nop

08005dd8 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8005dd8:	6843      	ldr	r3, [r0, #4]
 8005dda:	4718      	bx	r3

08005ddc <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8005ddc:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005dde:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005de2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005de4:	140c      	asrs	r4, r1, #16
{
 8005de6:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005de8:	fb02 f404 	mul.w	r4, r2, r4
{
 8005dec:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005dee:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005df2:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005df4:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005df6:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005dfa:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005dfc:	4421      	add	r1, r4
 8005dfe:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005e02:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005e06:	106d      	asrs	r5, r5, #1
 8005e08:	ea4f 0292 	mov.w	r2, r2, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005e0c:	ea4f 0666 	mov.w	r6, r6, asr #1
  if ( wY < 0 )
 8005e10:	d46e      	bmi.n	8005ef0 <PWMC_SetPhaseVoltage+0x114>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	db4c      	blt.n	8005eb0 <PWMC_SetPhaseVoltage+0xd4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005e16:	1bad      	subs	r5, r5, r6
 8005e18:	bf44      	itt	mi
 8005e1a:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005e1e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfbc      	itt	lt
 8005e26:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8005e2a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	bfb8      	it	lt
 8005e32:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005e36:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005e3a:	bfb8      	it	lt
 8005e3c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8005e40:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8005e42:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005e46:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 8005e4a:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005e4e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8005e52:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005e54:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005e56:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005e5a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005e5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e62:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005e66:	b292      	uxth	r2, r2
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b289      	uxth	r1, r1
 8005e6c:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005e6e:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005e70:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005e72:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8005e74:	d118      	bne.n	8005ea8 <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8005e76:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
 8005e7a:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8005e7e:	2d00      	cmp	r5, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005e80:	bfcc      	ite	gt
 8005e82:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8005e84:	1b12      	suble	r2, r2, r4
 8005e86:	b292      	uxth	r2, r2
    }

    if ( pHandle->Ib > 0 )
 8005e88:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
 8005e8c:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005e8e:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8005e92:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8005e94:	bfcc      	ite	gt
 8005e96:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005e98:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8005e9a:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005e9c:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005e9e:	bfcc      	ite	gt
 8005ea0:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8005ea2:	1b09      	suble	r1, r1, r4
 8005ea4:	8683      	strh	r3, [r0, #52]	; 0x34
 8005ea6:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005ea8:	6983      	ldr	r3, [r0, #24]
}
 8005eaa:	b003      	add	sp, #12
 8005eac:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005eae:	4718      	bx	r3
      if ( wX <= 0 )
 8005eb0:	2c00      	cmp	r4, #0
 8005eb2:	dd3c      	ble.n	8005f2e <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb8      	it	lt
 8005eb8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005ebc:	f04f 0100 	mov.w	r1, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005ec0:	bfb8      	it	lt
 8005ec2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005ec6:	1ba5      	subs	r5, r4, r6
        pHandle->Sector = SECTOR_1;
 8005ec8:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8005ecc:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005ece:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005ed2:	bfb8      	it	lt
 8005ed4:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005ed8:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005edc:	bfb8      	it	lt
 8005ede:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005ee2:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhC;
 8005ee6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005eea:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005eec:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8005eee:	e7b2      	b.n	8005e56 <PWMC_SetPhaseVoltage+0x7a>
    if ( wZ < 0 )
 8005ef0:	2e00      	cmp	r6, #0
 8005ef2:	db5d      	blt.n	8005fb0 <PWMC_SetPhaseVoltage+0x1d4>
      if ( wX <= 0 )
 8005ef4:	2c00      	cmp	r4, #0
 8005ef6:	dd38      	ble.n	8005f6a <PWMC_SetPhaseVoltage+0x18e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005ef8:	1b2d      	subs	r5, r5, r4
 8005efa:	bf44      	itt	mi
 8005efc:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005f00:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005f04:	2900      	cmp	r1, #0
 8005f06:	bfb8      	it	lt
 8005f08:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005f0c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005f10:	bfb8      	it	lt
 8005f12:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_3;
 8005f16:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 8005f18:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_3;
 8005f1c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8005f20:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8005f24:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005f26:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005f28:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005f2c:	e793      	b.n	8005e56 <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	bfb8      	it	lt
 8005f32:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8005f36:	f04f 0305 	mov.w	r3, #5
        wTimePhC = wTimePhA - wY / 131072;
 8005f3a:	bfb8      	it	lt
 8005f3c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005f40:	1b2d      	subs	r5, r5, r4
        pHandle->Sector = SECTOR_6;
 8005f42:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8005f46:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005f48:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005f4c:	bfb8      	it	lt
 8005f4e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8005f52:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005f56:	bfb8      	it	lt
 8005f58:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005f5c:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhB;
 8005f60:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005f64:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005f66:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8005f68:	e775      	b.n	8005e56 <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005f6a:	1ba5      	subs	r5, r4, r6
 8005f6c:	bf44      	itt	mi
 8005f6e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005f72:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8005f7e:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8005f82:	bfb8      	it	lt
 8005f84:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8005f88:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8005f8c:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005f8e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005f92:	bfb8      	it	lt
 8005f94:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005f98:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005f9c:	bfb8      	it	lt
 8005f9e:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005fa2:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhC;
 8005fa6:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005fa8:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005faa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005fae:	e752      	b.n	8005e56 <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005fb0:	1bad      	subs	r5, r5, r6
 8005fb2:	bf44      	itt	mi
 8005fb4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005fb8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bfbc      	itt	lt
 8005fc0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8005fc4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	bfb8      	it	lt
 8005fcc:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005fd0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005fd4:	bfb8      	it	lt
 8005fd6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8005fda:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8005fdc:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005fe0:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_5;
 8005fe4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8005fe8:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005fea:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8005fec:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8005ff0:	e731      	b.n	8005e56 <PWMC_SetPhaseVoltage+0x7a>
 8005ff2:	bf00      	nop

08005ff4 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8005ff4:	6883      	ldr	r3, [r0, #8]
 8005ff6:	4718      	bx	r3

08005ff8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8005ffe:	b1a1      	cbz	r1, 800602a <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006000:	2901      	cmp	r1, #1
 8006002:	d002      	beq.n	800600a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006004:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006006:	b002      	add	sp, #8
 8006008:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800600a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800600e:	b1d3      	cbz	r3, 8006046 <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 8006010:	3b01      	subs	r3, #1
 8006012:	b29b      	uxth	r3, r3
 8006014:	9101      	str	r1, [sp, #4]
 8006016:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f2      	bne.n	8006004 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800601e:	6903      	ldr	r3, [r0, #16]
 8006020:	4798      	blx	r3
        retVal = true;
 8006022:	9901      	ldr	r1, [sp, #4]
 8006024:	4608      	mov	r0, r1
}
 8006026:	b002      	add	sp, #8
 8006028:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 800602a:	f7ff ffe3 	bl	8005ff4 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800602e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006032:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e4      	bne.n	8006004 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 800603a:	4620      	mov	r0, r4
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	4798      	blx	r3
      retVal = true;
 8006040:	2001      	movs	r0, #1
}
 8006042:	b002      	add	sp, #8
 8006044:	bd10      	pop	{r4, pc}
      retVal = true;
 8006046:	4608      	mov	r0, r1
}
 8006048:	b002      	add	sp, #8
 800604a:	bd10      	pop	{r4, pc}

0800604c <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800604c:	69c3      	ldr	r3, [r0, #28]
 800604e:	4718      	bx	r3

08006050 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006050:	8b42      	ldrh	r2, [r0, #26]
 8006052:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006054:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006056:	440a      	add	r2, r1
 8006058:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800605a:	b18b      	cbz	r3, 8006080 <RVBS_Clear+0x30>
{
 800605c:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 800605e:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006060:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 8006062:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006066:	3301      	adds	r3, #1
 8006068:	8b01      	ldrh	r1, [r0, #24]
 800606a:	b29b      	uxth	r3, r3
 800606c:	4299      	cmp	r1, r3
 800606e:	d8f8      	bhi.n	8006062 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006070:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8006072:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8006074:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8006076:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 800607a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607e:	4770      	bx	lr
  pHandle->index = 0;
 8006080:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8006082:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8006084:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8006086:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 800608a:	4770      	bx	lr

0800608c <RVBS_Init>:
{
 800608c:	b510      	push	{r4, lr}
 800608e:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006090:	300c      	adds	r0, #12
 8006092:	f7fb fec9 	bl	8001e28 <RCM_RegisterRegConv>
 8006096:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff ffd8 	bl	8006050 <RVBS_Clear>
}
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	bf00      	nop

080060a4 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80060a4:	88c3      	ldrh	r3, [r0, #6]
 80060a6:	8b42      	ldrh	r2, [r0, #26]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d305      	bcc.n	80060b8 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 80060ac:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 80060ae:	4298      	cmp	r0, r3
 80060b0:	bf8c      	ite	hi
 80060b2:	2004      	movhi	r0, #4
 80060b4:	2000      	movls	r0, #0
 80060b6:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80060b8:	2002      	movs	r0, #2
  }
  return fault;
}
 80060ba:	4770      	bx	lr

080060bc <RVBS_CalcAvVbus>:
{
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80060c0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80060c4:	f7fb ff6c 	bl	8001fa0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80060c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060cc:	4298      	cmp	r0, r3
 80060ce:	d01b      	beq.n	8006108 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 80060d0:	6a26      	ldr	r6, [r4, #32]
 80060d2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80060d6:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80060da:	8b25      	ldrh	r5, [r4, #24]
 80060dc:	b1cd      	cbz	r5, 8006112 <RVBS_CalcAvVbus+0x56>
 80060de:	2300      	movs	r3, #0
    wtemp = 0;
 80060e0:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80060e2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80060e6:	3301      	adds	r3, #1
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 80060ec:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80060ee:	d3f8      	bcc.n	80060e2 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80060f0:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80060f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80060f8:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80060fa:	3d01      	subs	r5, #1
 80060fc:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 80060fe:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006100:	da09      	bge.n	8006116 <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8006102:	3301      	adds	r3, #1
 8006104:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff ffcb 	bl	80060a4 <RVBS_CheckFaultState>
 800610e:	8120      	strh	r0, [r4, #8]
}
 8006110:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006112:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8006114:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ffc1 	bl	80060a4 <RVBS_CheckFaultState>
 8006122:	8120      	strh	r0, [r4, #8]
}
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	bf00      	nop

08006128 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006128:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800612a:	2201      	movs	r2, #1
 800612c:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 800612e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006132:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8006136:	4770      	bx	lr

08006138 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006138:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006140:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006148:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop

08006150 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006150:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 8006154:	b430      	push	{r4, r5}
 8006156:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 8006158:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 800615a:	bfb8      	it	lt
 800615c:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800615e:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006160:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006162:	7803      	ldrb	r3, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006164:	8a81      	ldrh	r1, [r0, #20]
    hAux = -( *pMecSpeedUnit );
 8006166:	bfb8      	it	lt
 8006168:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800616a:	4295      	cmp	r5, r2
 800616c:	d819      	bhi.n	80061a2 <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800616e:	4291      	cmp	r1, r2
 8006170:	bf2c      	ite	cs
 8006172:	2200      	movcs	r2, #0
 8006174:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006176:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 800617a:	b2a9      	uxth	r1, r5
 800617c:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800617e:	bfb8      	it	lt
 8006180:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006182:	8b05      	ldrh	r5, [r0, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8006184:	bfb8      	it	lt
 8006186:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006188:	428d      	cmp	r5, r1
 800618a:	d300      	bcc.n	800618e <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800618c:	b15a      	cbz	r2, 80061a6 <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800618e:	429c      	cmp	r4, r3
 8006190:	d901      	bls.n	8006196 <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 8006192:	3301      	adds	r3, #1
 8006194:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006196:	7003      	strb	r3, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006198:	1b18      	subs	r0, r3, r4
 800619a:	bf18      	it	ne
 800619c:	2001      	movne	r0, #1
 800619e:	bc30      	pop	{r4, r5}
 80061a0:	4770      	bx	lr
    SpeedError = true;
 80061a2:	2201      	movs	r2, #1
 80061a4:	e7e7      	b.n	8006176 <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 80061a6:	429c      	cmp	r4, r3
 80061a8:	bf88      	it	hi
 80061aa:	2300      	movhi	r3, #0
 80061ac:	e7f3      	b.n	8006196 <SPD_IsMecSpeedReliable+0x46>
 80061ae:	bf00      	nop

080061b0 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80061b0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80061b4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80061b8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80061bc:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80061c0:	b200      	sxth	r0, r0
 80061c2:	4770      	bx	lr

080061c4 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80061c4:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80061c6:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80061ca:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 80061ce:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 80061d0:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80061d2:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80061d4:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 80061d6:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 80061da:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80061dc:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80061e0:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 80061e2:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80061e4:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80061e6:	6183      	str	r3, [r0, #24]
}
 80061e8:	bc30      	pop	{r4, r5}
 80061ea:	4770      	bx	lr

080061ec <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80061ec:	6940      	ldr	r0, [r0, #20]
 80061ee:	4770      	bx	lr

080061f0 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80061f0:	7803      	ldrb	r3, [r0, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d000      	beq.n	80061f8 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80061f6:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80061f8:	6900      	ldr	r0, [r0, #16]
 80061fa:	2100      	movs	r1, #0
 80061fc:	f7ff bd12 	b.w	8005c24 <PID_SetIntegralTerm>

08006200 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006200:	6840      	ldr	r0, [r0, #4]
 8006202:	2800      	cmp	r0, #0
 8006204:	bfbc      	itt	lt
 8006206:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800620a:	30ff      	addlt	r0, #255	; 0xff
}
 800620c:	1400      	asrs	r0, r0, #16
 800620e:	4770      	bx	lr

08006210 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006210:	6880      	ldr	r0, [r0, #8]
 8006212:	2800      	cmp	r0, #0
 8006214:	bfbc      	itt	lt
 8006216:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800621a:	30ff      	addlt	r0, #255	; 0xff
}
 800621c:	1400      	asrs	r0, r0, #16
 800621e:	4770      	bx	lr

08006220 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006220:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006222:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006224:	60c3      	str	r3, [r0, #12]
}
 8006226:	4770      	bx	lr

08006228 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006228:	7803      	ldrb	r3, [r0, #0]
{
 800622a:	b570      	push	{r4, r5, r6, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006232:	b313      	cbz	r3, 800627a <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006234:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006236:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006238:	2800      	cmp	r0, #0
 800623a:	bfbc      	itt	lt
 800623c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006240:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006242:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006244:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006248:	db1c      	blt.n	8006284 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800624a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800624e:	428b      	cmp	r3, r1
 8006250:	dc18      	bgt.n	8006284 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006252:	8c23      	ldrh	r3, [r4, #32]
 8006254:	428b      	cmp	r3, r1
 8006256:	dd03      	ble.n	8006260 <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006258:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800625c:	428b      	cmp	r3, r1
 800625e:	db11      	blt.n	8006284 <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8006260:	b9c6      	cbnz	r6, 8006294 <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006262:	7823      	ldrb	r3, [r4, #0]
 8006264:	042d      	lsls	r5, r5, #16
 8006266:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 8006268:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800626c:	bf0c      	ite	eq
 800626e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006270:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006272:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006274:	61a3      	str	r3, [r4, #24]
 8006276:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006278:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800627a:	f7ff ffc9 	bl	8006210 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800627e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006280:	42ab      	cmp	r3, r5
 8006282:	da01      	bge.n	8006288 <STC_ExecRamp+0x60>
      AllowedRange = false;
 8006284:	2000      	movs	r0, #0
}
 8006286:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006288:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800628c:	42ab      	cmp	r3, r5
 800628e:	dcf9      	bgt.n	8006284 <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 8006290:	2e00      	cmp	r6, #0
 8006292:	d0e6      	beq.n	8006262 <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006294:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 8006298:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800629a:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80062a4:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80062a6:	1a2d      	subs	r5, r5, r0
 80062a8:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80062aa:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80062ac:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80062b0:	2001      	movs	r0, #1
 80062b2:	61a5      	str	r5, [r4, #24]
}
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	bf00      	nop
 80062b8:	10624dd3 	.word	0x10624dd3

080062bc <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80062bc:	2300      	movs	r3, #0
 80062be:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80062c0:	6183      	str	r3, [r0, #24]
}
 80062c2:	4770      	bx	lr

080062c4 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80062c4:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80062c6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80062ca:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80062cc:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	bf18      	it	ne
 80062d2:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d910      	bls.n	80062fa <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80062d8:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80062da:	3b01      	subs	r3, #1
 80062dc:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 80062de:	440d      	add	r5, r1
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	4629      	mov	r1, r5
 80062e4:	bfbc      	itt	lt
 80062e6:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 80062ea:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80062ec:	2a01      	cmp	r2, #1
 80062ee:	ea4f 4621 	mov.w	r6, r1, asr #16
 80062f2:	d009      	beq.n	8006308 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80062f4:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80062f6:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80062fa:	d1f1      	bne.n	80062e0 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80062fc:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006300:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006302:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006304:	60c3      	str	r3, [r0, #12]
 8006306:	e7eb      	b.n	80062e0 <STC_CalcTorqueReference+0x1c>
 8006308:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800630a:	6940      	ldr	r0, [r0, #20]
 800630c:	f7ff ff18 	bl	8006140 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006310:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006312:	b201      	sxth	r1, r0
 8006314:	6920      	ldr	r0, [r4, #16]
 8006316:	f7ff fc91 	bl	8005c3c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800631a:	0403      	lsls	r3, r0, #16
 800631c:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	bf00      	nop

08006324 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006324:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop

0800632c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800632c:	8bc0      	ldrh	r0, [r0, #30]
 800632e:	4770      	bx	lr

08006330 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006330:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop

08006338 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006338:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800633c:	2000      	movs	r0, #0
 800633e:	b29a      	uxth	r2, r3
 8006340:	f362 000f 	bfi	r0, r2, #0, #16
 8006344:	0c1b      	lsrs	r3, r3, #16
{
 8006346:	b082      	sub	sp, #8
  return IqdRefDefault;
 8006348:	f363 401f 	bfi	r0, r3, #16, #16
}
 800634c:	b002      	add	sp, #8
 800634e:	4770      	bx	lr

08006350 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006350:	b510      	push	{r4, lr}
 8006352:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006354:	6940      	ldr	r0, [r0, #20]
 8006356:	f7ff fef3 	bl	8006140 <SPD_GetAvrgMecSpeedUnit>
 800635a:	0400      	lsls	r0, r0, #16
 800635c:	6060      	str	r0, [r4, #4]
}
 800635e:	bd10      	pop	{r4, pc}

08006360 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006360:	2300      	movs	r3, #0
 8006362:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006364:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop

0800636c <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800636c:	8843      	ldrh	r3, [r0, #2]
{
 800636e:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 8006370:	8885      	ldrh	r5, [r0, #4]
{
 8006372:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 8006374:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006376:	430b      	orrs	r3, r1
 8006378:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800637c:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800637e:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 8006380:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006382:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 8006384:	d006      	beq.n	8006394 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006386:	b90a      	cbnz	r2, 800638c <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006388:	bc30      	pop	{r4, r5}
 800638a:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800638c:	200a      	movs	r0, #10
 800638e:	7020      	strb	r0, [r4, #0]
}
 8006390:	bc30      	pop	{r4, r5}
 8006392:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006394:	2a00      	cmp	r2, #0
 8006396:	d1f7      	bne.n	8006388 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8006398:	200b      	movs	r0, #11
 800639a:	7020      	strb	r0, [r4, #0]
}
 800639c:	bc30      	pop	{r4, r5}
 800639e:	4770      	bx	lr

080063a0 <STM_NextState>:
{
 80063a0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80063a2:	7803      	ldrb	r3, [r0, #0]
 80063a4:	2b14      	cmp	r3, #20
 80063a6:	d819      	bhi.n	80063dc <STM_NextState+0x3c>
 80063a8:	e8df f003 	tbb	[pc, r3]
 80063ac:	240d1257 	.word	0x240d1257
 80063b0:	3c0d352e 	.word	0x3c0d352e
 80063b4:	1818423f 	.word	0x1818423f
 80063b8:	4a650b47 	.word	0x4a650b47
 80063bc:	53505e4d 	.word	0x53505e4d
 80063c0:	39          	.byte	0x39
 80063c1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80063c2:	290e      	cmp	r1, #14
 80063c4:	d001      	beq.n	80063ca <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 80063c6:	2907      	cmp	r1, #7
 80063c8:	d108      	bne.n	80063dc <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 80063ca:	7001      	strb	r1, [r0, #0]
 80063cc:	2001      	movs	r0, #1
}
 80063ce:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80063d0:	2907      	cmp	r1, #7
 80063d2:	d0fa      	beq.n	80063ca <STM_NextState+0x2a>
 80063d4:	f1a1 030d 	sub.w	r3, r1, #13
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d9f6      	bls.n	80063ca <STM_NextState+0x2a>
 80063dc:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d00f      	beq.n	8006404 <STM_NextState+0x64>
 80063e4:	2907      	cmp	r1, #7
 80063e6:	d00d      	beq.n	8006404 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80063e8:	2200      	movs	r2, #0
 80063ea:	2180      	movs	r1, #128	; 0x80
 80063ec:	f7ff ffbe 	bl	800636c <STM_FaultProcessing>
 80063f0:	2000      	movs	r0, #0
}
 80063f2:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80063f4:	2911      	cmp	r1, #17
 80063f6:	d8f7      	bhi.n	80063e8 <STM_NextState+0x48>
 80063f8:	4b21      	ldr	r3, [pc, #132]	; (8006480 <STM_NextState+0xe0>)
 80063fa:	40cb      	lsrs	r3, r1
 80063fc:	07da      	lsls	r2, r3, #31
 80063fe:	d4e4      	bmi.n	80063ca <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006400:	2903      	cmp	r1, #3
 8006402:	d1f1      	bne.n	80063e8 <STM_NextState+0x48>
 8006404:	2000      	movs	r0, #0
}
 8006406:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006408:	2913      	cmp	r1, #19
 800640a:	d0de      	beq.n	80063ca <STM_NextState+0x2a>
 800640c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006410:	2b05      	cmp	r3, #5
 8006412:	d1e5      	bne.n	80063e0 <STM_NextState+0x40>
 8006414:	e7d9      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8006416:	1f8b      	subs	r3, r1, #6
 8006418:	2b01      	cmp	r3, #1
 800641a:	d8df      	bhi.n	80063dc <STM_NextState+0x3c>
 800641c:	e7d5      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800641e:	2912      	cmp	r1, #18
 8006420:	d1d1      	bne.n	80063c6 <STM_NextState+0x26>
 8006422:	e7d2      	b.n	80063ca <STM_NextState+0x2a>
      if ( bState == STOP )
 8006424:	2908      	cmp	r1, #8
 8006426:	d1d9      	bne.n	80063dc <STM_NextState+0x3c>
 8006428:	e7cf      	b.n	80063ca <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 800642a:	2909      	cmp	r1, #9
 800642c:	d1d6      	bne.n	80063dc <STM_NextState+0x3c>
 800642e:	e7cc      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006430:	2900      	cmp	r1, #0
 8006432:	d0ca      	beq.n	80063ca <STM_NextState+0x2a>
 8006434:	290c      	cmp	r1, #12
 8006436:	d1d1      	bne.n	80063dc <STM_NextState+0x3c>
 8006438:	e7c7      	b.n	80063ca <STM_NextState+0x2a>
      if ( bState == IDLE )
 800643a:	2900      	cmp	r1, #0
 800643c:	d1ce      	bne.n	80063dc <STM_NextState+0x3c>
 800643e:	e7c4      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006440:	2902      	cmp	r1, #2
 8006442:	d1c0      	bne.n	80063c6 <STM_NextState+0x26>
 8006444:	e7c1      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006446:	2911      	cmp	r1, #17
 8006448:	d1bd      	bne.n	80063c6 <STM_NextState+0x26>
 800644a:	e7be      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800644c:	2904      	cmp	r1, #4
 800644e:	d1ba      	bne.n	80063c6 <STM_NextState+0x26>
 8006450:	e7bb      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006452:	1f0b      	subs	r3, r1, #4
 8006454:	2b01      	cmp	r3, #1
 8006456:	d8b6      	bhi.n	80063c6 <STM_NextState+0x26>
 8006458:	e7b7      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800645a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800645e:	2b01      	cmp	r3, #1
 8006460:	d0b3      	beq.n	80063ca <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 8006462:	290c      	cmp	r1, #12
 8006464:	d1be      	bne.n	80063e4 <STM_NextState+0x44>
 8006466:	e7b0      	b.n	80063ca <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006468:	2914      	cmp	r1, #20
 800646a:	d8b7      	bhi.n	80063dc <STM_NextState+0x3c>
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <STM_NextState+0xe4>)
 800646e:	40cb      	lsrs	r3, r1
 8006470:	07db      	lsls	r3, r3, #31
 8006472:	d4aa      	bmi.n	80063ca <STM_NextState+0x2a>
 8006474:	e7b2      	b.n	80063dc <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006476:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800647a:	2b07      	cmp	r3, #7
 800647c:	d1ae      	bne.n	80063dc <STM_NextState+0x3c>
 800647e:	e7a4      	b.n	80063ca <STM_NextState+0x2a>
 8006480:	00030092 	.word	0x00030092
 8006484:	00140080 	.word	0x00140080

08006488 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006488:	7800      	ldrb	r0, [r0, #0]
 800648a:	4770      	bx	lr

0800648c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800648c:	7803      	ldrb	r3, [r0, #0]
 800648e:	2b0b      	cmp	r3, #11
 8006490:	d001      	beq.n	8006496 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8006492:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8006494:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8006496:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006498:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800649a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800649c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800649e:	2001      	movs	r0, #1
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop

080064a4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80064a4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80064a6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80064a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80064b0:	f7fe bcda 	b.w	8004e68 <FCP_Init>

080064b4 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80064b4:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 80064b8:	b192      	cbz	r2, 80064e0 <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80064ba:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 80064be:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80064c2:	4603      	mov	r3, r0
 80064c4:	b199      	cbz	r1, 80064ee <UFCP_TX_IRQ_Handler+0x3a>
 80064c6:	2901      	cmp	r1, #1
 80064c8:	d00b      	beq.n	80064e2 <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80064ca:	7d40      	ldrb	r0, [r0, #21]
 80064cc:	3001      	adds	r0, #1
 80064ce:	4281      	cmp	r1, r0
 80064d0:	dc0f      	bgt.n	80064f2 <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80064d2:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80064d4:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80064d6:	7d00      	ldrb	r0, [r0, #20]
 80064d8:	6050      	str	r0, [r2, #4]
 80064da:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80064de:	4770      	bx	lr
 80064e0:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80064e2:	7d40      	ldrb	r0, [r0, #21]
 80064e4:	6050      	str	r0, [r2, #4]
      pBaseHandle->TxFrameLevel++;
 80064e6:	3101      	adds	r1, #1
 80064e8:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 80064ec:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80064ee:	7d00      	ldrb	r0, [r0, #20]
        break;
 80064f0:	e7f8      	b.n	80064e4 <UFCP_TX_IRQ_Handler+0x30>
{
 80064f2:	b430      	push	{r4, r5}
 80064f4:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 80064f8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80064fa:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80064fc:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8006500:	2500      	movs	r5, #0
 8006502:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006506:	60d1      	str	r1, [r2, #12]
 8006508:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800650c:	4623      	mov	r3, r4
}
 800650e:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006510:	4718      	bx	r3
 8006512:	bf00      	nop

08006514 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006514:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006518:	b10b      	cbz	r3, 800651e <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800651a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800651c:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800651e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 8006522:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006526:	68d3      	ldr	r3, [r2, #12]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006528:	2101      	movs	r1, #1
 800652a:	f043 0320 	orr.w	r3, r3, #32
 800652e:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8006532:	2002      	movs	r0, #2
 8006534:	60d3      	str	r3, [r2, #12]
 8006536:	4770      	bx	lr

08006538 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800653e:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8006542:	b110      	cbz	r0, 800654a <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006544:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 800654a:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800654c:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800654e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006550:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8006552:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8006556:	2b00      	cmp	r3, #0
 8006558:	d05d      	beq.n	8006616 <UFCP_Send+0xde>
 800655a:	1d10      	adds	r0, r2, #4
 800655c:	f104 051a 	add.w	r5, r4, #26
 8006560:	4295      	cmp	r5, r2
 8006562:	bf88      	it	hi
 8006564:	42b8      	cmphi	r0, r7
 8006566:	d86b      	bhi.n	8006640 <UFCP_Send+0x108>
 8006568:	2b0b      	cmp	r3, #11
 800656a:	d969      	bls.n	8006640 <UFCP_Send+0x108>
 800656c:	4250      	negs	r0, r2
 800656e:	f000 0003 	and.w	r0, r0, #3
 8006572:	1cc5      	adds	r5, r0, #3
 8006574:	42a9      	cmp	r1, r5
 8006576:	d339      	bcc.n	80065ec <UFCP_Send+0xb4>
 8006578:	2800      	cmp	r0, #0
 800657a:	d06c      	beq.n	8006656 <UFCP_Send+0x11e>
 800657c:	7811      	ldrb	r1, [r2, #0]
 800657e:	75a1      	strb	r1, [r4, #22]
 8006580:	2801      	cmp	r0, #1
 8006582:	f1a3 0102 	sub.w	r1, r3, #2
 8006586:	b2c9      	uxtb	r1, r1
 8006588:	f102 0c01 	add.w	ip, r2, #1
 800658c:	f104 0717 	add.w	r7, r4, #23
 8006590:	d012      	beq.n	80065b8 <UFCP_Send+0x80>
 8006592:	7851      	ldrb	r1, [r2, #1]
 8006594:	75e1      	strb	r1, [r4, #23]
 8006596:	2803      	cmp	r0, #3
 8006598:	f1a3 0103 	sub.w	r1, r3, #3
 800659c:	b2c9      	uxtb	r1, r1
 800659e:	f102 0c02 	add.w	ip, r2, #2
 80065a2:	f104 0718 	add.w	r7, r4, #24
 80065a6:	d107      	bne.n	80065b8 <UFCP_Send+0x80>
 80065a8:	7891      	ldrb	r1, [r2, #2]
 80065aa:	7621      	strb	r1, [r4, #24]
 80065ac:	1f19      	subs	r1, r3, #4
 80065ae:	b2c9      	uxtb	r1, r1
 80065b0:	f102 0c03 	add.w	ip, r2, #3
 80065b4:	f104 0719 	add.w	r7, r4, #25
 80065b8:	1a1b      	subs	r3, r3, r0
 80065ba:	b2dd      	uxtb	r5, r3
 80065bc:	f100 0316 	add.w	r3, r0, #22
 80065c0:	4402      	add	r2, r0
 80065c2:	ea4f 0895 	mov.w	r8, r5, lsr #2
 80065c6:	18e0      	adds	r0, r4, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	3301      	adds	r3, #1
 80065cc:	b2de      	uxtb	r6, r3
 80065ce:	f852 eb04 	ldr.w	lr, [r2], #4
 80065d2:	f840 eb04 	str.w	lr, [r0], #4
 80065d6:	45b0      	cmp	r8, r6
 80065d8:	d8f7      	bhi.n	80065ca <UFCP_Send+0x92>
 80065da:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 80065de:	1ac9      	subs	r1, r1, r3
 80065e0:	429d      	cmp	r5, r3
 80065e2:	b2c9      	uxtb	r1, r1
 80065e4:	eb0c 0203 	add.w	r2, ip, r3
 80065e8:	441f      	add	r7, r3
 80065ea:	d014      	beq.n	8006616 <UFCP_Send+0xde>
 80065ec:	7813      	ldrb	r3, [r2, #0]
 80065ee:	703b      	strb	r3, [r7, #0]
 80065f0:	b189      	cbz	r1, 8006616 <UFCP_Send+0xde>
 80065f2:	7853      	ldrb	r3, [r2, #1]
 80065f4:	707b      	strb	r3, [r7, #1]
 80065f6:	2901      	cmp	r1, #1
 80065f8:	d00d      	beq.n	8006616 <UFCP_Send+0xde>
 80065fa:	7893      	ldrb	r3, [r2, #2]
 80065fc:	70bb      	strb	r3, [r7, #2]
 80065fe:	2902      	cmp	r1, #2
 8006600:	d009      	beq.n	8006616 <UFCP_Send+0xde>
 8006602:	78d3      	ldrb	r3, [r2, #3]
 8006604:	70fb      	strb	r3, [r7, #3]
 8006606:	2903      	cmp	r1, #3
 8006608:	d005      	beq.n	8006616 <UFCP_Send+0xde>
 800660a:	7913      	ldrb	r3, [r2, #4]
 800660c:	713b      	strb	r3, [r7, #4]
 800660e:	2904      	cmp	r1, #4
 8006610:	d001      	beq.n	8006616 <UFCP_Send+0xde>
 8006612:	7953      	ldrb	r3, [r2, #5]
 8006614:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006616:	f104 0014 	add.w	r0, r4, #20
 800661a:	f7fe fc3b 	bl	8004e94 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800661e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006622:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800662c:	68d3      	ldr	r3, [r2, #12]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800662e:	2101      	movs	r1, #1
 8006630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006634:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8006638:	2002      	movs	r0, #2
 800663a:	60d3      	str	r3, [r2, #12]
}
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	3101      	adds	r1, #1
 8006642:	4411      	add	r1, r2
 8006644:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8006648:	f812 0b01 	ldrb.w	r0, [r2], #1
 800664c:	f803 0f01 	strb.w	r0, [r3, #1]!
 8006650:	428a      	cmp	r2, r1
 8006652:	d1f9      	bne.n	8006648 <UFCP_Send+0x110>
 8006654:	e7df      	b.n	8006616 <UFCP_Send+0xde>
 8006656:	4694      	mov	ip, r2
 8006658:	e7ae      	b.n	80065b8 <UFCP_Send+0x80>
 800665a:	bf00      	nop

0800665c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800665c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006660:	b1b3      	cbz	r3, 8006690 <UFCP_RX_IRQ_Handler+0x34>
{
 8006662:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8006664:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 8006668:	4604      	mov	r4, r0
{
 800666a:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 800666c:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 800666e:	b1e3      	cbz	r3, 80066aa <UFCP_RX_IRQ_Handler+0x4e>
 8006670:	2b01      	cmp	r3, #1
 8006672:	d00f      	beq.n	8006694 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006674:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 8006678:	3101      	adds	r1, #1
 800667a:	428b      	cmp	r3, r1
 800667c:	dc1f      	bgt.n	80066be <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800667e:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 8006680:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006682:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006686:	4823      	ldr	r0, [pc, #140]	; (8006714 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 8006688:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800668c:	b003      	add	sp, #12
 800668e:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006690:	4820      	ldr	r0, [pc, #128]	; (8006714 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006692:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006694:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8006696:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800669a:	481e      	ldr	r0, [pc, #120]	; (8006714 <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 800669c:	bf54      	ite	pl
 800669e:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80066a0:	2300      	movmi	r3, #0
 80066a2:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80066a6:	b003      	add	sp, #12
 80066a8:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80066aa:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80066ac:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80066b0:	4819      	ldr	r0, [pc, #100]	; (8006718 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80066b2:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80066ba:	b003      	add	sp, #12
 80066bc:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80066be:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80066c2:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80066c6:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 80066c8:	2200      	movs	r2, #0
 80066ca:	f023 0320 	bic.w	r3, r3, #32
 80066ce:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80066d0:	f104 0099 	add.w	r0, r4, #153	; 0x99
 80066d4:	60cb      	str	r3, [r1, #12]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80066d6:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80066da:	f7fe fbdb 	bl	8004e94 <FCP_CalcCRC>
 80066de:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80066e2:	4283      	cmp	r3, r0
 80066e4:	d10a      	bne.n	80066fc <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	68a5      	ldr	r5, [r4, #8]
 80066ea:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80066ee:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80066f2:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80066f6:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80066f8:	4808      	ldr	r0, [pc, #32]	; (800671c <UFCP_RX_IRQ_Handler+0xc0>)
 80066fa:	e7c7      	b.n	800668c <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 80066fc:	aa02      	add	r2, sp, #8
 80066fe:	230a      	movs	r3, #10
 8006700:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006704:	4620      	mov	r0, r4
 8006706:	2301      	movs	r3, #1
 8006708:	21ff      	movs	r1, #255	; 0xff
 800670a:	f7ff ff15 	bl	8006538 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800670e:	4803      	ldr	r0, [pc, #12]	; (800671c <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8006710:	e7bc      	b.n	800668c <UFCP_RX_IRQ_Handler+0x30>
 8006712:	bf00      	nop
 8006714:	0800776c 	.word	0x0800776c
 8006718:	0800776e 	.word	0x0800776e
 800671c:	08007770 	.word	0x08007770

08006720 <UFCP_OVR_IRQ_Handler>:
{
 8006720:	b500      	push	{lr}
 8006722:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8006724:	aa02      	add	r2, sp, #8
 8006726:	2308      	movs	r3, #8
 8006728:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800672c:	21ff      	movs	r1, #255	; 0xff
 800672e:	2301      	movs	r3, #1
 8006730:	f7ff ff02 	bl	8006538 <UFCP_Send>
}
 8006734:	b003      	add	sp, #12
 8006736:	f85d fb04 	ldr.w	pc, [sp], #4
 800673a:	bf00      	nop

0800673c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800673c:	2300      	movs	r3, #0
 800673e:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8006742:	4770      	bx	lr

08006744 <RUC_SetPhaseDurationms>:
 8006744:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006748:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800674c:	818a      	strh	r2, [r1, #12]
 800674e:	4770      	bx	lr

08006750 <RUC_SetPhaseFinalMecSpeedUnit>:
 8006750:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006754:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006758:	81ca      	strh	r2, [r1, #14]
 800675a:	4770      	bx	lr

0800675c <RUC_SetPhaseFinalTorque>:
 800675c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006760:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006764:	820a      	strh	r2, [r1, #16]
 8006766:	4770      	bx	lr

08006768 <RUC_GetPhaseDurationms>:
 8006768:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800676c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006770:	8988      	ldrh	r0, [r1, #12]
 8006772:	4770      	bx	lr

08006774 <RUC_GetPhaseFinalMecSpeedUnit>:
 8006774:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006778:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800677c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop

08006784 <RUC_GetPhaseFinalTorque>:
 8006784:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006788:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800678c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <RUC_GetNumberOfPhases>:
 8006794:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <STO_PLL_CalcElAngle>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 80067a4:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 80067a8:	4604      	mov	r4, r0
 80067aa:	03d8      	lsls	r0, r3, #15
 80067ac:	1ac2      	subs	r2, r0, r3
 80067ae:	4596      	cmp	lr, r2
 80067b0:	b089      	sub	sp, #36	; 0x24
 80067b2:	f340 80c1 	ble.w	8006938 <STO_PLL_CalcElAngle+0x19c>
 80067b6:	66a2      	str	r2, [r4, #104]	; 0x68
 80067b8:	4696      	mov	lr, r2
 80067ba:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 80067be:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 80067c2:	fa4e f605 	asr.w	r6, lr, r5
 80067c6:	9603      	str	r6, [sp, #12]
 80067c8:	4562      	cmp	r2, ip
 80067ca:	b236      	sxth	r6, r6
 80067cc:	9601      	str	r6, [sp, #4]
 80067ce:	f280 80c8 	bge.w	8006962 <STO_PLL_CalcElAngle+0x1c6>
 80067d2:	66e2      	str	r2, [r4, #108]	; 0x6c
 80067d4:	4694      	mov	ip, r2
 80067d6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80067da:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80067dc:	03de      	lsls	r6, r3, #15
 80067de:	fa4c f205 	asr.w	r2, ip, r5
 80067e2:	1af5      	subs	r5, r6, r3
 80067e4:	9204      	str	r2, [sp, #16]
 80067e6:	42a8      	cmp	r0, r5
 80067e8:	b212      	sxth	r2, r2
 80067ea:	9202      	str	r2, [sp, #8]
 80067ec:	f340 80b3 	ble.w	8006956 <STO_PLL_CalcElAngle+0x1ba>
 80067f0:	6625      	str	r5, [r4, #96]	; 0x60
 80067f2:	4628      	mov	r0, r5
 80067f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067f6:	4295      	cmp	r5, r2
 80067f8:	f280 80a7 	bge.w	800694a <STO_PLL_CalcElAngle+0x1ae>
 80067fc:	6665      	str	r5, [r4, #100]	; 0x64
 80067fe:	462a      	mov	r2, r5
 8006800:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8006804:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8006808:	890d      	ldrh	r5, [r1, #8]
 800680a:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 800680e:	888e      	ldrh	r6, [r1, #4]
 8006810:	f9b1 7000 	ldrsh.w	r7, [r1]
 8006814:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8006818:	9901      	ldr	r1, [sp, #4]
 800681a:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 800681e:	fa40 f103 	asr.w	r1, r0, r3
 8006822:	fa42 f303 	asr.w	r3, r2, r3
 8006826:	1b8e      	subs	r6, r1, r6
 8006828:	fb11 f109 	smulbb	r1, r1, r9
 800682c:	fb13 f909 	smulbb	r9, r3, r9
 8006830:	eba3 030a 	sub.w	r3, r3, sl
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8006840:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8006844:	b236      	sxth	r6, r6
 8006846:	1a41      	subs	r1, r0, r1
 8006848:	fb05 f707 	mul.w	r7, r5, r7
 800684c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006850:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8006852:	eba2 0209 	sub.w	r2, r2, r9
 8006856:	fb0b 1106 	mla	r1, fp, r6, r1
 800685a:	143f      	asrs	r7, r7, #16
 800685c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8006860:	fb0a 1107 	mla	r1, sl, r7, r1
 8006864:	fb05 f508 	mul.w	r5, r5, r8
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	9f02      	ldr	r7, [sp, #8]
 800686c:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8006870:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8006874:	142d      	asrs	r5, r5, #16
 8006876:	fb0a b505 	mla	r5, sl, r5, fp
 800687a:	4107      	asrs	r7, r0
 800687c:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8006880:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8006884:	fa42 f000 	asr.w	r0, r2, r0
 8006888:	fb06 e609 	mla	r6, r6, r9, lr
 800688c:	fb09 c303 	mla	r3, r9, r3, ip
 8006890:	fb07 f708 	mul.w	r7, r7, r8
 8006894:	fb00 f008 	mul.w	r0, r0, r8
 8006898:	fb07 670a 	mla	r7, r7, sl, r6
 800689c:	fb00 361a 	mls	r6, r0, sl, r3
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 80068a6:	fb0b 1813 	mls	r8, fp, r3, r1
 80068aa:	9b02      	ldr	r3, [sp, #8]
 80068ac:	fb0b 5513 	mls	r5, fp, r3, r5
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	d147      	bne.n	8006944 <STO_PLL_CalcElAngle+0x1a8>
 80068b4:	f1ba 0f00 	cmp.w	sl, #0
 80068b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068bc:	bfb4      	ite	lt
 80068be:	4691      	movlt	r9, r2
 80068c0:	f04f 0901 	movge.w	r9, #1
 80068c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80068c8:	f7fa fa6c 	bl	8000da4 <MCM_Trig_Functions>
 80068cc:	9b04      	ldr	r3, [sp, #16]
 80068ce:	9a03      	ldr	r2, [sp, #12]
 80068d0:	fb13 f309 	smulbb	r3, r3, r9
 80068d4:	fb12 f109 	smulbb	r1, r2, r9
 80068d8:	425b      	negs	r3, r3
 80068da:	fb10 f303 	smulbb	r3, r0, r3
 80068de:	fb10 f021 	smultb	r0, r0, r1
 80068e2:	f343 33cf 	sbfx	r3, r3, #15, #16
 80068e6:	f340 31cf 	sbfx	r1, r0, #15, #16
 80068ea:	1a59      	subs	r1, r3, r1
 80068ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80068f0:	f7ff f9a4 	bl	8005c3c <PI_Controller>
 80068f4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80068f8:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 80068fc:	8220      	strh	r0, [r4, #16]
 80068fe:	3301      	adds	r3, #1
 8006900:	b2db      	uxtb	r3, r3
 8006902:	429a      	cmp	r2, r3
 8006904:	bf0a      	itet	eq
 8006906:	2200      	moveq	r2, #0
 8006908:	461a      	movne	r2, r3
 800690a:	4613      	moveq	r3, r2
 800690c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006910:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8006914:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8006918:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800691c:	88a2      	ldrh	r2, [r4, #4]
 800691e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8006922:	4410      	add	r0, r2
 8006924:	b200      	sxth	r0, r0
 8006926:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 800692a:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 800692e:	66e6      	str	r6, [r4, #108]	; 0x6c
 8006930:	80a0      	strh	r0, [r4, #4]
 8006932:	b009      	add	sp, #36	; 0x24
 8006934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006938:	1a1d      	subs	r5, r3, r0
 800693a:	45ae      	cmp	lr, r5
 800693c:	bfdc      	itt	le
 800693e:	66a5      	strle	r5, [r4, #104]	; 0x68
 8006940:	46ae      	movle	lr, r5
 8006942:	e73a      	b.n	80067ba <STO_PLL_CalcElAngle+0x1e>
 8006944:	fa1f f982 	uxth.w	r9, r2
 8006948:	e7bc      	b.n	80068c4 <STO_PLL_CalcElAngle+0x128>
 800694a:	1b9b      	subs	r3, r3, r6
 800694c:	429a      	cmp	r2, r3
 800694e:	bfdc      	itt	le
 8006950:	6663      	strle	r3, [r4, #100]	; 0x64
 8006952:	461a      	movle	r2, r3
 8006954:	e754      	b.n	8006800 <STO_PLL_CalcElAngle+0x64>
 8006956:	1b9a      	subs	r2, r3, r6
 8006958:	4290      	cmp	r0, r2
 800695a:	bfdc      	itt	le
 800695c:	6622      	strle	r2, [r4, #96]	; 0x60
 800695e:	4610      	movle	r0, r2
 8006960:	e748      	b.n	80067f4 <STO_PLL_CalcElAngle+0x58>
 8006962:	1a1b      	subs	r3, r3, r0
 8006964:	459c      	cmp	ip, r3
 8006966:	bfdc      	itt	le
 8006968:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800696a:	469c      	movle	ip, r3
 800696c:	e733      	b.n	80067d6 <STO_PLL_CalcElAngle+0x3a>
 800696e:	bf00      	nop

08006970 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8006970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006972:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8006976:	f1bc 0f00 	cmp.w	ip, #0
 800697a:	f000 8095 	beq.w	8006aa8 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800697e:	f10c 37ff 	add.w	r7, ip, #4294967295
 8006982:	b2fb      	uxtb	r3, r7
 8006984:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8006988:	f100 0774 	add.w	r7, r0, #116	; 0x74
 800698c:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8006990:	4632      	mov	r2, r6
 8006992:	2300      	movs	r3, #0
 8006994:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8006998:	4297      	cmp	r7, r2
 800699a:	442b      	add	r3, r5
 800699c:	d1fa      	bne.n	8006994 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800699e:	fb93 f5fc 	sdiv	r5, r3, ip
 80069a2:	2400      	movs	r4, #0
 80069a4:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 80069a8:	1b5b      	subs	r3, r3, r5
 80069aa:	42b2      	cmp	r2, r6
 80069ac:	fb03 4403 	mla	r4, r3, r3, r4
 80069b0:	d1f8      	bne.n	80069a4 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 80069b2:	fb94 f4fc 	sdiv	r4, r4, ip
 80069b6:	fb05 fc05 	mul.w	ip, r5, r5
 80069ba:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 80069be:	8b43      	ldrh	r3, [r0, #26]
 80069c0:	7887      	ldrb	r7, [r0, #2]
 80069c2:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 80069c6:	fb0c fc02 	mul.w	ip, ip, r2
 80069ca:	ea4f 1cec 	mov.w	ip, ip, asr #7
 80069ce:	fb05 f303 	mul.w	r3, r5, r3
 80069d2:	45a4      	cmp	ip, r4
 80069d4:	69c2      	ldr	r2, [r0, #28]
 80069d6:	bfd4      	ite	le
 80069d8:	2500      	movle	r5, #0
 80069da:	2501      	movgt	r5, #1
 80069dc:	fb03 f307 	mul.w	r3, r3, r7
 80069e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80069e4:	7842      	ldrb	r2, [r0, #1]
 80069e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ea:	b21a      	sxth	r2, r3
 80069ec:	800a      	strh	r2, [r1, #0]
 80069ee:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 80069f2:	8182      	strh	r2, [r0, #12]
 80069f4:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 80069f8:	b99e      	cbnz	r6, 8006a22 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 80069fa:	b355      	cbz	r5, 8006a52 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80069fc:	45a4      	cmp	ip, r4
 80069fe:	dc25      	bgt.n	8006a4c <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8006a00:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8006a04:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8006a12:	d81e      	bhi.n	8006a52 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8006a14:	2300      	movs	r3, #0
 8006a16:	78c2      	ldrb	r2, [r0, #3]
 8006a18:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8006a1c:	7002      	strb	r2, [r0, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8006a28:	bfb8      	it	lt
 8006a2a:	425b      	neglt	r3, r3
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	dc14      	bgt.n	8006a5a <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8006a30:	2200      	movs	r2, #0
 8006a32:	4613      	mov	r3, r2
 8006a34:	4616      	mov	r6, r2
 8006a36:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8006a3a:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8006a3e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8006a42:	b135      	cbz	r5, 8006a52 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8006a44:	45a4      	cmp	ip, r4
 8006a46:	dddb      	ble.n	8006a00 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	d0d9      	beq.n	8006a00 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8006a52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006a56:	f7ff bb7b 	b.w	8006150 <SPD_IsMecSpeedReliable>
 8006a5a:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8006a5e:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8006a62:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8006a66:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8006a6a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8006a6e:	fb93 f3fe 	sdiv	r3, r3, lr
 8006a72:	fb03 f202 	mul.w	r2, r3, r2
 8006a76:	2a00      	cmp	r2, #0
 8006a78:	bfb8      	it	lt
 8006a7a:	323f      	addlt	r2, #63	; 0x3f
 8006a7c:	1192      	asrs	r2, r2, #6
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	fb07 f707 	mul.w	r7, r7, r7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	fb06 7606 	mla	r6, r6, r6, r7
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8006a92:	bfb8      	it	lt
 8006a94:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8006a98:	1192      	asrs	r2, r2, #6
 8006a9a:	fb07 3212 	mls	r2, r7, r2, r3
 8006a9e:	4296      	cmp	r6, r2
 8006aa0:	bfd4      	ite	le
 8006aa2:	2200      	movle	r2, #0
 8006aa4:	2201      	movgt	r2, #1
 8006aa6:	e7c6      	b.n	8006a36 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8006aa8:	4664      	mov	r4, ip
 8006aaa:	4665      	mov	r5, ip
 8006aac:	e785      	b.n	80069ba <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8006aae:	bf00      	nop

08006ab0 <STO_PLL_CalcAvrgElSpeedDpp>:
 8006ab0:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8006ab4:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8006ab8:	b470      	push	{r4, r5, r6}
 8006aba:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8006abe:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8006ac2:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8006ac6:	b2a6      	uxth	r6, r4
 8006ac8:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8006acc:	1af3      	subs	r3, r6, r3
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	442a      	add	r2, r5
 8006ad2:	b19b      	cbz	r3, 8006afc <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8006ad4:	440b      	add	r3, r1
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	b219      	sxth	r1, r3
 8006ada:	428c      	cmp	r4, r1
 8006adc:	bfdc      	itt	le
 8006ade:	1b9b      	suble	r3, r3, r6
 8006ae0:	b219      	sxthle	r1, r3
 8006ae2:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8006ae6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8006af0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8006af4:	4113      	asrs	r3, r2
 8006af6:	81c3      	strh	r3, [r0, #14]
 8006af8:	bc70      	pop	{r4, r5, r6}
 8006afa:	4770      	bx	lr
 8006afc:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	e7f3      	b.n	8006aec <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08006b04 <STO_PLL_Clear>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8006b12:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8006b16:	8081      	strh	r1, [r0, #4]
 8006b18:	81c1      	strh	r1, [r0, #14]
 8006b1a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8006b1e:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8006b22:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8006b26:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8006b2a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8006b2e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8006b32:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 8006b36:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8006b3a:	b132      	cbz	r2, 8006b4a <STO_PLL_Clear+0x46>
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	3201      	adds	r2, #1
 8006b42:	0052      	lsls	r2, r2, #1
 8006b44:	3074      	adds	r0, #116	; 0x74
 8006b46:	f000 f8bf 	bl	8006cc8 <memset>
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8006b50:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8006b54:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b5c:	f7ff b862 	b.w	8005c24 <PID_SetIntegralTerm>

08006b60 <STO_PLL_Init>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4604      	mov	r4, r0
 8006b64:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <STO_PLL_Init+0x6c>)
 8006b6a:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8006b6e:	fb93 f3f5 	sdiv	r3, r3, r5
 8006b72:	2200      	movs	r2, #0
 8006b74:	2101      	movs	r1, #1
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8006b7c:	8662      	strh	r2, [r4, #50]	; 0x32
 8006b7e:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8006b82:	b303      	cbz	r3, 8006bc6 <STO_PLL_Init+0x66>
 8006b84:	4608      	mov	r0, r1
 8006b86:	e000      	b.n	8006b8a <STO_PLL_Init+0x2a>
 8006b88:	4611      	mov	r1, r2
 8006b8a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006b8e:	1c4a      	adds	r2, r1, #1
 8006b90:	105b      	asrs	r3, r3, #1
 8006b92:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8006b96:	b292      	uxth	r2, r2
 8006b98:	d1f6      	bne.n	8006b88 <STO_PLL_Init+0x28>
 8006b9a:	b200      	sxth	r0, r0
 8006b9c:	fb05 f200 	mul.w	r2, r5, r0
 8006ba0:	8661      	strh	r1, [r4, #50]	; 0x32
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <STO_PLL_Init+0x70>)
 8006ba4:	8620      	strh	r0, [r4, #48]	; 0x30
 8006ba6:	fb83 1302 	smull	r1, r3, r3, r2
 8006baa:	17d2      	asrs	r2, r2, #31
 8006bac:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8006bb0:	8562      	strh	r2, [r4, #42]	; 0x2a
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7ff ffa6 	bl	8006b04 <STO_PLL_Clear>
 8006bb8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006bbc:	f7ff f81e 	bl	8005bfc <PID_HandleInit>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	8263      	strh	r3, [r4, #18]
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4608      	mov	r0, r1
 8006bca:	e7ea      	b.n	8006ba2 <STO_PLL_Init+0x42>
 8006bcc:	000fea5e 	.word	0x000fea5e
 8006bd0:	06488dc5 	.word	0x06488dc5

08006bd4 <STO_PLL_GetEstimatedBemf>:
 8006bd4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f362 000f 	bfi	r0, r2, #0, #16
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	b082      	sub	sp, #8
 8006be2:	f363 401f 	bfi	r0, r3, #16, #16
 8006be6:	b002      	add	sp, #8
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop

08006bec <STO_PLL_GetEstimatedCurrent>:
 8006bec:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8006bf0:	b410      	push	{r4}
 8006bf2:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8006bf6:	4122      	asrs	r2, r4
 8006bf8:	b292      	uxth	r2, r2
 8006bfa:	4123      	asrs	r3, r4
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f362 010f 	bfi	r1, r2, #0, #16
 8006c04:	f363 411f 	bfi	r1, r3, #16, #16
 8006c08:	b083      	sub	sp, #12
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	b003      	add	sp, #12
 8006c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <STO_PLL_GetObserverGains>:
 8006c14:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8006c18:	800b      	strh	r3, [r1, #0]
 8006c1a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8006c1e:	8013      	strh	r3, [r2, #0]
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop

08006c24 <STO_PLL_SetObserverGains>:
 8006c24:	8441      	strh	r1, [r0, #34]	; 0x22
 8006c26:	84c2      	strh	r2, [r0, #38]	; 0x26
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop

08006c2c <STO_GetPLLGains>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006c32:	4620      	mov	r0, r4
 8006c34:	460e      	mov	r6, r1
 8006c36:	4615      	mov	r5, r2
 8006c38:	f7fe ffec 	bl	8005c14 <PID_GetKP>
 8006c3c:	8030      	strh	r0, [r6, #0]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7fe ffec 	bl	8005c1c <PID_GetKI>
 8006c44:	8028      	strh	r0, [r5, #0]
 8006c46:	bd70      	pop	{r4, r5, r6, pc}

08006c48 <STO_SetPLLGains>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8006c4e:	4615      	mov	r5, r2
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7fe ffdb 	bl	8005c0c <PID_SetKP>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4620      	mov	r0, r4
 8006c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5e:	f7fe bfd7 	b.w	8005c10 <PID_SetKI>
 8006c62:	bf00      	nop

08006c64 <STO_PLL_GetEstimatedBemfLevel>:
 8006c64:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop

08006c6c <STO_PLL_GetObservedBemfLevel>:
 8006c6c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop

08006c74 <__errno>:
 8006c74:	4b01      	ldr	r3, [pc, #4]	; (8006c7c <__errno+0x8>)
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000708 	.word	0x20000708

08006c80 <__libc_init_array>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	4e0d      	ldr	r6, [pc, #52]	; (8006cb8 <__libc_init_array+0x38>)
 8006c84:	4c0d      	ldr	r4, [pc, #52]	; (8006cbc <__libc_init_array+0x3c>)
 8006c86:	1ba4      	subs	r4, r4, r6
 8006c88:	10a4      	asrs	r4, r4, #2
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	42a5      	cmp	r5, r4
 8006c8e:	d109      	bne.n	8006ca4 <__libc_init_array+0x24>
 8006c90:	4e0b      	ldr	r6, [pc, #44]	; (8006cc0 <__libc_init_array+0x40>)
 8006c92:	4c0c      	ldr	r4, [pc, #48]	; (8006cc4 <__libc_init_array+0x44>)
 8006c94:	f000 fc26 	bl	80074e4 <_init>
 8006c98:	1ba4      	subs	r4, r4, r6
 8006c9a:	10a4      	asrs	r4, r4, #2
 8006c9c:	2500      	movs	r5, #0
 8006c9e:	42a5      	cmp	r5, r4
 8006ca0:	d105      	bne.n	8006cae <__libc_init_array+0x2e>
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ca8:	4798      	blx	r3
 8006caa:	3501      	adds	r5, #1
 8006cac:	e7ee      	b.n	8006c8c <__libc_init_array+0xc>
 8006cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cb2:	4798      	blx	r3
 8006cb4:	3501      	adds	r5, #1
 8006cb6:	e7f2      	b.n	8006c9e <__libc_init_array+0x1e>
 8006cb8:	080077b0 	.word	0x080077b0
 8006cbc:	080077b0 	.word	0x080077b0
 8006cc0:	080077b0 	.word	0x080077b0
 8006cc4:	080077b4 	.word	0x080077b4

08006cc8 <memset>:
 8006cc8:	4402      	add	r2, r0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d100      	bne.n	8006cd2 <memset+0xa>
 8006cd0:	4770      	bx	lr
 8006cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd6:	e7f9      	b.n	8006ccc <memset+0x4>

08006cd8 <siprintf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	b500      	push	{lr}
 8006cdc:	b09c      	sub	sp, #112	; 0x70
 8006cde:	ab1d      	add	r3, sp, #116	; 0x74
 8006ce0:	9002      	str	r0, [sp, #8]
 8006ce2:	9006      	str	r0, [sp, #24]
 8006ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce8:	4809      	ldr	r0, [pc, #36]	; (8006d10 <siprintf+0x38>)
 8006cea:	9107      	str	r1, [sp, #28]
 8006cec:	9104      	str	r1, [sp, #16]
 8006cee:	4909      	ldr	r1, [pc, #36]	; (8006d14 <siprintf+0x3c>)
 8006cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf4:	9105      	str	r1, [sp, #20]
 8006cf6:	6800      	ldr	r0, [r0, #0]
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	a902      	add	r1, sp, #8
 8006cfc:	f000 f866 	bl	8006dcc <_svfiprintf_r>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	b01c      	add	sp, #112	; 0x70
 8006d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d0c:	b003      	add	sp, #12
 8006d0e:	4770      	bx	lr
 8006d10:	20000708 	.word	0x20000708
 8006d14:	ffff0208 	.word	0xffff0208

08006d18 <__ssputs_r>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	688e      	ldr	r6, [r1, #8]
 8006d1e:	429e      	cmp	r6, r3
 8006d20:	4682      	mov	sl, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	4690      	mov	r8, r2
 8006d26:	4699      	mov	r9, r3
 8006d28:	d837      	bhi.n	8006d9a <__ssputs_r+0x82>
 8006d2a:	898a      	ldrh	r2, [r1, #12]
 8006d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d30:	d031      	beq.n	8006d96 <__ssputs_r+0x7e>
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	6909      	ldr	r1, [r1, #16]
 8006d36:	1a6f      	subs	r7, r5, r1
 8006d38:	6965      	ldr	r5, [r4, #20]
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8006d44:	f109 0301 	add.w	r3, r9, #1
 8006d48:	443b      	add	r3, r7
 8006d4a:	429d      	cmp	r5, r3
 8006d4c:	bf38      	it	cc
 8006d4e:	461d      	movcc	r5, r3
 8006d50:	0553      	lsls	r3, r2, #21
 8006d52:	d530      	bpl.n	8006db6 <__ssputs_r+0x9e>
 8006d54:	4629      	mov	r1, r5
 8006d56:	f000 fb2b 	bl	80073b0 <_malloc_r>
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	b950      	cbnz	r0, 8006d74 <__ssputs_r+0x5c>
 8006d5e:	230c      	movs	r3, #12
 8006d60:	f8ca 3000 	str.w	r3, [sl]
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	463a      	mov	r2, r7
 8006d76:	6921      	ldr	r1, [r4, #16]
 8006d78:	f000 faa8 	bl	80072cc <memcpy>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	6126      	str	r6, [r4, #16]
 8006d8a:	6165      	str	r5, [r4, #20]
 8006d8c:	443e      	add	r6, r7
 8006d8e:	1bed      	subs	r5, r5, r7
 8006d90:	6026      	str	r6, [r4, #0]
 8006d92:	60a5      	str	r5, [r4, #8]
 8006d94:	464e      	mov	r6, r9
 8006d96:	454e      	cmp	r6, r9
 8006d98:	d900      	bls.n	8006d9c <__ssputs_r+0x84>
 8006d9a:	464e      	mov	r6, r9
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	4641      	mov	r1, r8
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	f000 fa9e 	bl	80072e2 <memmove>
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	1b9b      	subs	r3, r3, r6
 8006daa:	60a3      	str	r3, [r4, #8]
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	441e      	add	r6, r3
 8006db0:	6026      	str	r6, [r4, #0]
 8006db2:	2000      	movs	r0, #0
 8006db4:	e7dc      	b.n	8006d70 <__ssputs_r+0x58>
 8006db6:	462a      	mov	r2, r5
 8006db8:	f000 fb54 	bl	8007464 <_realloc_r>
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d1e2      	bne.n	8006d88 <__ssputs_r+0x70>
 8006dc2:	6921      	ldr	r1, [r4, #16]
 8006dc4:	4650      	mov	r0, sl
 8006dc6:	f000 faa5 	bl	8007314 <_free_r>
 8006dca:	e7c8      	b.n	8006d5e <__ssputs_r+0x46>

08006dcc <_svfiprintf_r>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	898b      	ldrh	r3, [r1, #12]
 8006dd4:	061f      	lsls	r7, r3, #24
 8006dd6:	b09d      	sub	sp, #116	; 0x74
 8006dd8:	4680      	mov	r8, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4616      	mov	r6, r2
 8006dde:	d50f      	bpl.n	8006e00 <_svfiprintf_r+0x34>
 8006de0:	690b      	ldr	r3, [r1, #16]
 8006de2:	b96b      	cbnz	r3, 8006e00 <_svfiprintf_r+0x34>
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	f000 fae3 	bl	80073b0 <_malloc_r>
 8006dea:	6020      	str	r0, [r4, #0]
 8006dec:	6120      	str	r0, [r4, #16]
 8006dee:	b928      	cbnz	r0, 8006dfc <_svfiprintf_r+0x30>
 8006df0:	230c      	movs	r3, #12
 8006df2:	f8c8 3000 	str.w	r3, [r8]
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	e0c8      	b.n	8006f8e <_svfiprintf_r+0x1c2>
 8006dfc:	2340      	movs	r3, #64	; 0x40
 8006dfe:	6163      	str	r3, [r4, #20]
 8006e00:	2300      	movs	r3, #0
 8006e02:	9309      	str	r3, [sp, #36]	; 0x24
 8006e04:	2320      	movs	r3, #32
 8006e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e0a:	2330      	movs	r3, #48	; 0x30
 8006e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e10:	9503      	str	r5, [sp, #12]
 8006e12:	f04f 0b01 	mov.w	fp, #1
 8006e16:	4637      	mov	r7, r6
 8006e18:	463d      	mov	r5, r7
 8006e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e1e:	b10b      	cbz	r3, 8006e24 <_svfiprintf_r+0x58>
 8006e20:	2b25      	cmp	r3, #37	; 0x25
 8006e22:	d13e      	bne.n	8006ea2 <_svfiprintf_r+0xd6>
 8006e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8006e28:	d00b      	beq.n	8006e42 <_svfiprintf_r+0x76>
 8006e2a:	4653      	mov	r3, sl
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4640      	mov	r0, r8
 8006e32:	f7ff ff71 	bl	8006d18 <__ssputs_r>
 8006e36:	3001      	adds	r0, #1
 8006e38:	f000 80a4 	beq.w	8006f84 <_svfiprintf_r+0x1b8>
 8006e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3e:	4453      	add	r3, sl
 8006e40:	9309      	str	r3, [sp, #36]	; 0x24
 8006e42:	783b      	ldrb	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 809d 	beq.w	8006f84 <_svfiprintf_r+0x1b8>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e5e:	462f      	mov	r7, r5
 8006e60:	2205      	movs	r2, #5
 8006e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006e66:	4850      	ldr	r0, [pc, #320]	; (8006fa8 <_svfiprintf_r+0x1dc>)
 8006e68:	f7f9 f9da 	bl	8000220 <memchr>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	b9d0      	cbnz	r0, 8006ea6 <_svfiprintf_r+0xda>
 8006e70:	06d9      	lsls	r1, r3, #27
 8006e72:	bf44      	itt	mi
 8006e74:	2220      	movmi	r2, #32
 8006e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e7a:	071a      	lsls	r2, r3, #28
 8006e7c:	bf44      	itt	mi
 8006e7e:	222b      	movmi	r2, #43	; 0x2b
 8006e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e84:	782a      	ldrb	r2, [r5, #0]
 8006e86:	2a2a      	cmp	r2, #42	; 0x2a
 8006e88:	d015      	beq.n	8006eb6 <_svfiprintf_r+0xea>
 8006e8a:	9a07      	ldr	r2, [sp, #28]
 8006e8c:	462f      	mov	r7, r5
 8006e8e:	2000      	movs	r0, #0
 8006e90:	250a      	movs	r5, #10
 8006e92:	4639      	mov	r1, r7
 8006e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e98:	3b30      	subs	r3, #48	; 0x30
 8006e9a:	2b09      	cmp	r3, #9
 8006e9c:	d94d      	bls.n	8006f3a <_svfiprintf_r+0x16e>
 8006e9e:	b1b8      	cbz	r0, 8006ed0 <_svfiprintf_r+0x104>
 8006ea0:	e00f      	b.n	8006ec2 <_svfiprintf_r+0xf6>
 8006ea2:	462f      	mov	r7, r5
 8006ea4:	e7b8      	b.n	8006e18 <_svfiprintf_r+0x4c>
 8006ea6:	4a40      	ldr	r2, [pc, #256]	; (8006fa8 <_svfiprintf_r+0x1dc>)
 8006ea8:	1a80      	subs	r0, r0, r2
 8006eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8006eae:	4318      	orrs	r0, r3
 8006eb0:	9004      	str	r0, [sp, #16]
 8006eb2:	463d      	mov	r5, r7
 8006eb4:	e7d3      	b.n	8006e5e <_svfiprintf_r+0x92>
 8006eb6:	9a03      	ldr	r2, [sp, #12]
 8006eb8:	1d11      	adds	r1, r2, #4
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	9103      	str	r1, [sp, #12]
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	db01      	blt.n	8006ec6 <_svfiprintf_r+0xfa>
 8006ec2:	9207      	str	r2, [sp, #28]
 8006ec4:	e004      	b.n	8006ed0 <_svfiprintf_r+0x104>
 8006ec6:	4252      	negs	r2, r2
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	783b      	ldrb	r3, [r7, #0]
 8006ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ed4:	d10c      	bne.n	8006ef0 <_svfiprintf_r+0x124>
 8006ed6:	787b      	ldrb	r3, [r7, #1]
 8006ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eda:	d133      	bne.n	8006f44 <_svfiprintf_r+0x178>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	9203      	str	r2, [sp, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfb8      	it	lt
 8006ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eec:	3702      	adds	r7, #2
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	4d2e      	ldr	r5, [pc, #184]	; (8006fac <_svfiprintf_r+0x1e0>)
 8006ef2:	7839      	ldrb	r1, [r7, #0]
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f7f9 f992 	bl	8000220 <memchr>
 8006efc:	b138      	cbz	r0, 8006f0e <_svfiprintf_r+0x142>
 8006efe:	2340      	movs	r3, #64	; 0x40
 8006f00:	1b40      	subs	r0, r0, r5
 8006f02:	fa03 f000 	lsl.w	r0, r3, r0
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	4303      	orrs	r3, r0
 8006f0a:	3701      	adds	r7, #1
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	7839      	ldrb	r1, [r7, #0]
 8006f10:	4827      	ldr	r0, [pc, #156]	; (8006fb0 <_svfiprintf_r+0x1e4>)
 8006f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f16:	2206      	movs	r2, #6
 8006f18:	1c7e      	adds	r6, r7, #1
 8006f1a:	f7f9 f981 	bl	8000220 <memchr>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d038      	beq.n	8006f94 <_svfiprintf_r+0x1c8>
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <_svfiprintf_r+0x1e8>)
 8006f24:	bb13      	cbnz	r3, 8006f6c <_svfiprintf_r+0x1a0>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	3307      	adds	r3, #7
 8006f2a:	f023 0307 	bic.w	r3, r3, #7
 8006f2e:	3308      	adds	r3, #8
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f34:	444b      	add	r3, r9
 8006f36:	9309      	str	r3, [sp, #36]	; 0x24
 8006f38:	e76d      	b.n	8006e16 <_svfiprintf_r+0x4a>
 8006f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8006f3e:	2001      	movs	r0, #1
 8006f40:	460f      	mov	r7, r1
 8006f42:	e7a6      	b.n	8006e92 <_svfiprintf_r+0xc6>
 8006f44:	2300      	movs	r3, #0
 8006f46:	3701      	adds	r7, #1
 8006f48:	9305      	str	r3, [sp, #20]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	250a      	movs	r5, #10
 8006f4e:	4638      	mov	r0, r7
 8006f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f54:	3a30      	subs	r2, #48	; 0x30
 8006f56:	2a09      	cmp	r2, #9
 8006f58:	d903      	bls.n	8006f62 <_svfiprintf_r+0x196>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0c8      	beq.n	8006ef0 <_svfiprintf_r+0x124>
 8006f5e:	9105      	str	r1, [sp, #20]
 8006f60:	e7c6      	b.n	8006ef0 <_svfiprintf_r+0x124>
 8006f62:	fb05 2101 	mla	r1, r5, r1, r2
 8006f66:	2301      	movs	r3, #1
 8006f68:	4607      	mov	r7, r0
 8006f6a:	e7f0      	b.n	8006f4e <_svfiprintf_r+0x182>
 8006f6c:	ab03      	add	r3, sp, #12
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	4622      	mov	r2, r4
 8006f72:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <_svfiprintf_r+0x1ec>)
 8006f74:	a904      	add	r1, sp, #16
 8006f76:	4640      	mov	r0, r8
 8006f78:	f3af 8000 	nop.w
 8006f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f80:	4681      	mov	r9, r0
 8006f82:	d1d6      	bne.n	8006f32 <_svfiprintf_r+0x166>
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	065b      	lsls	r3, r3, #25
 8006f88:	f53f af35 	bmi.w	8006df6 <_svfiprintf_r+0x2a>
 8006f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f8e:	b01d      	add	sp, #116	; 0x74
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	ab03      	add	r3, sp, #12
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	4622      	mov	r2, r4
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <_svfiprintf_r+0x1ec>)
 8006f9c:	a904      	add	r1, sp, #16
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f000 f882 	bl	80070a8 <_printf_i>
 8006fa4:	e7ea      	b.n	8006f7c <_svfiprintf_r+0x1b0>
 8006fa6:	bf00      	nop
 8006fa8:	08007772 	.word	0x08007772
 8006fac:	08007778 	.word	0x08007778
 8006fb0:	0800777c 	.word	0x0800777c
 8006fb4:	00000000 	.word	0x00000000
 8006fb8:	08006d19 	.word	0x08006d19

08006fbc <_printf_common>:
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	688a      	ldr	r2, [r1, #8]
 8006fc6:	690b      	ldr	r3, [r1, #16]
 8006fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	bfb8      	it	lt
 8006fd0:	4613      	movlt	r3, r2
 8006fd2:	f8c9 3000 	str.w	r3, [r9]
 8006fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	b112      	cbz	r2, 8006fe6 <_printf_common+0x2a>
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f8c9 3000 	str.w	r3, [r9]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	0699      	lsls	r1, r3, #26
 8006fea:	bf42      	ittt	mi
 8006fec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ff0:	3302      	addmi	r3, #2
 8006ff2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ff6:	6825      	ldr	r5, [r4, #0]
 8006ff8:	f015 0506 	ands.w	r5, r5, #6
 8006ffc:	d107      	bne.n	800700e <_printf_common+0x52>
 8006ffe:	f104 0a19 	add.w	sl, r4, #25
 8007002:	68e3      	ldr	r3, [r4, #12]
 8007004:	f8d9 2000 	ldr.w	r2, [r9]
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	42ab      	cmp	r3, r5
 800700c:	dc28      	bgt.n	8007060 <_printf_common+0xa4>
 800700e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	3300      	adds	r3, #0
 8007016:	bf18      	it	ne
 8007018:	2301      	movne	r3, #1
 800701a:	0692      	lsls	r2, r2, #26
 800701c:	d42d      	bmi.n	800707a <_printf_common+0xbe>
 800701e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007022:	4639      	mov	r1, r7
 8007024:	4630      	mov	r0, r6
 8007026:	47c0      	blx	r8
 8007028:	3001      	adds	r0, #1
 800702a:	d020      	beq.n	800706e <_printf_common+0xb2>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	68e5      	ldr	r5, [r4, #12]
 8007030:	f8d9 2000 	ldr.w	r2, [r9]
 8007034:	f003 0306 	and.w	r3, r3, #6
 8007038:	2b04      	cmp	r3, #4
 800703a:	bf08      	it	eq
 800703c:	1aad      	subeq	r5, r5, r2
 800703e:	68a3      	ldr	r3, [r4, #8]
 8007040:	6922      	ldr	r2, [r4, #16]
 8007042:	bf0c      	ite	eq
 8007044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007048:	2500      	movne	r5, #0
 800704a:	4293      	cmp	r3, r2
 800704c:	bfc4      	itt	gt
 800704e:	1a9b      	subgt	r3, r3, r2
 8007050:	18ed      	addgt	r5, r5, r3
 8007052:	f04f 0900 	mov.w	r9, #0
 8007056:	341a      	adds	r4, #26
 8007058:	454d      	cmp	r5, r9
 800705a:	d11a      	bne.n	8007092 <_printf_common+0xd6>
 800705c:	2000      	movs	r0, #0
 800705e:	e008      	b.n	8007072 <_printf_common+0xb6>
 8007060:	2301      	movs	r3, #1
 8007062:	4652      	mov	r2, sl
 8007064:	4639      	mov	r1, r7
 8007066:	4630      	mov	r0, r6
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d103      	bne.n	8007076 <_printf_common+0xba>
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
 8007072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007076:	3501      	adds	r5, #1
 8007078:	e7c3      	b.n	8007002 <_printf_common+0x46>
 800707a:	18e1      	adds	r1, r4, r3
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	2030      	movs	r0, #48	; 0x30
 8007080:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007084:	4422      	add	r2, r4
 8007086:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800708a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800708e:	3302      	adds	r3, #2
 8007090:	e7c5      	b.n	800701e <_printf_common+0x62>
 8007092:	2301      	movs	r3, #1
 8007094:	4622      	mov	r2, r4
 8007096:	4639      	mov	r1, r7
 8007098:	4630      	mov	r0, r6
 800709a:	47c0      	blx	r8
 800709c:	3001      	adds	r0, #1
 800709e:	d0e6      	beq.n	800706e <_printf_common+0xb2>
 80070a0:	f109 0901 	add.w	r9, r9, #1
 80070a4:	e7d8      	b.n	8007058 <_printf_common+0x9c>
	...

080070a8 <_printf_i>:
 80070a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80070b0:	460c      	mov	r4, r1
 80070b2:	7e09      	ldrb	r1, [r1, #24]
 80070b4:	b085      	sub	sp, #20
 80070b6:	296e      	cmp	r1, #110	; 0x6e
 80070b8:	4617      	mov	r7, r2
 80070ba:	4606      	mov	r6, r0
 80070bc:	4698      	mov	r8, r3
 80070be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c0:	f000 80b3 	beq.w	800722a <_printf_i+0x182>
 80070c4:	d822      	bhi.n	800710c <_printf_i+0x64>
 80070c6:	2963      	cmp	r1, #99	; 0x63
 80070c8:	d036      	beq.n	8007138 <_printf_i+0x90>
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x3a>
 80070cc:	2900      	cmp	r1, #0
 80070ce:	f000 80b9 	beq.w	8007244 <_printf_i+0x19c>
 80070d2:	2958      	cmp	r1, #88	; 0x58
 80070d4:	f000 8083 	beq.w	80071de <_printf_i+0x136>
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80070e0:	e032      	b.n	8007148 <_printf_i+0xa0>
 80070e2:	2964      	cmp	r1, #100	; 0x64
 80070e4:	d001      	beq.n	80070ea <_printf_i+0x42>
 80070e6:	2969      	cmp	r1, #105	; 0x69
 80070e8:	d1f6      	bne.n	80070d8 <_printf_i+0x30>
 80070ea:	6820      	ldr	r0, [r4, #0]
 80070ec:	6813      	ldr	r3, [r2, #0]
 80070ee:	0605      	lsls	r5, r0, #24
 80070f0:	f103 0104 	add.w	r1, r3, #4
 80070f4:	d52a      	bpl.n	800714c <_printf_i+0xa4>
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6011      	str	r1, [r2, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	da03      	bge.n	8007106 <_printf_i+0x5e>
 80070fe:	222d      	movs	r2, #45	; 0x2d
 8007100:	425b      	negs	r3, r3
 8007102:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007106:	486f      	ldr	r0, [pc, #444]	; (80072c4 <_printf_i+0x21c>)
 8007108:	220a      	movs	r2, #10
 800710a:	e039      	b.n	8007180 <_printf_i+0xd8>
 800710c:	2973      	cmp	r1, #115	; 0x73
 800710e:	f000 809d 	beq.w	800724c <_printf_i+0x1a4>
 8007112:	d808      	bhi.n	8007126 <_printf_i+0x7e>
 8007114:	296f      	cmp	r1, #111	; 0x6f
 8007116:	d020      	beq.n	800715a <_printf_i+0xb2>
 8007118:	2970      	cmp	r1, #112	; 0x70
 800711a:	d1dd      	bne.n	80070d8 <_printf_i+0x30>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	f043 0320 	orr.w	r3, r3, #32
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	e003      	b.n	800712e <_printf_i+0x86>
 8007126:	2975      	cmp	r1, #117	; 0x75
 8007128:	d017      	beq.n	800715a <_printf_i+0xb2>
 800712a:	2978      	cmp	r1, #120	; 0x78
 800712c:	d1d4      	bne.n	80070d8 <_printf_i+0x30>
 800712e:	2378      	movs	r3, #120	; 0x78
 8007130:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007134:	4864      	ldr	r0, [pc, #400]	; (80072c8 <_printf_i+0x220>)
 8007136:	e055      	b.n	80071e4 <_printf_i+0x13c>
 8007138:	6813      	ldr	r3, [r2, #0]
 800713a:	1d19      	adds	r1, r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6011      	str	r1, [r2, #0]
 8007140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007148:	2301      	movs	r3, #1
 800714a:	e08c      	b.n	8007266 <_printf_i+0x1be>
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6011      	str	r1, [r2, #0]
 8007150:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007154:	bf18      	it	ne
 8007156:	b21b      	sxthne	r3, r3
 8007158:	e7cf      	b.n	80070fa <_printf_i+0x52>
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	6825      	ldr	r5, [r4, #0]
 800715e:	1d18      	adds	r0, r3, #4
 8007160:	6010      	str	r0, [r2, #0]
 8007162:	0628      	lsls	r0, r5, #24
 8007164:	d501      	bpl.n	800716a <_printf_i+0xc2>
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	e002      	b.n	8007170 <_printf_i+0xc8>
 800716a:	0668      	lsls	r0, r5, #25
 800716c:	d5fb      	bpl.n	8007166 <_printf_i+0xbe>
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	4854      	ldr	r0, [pc, #336]	; (80072c4 <_printf_i+0x21c>)
 8007172:	296f      	cmp	r1, #111	; 0x6f
 8007174:	bf14      	ite	ne
 8007176:	220a      	movne	r2, #10
 8007178:	2208      	moveq	r2, #8
 800717a:	2100      	movs	r1, #0
 800717c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007180:	6865      	ldr	r5, [r4, #4]
 8007182:	60a5      	str	r5, [r4, #8]
 8007184:	2d00      	cmp	r5, #0
 8007186:	f2c0 8095 	blt.w	80072b4 <_printf_i+0x20c>
 800718a:	6821      	ldr	r1, [r4, #0]
 800718c:	f021 0104 	bic.w	r1, r1, #4
 8007190:	6021      	str	r1, [r4, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d13d      	bne.n	8007212 <_printf_i+0x16a>
 8007196:	2d00      	cmp	r5, #0
 8007198:	f040 808e 	bne.w	80072b8 <_printf_i+0x210>
 800719c:	4665      	mov	r5, ip
 800719e:	2a08      	cmp	r2, #8
 80071a0:	d10b      	bne.n	80071ba <_printf_i+0x112>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	07db      	lsls	r3, r3, #31
 80071a6:	d508      	bpl.n	80071ba <_printf_i+0x112>
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	6862      	ldr	r2, [r4, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	bfde      	ittt	le
 80071b0:	2330      	movle	r3, #48	; 0x30
 80071b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ba:	ebac 0305 	sub.w	r3, ip, r5
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	f8cd 8000 	str.w	r8, [sp]
 80071c4:	463b      	mov	r3, r7
 80071c6:	aa03      	add	r2, sp, #12
 80071c8:	4621      	mov	r1, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff fef6 	bl	8006fbc <_printf_common>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d14d      	bne.n	8007270 <_printf_i+0x1c8>
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	b005      	add	sp, #20
 80071da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071de:	4839      	ldr	r0, [pc, #228]	; (80072c4 <_printf_i+0x21c>)
 80071e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80071e4:	6813      	ldr	r3, [r2, #0]
 80071e6:	6821      	ldr	r1, [r4, #0]
 80071e8:	1d1d      	adds	r5, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6015      	str	r5, [r2, #0]
 80071ee:	060a      	lsls	r2, r1, #24
 80071f0:	d50b      	bpl.n	800720a <_printf_i+0x162>
 80071f2:	07ca      	lsls	r2, r1, #31
 80071f4:	bf44      	itt	mi
 80071f6:	f041 0120 	orrmi.w	r1, r1, #32
 80071fa:	6021      	strmi	r1, [r4, #0]
 80071fc:	b91b      	cbnz	r3, 8007206 <_printf_i+0x15e>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	f022 0220 	bic.w	r2, r2, #32
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	e7b7      	b.n	800717a <_printf_i+0xd2>
 800720a:	064d      	lsls	r5, r1, #25
 800720c:	bf48      	it	mi
 800720e:	b29b      	uxthmi	r3, r3
 8007210:	e7ef      	b.n	80071f2 <_printf_i+0x14a>
 8007212:	4665      	mov	r5, ip
 8007214:	fbb3 f1f2 	udiv	r1, r3, r2
 8007218:	fb02 3311 	mls	r3, r2, r1, r3
 800721c:	5cc3      	ldrb	r3, [r0, r3]
 800721e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007222:	460b      	mov	r3, r1
 8007224:	2900      	cmp	r1, #0
 8007226:	d1f5      	bne.n	8007214 <_printf_i+0x16c>
 8007228:	e7b9      	b.n	800719e <_printf_i+0xf6>
 800722a:	6813      	ldr	r3, [r2, #0]
 800722c:	6825      	ldr	r5, [r4, #0]
 800722e:	6961      	ldr	r1, [r4, #20]
 8007230:	1d18      	adds	r0, r3, #4
 8007232:	6010      	str	r0, [r2, #0]
 8007234:	0628      	lsls	r0, r5, #24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	d501      	bpl.n	800723e <_printf_i+0x196>
 800723a:	6019      	str	r1, [r3, #0]
 800723c:	e002      	b.n	8007244 <_printf_i+0x19c>
 800723e:	066a      	lsls	r2, r5, #25
 8007240:	d5fb      	bpl.n	800723a <_printf_i+0x192>
 8007242:	8019      	strh	r1, [r3, #0]
 8007244:	2300      	movs	r3, #0
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	4665      	mov	r5, ip
 800724a:	e7b9      	b.n	80071c0 <_printf_i+0x118>
 800724c:	6813      	ldr	r3, [r2, #0]
 800724e:	1d19      	adds	r1, r3, #4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	681d      	ldr	r5, [r3, #0]
 8007254:	6862      	ldr	r2, [r4, #4]
 8007256:	2100      	movs	r1, #0
 8007258:	4628      	mov	r0, r5
 800725a:	f7f8 ffe1 	bl	8000220 <memchr>
 800725e:	b108      	cbz	r0, 8007264 <_printf_i+0x1bc>
 8007260:	1b40      	subs	r0, r0, r5
 8007262:	6060      	str	r0, [r4, #4]
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	2300      	movs	r3, #0
 800726a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726e:	e7a7      	b.n	80071c0 <_printf_i+0x118>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	462a      	mov	r2, r5
 8007274:	4639      	mov	r1, r7
 8007276:	4630      	mov	r0, r6
 8007278:	47c0      	blx	r8
 800727a:	3001      	adds	r0, #1
 800727c:	d0aa      	beq.n	80071d4 <_printf_i+0x12c>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	079b      	lsls	r3, r3, #30
 8007282:	d413      	bmi.n	80072ac <_printf_i+0x204>
 8007284:	68e0      	ldr	r0, [r4, #12]
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	4298      	cmp	r0, r3
 800728a:	bfb8      	it	lt
 800728c:	4618      	movlt	r0, r3
 800728e:	e7a3      	b.n	80071d8 <_printf_i+0x130>
 8007290:	2301      	movs	r3, #1
 8007292:	464a      	mov	r2, r9
 8007294:	4639      	mov	r1, r7
 8007296:	4630      	mov	r0, r6
 8007298:	47c0      	blx	r8
 800729a:	3001      	adds	r0, #1
 800729c:	d09a      	beq.n	80071d4 <_printf_i+0x12c>
 800729e:	3501      	adds	r5, #1
 80072a0:	68e3      	ldr	r3, [r4, #12]
 80072a2:	9a03      	ldr	r2, [sp, #12]
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	42ab      	cmp	r3, r5
 80072a8:	dcf2      	bgt.n	8007290 <_printf_i+0x1e8>
 80072aa:	e7eb      	b.n	8007284 <_printf_i+0x1dc>
 80072ac:	2500      	movs	r5, #0
 80072ae:	f104 0919 	add.w	r9, r4, #25
 80072b2:	e7f5      	b.n	80072a0 <_printf_i+0x1f8>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1ac      	bne.n	8007212 <_printf_i+0x16a>
 80072b8:	7803      	ldrb	r3, [r0, #0]
 80072ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c2:	e76c      	b.n	800719e <_printf_i+0xf6>
 80072c4:	08007783 	.word	0x08007783
 80072c8:	08007794 	.word	0x08007794

080072cc <memcpy>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	1e43      	subs	r3, r0, #1
 80072d0:	440a      	add	r2, r1
 80072d2:	4291      	cmp	r1, r2
 80072d4:	d100      	bne.n	80072d8 <memcpy+0xc>
 80072d6:	bd10      	pop	{r4, pc}
 80072d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e0:	e7f7      	b.n	80072d2 <memcpy+0x6>

080072e2 <memmove>:
 80072e2:	4288      	cmp	r0, r1
 80072e4:	b510      	push	{r4, lr}
 80072e6:	eb01 0302 	add.w	r3, r1, r2
 80072ea:	d807      	bhi.n	80072fc <memmove+0x1a>
 80072ec:	1e42      	subs	r2, r0, #1
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d00a      	beq.n	8007308 <memmove+0x26>
 80072f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80072fa:	e7f8      	b.n	80072ee <memmove+0xc>
 80072fc:	4283      	cmp	r3, r0
 80072fe:	d9f5      	bls.n	80072ec <memmove+0xa>
 8007300:	1881      	adds	r1, r0, r2
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	42d3      	cmn	r3, r2
 8007306:	d100      	bne.n	800730a <memmove+0x28>
 8007308:	bd10      	pop	{r4, pc}
 800730a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800730e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007312:	e7f7      	b.n	8007304 <memmove+0x22>

08007314 <_free_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4605      	mov	r5, r0
 8007318:	2900      	cmp	r1, #0
 800731a:	d045      	beq.n	80073a8 <_free_r+0x94>
 800731c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007320:	1f0c      	subs	r4, r1, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfb8      	it	lt
 8007326:	18e4      	addlt	r4, r4, r3
 8007328:	f000 f8d2 	bl	80074d0 <__malloc_lock>
 800732c:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <_free_r+0x98>)
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	4610      	mov	r0, r2
 8007332:	b933      	cbnz	r3, 8007342 <_free_r+0x2e>
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	6014      	str	r4, [r2, #0]
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733e:	f000 b8c8 	b.w	80074d2 <__malloc_unlock>
 8007342:	42a3      	cmp	r3, r4
 8007344:	d90c      	bls.n	8007360 <_free_r+0x4c>
 8007346:	6821      	ldr	r1, [r4, #0]
 8007348:	1862      	adds	r2, r4, r1
 800734a:	4293      	cmp	r3, r2
 800734c:	bf04      	itt	eq
 800734e:	681a      	ldreq	r2, [r3, #0]
 8007350:	685b      	ldreq	r3, [r3, #4]
 8007352:	6063      	str	r3, [r4, #4]
 8007354:	bf04      	itt	eq
 8007356:	1852      	addeq	r2, r2, r1
 8007358:	6022      	streq	r2, [r4, #0]
 800735a:	6004      	str	r4, [r0, #0]
 800735c:	e7ec      	b.n	8007338 <_free_r+0x24>
 800735e:	4613      	mov	r3, r2
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	b10a      	cbz	r2, 8007368 <_free_r+0x54>
 8007364:	42a2      	cmp	r2, r4
 8007366:	d9fa      	bls.n	800735e <_free_r+0x4a>
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	1858      	adds	r0, r3, r1
 800736c:	42a0      	cmp	r0, r4
 800736e:	d10b      	bne.n	8007388 <_free_r+0x74>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	4401      	add	r1, r0
 8007374:	1858      	adds	r0, r3, r1
 8007376:	4282      	cmp	r2, r0
 8007378:	6019      	str	r1, [r3, #0]
 800737a:	d1dd      	bne.n	8007338 <_free_r+0x24>
 800737c:	6810      	ldr	r0, [r2, #0]
 800737e:	6852      	ldr	r2, [r2, #4]
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	4401      	add	r1, r0
 8007384:	6019      	str	r1, [r3, #0]
 8007386:	e7d7      	b.n	8007338 <_free_r+0x24>
 8007388:	d902      	bls.n	8007390 <_free_r+0x7c>
 800738a:	230c      	movs	r3, #12
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	e7d3      	b.n	8007338 <_free_r+0x24>
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	1821      	adds	r1, r4, r0
 8007394:	428a      	cmp	r2, r1
 8007396:	bf04      	itt	eq
 8007398:	6811      	ldreq	r1, [r2, #0]
 800739a:	6852      	ldreq	r2, [r2, #4]
 800739c:	6062      	str	r2, [r4, #4]
 800739e:	bf04      	itt	eq
 80073a0:	1809      	addeq	r1, r1, r0
 80073a2:	6021      	streq	r1, [r4, #0]
 80073a4:	605c      	str	r4, [r3, #4]
 80073a6:	e7c7      	b.n	8007338 <_free_r+0x24>
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	bf00      	nop
 80073ac:	200007a8 	.word	0x200007a8

080073b0 <_malloc_r>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	1ccd      	adds	r5, r1, #3
 80073b4:	f025 0503 	bic.w	r5, r5, #3
 80073b8:	3508      	adds	r5, #8
 80073ba:	2d0c      	cmp	r5, #12
 80073bc:	bf38      	it	cc
 80073be:	250c      	movcc	r5, #12
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	4606      	mov	r6, r0
 80073c4:	db01      	blt.n	80073ca <_malloc_r+0x1a>
 80073c6:	42a9      	cmp	r1, r5
 80073c8:	d903      	bls.n	80073d2 <_malloc_r+0x22>
 80073ca:	230c      	movs	r3, #12
 80073cc:	6033      	str	r3, [r6, #0]
 80073ce:	2000      	movs	r0, #0
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	f000 f87d 	bl	80074d0 <__malloc_lock>
 80073d6:	4a21      	ldr	r2, [pc, #132]	; (800745c <_malloc_r+0xac>)
 80073d8:	6814      	ldr	r4, [r2, #0]
 80073da:	4621      	mov	r1, r4
 80073dc:	b991      	cbnz	r1, 8007404 <_malloc_r+0x54>
 80073de:	4c20      	ldr	r4, [pc, #128]	; (8007460 <_malloc_r+0xb0>)
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	b91b      	cbnz	r3, 80073ec <_malloc_r+0x3c>
 80073e4:	4630      	mov	r0, r6
 80073e6:	f000 f863 	bl	80074b0 <_sbrk_r>
 80073ea:	6020      	str	r0, [r4, #0]
 80073ec:	4629      	mov	r1, r5
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 f85e 	bl	80074b0 <_sbrk_r>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d124      	bne.n	8007442 <_malloc_r+0x92>
 80073f8:	230c      	movs	r3, #12
 80073fa:	6033      	str	r3, [r6, #0]
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 f868 	bl	80074d2 <__malloc_unlock>
 8007402:	e7e4      	b.n	80073ce <_malloc_r+0x1e>
 8007404:	680b      	ldr	r3, [r1, #0]
 8007406:	1b5b      	subs	r3, r3, r5
 8007408:	d418      	bmi.n	800743c <_malloc_r+0x8c>
 800740a:	2b0b      	cmp	r3, #11
 800740c:	d90f      	bls.n	800742e <_malloc_r+0x7e>
 800740e:	600b      	str	r3, [r1, #0]
 8007410:	50cd      	str	r5, [r1, r3]
 8007412:	18cc      	adds	r4, r1, r3
 8007414:	4630      	mov	r0, r6
 8007416:	f000 f85c 	bl	80074d2 <__malloc_unlock>
 800741a:	f104 000b 	add.w	r0, r4, #11
 800741e:	1d23      	adds	r3, r4, #4
 8007420:	f020 0007 	bic.w	r0, r0, #7
 8007424:	1ac3      	subs	r3, r0, r3
 8007426:	d0d3      	beq.n	80073d0 <_malloc_r+0x20>
 8007428:	425a      	negs	r2, r3
 800742a:	50e2      	str	r2, [r4, r3]
 800742c:	e7d0      	b.n	80073d0 <_malloc_r+0x20>
 800742e:	428c      	cmp	r4, r1
 8007430:	684b      	ldr	r3, [r1, #4]
 8007432:	bf16      	itet	ne
 8007434:	6063      	strne	r3, [r4, #4]
 8007436:	6013      	streq	r3, [r2, #0]
 8007438:	460c      	movne	r4, r1
 800743a:	e7eb      	b.n	8007414 <_malloc_r+0x64>
 800743c:	460c      	mov	r4, r1
 800743e:	6849      	ldr	r1, [r1, #4]
 8007440:	e7cc      	b.n	80073dc <_malloc_r+0x2c>
 8007442:	1cc4      	adds	r4, r0, #3
 8007444:	f024 0403 	bic.w	r4, r4, #3
 8007448:	42a0      	cmp	r0, r4
 800744a:	d005      	beq.n	8007458 <_malloc_r+0xa8>
 800744c:	1a21      	subs	r1, r4, r0
 800744e:	4630      	mov	r0, r6
 8007450:	f000 f82e 	bl	80074b0 <_sbrk_r>
 8007454:	3001      	adds	r0, #1
 8007456:	d0cf      	beq.n	80073f8 <_malloc_r+0x48>
 8007458:	6025      	str	r5, [r4, #0]
 800745a:	e7db      	b.n	8007414 <_malloc_r+0x64>
 800745c:	200007a8 	.word	0x200007a8
 8007460:	200007ac 	.word	0x200007ac

08007464 <_realloc_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	4607      	mov	r7, r0
 8007468:	4614      	mov	r4, r2
 800746a:	460e      	mov	r6, r1
 800746c:	b921      	cbnz	r1, 8007478 <_realloc_r+0x14>
 800746e:	4611      	mov	r1, r2
 8007470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007474:	f7ff bf9c 	b.w	80073b0 <_malloc_r>
 8007478:	b922      	cbnz	r2, 8007484 <_realloc_r+0x20>
 800747a:	f7ff ff4b 	bl	8007314 <_free_r>
 800747e:	4625      	mov	r5, r4
 8007480:	4628      	mov	r0, r5
 8007482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007484:	f000 f826 	bl	80074d4 <_malloc_usable_size_r>
 8007488:	42a0      	cmp	r0, r4
 800748a:	d20f      	bcs.n	80074ac <_realloc_r+0x48>
 800748c:	4621      	mov	r1, r4
 800748e:	4638      	mov	r0, r7
 8007490:	f7ff ff8e 	bl	80073b0 <_malloc_r>
 8007494:	4605      	mov	r5, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	d0f2      	beq.n	8007480 <_realloc_r+0x1c>
 800749a:	4631      	mov	r1, r6
 800749c:	4622      	mov	r2, r4
 800749e:	f7ff ff15 	bl	80072cc <memcpy>
 80074a2:	4631      	mov	r1, r6
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ff35 	bl	8007314 <_free_r>
 80074aa:	e7e9      	b.n	8007480 <_realloc_r+0x1c>
 80074ac:	4635      	mov	r5, r6
 80074ae:	e7e7      	b.n	8007480 <_realloc_r+0x1c>

080074b0 <_sbrk_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4c06      	ldr	r4, [pc, #24]	; (80074cc <_sbrk_r+0x1c>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4605      	mov	r5, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	f7fb f8c2 	bl	8002644 <_sbrk>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_sbrk_r+0x1a>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_sbrk_r+0x1a>
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20000b10 	.word	0x20000b10

080074d0 <__malloc_lock>:
 80074d0:	4770      	bx	lr

080074d2 <__malloc_unlock>:
 80074d2:	4770      	bx	lr

080074d4 <_malloc_usable_size_r>:
 80074d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d8:	1f18      	subs	r0, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfbc      	itt	lt
 80074de:	580b      	ldrlt	r3, [r1, r0]
 80074e0:	18c0      	addlt	r0, r0, r3
 80074e2:	4770      	bx	lr

080074e4 <_init>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr

080074f0 <_fini>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr
