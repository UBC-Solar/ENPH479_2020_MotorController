
solar_lv_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006304  08006304  00020698  2**0
                  CONTENTS
  4 .ARM          00000008  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800630c  0800630c  00020698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000698  20000000  08006314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000698  080069ac  00020698  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  080069ac  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001ef69  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00038fc9  00000000  00000000  0003f631  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005fc5  00000000  00000000  000785fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014a0  00000000  00000000  0007e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000eb6a5  00000000  00000000  0007fa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002618  00000000  00000000  0016b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00029b6a  00000000  00000000  0016d720  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0019728a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  00197384  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00013d8e  00000000  00000000  0019aed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000698 	.word	0x20000698
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800607c 	.word	0x0800607c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000069c 	.word	0x2000069c
 8000200:	0800607c 	.word	0x0800607c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800050a:	e003      	b.n	8000514 <LoopCopyDataInit>

0800050c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000512:	3104      	adds	r1, #4

08000514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800051c:	d3f6      	bcc.n	800050c <CopyDataInit>
  ldr  r2, =_sbss
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000520:	e002      	b.n	8000528 <LoopFillZerobss>

08000522 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000522:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000524:	f842 3b04 	str.w	r3, [r2], #4

08000528 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800052c:	d3f9      	bcc.n	8000522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052e:	f002 fc87 	bl	8002e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f005 fd77 	bl	8006024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f000 f865 	bl	8000604 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000540:	08006314 	.word	0x08006314
  ldr  r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000548:	20000698 	.word	0x20000698
  ldr  r2, =_sbss
 800054c:	20000698 	.word	0x20000698
  ldr  r3, = _ebss
 8000550:	200009d4 	.word	0x200009d4

08000554 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <BusFault_Handler>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2300      	movs	r3, #0
{
 800055c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8000562:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800056a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4923      	ldr	r1, [pc, #140]	; (80005fc <SystemClock_Config+0xa4>)
 8000570:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800057c:	6408      	str	r0, [r1, #64]	; 0x40
 800057e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000580:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	6813      	ldr	r3, [r2, #0]
 800058c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	6813      	ldr	r3, [r2, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a6:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005ac:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	9d01      	ldr	r5, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b8:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ba:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005be:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f003 f9b0 	bl	8003924 <HAL_RCC_OscConfig>
 80005c4:	b108      	cbz	r0, 80005ca <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c6:	b672      	cpsid	i
 80005c8:	e7fe      	b.n	80005c8 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ca:	f003 f851 	bl	8003670 <HAL_PWREx_EnableOverDrive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b108      	cbz	r0, 80005d6 <SystemClock_Config+0x7e>
 80005d2:	b672      	cpsid	i
 80005d4:	e7fe      	b.n	80005d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	a802      	add	r0, sp, #8
 80005e2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f003 f87d 	bl	80036ec <HAL_RCC_ClockConfig>
 80005f2:	b108      	cbz	r0, 80005f8 <SystemClock_Config+0xa0>
 80005f4:	b672      	cpsid	i
 80005f6:	e7fe      	b.n	80005f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 80005f8:	b014      	add	sp, #80	; 0x50
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <main>:
{
 8000604:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000608:	b09d      	sub	sp, #116	; 0x74
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	f04f 0800 	mov.w	r8, #0
  HAL_Init();
 800060e:	f002 fc49 	bl	8002ea4 <HAL_Init>
  SystemClock_Config();
 8000612:	f7ff ffa1 	bl	8000558 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	4ba8      	ldr	r3, [pc, #672]	; (80008b8 <main+0x2b4>)
 8000618:	f8cd 8008 	str.w	r8, [sp, #8]
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 800061e:	4ca7      	ldr	r4, [pc, #668]	; (80008bc <main+0x2b8>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80008d4 <main+0x2d0>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000630:	9202      	str	r2, [sp, #8]
 8000632:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	f8cd 800c 	str.w	r8, [sp, #12]
 8000638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063a:	f042 0201 	orr.w	r2, r2, #1
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f002 0201 	and.w	r2, r2, #1
 8000646:	9203      	str	r2, [sp, #12]
 8000648:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	f8cd 8010 	str.w	r8, [sp, #16]
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	f042 0204 	orr.w	r2, r2, #4
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	f002 0204 	and.w	r2, r2, #4
 800065c:	9204      	str	r2, [sp, #16]
 800065e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	f8cd 8014 	str.w	r8, [sp, #20]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0202 	orr.w	r2, r2, #2
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800066e:	2620      	movs	r6, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	9305      	str	r3, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000676:	4641      	mov	r1, r8
 8000678:	a814      	add	r0, sp, #80	; 0x50
 800067a:	4632      	mov	r2, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	9b05      	ldr	r3, [sp, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800067e:	f005 fcf5 	bl	800606c <memset>
  hadc1.Instance = ADC1;
 8000682:	4b8f      	ldr	r3, [pc, #572]	; (80008c0 <main+0x2bc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000684:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hadc1.Init.ScanConvMode = ENABLE;
 8000688:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800068a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800068e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000694:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
 8000698:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	f8c4 8008 	str.w	r8, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	f884 8018 	strb.w	r8, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	f884 8020 	strb.w	r8, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ac:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b0:	e9c4 3b00 	strd	r3, fp, [r4]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b4:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 80006b6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ba:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006be:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	f002 fc1c 	bl	8002efc <HAL_ADC_Init>
 80006c4:	b108      	cbz	r0, 80006ca <main+0xc6>
 80006c6:	b672      	cpsid	i
 80006c8:	e7fe      	b.n	80006c8 <main+0xc4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006ca:	2201      	movs	r2, #1
 80006cc:	2301      	movs	r3, #1
 80006ce:	4684      	mov	ip, r0
 80006d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006d4:	f04f 0800 	mov.w	r8, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006d8:	2300      	movs	r3, #0
 80006da:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006dc:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e0:	a914      	add	r1, sp, #80	; 0x50
 80006e2:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80006e4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006e8:	9518      	str	r5, [sp, #96]	; 0x60
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006ea:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006ee:	f88d c064 	strb.w	ip, [sp, #100]	; 0x64
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006f2:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006f6:	f002 fd6b 	bl	80031d0 <HAL_ADCEx_InjectedConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b108      	cbz	r0, 8000702 <main+0xfe>
 80006fe:	b672      	cpsid	i
 8000700:	e7fe      	b.n	8000700 <main+0xfc>
  sConfig.Channel = ADC_CHANNEL_15;
 8000702:	220f      	movs	r2, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	4620      	mov	r0, r4
 8000706:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000708:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 800070c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_15;
 800070e:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	f002 fca6 	bl	8003060 <HAL_ADC_ConfigChannel>
 8000714:	b108      	cbz	r0, 800071a <main+0x116>
 8000716:	b672      	cpsid	i
 8000718:	e7fe      	b.n	8000718 <main+0x114>
  hadc2.Instance = ADC2;
 800071a:	4c6a      	ldr	r4, [pc, #424]	; (80008c4 <main+0x2c0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800071c:	9001      	str	r0, [sp, #4]
 800071e:	4601      	mov	r1, r0
 8000720:	4632      	mov	r2, r6
 8000722:	a814      	add	r0, sp, #80	; 0x50
 8000724:	f005 fca2 	bl	800606c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000728:	9b01      	ldr	r3, [sp, #4]
  hadc2.Instance = ADC2;
 800072a:	4a67      	ldr	r2, [pc, #412]	; (80008c8 <main+0x2c4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800072c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800072e:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8000730:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8000734:	9310      	str	r3, [sp, #64]	; 0x40
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000736:	e9c4 b301 	strd	fp, r3, [r4, #4]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800073a:	7623      	strb	r3, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800073c:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	e9c4 a30a 	strd	sl, r3, [r4, #40]	; 0x28
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000744:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.ScanConvMode = ENABLE;
 8000748:	6125      	str	r5, [r4, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800074a:	60e7      	str	r7, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 800074c:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	6165      	str	r5, [r4, #20]
  hadc2.Instance = ADC2;
 8000750:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000752:	f002 fbd3 	bl	8002efc <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	b108      	cbz	r0, 800075e <main+0x15a>
 800075a:	b672      	cpsid	i
 800075c:	e7fe      	b.n	800075c <main+0x158>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800075e:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000762:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000766:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800076a:	2204      	movs	r2, #4
 800076c:	2301      	movs	r3, #1
 800076e:	2701      	movs	r7, #1
 8000770:	f04f 0800 	mov.w	r8, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000774:	a914      	add	r1, sp, #80	; 0x50
 8000776:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000778:	9518      	str	r5, [sp, #96]	; 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800077a:	e9cd 7816 	strd	r7, r8, [sp, #88]	; 0x58
 800077e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000782:	f002 fd25 	bl	80031d0 <HAL_ADCEx_InjectedConfigChannel>
 8000786:	b108      	cbz	r0, 800078c <main+0x188>
 8000788:	b672      	cpsid	i
 800078a:	e7fe      	b.n	800078a <main+0x186>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800078c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800078e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000790:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000792:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8000796:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	f002 fc62 	bl	8003060 <HAL_ADC_ConfigChannel>
 800079c:	4604      	mov	r4, r0
 800079e:	b108      	cbz	r0, 80007a4 <main+0x1a0>
 80007a0:	b672      	cpsid	i
 80007a2:	e7fe      	b.n	80007a2 <main+0x19e>
  htim1.Instance = TIM1;
 80007a4:	4f49      	ldr	r7, [pc, #292]	; (80008cc <main+0x2c8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007a6:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a8:	4601      	mov	r1, r0
 80007aa:	4632      	mov	r2, r6
 80007ac:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80007b4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80007b8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80007bc:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80007c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c8:	f005 fc50 	bl	800606c <memset>
  htim1.Instance = TIM1;
 80007cc:	4940      	ldr	r1, [pc, #256]	; (80008d0 <main+0x2cc>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80007ce:	607c      	str	r4, [r7, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80007d0:	f241 1294 	movw	r2, #4500	; 0x1194
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007d4:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007da:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80007dc:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	61bc      	str	r4, [r7, #24]
  htim1.Instance = TIM1;
 80007e0:	6039      	str	r1, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007e2:	e9c7 2303 	strd	r2, r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e6:	f003 fa71 	bl	8003ccc <HAL_TIM_Base_Init>
 80007ea:	b108      	cbz	r0, 80007f0 <main+0x1ec>
 80007ec:	b672      	cpsid	i
 80007ee:	e7fe      	b.n	80007ee <main+0x1ea>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f0:	4638      	mov	r0, r7
 80007f2:	f003 faf1 	bl	8003dd8 <HAL_TIM_PWM_Init>
 80007f6:	b108      	cbz	r0, 80007fc <main+0x1f8>
 80007f8:	b672      	cpsid	i
 80007fa:	e7fe      	b.n	80007fa <main+0x1f6>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80007fc:	2310      	movs	r3, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007fe:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000800:	a908      	add	r1, sp, #32
 8000802:	4638      	mov	r0, r7
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000804:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000806:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000808:	f003 fc74 	bl	80040f4 <HAL_TIM_SlaveConfigSynchro>
 800080c:	4603      	mov	r3, r0
 800080e:	b108      	cbz	r0, 8000814 <main+0x210>
 8000810:	b672      	cpsid	i
 8000812:	e7fe      	b.n	8000812 <main+0x20e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	a906      	add	r1, sp, #24
 8000816:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	e9cd 6306 	strd	r6, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	f003 fce4 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	b108      	cbz	r0, 8000826 <main+0x222>
 8000822:	b672      	cpsid	i
 8000824:	e7fe      	b.n	8000824 <main+0x220>
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000828:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082a:	461a      	mov	r2, r3
 800082c:	a90d      	add	r1, sp, #52	; 0x34
 800082e:	4827      	ldr	r0, [pc, #156]	; (80008cc <main+0x2c8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000836:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	f003 fb4f 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8000842:	b108      	cbz	r0, 8000848 <main+0x244>
 8000844:	b672      	cpsid	i
 8000846:	e7fe      	b.n	8000846 <main+0x242>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000848:	2204      	movs	r2, #4
 800084a:	a90d      	add	r1, sp, #52	; 0x34
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <main+0x2c8>)
 800084e:	f003 fb47 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8000852:	b108      	cbz	r0, 8000858 <main+0x254>
 8000854:	b672      	cpsid	i
 8000856:	e7fe      	b.n	8000856 <main+0x252>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000858:	2208      	movs	r2, #8
 800085a:	a90d      	add	r1, sp, #52	; 0x34
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <main+0x2c8>)
 800085e:	f003 fb3f 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	b108      	cbz	r0, 8000868 <main+0x264>
 8000864:	b672      	cpsid	i
 8000866:	e7fe      	b.n	8000866 <main+0x262>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000868:	2470      	movs	r4, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800086a:	f241 1393 	movw	r3, #4499	; 0x1193
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800086e:	a90d      	add	r1, sp, #52	; 0x34
 8000870:	220c      	movs	r2, #12
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <main+0x2c8>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000874:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000878:	f003 fb32 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 800087c:	b108      	cbz	r0, 8000882 <main+0x27e>
 800087e:	b672      	cpsid	i
 8000880:	e7fe      	b.n	8000880 <main+0x27c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000882:	f44f 6300 	mov.w	r3, #2048	; 0x800
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000886:	2448      	movs	r4, #72	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000888:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800088a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800088e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000890:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000896:	f44f 6680 	mov.w	r6, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800089a:	f44f 7580 	mov.w	r5, #256	; 0x100
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <main+0x2c8>)
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80008a0:	9615      	str	r6, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80008a2:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008aa:	f003 fce3 	bl	8004274 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ae:	4604      	mov	r4, r0
 80008b0:	b190      	cbz	r0, 80008d8 <main+0x2d4>
 80008b2:	b672      	cpsid	i
 80008b4:	e7fe      	b.n	80008b4 <main+0x2b0>
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	2000072c 	.word	0x2000072c
 80008c0:	40012000 	.word	0x40012000
 80008c4:	200006e4 	.word	0x200006e4
 80008c8:	40012100 	.word	0x40012100
 80008cc:	20000774 	.word	0x20000774
 80008d0:	40010000 	.word	0x40010000
 80008d4:	0f000001 	.word	0x0f000001
  HAL_TIM_MspPostInit(&htim1);
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <main+0x348>)
  huart2.Instance = USART2;
 80008da:	4d1d      	ldr	r5, [pc, #116]	; (8000950 <main+0x34c>)
  HAL_TIM_MspPostInit(&htim1);
 80008dc:	f001 fbfa 	bl	80020d4 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <main+0x350>)
  huart2.Init.BaudRate = 115200;
 80008e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e6:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e8:	4618      	mov	r0, r3
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	609c      	str	r4, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ec:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80008f4:	e9c3 5100 	strd	r5, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	f003 fce5 	bl	80042c8 <HAL_UART_Init>
 80008fe:	4604      	mov	r4, r0
 8000900:	b108      	cbz	r0, 8000906 <main+0x302>
 8000902:	b672      	cpsid	i
 8000904:	e7fe      	b.n	8000904 <main+0x300>
  MX_MotorControl_Init();
 8000906:	f001 f9bd 	bl	8001c84 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800090a:	4622      	mov	r2, r4
 800090c:	2102      	movs	r1, #2
 800090e:	2012      	movs	r0, #18
 8000910:	f002 fd54 	bl	80033bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000914:	2012      	movs	r0, #18
 8000916:	f002 fd87 	bl	8003428 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800091a:	4622      	mov	r2, r4
 800091c:	4621      	mov	r1, r4
 800091e:	2019      	movs	r0, #25
 8000920:	f002 fd4c 	bl	80033bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000924:	2019      	movs	r0, #25
 8000926:	f002 fd7f 	bl	8003428 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	2104      	movs	r1, #4
 800092e:	2018      	movs	r0, #24
 8000930:	f002 fd44 	bl	80033bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000934:	2018      	movs	r0, #24
 8000936:	f002 fd77 	bl	8003428 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800093a:	2026      	movs	r0, #38	; 0x26
 800093c:	2201      	movs	r2, #1
 800093e:	2103      	movs	r1, #3
 8000940:	f002 fd3c 	bl	80033bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000944:	2026      	movs	r0, #38	; 0x26
 8000946:	f002 fd6f 	bl	8003428 <HAL_NVIC_EnableIRQ>
 800094a:	e7fe      	b.n	800094a <main+0x346>
 800094c:	20000774 	.word	0x20000774
 8000950:	40004400 	.word	0x40004400
 8000954:	200007b4 	.word	0x200007b4

08000958 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000958:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800095a:	2400      	movs	r4, #0
 800095c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 800095e:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000962:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000964:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000966:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 800096a:	6083      	str	r3, [r0, #8]
}
 800096c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000974:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8000976:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000978:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800097a:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800097c:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 800097e:	7643      	strb	r3, [r0, #25]
}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000984:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000986:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000988:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800098a:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800098c:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800098e:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8000990:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000992:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000994:	7643      	strb	r3, [r0, #25]
}
 8000996:	bc30      	pop	{r4, r5}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800099c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800099e:	2201      	movs	r2, #1
{
 80009a0:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80009a2:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80009a4:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 80009a6:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80009aa:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009ac:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80009ae:	7643      	strb	r3, [r0, #25]
}
 80009b0:	b003      	add	sp, #12
 80009b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80009b8:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80009ba:	2103      	movs	r1, #3
{
 80009bc:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80009be:	6800      	ldr	r0, [r0, #0]
 80009c0:	f004 fc8c 	bl	80052dc <STM_NextState>

  if ( RetVal == true )
 80009c4:	b108      	cbz	r0, 80009ca <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009c6:	2301      	movs	r3, #1
 80009c8:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80009ca:	bd10      	pop	{r4, pc}

080009cc <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80009cc:	6800      	ldr	r0, [r0, #0]
 80009ce:	2107      	movs	r1, #7
 80009d0:	f004 bc84 	b.w	80052dc <STM_NextState>

080009d4 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80009d4:	6800      	ldr	r0, [r0, #0]
 80009d6:	f004 bcf7 	b.w	80053c8 <STM_FaultAcknowledged>
 80009da:	bf00      	nop

080009dc <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80009dc:	6800      	ldr	r0, [r0, #0]
 80009de:	2101      	movs	r1, #1
 80009e0:	f004 bc7c 	b.w	80052dc <STM_NextState>

080009e4 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80009e4:	b110      	cbz	r0, 80009ec <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80009e6:	7e03      	ldrb	r3, [r0, #24]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d000      	beq.n	80009ee <MCI_ExecBufferedCommands+0xa>
 80009ec:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 80009ee:	7b01      	ldrb	r1, [r0, #12]
 80009f0:	2902      	cmp	r1, #2
{
 80009f2:	b510      	push	{r4, lr}
 80009f4:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 80009f6:	d01f      	beq.n	8000a38 <MCI_ExecBufferedCommands+0x54>
 80009f8:	2903      	cmp	r1, #3
 80009fa:	d004      	beq.n	8000a06 <MCI_ExecBufferedCommands+0x22>
 80009fc:	2901      	cmp	r1, #1
 80009fe:	d00b      	beq.n	8000a18 <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000a00:	2303      	movs	r3, #3
 8000a02:	7623      	strb	r3, [r4, #24]
      }
    }
  }
}
 8000a04:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000a06:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000a08:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8000a0c:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000a0e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000a12:	2302      	movs	r3, #2
 8000a14:	7623      	strb	r3, [r4, #24]
}
 8000a16:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000a18:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000a22:	f004 fb9b 	bl	800515c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000a26:	8ae2      	ldrh	r2, [r4, #22]
 8000a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a2c:	6860      	ldr	r0, [r4, #4]
 8000a2e:	f004 fb99 	bl	8005164 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d0e4      	beq.n	8000a00 <MCI_ExecBufferedCommands+0x1c>
 8000a36:	e7ec      	b.n	8000a12 <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000a38:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000a42:	f004 fb8b 	bl	800515c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000a46:	8ae2      	ldrh	r2, [r4, #22]
 8000a48:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000a4c:	6860      	ldr	r0, [r4, #4]
 8000a4e:	f004 fb89 	bl	8005164 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d0d4      	beq.n	8000a00 <MCI_ExecBufferedCommands+0x1c>
 8000a56:	e7dc      	b.n	8000a12 <MCI_ExecBufferedCommands+0x2e>

08000a58 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000a58:	6800      	ldr	r0, [r0, #0]
 8000a5a:	f004 bcb3 	b.w	80053c4 <STM_GetState>
 8000a5e:	bf00      	nop

08000a60 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000a60:	7e40      	ldrb	r0, [r0, #25]
 8000a62:	4770      	bx	lr

08000a64 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000a64:	7b03      	ldrb	r3, [r0, #12]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d015      	beq.n	8000a96 <MCI_GetImposedMotorDirection+0x32>
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d00b      	beq.n	8000a86 <MCI_GetImposedMotorDirection+0x22>
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d001      	beq.n	8000a76 <MCI_GetImposedMotorDirection+0x12>
  int16_t retVal = 1;
 8000a72:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000a74:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000a76:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000a7a:	2b00      	cmp	r3, #0
        retVal = -1;
 8000a7c:	bfac      	ite	ge
 8000a7e:	2001      	movge	r0, #1
 8000a80:	f04f 30ff 	movlt.w	r0, #4294967295
 8000a84:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000a86:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8000a8a:	2b00      	cmp	r3, #0
        retVal = -1;
 8000a8c:	bfac      	ite	ge
 8000a8e:	2001      	movge	r0, #1
 8000a90:	f04f 30ff 	movlt.w	r0, #4294967295
 8000a94:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000a96:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8000a9a:	2b00      	cmp	r3, #0
        retVal = -1;
 8000a9c:	bfac      	ite	ge
 8000a9e:	2001      	movge	r0, #1
 8000aa0:	f04f 30ff 	movlt.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000aa8:	7b03      	ldrb	r3, [r0, #12]
 8000aaa:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000aac:	bf0c      	ite	eq
 8000aae:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000ab2:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000ab8:	6840      	ldr	r0, [r0, #4]
 8000aba:	f004 bb9d 	b.w	80051f8 <STC_StopRamp>
 8000abe:	bf00      	nop

08000ac0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000ac0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000ac2:	6840      	ldr	r0, [r0, #4]
 8000ac4:	f004 fb30 	bl	8005128 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000acc:	f004 bad4 	b.w	8005078 <SPD_GetAvrgMecSpeedUnit>

08000ad0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000ad0:	6840      	ldr	r0, [r0, #4]
 8000ad2:	f004 bb33 	b.w	800513c <STC_GetMecSpeedRefUnit>
 8000ad6:	bf00      	nop

08000ad8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000ad8:	6883      	ldr	r3, [r0, #8]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	b283      	uxth	r3, r0
{
 8000ade:	b082      	sub	sp, #8
}
 8000ae0:	f363 000f 	bfi	r0, r3, #0, #16
 8000ae4:	b002      	add	sp, #8
 8000ae6:	4770      	bx	lr

08000ae8 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000ae8:	6883      	ldr	r3, [r0, #8]
 8000aea:	6858      	ldr	r0, [r3, #4]
 8000aec:	b283      	uxth	r3, r0
{
 8000aee:	b082      	sub	sp, #8
}
 8000af0:	f363 000f 	bfi	r0, r3, #0, #16
 8000af4:	b002      	add	sp, #8
 8000af6:	4770      	bx	lr

08000af8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000af8:	6883      	ldr	r3, [r0, #8]
 8000afa:	68d8      	ldr	r0, [r3, #12]
 8000afc:	b283      	uxth	r3, r0
{
 8000afe:	b082      	sub	sp, #8
}
 8000b00:	f363 000f 	bfi	r0, r3, #0, #16
 8000b04:	b002      	add	sp, #8
 8000b06:	4770      	bx	lr

08000b08 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000b08:	6883      	ldr	r3, [r0, #8]
 8000b0a:	6918      	ldr	r0, [r3, #16]
 8000b0c:	b283      	uxth	r3, r0
{
 8000b0e:	b082      	sub	sp, #8
}
 8000b10:	f363 000f 	bfi	r0, r3, #0, #16
 8000b14:	b002      	add	sp, #8
 8000b16:	4770      	bx	lr

08000b18 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000b18:	6883      	ldr	r3, [r0, #8]
 8000b1a:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8000b1e:	b283      	uxth	r3, r0
{
 8000b20:	b082      	sub	sp, #8
}
 8000b22:	f363 000f 	bfi	r0, r3, #0, #16
 8000b26:	b002      	add	sp, #8
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000b2c:	6883      	ldr	r3, [r0, #8]
 8000b2e:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8000b32:	b283      	uxth	r3, r0
{
 8000b34:	b082      	sub	sp, #8
}
 8000b36:	f363 000f 	bfi	r0, r3, #0, #16
 8000b3a:	b002      	add	sp, #8
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000b40:	6883      	ldr	r3, [r0, #8]
}
 8000b42:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000b46:	4770      	bx	lr

08000b48 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000b48:	6883      	ldr	r3, [r0, #8]
 8000b4a:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000b4c:	8299      	strh	r1, [r3, #20]
}
 8000b4e:	4770      	bx	lr

08000b50 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000b50:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000b52:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000b56:	f004 fb8d 	bl	8005274 <STC_GetDefaultIqdref>
 8000b5a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000b5e:	8220      	strh	r0, [r4, #16]
 8000b60:	8263      	strh	r3, [r4, #18]
}
 8000b62:	bd10      	pop	{r4, pc}

08000b64 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000b64:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000b68:	b202      	sxth	r2, r0
 8000b6a:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000b6e:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000b72:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000b76:	4240      	negs	r0, r0
 8000b78:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000b7c:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000b7e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8000b82:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000b84:	da04      	bge.n	8000b90 <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000b86:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000b8a:	da0c      	bge.n	8000ba6 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MCM_Clarke+0x48>)
 8000b8e:	e001      	b.n	8000b94 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8000b90:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8000b94:	b292      	uxth	r2, r2
 8000b96:	2000      	movs	r0, #0
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f362 000f 	bfi	r0, r2, #0, #16
 8000b9e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000ba6:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8000ba8:	d1f4      	bne.n	8000b94 <MCM_Clarke+0x30>
 8000baa:	e7ef      	b.n	8000b8c <MCM_Clarke+0x28>
 8000bac:	ffff8001 	.word	0xffff8001

08000bb0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000bb0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000bb4:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000bb8:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000bbc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8000bc0:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000bc2:	d031      	beq.n	8000c28 <MCM_Trig_Functions+0x78>
 8000bc4:	d921      	bls.n	8000c0a <MCM_Trig_Functions+0x5a>
 8000bc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000bca:	d015      	beq.n	8000bf8 <MCM_Trig_Functions+0x48>
 8000bcc:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000bd0:	d109      	bne.n	8000be6 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bd2:	b2c0      	uxtb	r0, r0
 8000bd4:	491a      	ldr	r1, [pc, #104]	; (8000c40 <MCM_Trig_Functions+0x90>)
 8000bd6:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bd8:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bdc:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bde:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000be0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000be4:	b212      	sxth	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000be6:	b292      	uxth	r2, r2
 8000be8:	2000      	movs	r0, #0
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	f362 000f 	bfi	r0, r2, #0, #16
 8000bf0:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000bf4:	b002      	add	sp, #8
 8000bf6:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bf8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000bfa:	43c3      	mvns	r3, r0
 8000bfc:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000bfe:	4910      	ldr	r1, [pc, #64]	; (8000c40 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c00:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c04:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 8000c08:	e7ed      	b.n	8000be6 <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d1eb      	bne.n	8000be6 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c0e:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c10:	43c3      	mvns	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c14:	490a      	ldr	r1, [pc, #40]	; (8000c40 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c16:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c1a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c1e:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c20:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c22:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c24:	b21b      	sxth	r3, r3
      break;
 8000c26:	e7de      	b.n	8000be6 <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c28:	b2c0      	uxtb	r0, r0
 8000c2a:	43c3      	mvns	r3, r0
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <MCM_Trig_Functions+0x90>)
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c34:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c38:	425b      	negs	r3, r3
 8000c3a:	b21b      	sxth	r3, r3
      break;
 8000c3c:	e7d3      	b.n	8000be6 <MCM_Trig_Functions+0x36>
 8000c3e:	bf00      	nop
 8000c40:	08006094 	.word	0x08006094

08000c44 <MCM_Park>:
{
 8000c44:	b530      	push	{r4, r5, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	b204      	sxth	r4, r0
 8000c4a:	9001      	str	r0, [sp, #4]
 8000c4c:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c4e:	4608      	mov	r0, r1
 8000c50:	f7ff ffae 	bl	8000bb0 <MCM_Trig_Functions>
 8000c54:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000c56:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000c5a:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000c5c:	fb05 3310 	mls	r3, r5, r0, r3
 8000c60:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c66:	da04      	bge.n	8000c72 <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 8000c68:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000c6c:	da1e      	bge.n	8000cac <MCM_Park+0x68>
    Output.q = -32767;
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <MCM_Park+0x70>)
 8000c70:	e001      	b.n	8000c76 <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8000c72:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000c76:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000c7a:	fb04 1000 	mla	r0, r4, r0, r1
 8000c7e:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8000c80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000c84:	da04      	bge.n	8000c90 <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 8000c86:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8000c8a:	da0c      	bge.n	8000ca6 <MCM_Park+0x62>
    Output.d = -32767;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MCM_Park+0x70>)
 8000c8e:	e001      	b.n	8000c94 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8000c90:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000c94:	b292      	uxth	r2, r2
 8000c96:	2000      	movs	r0, #0
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f362 000f 	bfi	r0, r2, #0, #16
 8000c9e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ca2:	b005      	add	sp, #20
 8000ca4:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000ca6:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 8000ca8:	d1f4      	bne.n	8000c94 <MCM_Park+0x50>
 8000caa:	e7ef      	b.n	8000c8c <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000cac:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8000cae:	d1e2      	bne.n	8000c76 <MCM_Park+0x32>
 8000cb0:	e7dd      	b.n	8000c6e <MCM_Park+0x2a>
 8000cb2:	bf00      	nop
 8000cb4:	ffff8001 	.word	0xffff8001

08000cb8 <MCM_Rev_Park>:
{
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	b204      	sxth	r4, r0
 8000cbe:	1405      	asrs	r5, r0, #16
 8000cc0:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	f7ff ff74 	bl	8000bb0 <MCM_Trig_Functions>
 8000cc8:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000cca:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000cce:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000cd0:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000cd4:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000cd8:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000cdc:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000ce6:	f362 000f 	bfi	r0, r2, #0, #16
 8000cea:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000cee:	b005      	add	sp, #20
 8000cf0:	bd30      	pop	{r4, r5, pc}
 8000cf2:	bf00      	nop

08000cf4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <FOC_Clear+0x68>)
 8000cfc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2400      	movs	r4, #0
 8000d04:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d06:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8000d0a:	509c      	str	r4, [r3, r2]
{
 8000d0c:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d0e:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000d12:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8000d14:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000d16:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d1a:	50b4      	str	r4, [r6, r2]
 8000d1c:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d1e:	4810      	ldr	r0, [pc, #64]	; (8000d60 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000d20:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d22:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000d24:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d26:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d2a:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d2c:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8000d2e:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000d30:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000d32:	f003 fe99 	bl	8004a68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <FOC_Clear+0x70>)
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000d3e:	f003 fe93 	bl	8004a68 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <FOC_Clear+0x74>)
 8000d44:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000d48:	f004 f9f0 	bl	800512c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <FOC_Clear+0x78>)
 8000d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000d56:	f004 b86f 	b.w	8004e38 <PWMC_SwitchOffPWM>
 8000d5a:	bf00      	nop
 8000d5c:	20000824 	.word	0x20000824
 8000d60:	20000818 	.word	0x20000818
 8000d64:	200008d4 	.word	0x200008d4
 8000d68:	200008d8 	.word	0x200008d8
 8000d6c:	20000810 	.word	0x20000810

08000d70 <MCboot>:
{
 8000d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d74:	b089      	sub	sp, #36	; 0x24
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d76:	4f63      	ldr	r7, [pc, #396]	; (8000f04 <MCboot+0x194>)
{
 8000d78:	9004      	str	r0, [sp, #16]
  STM_Init(&STM[M1]);
 8000d7a:	4863      	ldr	r0, [pc, #396]	; (8000f08 <MCboot+0x198>)
{
 8000d7c:	9105      	str	r1, [sp, #20]
  STM_Init(&STM[M1]);
 8000d7e:	f004 fa8d 	bl	800529c <STM_Init>
  bMCBootCompleted = 0;
 8000d82:	4962      	ldr	r1, [pc, #392]	; (8000f0c <MCboot+0x19c>)
  pCLM[M1] = &CircleLimitationM1;
 8000d84:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <MCboot+0x1a0>)
 8000d86:	4a63      	ldr	r2, [pc, #396]	; (8000f14 <MCboot+0x1a4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d88:	4863      	ldr	r0, [pc, #396]	; (8000f18 <MCboot+0x1a8>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000d8a:	4d64      	ldr	r5, [pc, #400]	; (8000f1c <MCboot+0x1ac>)
  pCLM[M1] = &CircleLimitationM1;
 8000d8c:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 8000d8e:	2400      	movs	r4, #0
 8000d90:	700c      	strb	r4, [r1, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000d92:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8000f68 <MCboot+0x1f8>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000d96:	6038      	str	r0, [r7, #0]
  ICS_Init(&PWM_Handle_M1);
 8000d98:	f003 fc0e 	bl	80045b8 <ICS_Init>
  startTimers();
 8000d9c:	f003 feea 	bl	8004b74 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000da0:	485f      	ldr	r0, [pc, #380]	; (8000f20 <MCboot+0x1b0>)
  PID_HandleInit(&PIDIdHandle_M1);
 8000da2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8000f6c <MCboot+0x1fc>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000da6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8000f70 <MCboot+0x200>
  NTC_Init(&TempSensorParamsM1);
 8000daa:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8000f74 <MCboot+0x204>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000dae:	4e5d      	ldr	r6, [pc, #372]	; (8000f24 <MCboot+0x1b4>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000db0:	f003 fe46 	bl	8004a40 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000db4:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <MCboot+0x1b8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000db6:	4a5a      	ldr	r2, [pc, #360]	; (8000f20 <MCboot+0x1b0>)
  STO_PLL_Init (&STO_PLL_M1);
 8000db8:	485c      	ldr	r0, [pc, #368]	; (8000f2c <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000dba:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000dbc:	f8cb 2000 	str.w	r2, [fp]
  STO_PLL_Init (&STO_PLL_M1);
 8000dc0:	f005 f834 	bl	8005e2c <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000dc4:	f8db 1000 	ldr.w	r1, [fp]
 8000dc8:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <MCboot+0x1bc>)
 8000dca:	6828      	ldr	r0, [r5, #0]
 8000dcc:	f004 f996 	bl	80050fc <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000dd0:	4857      	ldr	r0, [pc, #348]	; (8000f30 <MCboot+0x1c0>)
 8000dd2:	f004 fc69 	bl	80056a8 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	6829      	ldr	r1, [r5, #0]
 8000dda:	4a55      	ldr	r2, [pc, #340]	; (8000f30 <MCboot+0x1c0>)
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	4855      	ldr	r0, [pc, #340]	; (8000f34 <MCboot+0x1c4>)
 8000de0:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <MCboot+0x1c8>)
 8000de2:	f004 fd4b 	bl	800587c <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000de6:	4855      	ldr	r0, [pc, #340]	; (8000f3c <MCboot+0x1cc>)
 8000de8:	f003 fe2a 	bl	8004a40 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000dec:	4648      	mov	r0, r9
 8000dee:	f003 fe27 	bl	8004a40 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000df2:	4a53      	ldr	r2, [pc, #332]	; (8000f40 <MCboot+0x1d0>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000df4:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <MCboot+0x1d4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000df6:	4851      	ldr	r0, [pc, #324]	; (8000f3c <MCboot+0x1cc>)
 8000df8:	6010      	str	r0, [r2, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000dfa:	4a53      	ldr	r2, [pc, #332]	; (8000f48 <MCboot+0x1d8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000dfc:	f8ca 3000 	str.w	r3, [sl]
  RVBS_Init(pBusSensorM1);
 8000e00:	4618      	mov	r0, r3
  pPIDId[M1] = &PIDIdHandle_M1;
 8000e02:	f8c2 9000 	str.w	r9, [r2]
  RVBS_Init(pBusSensorM1);
 8000e06:	f004 f863 	bl	8004ed0 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e0a:	4950      	ldr	r1, [pc, #320]	; (8000f4c <MCboot+0x1dc>)
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <MCboot+0x1e0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000e0e:	f8da 2000 	ldr.w	r2, [sl]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000e12:	600b      	str	r3, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8000e14:	4640      	mov	r0, r8
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000e16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e1a:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000e1e:	f003 fdc9 	bl	80049b4 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <MCboot+0x1e4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e24:	484c      	ldr	r0, [pc, #304]	; (8000f58 <MCboot+0x1e8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e26:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <MCboot+0x1ec>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000e28:	f8c0 8000 	str.w	r8, [r0]
  REMNG_Init(pREMNG[M1]);
 8000e2c:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000e2e:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e30:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8000e34:	f004 f89a 	bl	8004f6c <REMNG_Init>
  FOC_Clear(M1);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ff5b 	bl	8000cf4 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000e3e:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000e42:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000e44:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000f78 <MCboot+0x208>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000e48:	f004 fa14 	bl	8005274 <STC_GetDefaultIqdref>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000e52:	8233      	strh	r3, [r6, #16]
 8000e54:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e56:	6828      	ldr	r0, [r5, #0]
 8000e58:	f004 fa0c 	bl	8005274 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000e5c:	4940      	ldr	r1, [pc, #256]	; (8000f60 <MCboot+0x1f0>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e5e:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000e60:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e64:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e68:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000e6a:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000e6e:	4608      	mov	r0, r1
 8000e70:	4925      	ldr	r1, [pc, #148]	; (8000f08 <MCboot+0x198>)
 8000e72:	f7ff fd71 	bl	8000958 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000e76:	6828      	ldr	r0, [r5, #0]
 8000e78:	f8d8 6000 	ldr.w	r6, [r8]
 8000e7c:	f004 f9f0 	bl	8005260 <STC_GetMecSpeedRefUnitDefault>
 8000e80:	4622      	mov	r2, r4
 8000e82:	4601      	mov	r1, r0
 8000e84:	4630      	mov	r0, r6
 8000e86:	f7ff fd75 	bl	8000974 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <MCboot+0x1d0>)
  pMCIList[M1] = oMCInterface[M1];
 8000e8c:	f8d8 6000 	ldr.w	r6, [r8]
 8000e90:	9603      	str	r6, [sp, #12]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000e92:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000e94:	4a2c      	ldr	r2, [pc, #176]	; (8000f48 <MCboot+0x1d8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000e96:	f8db c000 	ldr.w	ip, [fp]
  MCT[M1].pPIDId = pPIDId[M1];
 8000e9a:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000e9c:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <MCboot+0x1dc>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000e9e:	f8d5 b000 	ldr.w	fp, [r5]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000ea2:	f8d2 e000 	ldr.w	lr, [r2]
  pMCIList[M1] = oMCInterface[M1];
 8000ea6:	9a04      	ldr	r2, [sp, #16]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000ea8:	4d2b      	ldr	r5, [pc, #172]	; (8000f58 <MCboot+0x1e8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <MCboot+0x1f4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000eac:	6839      	ldr	r1, [r7, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000eae:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000eb0:	f8da 7000 	ldr.w	r7, [sl]
  pMCIList[M1] = oMCInterface[M1];
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	9a03      	ldr	r2, [sp, #12]
 8000eb8:	f8c8 2000 	str.w	r2, [r8]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <MCboot+0x1c4>)
 8000ebe:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <MCboot+0x1bc>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000ec2:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000ec4:	e9c3 2406 	strd	r2, r4, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <MCboot+0x1c0>)
 8000eca:	621a      	str	r2, [r3, #32]
  MCT[M1].pStateMachine = &STM[M1];
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <MCboot+0x198>)
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000ed0:	e9c3 c600 	strd	ip, r6, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8000ed4:	6098      	str	r0, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000ed6:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000eda:	e9c3 570b 	strd	r5, r7, [r3, #44]	; 0x2c
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000ede:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000ee2:	60dc      	str	r4, [r3, #12]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000ee4:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000ee8:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  bMCBootCompleted = 1;
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <MCboot+0x19c>)
  MCT[M1].pSCC = MC_NULL;
 8000eee:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  pMCTList[M1] = &MCT[M1];
 8000ef2:	9a05      	ldr	r2, [sp, #20]
  MCT[M1].pOTT = MC_NULL;
 8000ef4:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000ef6:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000ef8:	f881 9000 	strb.w	r9, [r1]
}
 8000efc:	b009      	add	sp, #36	; 0x24
 8000efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f02:	bf00      	nop
 8000f04:	20000810 	.word	0x20000810
 8000f08:	200008c4 	.word	0x200008c4
 8000f0c:	200006cc 	.word	0x200006cc
 8000f10:	200008a0 	.word	0x200008a0
 8000f14:	20000000 	.word	0x20000000
 8000f18:	2000024c 	.word	0x2000024c
 8000f1c:	200008d8 	.word	0x200008d8
 8000f20:	2000010c 	.word	0x2000010c
 8000f24:	20000824 	.word	0x20000824
 8000f28:	200004b4 	.word	0x200004b4
 8000f2c:	2000038c 	.word	0x2000038c
 8000f30:	20000510 	.word	0x20000510
 8000f34:	20000300 	.word	0x20000300
 8000f38:	20000378 	.word	0x20000378
 8000f3c:	200000e0 	.word	0x200000e0
 8000f40:	20000818 	.word	0x20000818
 8000f44:	200002d8 	.word	0x200002d8
 8000f48:	200008d4 	.word	0x200008d4
 8000f4c:	200008d0 	.word	0x200008d0
 8000f50:	20000138 	.word	0x20000138
 8000f54:	200002c0 	.word	0x200002c0
 8000f58:	2000080c 	.word	0x2000080c
 8000f5c:	200008cc 	.word	0x200008cc
 8000f60:	200008a8 	.word	0x200008a8
 8000f64:	2000084c 	.word	0x2000084c
 8000f68:	20000814 	.word	0x20000814
 8000f6c:	200000b4 	.word	0x200000b4
 8000f70:	200008a4 	.word	0x200008a4
 8000f74:	200004e8 	.word	0x200004e8
 8000f78:	2000081c 	.word	0x2000081c

08000f7c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <FOC_CalcCurrRef+0x24>)
{
 8000f82:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f84:	2426      	movs	r4, #38	; 0x26
 8000f86:	fb04 3400 	mla	r4, r4, r0, r3
 8000f8a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f8e:	b103      	cbz	r3, 8000f92 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000f90:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <FOC_CalcCurrRef+0x28>)
 8000f94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f98:	f004 f932 	bl	8005200 <STC_CalcTorqueReference>
 8000f9c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000f9e:	8220      	strh	r0, [r4, #16]
}
 8000fa0:	bd10      	pop	{r4, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000824 	.word	0x20000824
 8000fa8:	200008d8 	.word	0x200008d8

08000fac <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000fae:	8018      	strh	r0, [r3, #0]
}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200006ce 	.word	0x200006ce

08000fb8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8000fba:	8818      	ldrh	r0, [r3, #0]
 8000fbc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000fbe:	fab0 f080 	clz	r0, r0
 8000fc2:	0940      	lsrs	r0, r0, #5
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200006ce 	.word	0x200006ce

08000fcc <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000fcc:	4b01      	ldr	r3, [pc, #4]	; (8000fd4 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000fce:	8018      	strh	r0, [r3, #0]
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200006d2 	.word	0x200006d2

08000fd8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000fda:	8818      	ldrh	r0, [r3, #0]
 8000fdc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000fde:	fab0 f080 	clz	r0, r0
 8000fe2:	0940      	lsrs	r0, r0, #5
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	200006d2 	.word	0x200006d2

08000fec <TSK_MediumFrequencyTaskM1>:
{
 8000fec:	b530      	push	{r4, r5, lr}
 8000fee:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8000ff0:	a902      	add	r1, sp, #8
 8000ff2:	2300      	movs	r3, #0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000ff4:	4c96      	ldr	r4, [pc, #600]	; (8001250 <TSK_MediumFrequencyTaskM1+0x264>)
  int16_t wAux = 0;
 8000ff6:	f821 3d08 	strh.w	r3, [r1, #-8]!
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000ffa:	4896      	ldr	r0, [pc, #600]	; (8001254 <TSK_MediumFrequencyTaskM1+0x268>)
 8000ffc:	f004 fe1e 	bl	8005c3c <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	f003 fd81 	bl	8004b08 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001006:	4894      	ldr	r0, [pc, #592]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001008:	f004 f9dc 	bl	80053c4 <STM_GetState>
  switch ( StateM1 )
 800100c:	3803      	subs	r0, #3
 800100e:	2810      	cmp	r0, #16
 8001010:	d859      	bhi.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
 8001012:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001016:	007d      	.short	0x007d
 8001018:	00910011 	.word	0x00910011
 800101c:	00b000a8 	.word	0x00b000a8
 8001020:	00cc00c3 	.word	0x00cc00c3
 8001024:	00580058 	.word	0x00580058
 8001028:	00580058 	.word	0x00580058
 800102c:	00580058 	.word	0x00580058
 8001030:	00e800d9 	.word	0x00e800d9
 8001034:	005a00f5 	.word	0x005a00f5
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001038:	4888      	ldr	r0, [pc, #544]	; (800125c <TSK_MediumFrequencyTaskM1+0x270>)
 800103a:	f004 fca5 	bl	8005988 <RUC_Exec>
 800103e:	2800      	cmp	r0, #0
 8001040:	f000 80f9 	beq.w	8001236 <TSK_MediumFrequencyTaskM1+0x24a>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001044:	4b86      	ldr	r3, [pc, #536]	; (8001260 <TSK_MediumFrequencyTaskM1+0x274>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f004 f8da 	bl	8005200 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 800104c:	4b85      	ldr	r3, [pc, #532]	; (8001264 <TSK_MediumFrequencyTaskM1+0x278>)
 800104e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8001052:	8218      	strh	r0, [r3, #16]
 8001054:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8001056:	f10d 0102 	add.w	r1, sp, #2
 800105a:	4883      	ldr	r0, [pc, #524]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
 800105c:	f004 fb76 	bl	800574c <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8001060:	487e      	ldr	r0, [pc, #504]	; (800125c <TSK_MediumFrequencyTaskM1+0x270>)
 8001062:	f004 fccb 	bl	80059fc <RUC_FirstAccelerationStageReached>
 8001066:	b370      	cbz	r0, 80010c6 <TSK_MediumFrequencyTaskM1+0xda>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8001068:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800106c:	4879      	ldr	r0, [pc, #484]	; (8001254 <TSK_MediumFrequencyTaskM1+0x268>)
 800106e:	f004 ff17 	bl	8005ea0 <STO_PLL_IsObserverConverged>
 8001072:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8001074:	487d      	ldr	r0, [pc, #500]	; (800126c <TSK_MediumFrequencyTaskM1+0x280>)
 8001076:	f7ff fcf5 	bl	8000a64 <MCI_GetImposedMotorDirection>
 800107a:	b2c1      	uxtb	r1, r0
 800107c:	4875      	ldr	r0, [pc, #468]	; (8001254 <TSK_MediumFrequencyTaskM1+0x268>)
 800107e:	f004 ffcd 	bl	800601c <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001082:	4621      	mov	r1, r4
 8001084:	4878      	ldr	r0, [pc, #480]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001086:	f004 fbe7 	bl	8005858 <VSS_SetStartTransition>
      if ( ObserverConverged )
 800108a:	b1e4      	cbz	r4, 80010c6 <TSK_MediumFrequencyTaskM1+0xda>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800108c:	4871      	ldr	r0, [pc, #452]	; (8001254 <TSK_MediumFrequencyTaskM1+0x268>)
 800108e:	4d75      	ldr	r5, [pc, #468]	; (8001264 <TSK_MediumFrequencyTaskM1+0x278>)
        REMNG_Init( pREMNG[M1] );
 8001090:	4c77      	ldr	r4, [pc, #476]	; (8001270 <TSK_MediumFrequencyTaskM1+0x284>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001092:	f003 ffed 	bl	8005070 <SPD_GetElAngle>
 8001096:	4601      	mov	r1, r0
 8001098:	6868      	ldr	r0, [r5, #4]
 800109a:	f7ff fdd3 	bl	8000c44 <MCM_Park>
 800109e:	9001      	str	r0, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 80010a0:	6820      	ldr	r0, [r4, #0]
 80010a2:	f003 ff63 	bl	8004f6c <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80010a6:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f003 ff9b 	bl	8004fe8 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80010b2:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	2219      	movs	r2, #25
 80010ba:	f003 ff95 	bl	8004fe8 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80010be:	2113      	movs	r1, #19
 80010c0:	4865      	ldr	r0, [pc, #404]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 80010c2:	f004 f90b 	bl	80052dc <STM_NextState>
}
 80010c6:	b003      	add	sp, #12
 80010c8:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80010ca:	4864      	ldr	r0, [pc, #400]	; (800125c <TSK_MediumFrequencyTaskM1+0x270>)
 80010cc:	f004 fc5c 	bl	8005988 <RUC_Exec>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	f000 80b6 	beq.w	8001242 <TSK_MediumFrequencyTaskM1+0x256>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80010d6:	a901      	add	r1, sp, #4
 80010d8:	4863      	ldr	r0, [pc, #396]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
 80010da:	f004 fb37 	bl	800574c <VSS_CalcAvrgMecSpeedUnit>
 80010de:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80010e0:	4861      	ldr	r0, [pc, #388]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
 80010e2:	f004 fbc7 	bl	8005874 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 80010e6:	b90c      	cbnz	r4, 80010ec <TSK_MediumFrequencyTaskM1+0x100>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d0ec      	beq.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80010ec:	4a61      	ldr	r2, [pc, #388]	; (8001274 <TSK_MediumFrequencyTaskM1+0x288>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <TSK_MediumFrequencyTaskM1+0x278>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80010f0:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80010f2:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80010f6:	4620      	mov	r0, r4
 80010f8:	f003 fcba 	bl	8004a70 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80010fc:	fb05 f100 	mul.w	r1, r5, r0
 8001100:	4620      	mov	r0, r4
 8001102:	f003 fcb1 	bl	8004a68 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001106:	2105      	movs	r1, #5
 8001108:	4853      	ldr	r0, [pc, #332]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 800110a:	f004 f8e7 	bl	80052dc <STM_NextState>
    break;
 800110e:	e7da      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001110:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	f7ff fca6 	bl	8000a64 <MCI_GetImposedMotorDirection>
 8001118:	4601      	mov	r1, r0
 800111a:	4850      	ldr	r0, [pc, #320]	; (800125c <TSK_MediumFrequencyTaskM1+0x270>)
 800111c:	f004 fbec 	bl	80058f8 <RUC_Clear>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001120:	4b56      	ldr	r3, [pc, #344]	; (800127c <TSK_MediumFrequencyTaskM1+0x290>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	f003 fab0 	bl	8004688 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001128:	2014      	movs	r0, #20
 800112a:	f7ff ff3f 	bl	8000fac <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800112e:	2110      	movs	r1, #16
 8001130:	4849      	ldr	r0, [pc, #292]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001132:	f004 f8d3 	bl	80052dc <STM_NextState>
    break;
 8001136:	e7c6      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001138:	4c49      	ldr	r4, [pc, #292]	; (8001260 <TSK_MediumFrequencyTaskM1+0x274>)
 800113a:	4946      	ldr	r1, [pc, #280]	; (8001254 <TSK_MediumFrequencyTaskM1+0x268>)
 800113c:	6820      	ldr	r0, [r4, #0]
 800113e:	f003 fff1 	bl	8005124 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ff1a 	bl	8000f7c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff19 	bl	8000f80 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800114e:	2106      	movs	r1, #6
 8001150:	4841      	ldr	r0, [pc, #260]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001152:	f004 f8c3 	bl	80052dc <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001156:	6820      	ldr	r0, [r4, #0]
 8001158:	f004 f898 	bl	800528c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800115c:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TSK_MediumFrequencyTaskM1+0x28c>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	f7ff fc40 	bl	80009e4 <MCI_ExecBufferedCommands>
    break;
 8001164:	e7af      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	f7ff fc3b 	bl	80009e4 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff ff06 	bl	8000f80 <FOC_CalcCurrRef>
    break;
 8001174:	e7a7      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <TSK_MediumFrequencyTaskM1+0x290>)
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f003 fae3 	bl	8004744 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fdb8 	bl	8000cf4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	f003 fbd5 	bl	8004934 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800118a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800118e:	f7ff ff1d 	bl	8000fcc <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001192:	2108      	movs	r1, #8
 8001194:	4830      	ldr	r0, [pc, #192]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001196:	f004 f8a1 	bl	80052dc <STM_NextState>
    break;
 800119a:	e794      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800119c:	f7ff ff1c 	bl	8000fd8 <TSK_StopPermanencyTimeHasElapsedM1>
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d090      	beq.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
      STM_NextState( &STM[M1], STOP_IDLE );
 80011a4:	2109      	movs	r1, #9
 80011a6:	482c      	ldr	r0, [pc, #176]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 80011a8:	f004 f898 	bl	80052dc <STM_NextState>
 80011ac:	e78b      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <TSK_MediumFrequencyTaskM1+0x274>)
 80011b0:	492d      	ldr	r1, [pc, #180]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f003 ffb6 	bl	8005124 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80011b8:	482b      	ldr	r0, [pc, #172]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
 80011ba:	f004 fa61 	bl	8005680 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80011be:	2100      	movs	r1, #0
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 80011c2:	f004 f88b 	bl	80052dc <STM_NextState>
}
 80011c6:	e77e      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80011c8:	f7ff fef6 	bl	8000fb8 <TSK_ChargeBootCapDelayHasElapsedM1>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	f43f af7a 	beq.w	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <TSK_MediumFrequencyTaskM1+0x290>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f003 fe30 	bl	8004e3c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80011dc:	2111      	movs	r1, #17
 80011de:	481e      	ldr	r0, [pc, #120]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 80011e0:	f004 f87c 	bl	80052dc <STM_NextState>
 80011e4:	e76f      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <TSK_MediumFrequencyTaskM1+0x290>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f003 fe26 	bl	8004e3c <PWMC_CurrentReadingCalibr>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	f43f af68 	beq.w	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
      STM_NextState( &STM[M1], CLEAR );
 80011f6:	2112      	movs	r1, #18
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 80011fa:	f004 f86f 	bl	80052dc <STM_NextState>
 80011fe:	e762      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <TSK_MediumFrequencyTaskM1+0x274>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <TSK_MediumFrequencyTaskM1+0x278>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001204:	6810      	ldr	r0, [r2, #0]
 8001206:	4918      	ldr	r1, [pc, #96]	; (8001268 <TSK_MediumFrequencyTaskM1+0x27c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800120e:	f003 ff89 	bl	8005124 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <TSK_MediumFrequencyTaskM1+0x268>)
 8001214:	f004 fddc 	bl	8005dd0 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001218:	2104      	movs	r1, #4
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 800121c:	f004 f85e 	bl	80052dc <STM_NextState>
 8001220:	2800      	cmp	r0, #0
 8001222:	f43f af50 	beq.w	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
      FOC_Clear( M1 );
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fd64 	bl	8000cf4 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <TSK_MediumFrequencyTaskM1+0x290>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	f003 fa4e 	bl	80046d0 <ICS_SwitchOnPWM>
 8001234:	e747      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001236:	4602      	mov	r2, r0
 8001238:	2110      	movs	r1, #16
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 800123c:	f004 f834 	bl	80052a8 <STM_FaultProcessing>
 8001240:	e709      	b.n	8001056 <TSK_MediumFrequencyTaskM1+0x6a>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001242:	4602      	mov	r2, r0
 8001244:	2110      	movs	r1, #16
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001248:	f004 f82e 	bl	80052a8 <STM_FaultProcessing>
 800124c:	e73b      	b.n	80010c6 <TSK_MediumFrequencyTaskM1+0xda>
 800124e:	bf00      	nop
 8001250:	200008d0 	.word	0x200008d0
 8001254:	2000038c 	.word	0x2000038c
 8001258:	200008c4 	.word	0x200008c4
 800125c:	20000300 	.word	0x20000300
 8001260:	200008d8 	.word	0x200008d8
 8001264:	20000824 	.word	0x20000824
 8001268:	20000510 	.word	0x20000510
 800126c:	200008a8 	.word	0x200008a8
 8001270:	200008cc 	.word	0x200008cc
 8001274:	20000814 	.word	0x20000814
 8001278:	2000081c 	.word	0x2000081c
 800127c:	20000810 	.word	0x20000810

08001280 <MC_Scheduler>:
{
 8001280:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MC_Scheduler+0x4c>)
 8001284:	781c      	ldrb	r4, [r3, #0]
 8001286:	2c01      	cmp	r4, #1
 8001288:	d000      	beq.n	800128c <MC_Scheduler+0xc>
}
 800128a:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 800128c:	4d10      	ldr	r5, [pc, #64]	; (80012d0 <MC_Scheduler+0x50>)
 800128e:	882b      	ldrh	r3, [r5, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	b1b3      	cbz	r3, 80012c2 <MC_Scheduler+0x42>
      hMFTaskCounterM1--;
 8001294:	882b      	ldrh	r3, [r5, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	b29b      	uxth	r3, r3
 800129a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <MC_Scheduler+0x54>)
 800129e:	8813      	ldrh	r3, [r2, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b94b      	cbnz	r3, 80012b8 <MC_Scheduler+0x38>
    if(hStopPermanencyCounterM1 > 0u)
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <MC_Scheduler+0x58>)
 80012a6:	8813      	ldrh	r3, [r2, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0ed      	beq.n	800128a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80012ae:	8813      	ldrh	r3, [r2, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	8013      	strh	r3, [r2, #0]
}
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 80012b8:	8813      	ldrh	r3, [r2, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	8013      	strh	r3, [r2, #0]
 80012c0:	e7f0      	b.n	80012a4 <MC_Scheduler+0x24>
      TSK_MediumFrequencyTaskM1();
 80012c2:	f7ff fe93 	bl	8000fec <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80012c6:	802c      	strh	r4, [r5, #0]
 80012c8:	e7e8      	b.n	800129c <MC_Scheduler+0x1c>
 80012ca:	bf00      	nop
 80012cc:	200006cc 	.word	0x200006cc
 80012d0:	200006d0 	.word	0x200006d0
 80012d4:	200006ce 	.word	0x200006ce
 80012d8:	200006d2 	.word	0x200006d2

080012dc <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80012dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <TSK_HighFrequencyTask+0x154>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80012e2:	4c54      	ldr	r4, [pc, #336]	; (8001434 <TSK_HighFrequencyTask+0x158>)
  if ( STM[M1].bState == SWITCH_OVER )
 80012e4:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80012e6:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80012ea:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 80012ec:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80012ee:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80012f0:	f000 8092 	beq.w	8001418 <TSK_HighFrequencyTask+0x13c>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80012f4:	4b50      	ldr	r3, [pc, #320]	; (8001438 <TSK_HighFrequencyTask+0x15c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80012f6:	4f51      	ldr	r7, [pc, #324]	; (800143c <TSK_HighFrequencyTask+0x160>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80012f8:	6818      	ldr	r0, [r3, #0]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80012fa:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001460 <TSK_HighFrequencyTask+0x184>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80012fe:	f003 ff13 	bl	8005128 <STC_GetSpeedSensor>
 8001302:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001304:	f003 feb4 	bl	8005070 <SPD_GetElAngle>
 8001308:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800130a:	4628      	mov	r0, r5
 800130c:	f003 feb8 	bl	8005080 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001310:	a902      	add	r1, sp, #8
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f003 fc82 	bl	8004c1c <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001318:	9802      	ldr	r0, [sp, #8]
 800131a:	f7ff fc23 	bl	8000b64 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800131e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001320:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001322:	f7ff fc8f 	bl	8000c44 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <TSK_HighFrequencyTask+0x164>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001328:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800132c:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800132e:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001330:	1a09      	subs	r1, r1, r0
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	f003 fba4 	bl	8004a80 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001338:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <TSK_HighFrequencyTask+0x168>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800133e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001342:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001344:	1a89      	subs	r1, r1, r2
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f003 fb9a 	bl	8004a80 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <TSK_HighFrequencyTask+0x16c>)
 800134e:	f8ad 9004 	strh.w	r9, [sp, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001358:	9901      	ldr	r1, [sp, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	f003 f85e 	bl	800441c <Circle_Limitation>
 8001360:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001362:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001364:	fa0f f983 	sxth.w	r9, r3
 8001368:	141d      	asrs	r5, r3, #16
 800136a:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800136c:	f003 fe88 	bl	8005080 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001370:	4631      	mov	r1, r6
 8001372:	9801      	ldr	r0, [sp, #4]
 8001374:	f7ff fca0 	bl	8000cb8 <MCM_Rev_Park>
 8001378:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800137a:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800137c:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800137e:	f003 fc4f 	bl	8004c20 <PWMC_SetPhaseVoltage>
 8001382:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8001384:	9802      	ldr	r0, [sp, #8]
 8001386:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001388:	9803      	ldr	r0, [sp, #12]
 800138a:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800138c:	9800      	ldr	r0, [sp, #0]
 800138e:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001390:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001392:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001394:	f8a4 9016 	strh.w	r9, [r4, #22]
 8001398:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800139a:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800139c:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80013a0:	d032      	beq.n	8001408 <TSK_HighFrequencyTask+0x12c>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80013a2:	482a      	ldr	r0, [pc, #168]	; (800144c <TSK_HighFrequencyTask+0x170>)
 80013a4:	f004 fb2a 	bl	80059fc <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <TSK_HighFrequencyTask+0x174>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80013aa:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80013ac:	f8d8 0000 	ldr.w	r0, [r8]
 80013b0:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	f003 f82a 	bl	800440c <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80013b8:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80013ba:	f8ad 001c 	strh.w	r0, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80013be:	4825      	ldr	r0, [pc, #148]	; (8001454 <TSK_HighFrequencyTask+0x178>)
 80013c0:	f004 fb52 	bl	8005a68 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <TSK_HighFrequencyTask+0x178>)
 80013c6:	f004 fcd9 	bl	8005d7c <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 80013ca:	b164      	cbz	r4, 80013e6 <TSK_HighFrequencyTask+0x10a>
    hState = STM_GetState(&STM[M1]);
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <TSK_HighFrequencyTask+0x154>)
 80013ce:	f003 fff9 	bl	80053c4 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 80013d2:	1f03      	subs	r3, r0, #4
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d909      	bls.n	80013ee <TSK_HighFrequencyTask+0x112>
 80013da:	2813      	cmp	r0, #19
 80013dc:	d007      	beq.n	80013ee <TSK_HighFrequencyTask+0x112>
}
 80013de:	2000      	movs	r0, #0
 80013e0:	b009      	add	sp, #36	; 0x24
 80013e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80013e6:	481b      	ldr	r0, [pc, #108]	; (8001454 <TSK_HighFrequencyTask+0x178>)
 80013e8:	f004 fdfc 	bl	8005fe4 <STO_ResetPLL>
 80013ec:	e7ee      	b.n	80013cc <TSK_HighFrequencyTask+0xf0>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <TSK_HighFrequencyTask+0x178>)
 80013f0:	f003 fe3e 	bl	8005070 <SPD_GetElAngle>
 80013f4:	a908      	add	r1, sp, #32
 80013f6:	f821 0d10 	strh.w	r0, [r1, #-16]!
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <TSK_HighFrequencyTask+0x17c>)
 80013fc:	f004 f958 	bl	80056b0 <VSS_CalcElAngle>
}
 8001400:	2000      	movs	r0, #0
 8001402:	b009      	add	sp, #36	; 0x24
 8001404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <TSK_HighFrequencyTask+0x154>)
 800140c:	f003 ff4c 	bl	80052a8 <STM_FaultProcessing>
}
 8001410:	2000      	movs	r0, #0
 8001412:	b009      	add	sp, #36	; 0x24
 8001414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001418:	4d10      	ldr	r5, [pc, #64]	; (800145c <TSK_HighFrequencyTask+0x180>)
 800141a:	6828      	ldr	r0, [r5, #0]
 800141c:	f003 fdc8 	bl	8004fb0 <REMNG_RampCompleted>
 8001420:	2800      	cmp	r0, #0
 8001422:	f47f af67 	bne.w	80012f4 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001426:	6828      	ldr	r0, [r5, #0]
 8001428:	f003 fda8 	bl	8004f7c <REMNG_Calc>
 800142c:	8220      	strh	r0, [r4, #16]
 800142e:	e761      	b.n	80012f4 <TSK_HighFrequencyTask+0x18>
 8001430:	200008c4 	.word	0x200008c4
 8001434:	20000824 	.word	0x20000824
 8001438:	200008d8 	.word	0x200008d8
 800143c:	20000810 	.word	0x20000810
 8001440:	20000818 	.word	0x20000818
 8001444:	200008d4 	.word	0x200008d4
 8001448:	200008a0 	.word	0x200008a0
 800144c:	20000300 	.word	0x20000300
 8001450:	200008a4 	.word	0x200008a4
 8001454:	2000038c 	.word	0x2000038c
 8001458:	20000510 	.word	0x20000510
 800145c:	200008cc 	.word	0x200008cc
 8001460:	20000828 	.word	0x20000828

08001464 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001468:	4f20      	ldr	r7, [pc, #128]	; (80014ec <TSK_SafetyTask_PWMOFF+0x88>)
{
 800146a:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800146c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001470:	f003 fab2 	bl	80049d8 <NTC_CalcAvTemp>
 8001474:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001476:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800147a:	f003 fd09 	bl	8004e90 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800147e:	f024 040c 	bic.w	r4, r4, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001482:	4304      	orrs	r4, r0
 8001484:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001486:	b335      	cbz	r5, 80014d6 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001488:	4e19      	ldr	r6, [pc, #100]	; (80014f0 <TSK_SafetyTask_PWMOFF+0x8c>)
 800148a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800148e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8001492:	43e2      	mvns	r2, r4
 8001494:	b292      	uxth	r2, r2
 8001496:	4621      	mov	r1, r4
 8001498:	4630      	mov	r0, r6
 800149a:	f003 ff05 	bl	80052a8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800149e:	4630      	mov	r0, r6
 80014a0:	f003 ff90 	bl	80053c4 <STM_GetState>
 80014a4:	280a      	cmp	r0, #10
 80014a6:	d008      	beq.n	80014ba <TSK_SafetyTask_PWMOFF+0x56>
 80014a8:	280b      	cmp	r0, #11
 80014aa:	d105      	bne.n	80014b8 <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014ac:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80014b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014b4:	f003 bcc0 	b.w	8004e38 <PWMC_SwitchOffPWM>
}
 80014b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80014ba:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80014be:	f003 fcbb 	bl	8004e38 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff fc16 	bl	8000cf4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <TSK_SafetyTask_PWMOFF+0x90>)
 80014ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 80014ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80014d2:	f003 ba2f 	b.w	8004934 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <TSK_SafetyTask_PWMOFF+0x94>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	f003 fd11 	bl	8004f00 <RVBS_CalcAvVbus>
 80014de:	f020 000c 	bic.w	r0, r0, #12
 80014e2:	4304      	orrs	r4, r0
 80014e4:	b2a4      	uxth	r4, r4
 80014e6:	e7cf      	b.n	8001488 <TSK_SafetyTask_PWMOFF+0x24>
 80014e8:	2000080c 	.word	0x2000080c
 80014ec:	20000810 	.word	0x20000810
 80014f0:	200008c4 	.word	0x200008c4
 80014f4:	200008d0 	.word	0x200008d0
 80014f8:	200008a4 	.word	0x200008a4

080014fc <TSK_SafetyTask>:
{
 80014fc:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <TSK_SafetyTask+0x1c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d000      	beq.n	8001508 <TSK_SafetyTask+0xc>
}
 8001506:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff ffab 	bl	8001464 <TSK_SafetyTask_PWMOFF>
}
 800150e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001512:	f000 bccd 	b.w	8001eb0 <RCM_ExecUserConv>
 8001516:	bf00      	nop
 8001518:	200006cc 	.word	0x200006cc

0800151c <MC_RunMotorControlTasks>:
{
 800151c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MC_RunMotorControlTasks+0x1c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b903      	cbnz	r3, 8001526 <MC_RunMotorControlTasks+0xa>
}
 8001524:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001526:	f7ff feab 	bl	8001280 <MC_Scheduler>
    TSK_SafetyTask();
 800152a:	f7ff ffe7 	bl	80014fc <TSK_SafetyTask>
}
 800152e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001532:	f000 bf4b 	b.w	80023cc <UI_Scheduler>
 8001536:	bf00      	nop
 8001538:	200006cc 	.word	0x200006cc

0800153c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800153c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <TSK_HardwareFaultTask+0x18>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	f003 f8ff 	bl	8004744 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800154c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001550:	f003 beaa 	b.w	80052a8 <STM_FaultProcessing>
 8001554:	20000810 	.word	0x20000810
 8001558:	200008c4 	.word	0x200008c4

0800155c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800155c:	b410      	push	{r4}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <mc_lock_pins+0xd0>)
 8001560:	4a33      	ldr	r2, [pc, #204]	; (8001630 <mc_lock_pins+0xd4>)
 8001562:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001564:	2110      	movs	r1, #16
 8001566:	61d9      	str	r1, [r3, #28]
 8001568:	b08b      	sub	sp, #44	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800156a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 8001570:	9909      	ldr	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001572:	4a30      	ldr	r2, [pc, #192]	; (8001634 <mc_lock_pins+0xd8>)
 8001574:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800157c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001582:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001586:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 800158a:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800158c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800158e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001590:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	9207      	str	r2, [sp, #28]
  (void) temp;
 8001596:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <mc_lock_pins+0xdc>)
 800159a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015a0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015a2:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015a4:	4a25      	ldr	r2, [pc, #148]	; (800163c <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 80015a6:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ac:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
  (void) temp;
 80015b0:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015b2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015b4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015b6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015b8:	69d1      	ldr	r1, [r2, #28]
 80015ba:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015c0:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 80015c4:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015c8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ca:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015cc:	69d9      	ldr	r1, [r3, #28]
 80015ce:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015d4:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 80015d8:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015da:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015dc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015de:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015e0:	69d1      	ldr	r1, [r2, #28]
 80015e2:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015e8:	f44f 3190 	mov.w	r1, #73728	; 0x12000
  (void) temp;
 80015ec:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015ee:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80015f0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015f2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80015f4:	69d1      	ldr	r1, [r2, #28]
 80015f6:	9102      	str	r1, [sp, #8]
  (void) temp;
 80015f8:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80015fa:	4911      	ldr	r1, [pc, #68]	; (8001640 <mc_lock_pins+0xe4>)
 80015fc:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001600:	2020      	movs	r0, #32
 8001602:	f8c2 041c 	str.w	r0, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001606:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800160a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  temp = READ_REG(GPIOx->LCKR);
 800160e:	69d2      	ldr	r2, [r2, #28]
 8001610:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001612:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <mc_lock_pins+0xe8>)
 8001616:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001618:	2102      	movs	r1, #2
 800161a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800161c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001622:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001624:	b00b      	add	sp, #44	; 0x2c
 8001626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40020000 	.word	0x40020000
 8001630:	00010010 	.word	0x00010010
 8001634:	00010100 	.word	0x00010100
 8001638:	00010040 	.word	0x00010040
 800163c:	40020400 	.word	0x40020400
 8001640:	00010020 	.word	0x00010020
 8001644:	00010002 	.word	0x00010002

08001648 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	460c      	mov	r4, r1
 800164c:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800164e:	2100      	movs	r1, #0
{
 8001650:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001652:	0962      	lsrs	r2, r4, #5
{
 8001654:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001656:	f88d 1009 	strb.w	r1, [sp, #9]
{
 800165a:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 800165c:	d122      	bne.n	80016a4 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800165e:	2c12      	cmp	r4, #18
 8001660:	d814      	bhi.n	800168c <MCP_ReceivedFrame+0x44>
 8001662:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001666:	0016      	.short	0x0016
 8001668:	00de004c 	.word	0x00de004c
 800166c:	00130170 	.word	0x00130170
 8001670:	017a0013 	.word	0x017a0013
 8001674:	01bc01a7 	.word	0x01bc01a7
 8001678:	021101ef 	.word	0x021101ef
 800167c:	02390222 	.word	0x02390222
 8001680:	00130256 	.word	0x00130256
 8001684:	00130013 	.word	0x00130013
 8001688:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800168c:	2301      	movs	r3, #1
 800168e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001692:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001696:	2301      	movs	r3, #1
 8001698:	f10d 020e 	add.w	r2, sp, #14
 800169c:	21ff      	movs	r1, #255	; 0xff
 800169e:	47a0      	blx	r4
    }
  }
}
 80016a0:	b00d      	add	sp, #52	; 0x34
 80016a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80016a4:	3a01      	subs	r2, #1
 80016a6:	f000 fed1 	bl	800244c <UI_SetReg>
 80016aa:	b1c8      	cbz	r0, 80016e0 <MCP_ReceivedFrame+0x98>
  switch (Code)
 80016ac:	f004 041f 	and.w	r4, r4, #31
 80016b0:	2c12      	cmp	r4, #18
 80016b2:	f200 829d 	bhi.w	8001bf0 <MCP_ReceivedFrame+0x5a8>
 80016b6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80016ba:	01c2      	.short	0x01c2
 80016bc:	00b40022 	.word	0x00b40022
 80016c0:	029b0146 	.word	0x029b0146
 80016c4:	0150029b 	.word	0x0150029b
 80016c8:	0192017d 	.word	0x0192017d
 80016cc:	01e701c5 	.word	0x01e701c5
 80016d0:	020f01f8 	.word	0x020f01f8
 80016d4:	029b022c 	.word	0x029b022c
 80016d8:	029b029b 	.word	0x029b029b
 80016dc:	01c2029b 	.word	0x01c2029b
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80016e0:	230b      	movs	r3, #11
 80016e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80016e6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d0d1      	beq.n	8001692 <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80016ee:	2300      	movs	r3, #0
 80016f0:	461a      	mov	r2, r3
 80016f2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80016f6:	21f0      	movs	r1, #240	; 0xf0
 80016f8:	47a0      	blx	r4
}
 80016fa:	b00d      	add	sp, #52	; 0x34
 80016fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80016fe:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001700:	2305      	movs	r3, #5
 8001702:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001706:	2988      	cmp	r1, #136	; 0x88
 8001708:	f200 8278 	bhi.w	8001bfc <MCP_ReceivedFrame+0x5b4>
 800170c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001710:	02760268 	.word	0x02760268
 8001714:	02610276 	.word	0x02610276
 8001718:	02570276 	.word	0x02570276
 800171c:	02570257 	.word	0x02570257
 8001720:	02570257 	.word	0x02570257
 8001724:	02570257 	.word	0x02570257
 8001728:	02570257 	.word	0x02570257
 800172c:	02570257 	.word	0x02570257
 8001730:	02470247 	.word	0x02470247
 8001734:	02760276 	.word	0x02760276
 8001738:	02570257 	.word	0x02570257
 800173c:	02570257 	.word	0x02570257
 8001740:	02760257 	.word	0x02760257
 8001744:	02760276 	.word	0x02760276
 8001748:	014e014e 	.word	0x014e014e
 800174c:	02760276 	.word	0x02760276
 8001750:	02760276 	.word	0x02760276
 8001754:	02760276 	.word	0x02760276
 8001758:	02760276 	.word	0x02760276
 800175c:	02760276 	.word	0x02760276
 8001760:	02760276 	.word	0x02760276
 8001764:	02760276 	.word	0x02760276
 8001768:	02760276 	.word	0x02760276
 800176c:	02760276 	.word	0x02760276
 8001770:	02760276 	.word	0x02760276
 8001774:	02760276 	.word	0x02760276
 8001778:	02760276 	.word	0x02760276
 800177c:	02760276 	.word	0x02760276
 8001780:	02760276 	.word	0x02760276
 8001784:	02760276 	.word	0x02760276
 8001788:	02760276 	.word	0x02760276
 800178c:	02760276 	.word	0x02760276
 8001790:	02570276 	.word	0x02570276
 8001794:	02760276 	.word	0x02760276
 8001798:	02760276 	.word	0x02760276
 800179c:	02470247 	.word	0x02470247
 80017a0:	02760247 	.word	0x02760247
 80017a4:	02760276 	.word	0x02760276
 80017a8:	02760276 	.word	0x02760276
 80017ac:	02570276 	.word	0x02570276
 80017b0:	02760276 	.word	0x02760276
 80017b4:	02570276 	.word	0x02570276
 80017b8:	02570257 	.word	0x02570257
 80017bc:	02570257 	.word	0x02570257
 80017c0:	02570257 	.word	0x02570257
 80017c4:	02470276 	.word	0x02470276
 80017c8:	02760276 	.word	0x02760276
 80017cc:	02760276 	.word	0x02760276
 80017d0:	02570276 	.word	0x02570276
 80017d4:	02760276 	.word	0x02760276
 80017d8:	02570257 	.word	0x02570257
 80017dc:	02760276 	.word	0x02760276
 80017e0:	02760276 	.word	0x02760276
 80017e4:	02760276 	.word	0x02760276
 80017e8:	02760276 	.word	0x02760276
 80017ec:	02760276 	.word	0x02760276
 80017f0:	02760276 	.word	0x02760276
 80017f4:	02760276 	.word	0x02760276
 80017f8:	02470261 	.word	0x02470261
 80017fc:	02470247 	.word	0x02470247
 8001800:	02470247 	.word	0x02470247
 8001804:	02760276 	.word	0x02760276
 8001808:	02470276 	.word	0x02470276
 800180c:	02760247 	.word	0x02760247
 8001810:	02760276 	.word	0x02760276
 8001814:	02760276 	.word	0x02760276
 8001818:	02760276 	.word	0x02760276
 800181c:	02570257 	.word	0x02570257
 8001820:	0257      	.short	0x0257
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001822:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001824:	2303      	movs	r3, #3
 8001826:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 800182a:	2988      	cmp	r1, #136	; 0x88
 800182c:	f200 8107 	bhi.w	8001a3e <MCP_ReceivedFrame+0x3f6>
 8001830:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001834:	017f0191 	.word	0x017f0191
 8001838:	01910191 	.word	0x01910191
 800183c:	01a3017f 	.word	0x01a3017f
 8001840:	01a301a3 	.word	0x01a301a3
 8001844:	01a301a3 	.word	0x01a301a3
 8001848:	01a301a3 	.word	0x01a301a3
 800184c:	01a301a3 	.word	0x01a301a3
 8001850:	01a301a3 	.word	0x01a301a3
 8001854:	01a301a3 	.word	0x01a301a3
 8001858:	01a301a3 	.word	0x01a301a3
 800185c:	01a301a3 	.word	0x01a301a3
 8001860:	01a301a3 	.word	0x01a301a3
 8001864:	01a301a3 	.word	0x01a301a3
 8001868:	01a301a3 	.word	0x01a301a3
 800186c:	01050105 	.word	0x01050105
 8001870:	01a3017f 	.word	0x01a3017f
 8001874:	01a301a3 	.word	0x01a301a3
 8001878:	01050191 	.word	0x01050191
 800187c:	01050105 	.word	0x01050105
 8001880:	01050105 	.word	0x01050105
 8001884:	01050105 	.word	0x01050105
 8001888:	01050105 	.word	0x01050105
 800188c:	01050105 	.word	0x01050105
 8001890:	01050105 	.word	0x01050105
 8001894:	01050105 	.word	0x01050105
 8001898:	01050105 	.word	0x01050105
 800189c:	01050105 	.word	0x01050105
 80018a0:	01050105 	.word	0x01050105
 80018a4:	01050105 	.word	0x01050105
 80018a8:	01050105 	.word	0x01050105
 80018ac:	01050105 	.word	0x01050105
 80018b0:	01050105 	.word	0x01050105
 80018b4:	01a30105 	.word	0x01a30105
 80018b8:	01050105 	.word	0x01050105
 80018bc:	01050105 	.word	0x01050105
 80018c0:	017f017f 	.word	0x017f017f
 80018c4:	01a3017f 	.word	0x01a3017f
 80018c8:	01a301a3 	.word	0x01a301a3
 80018cc:	019101a3 	.word	0x019101a3
 80018d0:	01a3017f 	.word	0x01a3017f
 80018d4:	01a301a3 	.word	0x01a301a3
 80018d8:	01a301a3 	.word	0x01a301a3
 80018dc:	01a301a3 	.word	0x01a301a3
 80018e0:	01a301a3 	.word	0x01a301a3
 80018e4:	01a301a3 	.word	0x01a301a3
 80018e8:	017f0191 	.word	0x017f0191
 80018ec:	01a30105 	.word	0x01a30105
 80018f0:	01a301a3 	.word	0x01a301a3
 80018f4:	01a301a3 	.word	0x01a301a3
 80018f8:	01050105 	.word	0x01050105
 80018fc:	01a301a3 	.word	0x01a301a3
 8001900:	01910191 	.word	0x01910191
 8001904:	017f017f 	.word	0x017f017f
 8001908:	017f017f 	.word	0x017f017f
 800190c:	0191017f 	.word	0x0191017f
 8001910:	01a301a3 	.word	0x01a301a3
 8001914:	0105017f 	.word	0x0105017f
 8001918:	01a301a3 	.word	0x01a301a3
 800191c:	017f0191 	.word	0x017f0191
 8001920:	017f017f 	.word	0x017f017f
 8001924:	017f017f 	.word	0x017f017f
 8001928:	017f017f 	.word	0x017f017f
 800192c:	017f017f 	.word	0x017f017f
 8001930:	017f017f 	.word	0x017f017f
 8001934:	01050191 	.word	0x01050191
 8001938:	017f0191 	.word	0x017f0191
 800193c:	017f017f 	.word	0x017f017f
 8001940:	01a301a3 	.word	0x01a301a3
 8001944:	01a3      	.short	0x01a3
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001946:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 8001948:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 800194a:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800194e:	4628      	mov	r0, r5
 8001950:	f001 f9d8 	bl	8002d04 <UI_ExecCmd>
 8001954:	f88d 0009 	strb.w	r0, [sp, #9]
 8001958:	e6c7      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
 800195a:	ac04      	add	r4, sp, #16
 800195c:	2100      	movs	r1, #0
 800195e:	4620      	mov	r0, r4
 8001960:	2220      	movs	r2, #32
 8001962:	f004 fb83 	bl	800606c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001966:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800196a:	f10d 0012 	add.w	r0, sp, #18
 800196e:	1e71      	subs	r1, r6, #1
 8001970:	2300      	movs	r3, #0
 8001972:	e005      	b.n	8001980 <MCP_ReceivedFrame+0x338>
 8001974:	3301      	adds	r3, #1
 8001976:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001978:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800197c:	f000 8144 	beq.w	8001c08 <MCP_ReceivedFrame+0x5c0>
 8001980:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001984:	2a09      	cmp	r2, #9
 8001986:	d1f5      	bne.n	8001974 <MCP_ReceivedFrame+0x32c>
 8001988:	1d5a      	adds	r2, r3, #5
 800198a:	1dd9      	adds	r1, r3, #7
 800198c:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800198e:	5cb2      	ldrb	r2, [r6, r2]
 8001990:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001994:	5c72      	ldrb	r2, [r6, r1]
 8001996:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 800199a:	5cf3      	ldrb	r3, [r6, r3]
 800199c:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80019a0:	4622      	mov	r2, r4
 80019a2:	2320      	movs	r3, #32
 80019a4:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019a8:	21f0      	movs	r1, #240	; 0xf0
 80019aa:	47a0      	blx	r4
      bNoError = true;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f88d 3009 	strb.w	r3, [sp, #9]
 80019b2:	e69c      	b.n	80016ee <MCP_ReceivedFrame+0xa6>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019b4:	7877      	ldrb	r7, [r6, #1]
 80019b6:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019b8:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019ba:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019bc:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019be:	78f1      	ldrb	r1, [r6, #3]
 80019c0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80019c4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019c8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80019cc:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 80019d0:	b292      	uxth	r2, r2
 80019d2:	4628      	mov	r0, r5
 80019d4:	f001 f9d2 	bl	8002d7c <UI_ExecSpeedRamp>
 80019d8:	f88d 0009 	strb.w	r0, [sp, #9]
 80019dc:	e685      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80019de:	f10d 030e 	add.w	r3, sp, #14
 80019e2:	7831      	ldrb	r1, [r6, #0]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f10d 020a 	add.w	r2, sp, #10
 80019ea:	ab03      	add	r3, sp, #12
 80019ec:	4628      	mov	r0, r5
 80019ee:	f001 f9e1 	bl	8002db4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80019f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 80019f6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 80019fa:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80019fe:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a06:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001a08:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001a0a:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a0c:	f363 0207 	bfi	r2, r3, #0, #8
 8001a10:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001a14:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 8001a16:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001a1a:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 8001a1c:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a20:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a22:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a24:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a26:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001a2a:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a2e:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001a32:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a36:	2308      	movs	r3, #8
 8001a38:	aa04      	add	r2, sp, #16
 8001a3a:	21f0      	movs	r1, #240	; 0xf0
 8001a3c:	47a0      	blx	r4
 8001a3e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a42:	e652      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a44:	78b1      	ldrb	r1, [r6, #2]
 8001a46:	7873      	ldrb	r3, [r6, #1]
 8001a48:	78f2      	ldrb	r2, [r6, #3]
 8001a4a:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001a4c:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001a4e:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a50:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001a54:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a58:	4a6d      	ldr	r2, [pc, #436]	; (8001c10 <MCP_ReceivedFrame+0x5c8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001a5a:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a5c:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a60:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001a64:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001a66:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a6a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001a6e:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001a70:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001a74:	7831      	ldrb	r1, [r6, #0]
 8001a76:	9000      	str	r0, [sp, #0]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f001 f9b5 	bl	8002dec <UI_SetRevupData>
 8001a82:	f88d 0009 	strb.w	r0, [sp, #9]
 8001a86:	e630      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001a88:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001a8a:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001a8c:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001a8e:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001a90:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001a94:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001a98:	b212      	sxth	r2, r2
 8001a9a:	b209      	sxth	r1, r1
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f001 f9bf 	bl	8002e20 <UI_SetCurrentReferences>
      bNoError = true;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f88d 3009 	strb.w	r3, [sp, #9]
 8001aa8:	e621      	b.n	80016ee <MCP_ReceivedFrame+0xa6>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001aaa:	4c5a      	ldr	r4, [pc, #360]	; (8001c14 <MCP_ReceivedFrame+0x5cc>)
      stepList.data = buffer;
 8001aac:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001aae:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001ab4:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001ab8:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001abc:	f001 f9be 	bl	8002e3c <UI_GetMPInfo>
 8001ac0:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	f43f ade4 	beq.w	8001692 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001aca:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8001ace:	7923      	ldrb	r3, [r4, #4]
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	21f0      	movs	r1, #240	; 0xf0
 8001ad4:	47b0      	blx	r6
 8001ad6:	e5e3      	b.n	80016a0 <MCP_ReceivedFrame+0x58>
 8001ad8:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 8001adc:	ac04      	add	r4, sp, #16
 8001ade:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	ae0c      	add	r6, sp, #48	; 0x30
 8001ae4:	e004      	b.n	8001af0 <MCP_ReceivedFrame+0x4a8>
        outBuff[i] = pHandle->s_fwVer[i];
 8001ae6:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001aea:	429e      	cmp	r6, r3
 8001aec:	f43f af58 	beq.w	80019a0 <MCP_ReceivedFrame+0x358>
 8001af0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001af4:	1b18      	subs	r0, r3, r4
 8001af6:	b2c0      	uxtb	r0, r0
 8001af8:	2900      	cmp	r1, #0
 8001afa:	d1f4      	bne.n	8001ae6 <MCP_ReceivedFrame+0x49e>
      for (; i < 32; i++)
 8001afc:	281f      	cmp	r0, #31
 8001afe:	f63f af4f 	bhi.w	80019a0 <MCP_ReceivedFrame+0x358>
        outBuff[i] = 0;
 8001b02:	f1c0 021f 	rsb	r2, r0, #31
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	3201      	adds	r2, #1
 8001b0a:	4420      	add	r0, r4
 8001b0c:	f004 faae 	bl	800606c <memset>
 8001b10:	e746      	b.n	80019a0 <MCP_ReceivedFrame+0x358>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001b12:	7970      	ldrb	r0, [r6, #5]
 8001b14:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001b16:	7873      	ldrb	r3, [r6, #1]
 8001b18:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001b1a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001b1e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001b22:	b292      	uxth	r2, r2
 8001b24:	b209      	sxth	r1, r1
 8001b26:	4628      	mov	r0, r5
 8001b28:	f001 f93a 	bl	8002da0 <UI_ExecTorqueRamp>
 8001b2c:	f88d 0009 	strb.w	r0, [sp, #9]
 8001b30:	e5db      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001b32:	f10d 0209 	add.w	r2, sp, #9
 8001b36:	4628      	mov	r0, r5
 8001b38:	f000 fdf6 	bl	8002728 <UI_GetReg>
          if ( bNoError == true )
 8001b3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001b40:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f43f ada5 	beq.w	8001692 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001b48:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	aa04      	add	r2, sp, #16
 8001b50:	21f0      	movs	r1, #240	; 0xf0
 8001b52:	47a0      	blx	r4
 8001b54:	e5a4      	b.n	80016a0 <MCP_ReceivedFrame+0x58>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b56:	f10d 0209 	add.w	r2, sp, #9
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	f000 fde4 	bl	8002728 <UI_GetReg>
           if ( bNoError == true )
 8001b60:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b64:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f43f ad93 	beq.w	8001692 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001b6c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001b70:	2301      	movs	r3, #1
 8001b72:	aa04      	add	r2, sp, #16
 8001b74:	21f0      	movs	r1, #240	; 0xf0
 8001b76:	47a0      	blx	r4
 8001b78:	e592      	b.n	80016a0 <MCP_ReceivedFrame+0x58>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b7a:	f10d 0209 	add.w	r2, sp, #9
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f000 fdd2 	bl	8002728 <UI_GetReg>
          if ( bNoError == true )
 8001b84:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b88:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f43f ad81 	beq.w	8001692 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001b90:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001b94:	2302      	movs	r3, #2
 8001b96:	aa04      	add	r2, sp, #16
 8001b98:	21f0      	movs	r1, #240	; 0xf0
 8001b9a:	47a0      	blx	r4
 8001b9c:	e580      	b.n	80016a0 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b9e:	78b4      	ldrb	r4, [r6, #2]
 8001ba0:	7873      	ldrb	r3, [r6, #1]
 8001ba2:	78f0      	ldrb	r0, [r6, #3]
 8001ba4:	7932      	ldrb	r2, [r6, #4]
 8001ba6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001baa:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001bae:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f000 fc4a 	bl	800244c <UI_SetReg>
 8001bb8:	f88d 0009 	strb.w	r0, [sp, #9]
 8001bbc:	e595      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001bbe:	78b2      	ldrb	r2, [r6, #2]
 8001bc0:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001bc8:	f000 fc40 	bl	800244c <UI_SetReg>
 8001bcc:	f88d 0009 	strb.w	r0, [sp, #9]
 8001bd0:	e58b      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001bd2:	7872      	ldrb	r2, [r6, #1]
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f000 fc39 	bl	800244c <UI_SetReg>
 8001bda:	f88d 0009 	strb.w	r0, [sp, #9]
 8001bde:	e584      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001be0:	7872      	ldrb	r2, [r6, #1]
 8001be2:	2100      	movs	r1, #0
 8001be4:	4628      	mov	r0, r5
 8001be6:	f000 fc31 	bl	800244c <UI_SetReg>
 8001bea:	f88d 0009 	strb.w	r0, [sp, #9]
 8001bee:	e57c      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001bf6:	f88d 300e 	strb.w	r3, [sp, #14]
 8001bfa:	e576      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f88d 300e 	strb.w	r3, [sp, #14]
 8001c02:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001c06:	e570      	b.n	80016ea <MCP_ReceivedFrame+0xa2>
 8001c08:	2326      	movs	r3, #38	; 0x26
 8001c0a:	2124      	movs	r1, #36	; 0x24
 8001c0c:	2222      	movs	r2, #34	; 0x22
 8001c0e:	e6be      	b.n	800198e <MCP_ReceivedFrame+0x346>
 8001c10:	2aaaaaab 	.word	0x2aaaaaab
 8001c14:	200006d4 	.word	0x200006d4

08001c18 <MCP_WaitNextFrame>:
{
 8001c18:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001c1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001c1c:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001c1e:	6980      	ldr	r0, [r0, #24]
 8001c20:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001c28:	69a0      	ldr	r0, [r4, #24]
 8001c2a:	6a23      	ldr	r3, [r4, #32]
}
 8001c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001c30:	4718      	bx	r3
 8001c32:	bf00      	nop

08001c34 <MCP_Init>:
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	4604      	mov	r4, r0
 8001c3a:	461e      	mov	r6, r3
  FCP_SetClient( pFCP, pHandle,
 8001c3c:	4d0a      	ldr	r5, [pc, #40]	; (8001c68 <MCP_Init+0x34>)
  pHandle->s_fwVer = s_fwVer;
 8001c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001c40:	6181      	str	r1, [r0, #24]
{
 8001c42:	4617      	mov	r7, r2
  pHandle->s_fwVer = s_fwVer;
 8001c44:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001c48:	4608      	mov	r0, r1
 8001c4a:	9500      	str	r5, [sp, #0]
 8001c4c:	4621      	mov	r1, r4
{
 8001c4e:	9d08      	ldr	r5, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MCP_Init+0x38>)
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <MCP_Init+0x3c>)
 8001c54:	f002 fc22 	bl	800449c <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001c58:	e9c4 7607 	strd	r7, r6, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001c5c:	6265      	str	r5, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff ffda 	bl	8001c18 <MCP_WaitNextFrame>
}
 8001c64:	b003      	add	sp, #12
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	08001c75 	.word	0x08001c75
 8001c6c:	08001649 	.word	0x08001649
 8001c70:	08001c7d 	.word	0x08001c7d

08001c74 <MCP_OnTimeOut>:
{
 8001c74:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001c76:	f7ff ffcf 	bl	8001c18 <MCP_WaitNextFrame>
}
 8001c7a:	bd08      	pop	{r3, pc}

08001c7c <MCP_SentFrame>:
{
 8001c7c:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001c7e:	f7ff ffcb 	bl	8001c18 <MCP_WaitNextFrame>
}
 8001c82:	bd08      	pop	{r3, pc}

08001c84 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001c84:	b530      	push	{r4, r5, lr}
 8001c86:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001c88:	f001 fdce 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001c8e:	4d0c      	ldr	r5, [pc, #48]	; (8001cc0 <MX_MotorControl_Init+0x3c>)
 8001c90:	4c0c      	ldr	r4, [pc, #48]	; (8001cc4 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001c92:	fba3 3000 	umull	r3, r0, r3, r0
 8001c96:	09c0      	lsrs	r0, r0, #7
 8001c98:	f001 fbd4 	bl	8003444 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff f866 	bl	8000d70 <MCboot>
  mc_lock_pins();
 8001ca4:	f7ff fc5a 	bl	800155c <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <MX_MotorControl_Init+0x44>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4622      	mov	r2, r4
 8001cae:	462b      	mov	r3, r5
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <MX_MotorControl_Init+0x48>)
 8001cb4:	f000 fb4c 	bl	8002350 <UI_TaskInit>
}
 8001cb8:	b003      	add	sp, #12
 8001cba:	bd30      	pop	{r4, r5, pc}
 8001cbc:	10624dd3 	.word	0x10624dd3
 8001cc0:	200008e0 	.word	0x200008e0
 8001cc4:	200008dc 	.word	0x200008dc
 8001cc8:	080062c4 	.word	0x080062c4
 8001ccc:	20000684 	.word	0x20000684

08001cd0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001cd0:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <RCM_RegisterRegConv+0x170>)
 8001cd2:	6813      	ldr	r3, [r2, #0]
{
 8001cd4:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d079      	beq.n	8001dce <RCM_RegisterRegConv+0xfe>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001cda:	7919      	ldrb	r1, [r3, #4]
 8001cdc:	7904      	ldrb	r4, [r0, #4]
 8001cde:	42a1      	cmp	r1, r4
 8001ce0:	d01e      	beq.n	8001d20 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ce2:	6851      	ldr	r1, [r2, #4]
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	f000 8085 	beq.w	8001df4 <RCM_RegisterRegConv+0x124>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001cea:	790d      	ldrb	r5, [r1, #4]
 8001cec:	42ac      	cmp	r4, r5
  uint8_t handle=255;
 8001cee:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001cf2:	d073      	beq.n	8001ddc <RCM_RegisterRegConv+0x10c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001cf4:	6895      	ldr	r5, [r2, #8]
 8001cf6:	2d00      	cmp	r5, #0
 8001cf8:	f000 8093 	beq.w	8001e22 <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001cfc:	7929      	ldrb	r1, [r5, #4]
 8001cfe:	42a1      	cmp	r1, r4
 8001d00:	d072      	beq.n	8001de8 <RCM_RegisterRegConv+0x118>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d02:	68d1      	ldr	r1, [r2, #12]
 8001d04:	2900      	cmp	r1, #0
 8001d06:	f000 8087 	beq.w	8001e18 <RCM_RegisterRegConv+0x148>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d0a:	790d      	ldrb	r5, [r1, #4]
 8001d0c:	42a5      	cmp	r5, r4
 8001d0e:	d07c      	beq.n	8001e0a <RCM_RegisterRegConv+0x13a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	bf88      	it	hi
 8001d14:	23ff      	movhi	r3, #255	; 0xff
 8001d16:	f240 8089 	bls.w	8001e2c <RCM_RegisterRegConv+0x15c>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d1e:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6801      	ldr	r1, [r0, #0]
 8001d24:	4299      	cmp	r1, r3
 8001d26:	d1dc      	bne.n	8001ce2 <RCM_RegisterRegConv+0x12>
  uint8_t i=0;
 8001d28:	2300      	movs	r3, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001d2a:	688c      	ldr	r4, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001d2c:	4d45      	ldr	r5, [pc, #276]	; (8001e44 <RCM_RegisterRegConv+0x174>)
      RCM_handle_array [handle] = regConv;
 8001d2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001d32:	2200      	movs	r2, #0
 8001d34:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001d38:	07e2      	lsls	r2, r4, #31
 8001d3a:	d411      	bmi.n	8001d60 <RCM_RegisterRegConv+0x90>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001d3c:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001d3e:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001d42:	f022 0220 	bic.w	r2, r2, #32
 8001d46:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001d48:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001d4a:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001d4c:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d54:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001d56:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001d58:	688a      	ldr	r2, [r1, #8]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001d60:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001d62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d66:	62ca      	str	r2, [r1, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d68:	7902      	ldrb	r2, [r0, #4]
 8001d6a:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8001d6e:	2a09      	cmp	r2, #9
 8001d70:	bf94      	ite	ls
 8001d72:	f042 7200 	orrls.w	r2, r2, #33554432	; 0x2000000
 8001d76:	3c1e      	subhi	r4, #30
 8001d78:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001d80:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001d84:	fab7 f487 	clz	r4, r7
 8001d88:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001d8c:	40e7      	lsrs	r7, r4
 8001d8e:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8001d90:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001d94:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
 8001d98:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001d9c:	fa94 f6a4 	rbit	r6, r4
 8001da0:	fab6 f686 	clz	r6, r6
 8001da4:	fa94 f4a4 	rbit	r4, r4
 8001da8:	f04f 0c07 	mov.w	ip, #7
 8001dac:	fab4 f484 	clz	r4, r4
 8001db0:	fa22 f606 	lsr.w	r6, r2, r6
 8001db4:	6880      	ldr	r0, [r0, #8]
 8001db6:	40e2      	lsrs	r2, r4
 8001db8:	fa0c f606 	lsl.w	r6, ip, r6
 8001dbc:	4090      	lsls	r0, r2
 8001dbe:	ea25 0206 	bic.w	r2, r5, r6
 8001dc2:	4302      	orrs	r2, r0
 8001dc4:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bcf0      	pop	{r4, r5, r6, r7}
 8001dcc:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001dce:	6851      	ldr	r1, [r2, #4]
 8001dd0:	2900      	cmp	r1, #0
 8001dd2:	d02d      	beq.n	8001e30 <RCM_RegisterRegConv+0x160>
 8001dd4:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dd6:	790d      	ldrb	r5, [r1, #4]
 8001dd8:	42ac      	cmp	r4, r5
 8001dda:	d18b      	bne.n	8001cf4 <RCM_RegisterRegConv+0x24>
 8001ddc:	680d      	ldr	r5, [r1, #0]
 8001dde:	6801      	ldr	r1, [r0, #0]
 8001de0:	428d      	cmp	r5, r1
 8001de2:	d187      	bne.n	8001cf4 <RCM_RegisterRegConv+0x24>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e7a0      	b.n	8001d2a <RCM_RegisterRegConv+0x5a>
 8001de8:	682d      	ldr	r5, [r5, #0]
 8001dea:	6801      	ldr	r1, [r0, #0]
 8001dec:	428d      	cmp	r5, r1
 8001dee:	d188      	bne.n	8001d02 <RCM_RegisterRegConv+0x32>
      i++;
 8001df0:	2302      	movs	r3, #2
 8001df2:	e79a      	b.n	8001d2a <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001df4:	6895      	ldr	r5, [r2, #8]
      i++;
 8001df6:	2301      	movs	r3, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001df8:	2d00      	cmp	r5, #0
 8001dfa:	f47f af7f 	bne.w	8001cfc <RCM_RegisterRegConv+0x2c>
 8001dfe:	68d1      	ldr	r1, [r2, #12]
 8001e00:	b1a1      	cbz	r1, 8001e2c <RCM_RegisterRegConv+0x15c>
 8001e02:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001e04:	790d      	ldrb	r5, [r1, #4]
 8001e06:	42a5      	cmp	r5, r4
 8001e08:	d182      	bne.n	8001d10 <RCM_RegisterRegConv+0x40>
 8001e0a:	680c      	ldr	r4, [r1, #0]
 8001e0c:	6801      	ldr	r1, [r0, #0]
 8001e0e:	428c      	cmp	r4, r1
 8001e10:	f47f af7e 	bne.w	8001d10 <RCM_RegisterRegConv+0x40>
      i++;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e788      	b.n	8001d2a <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	f67f af79 	bls.w	8001d10 <RCM_RegisterRegConv+0x40>
 8001e1e:	6801      	ldr	r1, [r0, #0]
 8001e20:	e7f8      	b.n	8001e14 <RCM_RegisterRegConv+0x144>
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf8c      	ite	hi
 8001e26:	2302      	movhi	r3, #2
 8001e28:	2300      	movls	r3, #0
 8001e2a:	e7e8      	b.n	8001dfe <RCM_RegisterRegConv+0x12e>
 8001e2c:	6801      	ldr	r1, [r0, #0]
 8001e2e:	e77c      	b.n	8001d2a <RCM_RegisterRegConv+0x5a>
 8001e30:	6895      	ldr	r5, [r2, #8]
 8001e32:	b115      	cbz	r5, 8001e3a <RCM_RegisterRegConv+0x16a>
 8001e34:	460b      	mov	r3, r1
 8001e36:	7904      	ldrb	r4, [r0, #4]
 8001e38:	e760      	b.n	8001cfc <RCM_RegisterRegConv+0x2c>
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	e7df      	b.n	8001dfe <RCM_RegisterRegConv+0x12e>
 8001e3e:	bf00      	nop
 8001e40:	2000090c 	.word	0x2000090c
 8001e44:	200008e8 	.word	0x200008e8

08001e48 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001e48:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <RCM_ExecRegularConv+0x64>)
 8001e4c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001e50:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001e58:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001e5a:	bf8c      	ite	hi
 8001e5c:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e5e:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001e62:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001e66:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e6a:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001e6e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001e72:	fab1 f181 	clz	r1, r1
 8001e76:	40cd      	lsrs	r5, r1
 8001e78:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001e84:	f020 001f 	bic.w	r0, r0, #31
 8001e88:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001e8a:	0151      	lsls	r1, r2, #5
 8001e8c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8001e90:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001e94:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001e96:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001e98:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001e9c:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001e9e:	079b      	lsls	r3, r3, #30
 8001ea0:	d5fc      	bpl.n	8001e9c <RCM_ExecRegularConv+0x54>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001ea2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001ea4:	bc30      	pop	{r4, r5}
 8001ea6:	b280      	uxth	r0, r0
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000090c 	.word	0x2000090c

08001eb0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001eb0:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001eb2:	4c23      	ldr	r4, [pc, #140]	; (8001f40 <RCM_ExecUserConv+0x90>)
 8001eb4:	7823      	ldrb	r3, [r4, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001eba:	bcf0      	pop	{r4, r5, r6, r7}
 8001ebc:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <RCM_ExecUserConv+0x94>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <RCM_ExecUserConv+0x98>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001ec2:	7810      	ldrb	r0, [r2, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ec4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001ec8:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001ed0:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001ed2:	bf8c      	ite	hi
 8001ed4:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ed6:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 8001eda:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001ede:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ee2:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001ee6:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001eea:	fab1 f181 	clz	r1, r1
 8001eee:	40cf      	lsrs	r7, r1
 8001ef0:	f102 062c 	add.w	r6, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8001efc:	f025 051f 	bic.w	r5, r5, #31
 8001f00:	432b      	orrs	r3, r5
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 8001f08:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001f0c:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f0e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8001f10:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001f14:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001f16:	079b      	lsls	r3, r3, #30
 8001f18:	d5fc      	bpl.n	8001f14 <RCM_ExecUserConv+0x64>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <RCM_ExecUserConv+0x9c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f1c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001f1e:	4e0c      	ldr	r6, [pc, #48]	; (8001f50 <RCM_ExecUserConv+0xa0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001f20:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8001f24:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001f26:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001f28:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001f2a:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001f2c:	2d00      	cmp	r5, #0
 8001f2e:	d0c4      	beq.n	8001eba <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f30:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001f34:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f36:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001f38:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f3a:	462b      	mov	r3, r5
}
 8001f3c:	bcf0      	pop	{r4, r5, r6, r7}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f3e:	4718      	bx	r3
 8001f40:	20000908 	.word	0x20000908
 8001f44:	200008e4 	.word	0x200008e4
 8001f48:	2000090c 	.word	0x2000090c
 8001f4c:	200008e8 	.word	0x200008e8
 8001f50:	2000091c 	.word	0x2000091c

08001f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_MspInit+0x38>)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	9100      	str	r1, [sp, #0]
 8001f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
 8001f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	9101      	str	r1, [sp, #4]
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f82:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f84:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f86:	f001 ba07 	b.w	8003398 <HAL_NVIC_SetPriorityGrouping>
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f90:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_ADC_MspInit+0xc4>)
{
 8001f96:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001f9a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001fa0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001fa4:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8001fa6:	d023      	beq.n	8001ff0 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_ADC_MspInit+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d001      	beq.n	8001fb2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fae:	b00b      	add	sp, #44	; 0x2c
 8001fb0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_ADC_MspInit+0xcc>)
 8001fb4:	9403      	str	r4, [sp, #12]
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	4829      	ldr	r0, [pc, #164]	; (8002060 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001fc6:	9203      	str	r2, [sp, #12]
 8001fc8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	9404      	str	r4, [sp, #16]
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001fdc:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fde:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f001 fa4c 	bl	8003484 <HAL_GPIO_Init>
}
 8001fec:	b00b      	add	sp, #44	; 0x2c
 8001fee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_ADC_MspInit+0xcc>)
 8001ff2:	9400      	str	r4, [sp, #0]
 8001ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	481a      	ldr	r0, [pc, #104]	; (8002060 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002000:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002004:	9200      	str	r2, [sp, #0]
 8002006:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	9401      	str	r4, [sp, #4]
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
 8002012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002014:	f002 0201 	and.w	r2, r2, #1
 8002018:	9201      	str	r2, [sp, #4]
 800201a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	9402      	str	r4, [sp, #8]
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002030:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002032:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002034:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 800203a:	f001 fa23 	bl	8003484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 800203e:	2320      	movs	r3, #32
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002040:	a905      	add	r1, sp, #20
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <HAL_ADC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002044:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800204a:	f001 fa1b 	bl	8003484 <HAL_GPIO_Init>
}
 800204e:	b00b      	add	sp, #44	; 0x2c
 8002050:	bd30      	pop	{r4, r5, pc}
 8002052:	bf00      	nop
 8002054:	40012000 	.word	0x40012000
 8002058:	40012100 	.word	0x40012100
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020800 	.word	0x40020800

08002068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002068:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800206a:	6801      	ldr	r1, [r0, #0]
 800206c:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_TIM_Base_MspInit+0x64>)
{
 800206e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8002072:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002078:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800207c:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 800207e:	d001      	beq.n	8002084 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002080:	b009      	add	sp, #36	; 0x24
 8002082:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002084:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800208c:	4810      	ldr	r0, [pc, #64]	; (80020d0 <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	f041 0101 	orr.w	r1, r1, #1
 8002092:	6451      	str	r1, [r2, #68]	; 0x44
 8002094:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002096:	f001 0101 	and.w	r1, r1, #1
 800209a:	9101      	str	r1, [sp, #4]
 800209c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
 80020a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b0:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80020b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80020b6:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c0:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f001 f9df 	bl	8003484 <HAL_GPIO_Init>
}
 80020c6:	b009      	add	sp, #36	; 0x24
 80020c8:	bd30      	pop	{r4, r5, pc}
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020d4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80020d6:	6801      	ldr	r1, [r0, #0]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_TIM_MspPostInit+0x7c>)
{
 80020da:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80020de:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80020e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80020e8:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80020ea:	d001      	beq.n	80020f0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ec:	b009      	add	sp, #36	; 0x24
 80020ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	4816      	ldr	r0, [pc, #88]	; (8002154 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	f041 0102 	orr.w	r1, r1, #2
 80020fe:	6311      	str	r1, [r2, #48]	; 0x30
 8002100:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002102:	f001 0102 	and.w	r1, r1, #2
 8002106:	9101      	str	r1, [sp, #4]
 8002108:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800211e:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002120:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002128:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f001 f9a7 	bl	8003484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002136:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	a903      	add	r1, sp, #12
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800213e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002140:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002144:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f001 f99c 	bl	8003484 <HAL_GPIO_Init>
}
 800214c:	b009      	add	sp, #36	; 0x24
 800214e:	bd30      	pop	{r4, r5, pc}
 8002150:	40010000 	.word	0x40010000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020000 	.word	0x40020000

0800215c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800215c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800215e:	6801      	ldr	r1, [r0, #0]
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_UART_MspInit+0x60>)
{
 8002162:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002166:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800216c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002170:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002172:	d001      	beq.n	8002178 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002174:	b009      	add	sp, #36	; 0x24
 8002176:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002178:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	480f      	ldr	r0, [pc, #60]	; (80021c0 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002182:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002186:	6411      	str	r1, [r2, #64]	; 0x40
 8002188:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800218a:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800218e:	9101      	str	r1, [sp, #4]
 8002190:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80021aa:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f001 f966 	bl	8003484 <HAL_GPIO_Init>
}
 80021b8:	b009      	add	sp, #36	; 0x24
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	40004400 	.word	0x40004400
 80021c0:	40020000 	.word	0x40020000

080021c4 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <ADC_IRQHandler+0x24>)
 80021c6:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80021c8:	0752      	lsls	r2, r2, #29
 80021ca:	d406      	bmi.n	80021da <ADC_IRQHandler+0x16>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <ADC_IRQHandler+0x28>)
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f023 030c 	bic.w	r3, r3, #12
 80021d4:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80021d6:	f7ff b881 	b.w	80012dc <TSK_HighFrequencyTask>
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f022 020c 	bic.w	r2, r2, #12
 80021e0:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80021e2:	f7ff b87b 	b.w	80012dc <TSK_HighFrequencyTask>
 80021e6:	bf00      	nop
 80021e8:	40012000 	.word	0x40012000
 80021ec:	40012200 	.word	0x40012200

080021f0 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80021f4:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021f6:	f06f 0201 	mvn.w	r2, #1
 80021fa:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80021fc:	f002 bb2a 	b.w	8004854 <ICS_TIMx_UP_IRQHandler>
 8002200:	2000024c 	.word	0x2000024c

08002204 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002206:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002208:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800220a:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	0612      	lsls	r2, r2, #24
 8002210:	d504      	bpl.n	800221c <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002212:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002216:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8002218:	f002 fb66 	bl	80048e8 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800221c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002220:	f7ff b82e 	b.w	8001280 <MC_Scheduler>
 8002224:	2000024c 	.word	0x2000024c

08002228 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002228:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800222a:	4c1d      	ldr	r4, [pc, #116]	; (80022a0 <USART2_IRQHandler+0x78>)
 800222c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	0691      	lsls	r1, r2, #26
{
 8002234:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002236:	d41d      	bmi.n	8002274 <USART2_IRQHandler+0x4c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002238:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800223a:	0612      	lsls	r2, r2, #24
 800223c:	d414      	bmi.n	8002268 <USART2_IRQHandler+0x40>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800223e:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002240:	071b      	lsls	r3, r3, #28
 8002242:	d401      	bmi.n	8002248 <USART2_IRQHandler+0x20>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002244:	b002      	add	sp, #8
 8002246:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002248:	4815      	ldr	r0, [pc, #84]	; (80022a0 <USART2_IRQHandler+0x78>)
 800224a:	f003 fa07 	bl	800565c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800224e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002256:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800225c:	9b01      	ldr	r3, [sp, #4]
}
 800225e:	b002      	add	sp, #8
 8002260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002264:	f000 b8d2 	b.w	800240c <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <USART2_IRQHandler+0x78>)
 800226a:	f003 f8c1 	bl	80053f0 <UFCP_TX_IRQ_Handler>
 800226e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002272:	e7e4      	b.n	800223e <USART2_IRQHandler+0x16>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002274:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002276:	4620      	mov	r0, r4
 8002278:	b2c9      	uxtb	r1, r1
 800227a:	f003 f98d 	bl	8005598 <UFCP_RX_IRQ_Handler>
 800227e:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002280:	2b01      	cmp	r3, #1
 8002282:	d007      	beq.n	8002294 <USART2_IRQHandler+0x6c>
    if (retVal == 2)
 8002284:	2b02      	cmp	r3, #2
 8002286:	d002      	beq.n	800228e <USART2_IRQHandler+0x66>
 8002288:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800228c:	e7d4      	b.n	8002238 <USART2_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 800228e:	f000 f8bd 	bl	800240c <UI_SerialCommunicationTimeOutStop>
 8002292:	e7f9      	b.n	8002288 <USART2_IRQHandler+0x60>
      UI_SerialCommunicationTimeOutStart();
 8002294:	f000 f8c0 	bl	8002418 <UI_SerialCommunicationTimeOutStart>
 8002298:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800229c:	e7cc      	b.n	8002238 <USART2_IRQHandler+0x10>
 800229e:	bf00      	nop
 80022a0:	20000548 	.word	0x20000548

080022a4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80022a4:	b530      	push	{r4, r5, lr}
 80022a6:	b083      	sub	sp, #12
 80022a8:	4c1c      	ldr	r4, [pc, #112]	; (800231c <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80022aa:	f7ff f947 	bl	800153c <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80022ae:	4625      	mov	r5, r4
 80022b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80022b4:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80022b6:	0712      	lsls	r2, r2, #28
 80022b8:	d41d      	bmi.n	80022f6 <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80022ba:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80022bc:	0610      	lsls	r0, r2, #24
 80022be:	d40f      	bmi.n	80022e0 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80022c0:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80022c2:	0692      	lsls	r2, r2, #26
 80022c4:	d5f6      	bpl.n	80022b4 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80022c6:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80022c8:	4628      	mov	r0, r5
 80022ca:	b2c9      	uxtb	r1, r1
 80022cc:	f003 f964 	bl	8005598 <UFCP_RX_IRQ_Handler>
 80022d0:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d01f      	beq.n	8002316 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d1ea      	bne.n	80022b0 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80022da:	f000 f897 	bl	800240c <UI_SerialCommunicationTimeOutStop>
 80022de:	e7e7      	b.n	80022b0 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80022e0:	4628      	mov	r0, r5
 80022e2:	f003 f885 	bl	80053f0 <UFCP_TX_IRQ_Handler>
 80022e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80022ea:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80022ec:	0691      	lsls	r1, r2, #26
 80022ee:	d4ea      	bmi.n	80022c6 <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80022f0:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80022f2:	0712      	lsls	r2, r2, #28
 80022f4:	d5e1      	bpl.n	80022ba <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80022f6:	4628      	mov	r0, r5
 80022f8:	f003 f9b0 	bl	800565c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80022fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002304:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800230a:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 800230c:	f000 f87e 	bl	800240c <UI_SerialCommunicationTimeOutStop>
 8002310:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002314:	e7d1      	b.n	80022ba <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8002316:	f000 f87f 	bl	8002418 <UI_SerialCommunicationTimeOutStart>
 800231a:	e7c9      	b.n	80022b0 <HardFault_Handler+0xc>
 800231c:	20000548 	.word	0x20000548

08002320 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002320:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002322:	4c0a      	ldr	r4, [pc, #40]	; (800234c <SysTick_Handler+0x2c>)
 8002324:	7823      	ldrb	r3, [r4, #0]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d006      	beq.n	8002338 <SysTick_Handler+0x18>
 800232a:	3301      	adds	r3, #1
 800232c:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800232e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002334:	f7ff b8f2 	b.w	800151c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002338:	f000 fdce 	bl	8002ed8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800233c:	f001 f89e 	bl	800347c <HAL_SYSTICK_IRQHandler>
 8002340:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002342:	7023      	strb	r3, [r4, #0]
}
 8002344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002348:	f7ff b8e8 	b.w	800151c <MC_RunMotorControlTasks>
 800234c:	20000688 	.word	0x20000688

08002350 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002354:	4d16      	ldr	r5, [pc, #88]	; (80023b0 <UI_TaskInit+0x60>)
    pMCP = &MCP_UI_Params;
 8002356:	f8df c070 	ldr.w	ip, [pc, #112]	; 80023c8 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 800235a:	4e16      	ldr	r6, [pc, #88]	; (80023b4 <UI_TaskInit+0x64>)
{
 800235c:	4682      	mov	sl, r0
 800235e:	460f      	mov	r7, r1
 8002360:	4690      	mov	r8, r2
 8002362:	4699      	mov	r9, r3
    pMCP->_Super = UI_Params;
 8002364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002366:	4664      	mov	r4, ip
 8002368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800236a:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 800236e:	b083      	sub	sp, #12
    pMCP = &MCP_UI_Params;
 8002370:	4d11      	ldr	r5, [pc, #68]	; (80023b8 <UI_TaskInit+0x68>)
{
 8002372:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    pMCP = &MCP_UI_Params;
 8002376:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 800237a:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 800237e:	4630      	mov	r0, r6
 8002380:	f003 f834 	bl	80053ec <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <UI_TaskInit+0x6c>)
 8002386:	6828      	ldr	r0, [r5, #0]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <UI_TaskInit+0x70>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4631      	mov	r1, r6
 800238e:	f8cd b004 	str.w	fp, [sp, #4]
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <UI_TaskInit+0x74>)
 8002394:	f7ff fc4e 	bl	8001c34 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002398:	6828      	ldr	r0, [r5, #0]
 800239a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800239e:	464b      	mov	r3, r9
 80023a0:	4642      	mov	r2, r8
 80023a2:	4639      	mov	r1, r7

}
 80023a4:	b003      	add	sp, #12
 80023a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80023aa:	f000 b83b 	b.w	8002424 <UI_Init>
 80023ae:	bf00      	nop
 80023b0:	200006b4 	.word	0x200006b4
 80023b4:	20000548 	.word	0x20000548
 80023b8:	200006e0 	.word	0x200006e0
 80023bc:	08005679 	.word	0x08005679
 80023c0:	08005475 	.word	0x08005475
 80023c4:	08005451 	.word	0x08005451
 80023c8:	20000920 	.word	0x20000920

080023cc <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <UI_Scheduler+0x34>)
 80023ce:	8813      	ldrh	r3, [r2, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b11b      	cbz	r3, 80023dc <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80023d4:	8813      	ldrh	r3, [r2, #0]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <UI_Scheduler+0x38>)
 80023de:	8813      	ldrh	r3, [r2, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d903      	bls.n	80023ec <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 80023e4:	8813      	ldrh	r3, [r2, #0]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <UI_Scheduler+0x3c>)
 80023ee:	8813      	ldrh	r3, [r2, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d903      	bls.n	80023fc <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 80023f4:	8813      	ldrh	r3, [r2, #0]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8013      	strh	r3, [r2, #0]
  }
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200006de 	.word	0x200006de
 8002404:	200006dc 	.word	0x200006dc
 8002408:	2000068a 	.word	0x2000068a

0800240c <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 800240c:	4b01      	ldr	r3, [pc, #4]	; (8002414 <UI_SerialCommunicationTimeOutStop+0x8>)
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
}
 8002412:	4770      	bx	lr
 8002414:	200006dc 	.word	0x200006dc

08002418 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002418:	4b01      	ldr	r3, [pc, #4]	; (8002420 <UI_SerialCommunicationTimeOutStart+0x8>)
 800241a:	224f      	movs	r2, #79	; 0x4f
 800241c:	801a      	strh	r2, [r3, #0]
}
 800241e:	4770      	bx	lr
 8002420:	200006dc 	.word	0x200006dc

08002424 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002424:	b430      	push	{r4, r5}
 8002426:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002428:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 800242a:	2500      	movs	r5, #0
 800242c:	7505      	strb	r5, [r0, #20]
  pHandle->bDriveNum = bMCNum;
 800242e:	7101      	strb	r1, [r0, #4]
  pHandle->pMCT = pMCT;
 8002430:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8002434:	bc30      	pop	{r4, r5}
 8002436:	4770      	bx	lr

08002438 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002438:	7903      	ldrb	r3, [r0, #4]
 800243a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800243c:	bf86      	itte	hi
 800243e:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002440:	2001      	movhi	r0, #1
    retVal = false;
 8002442:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002448:	7d00      	ldrb	r0, [r0, #20]
 800244a:	4770      	bx	lr

0800244c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800244c:	b530      	push	{r4, r5, lr}
 800244e:	4614      	mov	r4, r2
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002450:	e9d0 5202 	ldrd	r5, r2, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002454:	7d03      	ldrb	r3, [r0, #20]
{
 8002456:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002458:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800245c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002460:	295b      	cmp	r1, #91	; 0x5b
 8002462:	f200 8139 	bhi.w	80026d8 <UI_SetReg+0x28c>
 8002466:	e8df f011 	tbh	[pc, r1, lsl #1]
 800246a:	0069      	.short	0x0069
 800246c:	01370137 	.word	0x01370137
 8002470:	0137006d 	.word	0x0137006d
 8002474:	007d0077 	.word	0x007d0077
 8002478:	00890083 	.word	0x00890083
 800247c:	009b0095 	.word	0x009b0095
 8002480:	00a700a1 	.word	0x00a700a1
 8002484:	00b900b3 	.word	0x00b900b3
 8002488:	00c500bf 	.word	0x00c500bf
 800248c:	013700df 	.word	0x013700df
 8002490:	00f90137 	.word	0x00f90137
 8002494:	01370115 	.word	0x01370115
 8002498:	01370137 	.word	0x01370137
 800249c:	01370137 	.word	0x01370137
 80024a0:	01370137 	.word	0x01370137
 80024a4:	01370137 	.word	0x01370137
 80024a8:	01370137 	.word	0x01370137
 80024ac:	01370137 	.word	0x01370137
 80024b0:	01370137 	.word	0x01370137
 80024b4:	01370137 	.word	0x01370137
 80024b8:	01370137 	.word	0x01370137
 80024bc:	01370137 	.word	0x01370137
 80024c0:	01370137 	.word	0x01370137
 80024c4:	01370137 	.word	0x01370137
 80024c8:	01370137 	.word	0x01370137
 80024cc:	01370137 	.word	0x01370137
 80024d0:	01370137 	.word	0x01370137
 80024d4:	01370137 	.word	0x01370137
 80024d8:	01370137 	.word	0x01370137
 80024dc:	01370137 	.word	0x01370137
 80024e0:	01370137 	.word	0x01370137
 80024e4:	01370137 	.word	0x01370137
 80024e8:	01370137 	.word	0x01370137
 80024ec:	01370131 	.word	0x01370131
 80024f0:	01370137 	.word	0x01370137
 80024f4:	01370137 	.word	0x01370137
 80024f8:	01370137 	.word	0x01370137
 80024fc:	01370137 	.word	0x01370137
 8002500:	01370137 	.word	0x01370137
 8002504:	01370137 	.word	0x01370137
 8002508:	01370137 	.word	0x01370137
 800250c:	01370137 	.word	0x01370137
 8002510:	01370137 	.word	0x01370137
 8002514:	01370137 	.word	0x01370137
 8002518:	01370137 	.word	0x01370137
 800251c:	01370137 	.word	0x01370137
 8002520:	005c      	.short	0x005c
    }
    break;

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002522:	4980      	ldr	r1, [pc, #512]	; (8002724 <UI_SetReg+0x2d8>)
 8002524:	fb81 3104 	smull	r3, r1, r1, r4
 8002528:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800252c:	4628      	mov	r0, r5
 800252e:	b209      	sxth	r1, r1
 8002530:	2200      	movs	r2, #0
 8002532:	f7fe fa1f 	bl	8000974 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002536:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 8002538:	b003      	add	sp, #12
 800253a:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800253c:	b2e1      	uxtb	r1, r4
 800253e:	f7ff ff7b 	bl	8002438 <UI_SelectMC>
    break;
 8002542:	e7f9      	b.n	8002538 <UI_SetReg+0xec>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002544:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002548:	f000 80d8 	beq.w	80026fc <UI_SetReg+0x2b0>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800254c:	2c01      	cmp	r4, #1
 800254e:	f000 80df 	beq.w	8002710 <UI_SetReg+0x2c4>
  bool retVal = true;
 8002552:	2001      	movs	r0, #1
}
 8002554:	b003      	add	sp, #12
 8002556:	bd30      	pop	{r4, r5, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002558:	6810      	ldr	r0, [r2, #0]
 800255a:	b221      	sxth	r1, r4
 800255c:	f002 fa78 	bl	8004a50 <PID_SetKP>
  bool retVal = true;
 8002560:	2001      	movs	r0, #1
    break;
 8002562:	e7e9      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002564:	6810      	ldr	r0, [r2, #0]
 8002566:	b221      	sxth	r1, r4
 8002568:	f002 fa74 	bl	8004a54 <PID_SetKI>
  bool retVal = true;
 800256c:	2001      	movs	r0, #1
    break;
 800256e:	e7e3      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002570:	6810      	ldr	r0, [r2, #0]
 8002572:	b221      	sxth	r1, r4
 8002574:	f002 fa7e 	bl	8004a74 <PID_SetKD>
  bool retVal = true;
 8002578:	2001      	movs	r0, #1
    break;
 800257a:	e7dd      	b.n	8002538 <UI_SetReg+0xec>
      currComp = MCI_GetIqdref(pMCI);
 800257c:	4628      	mov	r0, r5
 800257e:	f7fe fac3 	bl	8000b08 <MCI_GetIqdref>
 8002582:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002584:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002588:	4628      	mov	r0, r5
 800258a:	9901      	ldr	r1, [sp, #4]
 800258c:	f7fe fa06 	bl	800099c <MCI_SetCurrentReferences>
  bool retVal = true;
 8002590:	2001      	movs	r0, #1
    break;
 8002592:	e7d1      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002594:	6850      	ldr	r0, [r2, #4]
 8002596:	b221      	sxth	r1, r4
 8002598:	f002 fa5a 	bl	8004a50 <PID_SetKP>
  bool retVal = true;
 800259c:	2001      	movs	r0, #1
    break;
 800259e:	e7cb      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80025a0:	6850      	ldr	r0, [r2, #4]
 80025a2:	b221      	sxth	r1, r4
 80025a4:	f002 fa56 	bl	8004a54 <PID_SetKI>
  bool retVal = true;
 80025a8:	2001      	movs	r0, #1
    break;
 80025aa:	e7c5      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80025ac:	6850      	ldr	r0, [r2, #4]
 80025ae:	b221      	sxth	r1, r4
 80025b0:	f002 fa60 	bl	8004a74 <PID_SetKD>
  bool retVal = true;
 80025b4:	2001      	movs	r0, #1
    break;
 80025b6:	e7bf      	b.n	8002538 <UI_SetReg+0xec>
      currComp = MCI_GetIqdref(pMCI);
 80025b8:	4628      	mov	r0, r5
 80025ba:	f7fe faa5 	bl	8000b08 <MCI_GetIqdref>
 80025be:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80025c0:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80025c4:	4628      	mov	r0, r5
 80025c6:	9901      	ldr	r1, [sp, #4]
 80025c8:	f7fe f9e8 	bl	800099c <MCI_SetCurrentReferences>
  bool retVal = true;
 80025cc:	2001      	movs	r0, #1
    break;
 80025ce:	e7b3      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80025d0:	6890      	ldr	r0, [r2, #8]
 80025d2:	b221      	sxth	r1, r4
 80025d4:	f002 fa3c 	bl	8004a50 <PID_SetKP>
  bool retVal = true;
 80025d8:	2001      	movs	r0, #1
    break;
 80025da:	e7ad      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80025dc:	6890      	ldr	r0, [r2, #8]
 80025de:	b221      	sxth	r1, r4
 80025e0:	f002 fa38 	bl	8004a54 <PID_SetKI>
  bool retVal = true;
 80025e4:	2001      	movs	r0, #1
    break;
 80025e6:	e7a7      	b.n	8002538 <UI_SetReg+0xec>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80025e8:	6890      	ldr	r0, [r2, #8]
 80025ea:	b221      	sxth	r1, r4
 80025ec:	f002 fa42 	bl	8004a74 <PID_SetKD>
  bool retVal = true;
 80025f0:	2001      	movs	r0, #1
    break;
 80025f2:	e7a1      	b.n	8002538 <UI_SetReg+0xec>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80025f4:	6901      	ldr	r1, [r0, #16]
 80025f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025fa:	0f19      	lsrs	r1, r3, #28
 80025fc:	2909      	cmp	r1, #9
 80025fe:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002602:	d06f      	beq.n	80026e4 <UI_SetReg+0x298>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002604:	2b09      	cmp	r3, #9
 8002606:	d1a4      	bne.n	8002552 <UI_SetReg+0x106>
        pSPD = pMCT->pSpeedSensorAux;
 8002608:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 800260a:	2d00      	cmp	r5, #0
 800260c:	d0a1      	beq.n	8002552 <UI_SetReg+0x106>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800260e:	aa01      	add	r2, sp, #4
 8002610:	f10d 0102 	add.w	r1, sp, #2
 8002614:	4628      	mov	r0, r5
 8002616:	f003 fcb7 	bl	8005f88 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 800261a:	b221      	sxth	r1, r4
 800261c:	4628      	mov	r0, r5
 800261e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002622:	f003 fcb9 	bl	8005f98 <STO_PLL_SetObserverGains>
 8002626:	e794      	b.n	8002552 <UI_SetReg+0x106>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002628:	6901      	ldr	r1, [r0, #16]
 800262a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800262e:	0f19      	lsrs	r1, r3, #28
 8002630:	2909      	cmp	r1, #9
 8002632:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002636:	d051      	beq.n	80026dc <UI_SetReg+0x290>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002638:	2b09      	cmp	r3, #9
 800263a:	d18a      	bne.n	8002552 <UI_SetReg+0x106>
        pSPD = pMCT->pSpeedSensorAux;
 800263c:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 800263e:	2d00      	cmp	r5, #0
 8002640:	d087      	beq.n	8002552 <UI_SetReg+0x106>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002642:	aa01      	add	r2, sp, #4
 8002644:	f10d 0102 	add.w	r1, sp, #2
 8002648:	4628      	mov	r0, r5
 800264a:	f003 fc9d 	bl	8005f88 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 800264e:	b222      	sxth	r2, r4
 8002650:	4628      	mov	r0, r5
 8002652:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002656:	f003 fc9f 	bl	8005f98 <STO_PLL_SetObserverGains>
 800265a:	e77a      	b.n	8002552 <UI_SetReg+0x106>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800265c:	6901      	ldr	r1, [r0, #16]
 800265e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002662:	0f19      	lsrs	r1, r3, #28
 8002664:	2909      	cmp	r1, #9
 8002666:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800266a:	d03f      	beq.n	80026ec <UI_SetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800266c:	2b09      	cmp	r3, #9
 800266e:	f47f af70 	bne.w	8002552 <UI_SetReg+0x106>
        pSPD = pMCT->pSpeedSensorAux;
 8002672:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002674:	2d00      	cmp	r5, #0
 8002676:	f43f af6c 	beq.w	8002552 <UI_SetReg+0x106>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800267a:	aa01      	add	r2, sp, #4
 800267c:	f10d 0102 	add.w	r1, sp, #2
 8002680:	4628      	mov	r0, r5
 8002682:	f003 fc8d 	bl	8005fa0 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002686:	b222      	sxth	r2, r4
 8002688:	4628      	mov	r0, r5
 800268a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800268e:	f003 fc95 	bl	8005fbc <STO_SetPLLGains>
 8002692:	e75e      	b.n	8002552 <UI_SetReg+0x106>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002694:	6901      	ldr	r1, [r0, #16]
 8002696:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800269a:	0f19      	lsrs	r1, r3, #28
 800269c:	2909      	cmp	r1, #9
 800269e:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80026a2:	d027      	beq.n	80026f4 <UI_SetReg+0x2a8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	f47f af54 	bne.w	8002552 <UI_SetReg+0x106>
        pSPD = pMCT->pSpeedSensorAux;
 80026aa:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	f43f af50 	beq.w	8002552 <UI_SetReg+0x106>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80026b2:	aa01      	add	r2, sp, #4
 80026b4:	f10d 0102 	add.w	r1, sp, #2
 80026b8:	4628      	mov	r0, r5
 80026ba:	f003 fc71 	bl	8005fa0 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 80026be:	b221      	sxth	r1, r4
 80026c0:	4628      	mov	r0, r5
 80026c2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80026c6:	f003 fc79 	bl	8005fbc <STO_SetPLLGains>
 80026ca:	e742      	b.n	8002552 <UI_SetReg+0x106>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80026cc:	4628      	mov	r0, r5
 80026ce:	b221      	sxth	r1, r4
 80026d0:	f7fe fa3a 	bl	8000b48 <MCI_SetIdref>
  bool retVal = true;
 80026d4:	2001      	movs	r0, #1
    break;
 80026d6:	e72f      	b.n	8002538 <UI_SetReg+0xec>
    retVal = false;
 80026d8:	2000      	movs	r0, #0
 80026da:	e72d      	b.n	8002538 <UI_SetReg+0xec>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026dc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026de:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026e0:	d1ad      	bne.n	800263e <UI_SetReg+0x1f2>
 80026e2:	e7ab      	b.n	800263c <UI_SetReg+0x1f0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026e4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026e6:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026e8:	d18f      	bne.n	800260a <UI_SetReg+0x1be>
 80026ea:	e78d      	b.n	8002608 <UI_SetReg+0x1bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026ec:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026ee:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026f0:	d1c0      	bne.n	8002674 <UI_SetReg+0x228>
 80026f2:	e7be      	b.n	8002672 <UI_SetReg+0x226>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026f4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80026f6:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026f8:	d1d8      	bne.n	80026ac <UI_SetReg+0x260>
 80026fa:	e7d6      	b.n	80026aa <UI_SetReg+0x25e>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80026fc:	4628      	mov	r0, r5
 80026fe:	f7fe fa1f 	bl	8000b40 <MCI_GetTeref>
 8002702:	4622      	mov	r2, r4
 8002704:	4601      	mov	r1, r0
 8002706:	4628      	mov	r0, r5
 8002708:	f7fe f93c 	bl	8000984 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800270c:	2001      	movs	r0, #1
 800270e:	e713      	b.n	8002538 <UI_SetReg+0xec>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002710:	4628      	mov	r0, r5
 8002712:	f7fe f9dd 	bl	8000ad0 <MCI_GetMecSpeedRefUnit>
 8002716:	2200      	movs	r2, #0
 8002718:	4601      	mov	r1, r0
 800271a:	4628      	mov	r0, r5
 800271c:	f7fe f92a 	bl	8000974 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002720:	4620      	mov	r0, r4
 8002722:	e709      	b.n	8002538 <UI_SetReg+0xec>
 8002724:	2aaaaaab 	.word	0x2aaaaaab

08002728 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002728:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800272a:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800272e:	7d03      	ldrb	r3, [r0, #20]
{
 8002730:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002732:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002736:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 800273a:	2a00      	cmp	r2, #0
 800273c:	f000 8089 	beq.w	8002852 <UI_GetReg+0x12a>
  {
    *success = true;
 8002740:	2401      	movs	r4, #1
 8002742:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 8002744:	2981      	cmp	r1, #129	; 0x81
 8002746:	f200 8289 	bhi.w	8002c5c <UI_GetReg+0x534>
 800274a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800274e:	01e3      	.short	0x01e3
 8002750:	01db01df 	.word	0x01db01df
 8002754:	01ea01d7 	.word	0x01ea01d7
 8002758:	0116011a 	.word	0x0116011a
 800275c:	00ff01e6 	.word	0x00ff01e6
 8002760:	028301f1 	.word	0x028301f1
 8002764:	00fa027f 	.word	0x00fa027f
 8002768:	023d0279 	.word	0x023d0279
 800276c:	022a0239 	.word	0x022a0239
 8002770:	0287021b 	.word	0x0287021b
 8002774:	025c0287 	.word	0x025c0287
 8002778:	02870249 	.word	0x02870249
 800277c:	02870287 	.word	0x02870287
 8002780:	02410245 	.word	0x02410245
 8002784:	02870275 	.word	0x02870275
 8002788:	026e0287 	.word	0x026e0287
 800278c:	013801be 	.word	0x013801be
 8002790:	01320287 	.word	0x01320287
 8002794:	0128012d 	.word	0x0128012d
 8002798:	011e0123 	.word	0x011e0123
 800279c:	013801be 	.word	0x013801be
 80027a0:	00fa00ff 	.word	0x00fa00ff
 80027a4:	018f01b9 	.word	0x018f01b9
 80027a8:	0185018a 	.word	0x0185018a
 80027ac:	02870287 	.word	0x02870287
 80027b0:	01610172 	.word	0x01610172
 80027b4:	013d014f 	.word	0x013d014f
 80027b8:	01c30104 	.word	0x01c30104
 80027bc:	02870287 	.word	0x02870287
 80027c0:	02870287 	.word	0x02870287
 80027c4:	02870287 	.word	0x02870287
 80027c8:	02870287 	.word	0x02870287
 80027cc:	020d0214 	.word	0x020d0214
 80027d0:	01f500fa 	.word	0x01f500fa
 80027d4:	028701a5 	.word	0x028701a5
 80027d8:	02870287 	.word	0x02870287
 80027dc:	02870287 	.word	0x02870287
 80027e0:	02870287 	.word	0x02870287
 80027e4:	02870287 	.word	0x02870287
 80027e8:	02870287 	.word	0x02870287
 80027ec:	02870287 	.word	0x02870287
 80027f0:	02870287 	.word	0x02870287
 80027f4:	02870287 	.word	0x02870287
 80027f8:	02870287 	.word	0x02870287
 80027fc:	02870287 	.word	0x02870287
 8002800:	02870287 	.word	0x02870287
 8002804:	02870198 	.word	0x02870198
 8002808:	02870287 	.word	0x02870287
 800280c:	02870287 	.word	0x02870287
 8002810:	02870287 	.word	0x02870287
 8002814:	02870287 	.word	0x02870287
 8002818:	02870287 	.word	0x02870287
 800281c:	02870287 	.word	0x02870287
 8002820:	02870287 	.word	0x02870287
 8002824:	02870287 	.word	0x02870287
 8002828:	01940287 	.word	0x01940287
 800282c:	027d0209 	.word	0x027d0209
 8002830:	00f70287 	.word	0x00f70287
 8002834:	028700f7 	.word	0x028700f7
 8002838:	02870287 	.word	0x02870287
 800283c:	02870287 	.word	0x02870287
 8002840:	02870287 	.word	0x02870287
 8002844:	02870287 	.word	0x02870287
 8002848:	02870287 	.word	0x02870287
 800284c:	02870287 	.word	0x02870287
 8002850:	00f7      	.short	0x00f7
 8002852:	2970      	cmp	r1, #112	; 0x70
 8002854:	d872      	bhi.n	800293c <UI_GetReg+0x214>
 8002856:	e8df f011 	tbh	[pc, r1, lsl #1]
 800285a:	015d      	.short	0x015d
 800285c:	01550159 	.word	0x01550159
 8002860:	01640151 	.word	0x01640151
 8002864:	00900094 	.word	0x00900094
 8002868:	00790160 	.word	0x00790160
 800286c:	01fd016b 	.word	0x01fd016b
 8002870:	007401f9 	.word	0x007401f9
 8002874:	01b701f3 	.word	0x01b701f3
 8002878:	01a401b3 	.word	0x01a401b3
 800287c:	00710195 	.word	0x00710195
 8002880:	01d60071 	.word	0x01d60071
 8002884:	007101c3 	.word	0x007101c3
 8002888:	00710071 	.word	0x00710071
 800288c:	01bb01bf 	.word	0x01bb01bf
 8002890:	007101ef 	.word	0x007101ef
 8002894:	01e80071 	.word	0x01e80071
 8002898:	00b20138 	.word	0x00b20138
 800289c:	00ac0071 	.word	0x00ac0071
 80028a0:	00a200a7 	.word	0x00a200a7
 80028a4:	0098009d 	.word	0x0098009d
 80028a8:	00b20138 	.word	0x00b20138
 80028ac:	00740079 	.word	0x00740079
 80028b0:	01090133 	.word	0x01090133
 80028b4:	00ff0104 	.word	0x00ff0104
 80028b8:	00710071 	.word	0x00710071
 80028bc:	00db00ec 	.word	0x00db00ec
 80028c0:	00b700c9 	.word	0x00b700c9
 80028c4:	013d007e 	.word	0x013d007e
 80028c8:	00710071 	.word	0x00710071
 80028cc:	00710071 	.word	0x00710071
 80028d0:	00710071 	.word	0x00710071
 80028d4:	00710071 	.word	0x00710071
 80028d8:	0187018e 	.word	0x0187018e
 80028dc:	016f0074 	.word	0x016f0074
 80028e0:	0071011f 	.word	0x0071011f
 80028e4:	00710071 	.word	0x00710071
 80028e8:	00710071 	.word	0x00710071
 80028ec:	00710071 	.word	0x00710071
 80028f0:	00710071 	.word	0x00710071
 80028f4:	00710071 	.word	0x00710071
 80028f8:	00710071 	.word	0x00710071
 80028fc:	00710071 	.word	0x00710071
 8002900:	00710071 	.word	0x00710071
 8002904:	00710071 	.word	0x00710071
 8002908:	00710071 	.word	0x00710071
 800290c:	00710071 	.word	0x00710071
 8002910:	00710112 	.word	0x00710112
 8002914:	00710071 	.word	0x00710071
 8002918:	00710071 	.word	0x00710071
 800291c:	00710071 	.word	0x00710071
 8002920:	00710071 	.word	0x00710071
 8002924:	00710071 	.word	0x00710071
 8002928:	00710071 	.word	0x00710071
 800292c:	00710071 	.word	0x00710071
 8002930:	00710071 	.word	0x00710071
 8002934:	010e0071 	.word	0x010e0071
 8002938:	01f70183 	.word	0x01f70183
  int32_t bRetVal = 0;
 800293c:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 800293e:	b010      	add	sp, #64	; 0x40
 8002940:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002942:	4630      	mov	r0, r6
 8002944:	f7fe f8e0 	bl	8000b08 <MCI_GetIqdref>
 8002948:	1400      	asrs	r0, r0, #16
    break;
 800294a:	e7f8      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800294c:	4630      	mov	r0, r6
 800294e:	f7fe f8db 	bl	8000b08 <MCI_GetIqdref>
 8002952:	b200      	sxth	r0, r0
    break;
 8002954:	e7f3      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002956:	6902      	ldr	r2, [r0, #16]
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800295c:	0f1a      	lsrs	r2, r3, #28
 800295e:	2a09      	cmp	r2, #9
 8002960:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002964:	f000 819b 	beq.w	8002c9e <UI_GetReg+0x576>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002968:	2b09      	cmp	r3, #9
 800296a:	d1e7      	bne.n	800293c <UI_GetReg+0x214>
        pSPD =  pMCT->pSpeedSensorAux;
 800296c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800296e:	2800      	cmp	r0, #0
 8002970:	d0e4      	beq.n	800293c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8002972:	f003 fae9 	bl	8005f48 <STO_PLL_GetEstimatedBemf>
 8002976:	b200      	sxth	r0, r0
 8002978:	e7e1      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800297a:	6828      	ldr	r0, [r5, #0]
 800297c:	f002 f870 	bl	8004a60 <PID_GetKI>
    break;
 8002980:	e7dd      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002982:	6828      	ldr	r0, [r5, #0]
 8002984:	f002 f868 	bl	8004a58 <PID_GetKP>
    break;
 8002988:	e7d9      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 800298a:	4630      	mov	r0, r6
 800298c:	f7fe f8ac 	bl	8000ae8 <MCI_GetIalphabeta>
 8002990:	1400      	asrs	r0, r0, #16
    break;
 8002992:	e7d4      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002994:	4630      	mov	r0, r6
 8002996:	f7fe f8a7 	bl	8000ae8 <MCI_GetIalphabeta>
 800299a:	b200      	sxth	r0, r0
    break;
 800299c:	e7cf      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).b;
 800299e:	4630      	mov	r0, r6
 80029a0:	f7fe f89a 	bl	8000ad8 <MCI_GetIab>
 80029a4:	1400      	asrs	r0, r0, #16
    break;
 80029a6:	e7ca      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).a;
 80029a8:	4630      	mov	r0, r6
 80029aa:	f7fe f895 	bl	8000ad8 <MCI_GetIab>
 80029ae:	b200      	sxth	r0, r0
    break;
 80029b0:	e7c5      	b.n	800293e <UI_GetReg+0x216>
      if (pMCT->pRevupCtrl)
 80029b2:	6968      	ldr	r0, [r5, #20]
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0c1      	beq.n	800293c <UI_GetReg+0x214>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80029b8:	f003 f852 	bl	8005a60 <RUC_GetNumberOfPhases>
 80029bc:	e7bf      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).d;
 80029be:	4630      	mov	r0, r6
 80029c0:	f7fe f89a 	bl	8000af8 <MCI_GetIqd>
 80029c4:	1400      	asrs	r0, r0, #16
    break;
 80029c6:	e7ba      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029c8:	6902      	ldr	r2, [r0, #16]
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ce:	0f1a      	lsrs	r2, r3, #28
 80029d0:	2a09      	cmp	r2, #9
 80029d2:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80029d6:	f000 8149 	beq.w	8002c6c <UI_GetReg+0x544>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029da:	2b09      	cmp	r3, #9
 80029dc:	d1ae      	bne.n	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 80029de:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d0ab      	beq.n	800293c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 80029e4:	f003 fabc 	bl	8005f60 <STO_PLL_GetEstimatedCurrent>
 80029e8:	1400      	asrs	r0, r0, #16
 80029ea:	e7a8      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029ec:	6902      	ldr	r2, [r0, #16]
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029f2:	0f1a      	lsrs	r2, r3, #28
 80029f4:	2a09      	cmp	r2, #9
 80029f6:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80029fa:	f000 813c 	beq.w	8002c76 <UI_GetReg+0x54e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	d19c      	bne.n	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002a02:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d099      	beq.n	800293c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8002a08:	f003 faaa 	bl	8005f60 <STO_PLL_GetEstimatedCurrent>
 8002a0c:	b200      	sxth	r0, r0
 8002a0e:	e796      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a10:	6902      	ldr	r2, [r0, #16]
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a16:	0f1a      	lsrs	r2, r3, #28
 8002a18:	2a09      	cmp	r2, #9
 8002a1a:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002a1e:	f000 812f 	beq.w	8002c80 <UI_GetReg+0x558>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	d18a      	bne.n	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002a26:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d087      	beq.n	800293c <UI_GetReg+0x214>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002a2c:	f002 fb5c 	bl	80050e8 <SPD_GetS16Speed>
 8002a30:	e785      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a32:	6902      	ldr	r2, [r0, #16]
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a38:	0f1a      	lsrs	r2, r3, #28
 8002a3a:	2a09      	cmp	r2, #9
 8002a3c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002a40:	f000 810f 	beq.w	8002c62 <UI_GetReg+0x53a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	f47f af79 	bne.w	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002a4a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	f43f af75 	beq.w	800293c <UI_GetReg+0x214>
        bRetVal = SPD_GetElAngle(pSPD);
 8002a52:	f002 fb0d 	bl	8005070 <SPD_GetElAngle>
 8002a56:	e772      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f7fe f867 	bl	8000b2c <MCI_GetValphabeta>
 8002a5e:	1400      	asrs	r0, r0, #16
    break;
 8002a60:	e76d      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002a62:	4630      	mov	r0, r6
 8002a64:	f7fe f862 	bl	8000b2c <MCI_GetValphabeta>
 8002a68:	b200      	sxth	r0, r0
    break;
 8002a6a:	e768      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	f7fe f853 	bl	8000b18 <MCI_GetVqd>
 8002a72:	1400      	asrs	r0, r0, #16
    break;
 8002a74:	e763      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002a76:	6828      	ldr	r0, [r5, #0]
 8002a78:	f001 fff8 	bl	8004a6c <PID_GetKPDivisor>
    break;
 8002a7c:	e75f      	b.n	800293e <UI_GetReg+0x216>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f7fd ffee 	bl	8000a60 <MCI_GetControlMode>
 8002a84:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002a86:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002a88:	f000 8126 	beq.w	8002cd8 <UI_GetReg+0x5b0>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002a8c:	f7fe f820 	bl	8000ad0 <MCI_GetMecSpeedRefUnit>
 8002a90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a94:	0040      	lsls	r0, r0, #1
 8002a96:	e752      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a98:	6902      	ldr	r2, [r0, #16]
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a9e:	0f1a      	lsrs	r2, r3, #28
 8002aa0:	2a09      	cmp	r2, #9
 8002aa2:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002aa6:	f000 811d 	beq.w	8002ce4 <UI_GetReg+0x5bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	f47f af46 	bne.w	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002ab0:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	f43f af42 	beq.w	800293c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002ab8:	f003 fa9c 	bl	8005ff4 <STO_PLL_GetObservedBemfLevel>
 8002abc:	1400      	asrs	r0, r0, #16
 8002abe:	e73e      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f7fe f829 	bl	8000b18 <MCI_GetVqd>
 8002ac6:	b200      	sxth	r0, r0
    break;
 8002ac8:	e739      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002aca:	4630      	mov	r0, r6
 8002acc:	f7fe f814 	bl	8000af8 <MCI_GetIqd>
 8002ad0:	b200      	sxth	r0, r0
    break;
 8002ad2:	e734      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ad4:	6902      	ldr	r2, [r0, #16]
 8002ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ada:	0f1a      	lsrs	r2, r3, #28
 8002adc:	2a09      	cmp	r2, #9
 8002ade:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002ae2:	f000 80d7 	beq.w	8002c94 <UI_GetReg+0x56c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	f47f af28 	bne.w	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002aec:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002aee:	2800      	cmp	r0, #0
 8002af0:	f43f af24 	beq.w	800293c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8002af4:	f003 fa28 	bl	8005f48 <STO_PLL_GetEstimatedBemf>
 8002af8:	1400      	asrs	r0, r0, #16
 8002afa:	e720      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002afc:	4630      	mov	r0, r6
 8002afe:	f7fd ffaf 	bl	8000a60 <MCI_GetControlMode>
    break;
 8002b02:	e71c      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002b04:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002b06:	f002 fc5d 	bl	80053c4 <STM_GetState>
	break;
 8002b0a:	e718      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002b0c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002b0e:	f002 fc67 	bl	80053e0 <STM_GetFaultState>
	break;
 8002b12:	e714      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002b14:	f7ff fc98 	bl	8002448 <UI_GetSelectedMC>
    break;
 8002b18:	e711      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002b1a:	6828      	ldr	r0, [r5, #0]
 8002b1c:	f001 ffac 	bl	8004a78 <PID_GetKD>
    break;
 8002b20:	e70d      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002b22:	4630      	mov	r0, r6
 8002b24:	f7fd ffd4 	bl	8000ad0 <MCI_GetMecSpeedRefUnit>
 8002b28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b2c:	0040      	lsls	r0, r0, #1
    break;
 8002b2e:	e706      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002b30:	6868      	ldr	r0, [r5, #4]
 8002b32:	f001 ff91 	bl	8004a58 <PID_GetKP>
    break;
 8002b36:	e702      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002b38:	6902      	ldr	r2, [r0, #16]
 8002b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b3e:	0f1a      	lsrs	r2, r3, #28
 8002b40:	2a09      	cmp	r2, #9
 8002b42:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002b46:	f000 80a0 	beq.w	8002c8a <UI_GetReg+0x562>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	f47f aef6 	bne.w	800293c <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8002b50:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002b52:	2800      	cmp	r0, #0
 8002b54:	f43f aef2 	beq.w	800293c <UI_GetReg+0x214>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002b58:	f003 fa48 	bl	8005fec <STO_PLL_GetEstimatedBemfLevel>
 8002b5c:	1400      	asrs	r0, r0, #16
 8002b5e:	e6ee      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002b60:	6828      	ldr	r0, [r5, #0]
 8002b62:	f001 ff85 	bl	8004a70 <PID_GetKIDivisor>
    break;
 8002b66:	e6ea      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002b68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002b6a:	f002 fb7f 	bl	800526c <STC_GetMinAppNegativeMecSpeedUnit>
 8002b6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b72:	0040      	lsls	r0, r0, #1
    break;
 8002b74:	e6e3      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002b76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002b78:	f002 fb76 	bl	8005268 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002b7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b80:	0040      	lsls	r0, r0, #1
    break;
 8002b82:	e6dc      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002b84:	6902      	ldr	r2, [r0, #16]
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b8a:	0f1a      	lsrs	r2, r3, #28
 8002b8c:	2a09      	cmp	r2, #9
 8002b8e:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002b92:	f000 8089 	beq.w	8002ca8 <UI_GetReg+0x580>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	f000 8089 	beq.w	8002cae <UI_GetReg+0x586>
      bRetVal = (int32_t)hIgain;
 8002b9c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 8002ba0:	e6cd      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ba2:	6902      	ldr	r2, [r0, #16]
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ba8:	0f1a      	lsrs	r2, r3, #28
 8002baa:	2a09      	cmp	r2, #9
 8002bac:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002bb0:	f000 8086 	beq.w	8002cc0 <UI_GetReg+0x598>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	f000 8086 	beq.w	8002cc6 <UI_GetReg+0x59e>
      bRetVal = (int32_t)hPgain;
 8002bba:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8002bbe:	e6be      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002bc0:	68a8      	ldr	r0, [r5, #8]
 8002bc2:	f001 ff59 	bl	8004a78 <PID_GetKD>
    break;
 8002bc6:	e6ba      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002bc8:	68a8      	ldr	r0, [r5, #8]
 8002bca:	f001 ff49 	bl	8004a60 <PID_GetKI>
    break;
 8002bce:	e6b6      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002bd0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002bd2:	f001 ff1f 	bl	8004a14 <NTC_GetAvTemp_C>
    break;
 8002bd6:	e6b2      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002bd8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002bda:	f001 fc19 	bl	8004410 <VBS_GetAvBusVoltage_V>
    break;
 8002bde:	e6ae      	b.n	800293e <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002be0:	6902      	ldr	r2, [r0, #16]
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002be6:	0f1a      	lsrs	r2, r3, #28
 8002be8:	2a09      	cmp	r2, #9
 8002bea:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002bee:	f000 8082 	beq.w	8002cf6 <UI_GetReg+0x5ce>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bf2:	2b09      	cmp	r3, #9
 8002bf4:	d1e1      	bne.n	8002bba <UI_GetReg+0x492>
        pSPD = pMCT->pSpeedSensorAux;
 8002bf6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d0de      	beq.n	8002bba <UI_GetReg+0x492>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002bfc:	aa0f      	add	r2, sp, #60	; 0x3c
 8002bfe:	a90e      	add	r1, sp, #56	; 0x38
 8002c00:	f003 f9ce 	bl	8005fa0 <STO_GetPLLGains>
 8002c04:	e7d9      	b.n	8002bba <UI_GetReg+0x492>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002c06:	6902      	ldr	r2, [r0, #16]
 8002c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c0c:	0f1a      	lsrs	r2, r3, #28
 8002c0e:	2a09      	cmp	r2, #9
 8002c10:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002c14:	d06b      	beq.n	8002cee <UI_GetReg+0x5c6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d1c0      	bne.n	8002b9c <UI_GetReg+0x474>
        pSPD = pMCT->pSpeedSensorAux;
 8002c1a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d0bd      	beq.n	8002b9c <UI_GetReg+0x474>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002c20:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c22:	a90e      	add	r1, sp, #56	; 0x38
 8002c24:	f003 f9bc 	bl	8005fa0 <STO_GetPLLGains>
 8002c28:	e7b8      	b.n	8002b9c <UI_GetReg+0x474>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f7fd ff48 	bl	8000ac0 <MCI_GetAvrgMecSpeedUnit>
 8002c30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c34:	0040      	lsls	r0, r0, #1
    break;
 8002c36:	e682      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002c38:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002c3a:	f001 fea5 	bl	8004988 <MPM_GetAvrgElMotorPowerW>
    break;
 8002c3e:	e67e      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002c40:	68a8      	ldr	r0, [r5, #8]
 8002c42:	f001 ff09 	bl	8004a58 <PID_GetKP>
    break;
 8002c46:	e67a      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)(MC_UID);
 8002c48:	482d      	ldr	r0, [pc, #180]	; (8002d00 <UI_GetReg+0x5d8>)
 8002c4a:	e678      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002c4c:	6868      	ldr	r0, [r5, #4]
 8002c4e:	f001 ff13 	bl	8004a78 <PID_GetKD>
    break;
 8002c52:	e674      	b.n	800293e <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002c54:	6868      	ldr	r0, [r5, #4]
 8002c56:	f001 ff03 	bl	8004a60 <PID_GetKI>
    break;
 8002c5a:	e670      	b.n	800293e <UI_GetReg+0x216>
        *success = false;
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002c60:	e66d      	b.n	800293e <UI_GetReg+0x216>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c62:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002c64:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c66:	f47f aef1 	bne.w	8002a4c <UI_GetReg+0x324>
 8002c6a:	e6ee      	b.n	8002a4a <UI_GetReg+0x322>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c6c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002c6e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c70:	f47f aeb6 	bne.w	80029e0 <UI_GetReg+0x2b8>
 8002c74:	e6b3      	b.n	80029de <UI_GetReg+0x2b6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c76:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002c78:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c7a:	f47f aec3 	bne.w	8002a04 <UI_GetReg+0x2dc>
 8002c7e:	e6c0      	b.n	8002a02 <UI_GetReg+0x2da>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c80:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002c82:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c84:	f47f aed0 	bne.w	8002a28 <UI_GetReg+0x300>
 8002c88:	e6cd      	b.n	8002a26 <UI_GetReg+0x2fe>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c8a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002c8c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c8e:	f47f af60 	bne.w	8002b52 <UI_GetReg+0x42a>
 8002c92:	e75d      	b.n	8002b50 <UI_GetReg+0x428>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c94:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8002c96:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c98:	f47f af29 	bne.w	8002aee <UI_GetReg+0x3c6>
 8002c9c:	e726      	b.n	8002aec <UI_GetReg+0x3c4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c9e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ca0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ca2:	f47f ae64 	bne.w	800296e <UI_GetReg+0x246>
 8002ca6:	e661      	b.n	800296c <UI_GetReg+0x244>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ca8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002caa:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cac:	d100      	bne.n	8002cb0 <UI_GetReg+0x588>
        pSPD = pMCT->pSpeedSensorAux;
 8002cae:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	f43f af73 	beq.w	8002b9c <UI_GetReg+0x474>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002cb6:	aa0f      	add	r2, sp, #60	; 0x3c
 8002cb8:	a90e      	add	r1, sp, #56	; 0x38
 8002cba:	f003 f965 	bl	8005f88 <STO_PLL_GetObserverGains>
 8002cbe:	e76d      	b.n	8002b9c <UI_GetReg+0x474>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cc0:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002cc2:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cc4:	d100      	bne.n	8002cc8 <UI_GetReg+0x5a0>
        pSPD = pMCT->pSpeedSensorAux;
 8002cc6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	f43f af76 	beq.w	8002bba <UI_GetReg+0x492>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002cce:	aa0f      	add	r2, sp, #60	; 0x3c
 8002cd0:	a90e      	add	r1, sp, #56	; 0x38
 8002cd2:	f003 f959 	bl	8005f88 <STO_PLL_GetObserverGains>
 8002cd6:	e770      	b.n	8002bba <UI_GetReg+0x492>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002cd8:	f7fd fee6 	bl	8000aa8 <MCI_GetLastRampFinalSpeed>
 8002cdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ce0:	0040      	lsls	r0, r0, #1
 8002ce2:	e62c      	b.n	800293e <UI_GetReg+0x216>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ce4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002ce6:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ce8:	f47f aee3 	bne.w	8002ab2 <UI_GetReg+0x38a>
 8002cec:	e6e0      	b.n	8002ab0 <UI_GetReg+0x388>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cee:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002cf0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cf2:	d193      	bne.n	8002c1c <UI_GetReg+0x4f4>
 8002cf4:	e791      	b.n	8002c1a <UI_GetReg+0x4f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cf6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002cf8:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002cfa:	f47f af7d 	bne.w	8002bf8 <UI_GetReg+0x4d0>
 8002cfe:	e77a      	b.n	8002bf6 <UI_GetReg+0x4ce>
 8002d00:	34a6847a 	.word	0x34a6847a

08002d04 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002d04:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d06:	6883      	ldr	r3, [r0, #8]
 8002d08:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8002d0a:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d0c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002d10:	290d      	cmp	r1, #13
 8002d12:	d82c      	bhi.n	8002d6e <UI_ExecCmd+0x6a>
 8002d14:	e8df f001 	tbb	[pc, r1]
 8002d18:	0c071217 	.word	0x0c071217
 8002d1c:	261c0e0c 	.word	0x261c0e0c
 8002d20:	2b2b2b21 	.word	0x2b2b2b21
 8002d24:	122b      	.short	0x122b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7fd fe96 	bl	8000a58 <MCI_GetSTMState>
 8002d2c:	2806      	cmp	r0, #6
 8002d2e:	d020      	beq.n	8002d72 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002d30:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002d32:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd fe8f 	bl	8000a58 <MCI_GetSTMState>
 8002d3a:	b120      	cbz	r0, 8002d46 <UI_ExecCmd+0x42>
        MCI_StopMotor(pMCI);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7fd fe45 	bl	80009cc <MCI_StopMotor>
  bool retVal = true;
 8002d42:	2001      	movs	r0, #1
}
 8002d44:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7fd fe36 	bl	80009b8 <MCI_StartMotor>
  bool retVal = true;
 8002d4c:	2001      	movs	r0, #1
}
 8002d4e:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7fd fe3f 	bl	80009d4 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002d56:	2001      	movs	r0, #1
}
 8002d58:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd fef8 	bl	8000b50 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002d60:	2001      	movs	r0, #1
}
 8002d62:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7fd fe39 	bl	80009dc <MCI_EncoderAlign>
  bool retVal = true;
 8002d6a:	2001      	movs	r0, #1
}
 8002d6c:	bd10      	pop	{r4, pc}
    retVal = false;
 8002d6e:	2000      	movs	r0, #0
}
 8002d70:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7fd fea0 	bl	8000ab8 <MCI_StopRamp>
  bool retVal = true;
 8002d78:	2001      	movs	r0, #1
}
 8002d7a:	bd10      	pop	{r4, pc}

08002d7c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002d7c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d80:	7d04      	ldrb	r4, [r0, #20]
 8002d82:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002d84:	fb83 c301 	smull	ip, r3, r3, r1
 8002d88:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002d8c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002d90:	b209      	sxth	r1, r1
 8002d92:	f7fd fdef 	bl	8000974 <MCI_ExecSpeedRamp>
  return true;
}
 8002d96:	2001      	movs	r0, #1
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2aaaaaab 	.word	0x2aaaaaab

08002da0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002da0:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002da2:	6883      	ldr	r3, [r0, #8]
 8002da4:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002da6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002daa:	f7fd fdeb 	bl	8000984 <MCI_ExecTorqueRamp>
  return true;
}
 8002dae:	2001      	movs	r0, #1
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop

08002db4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002db6:	7d04      	ldrb	r4, [r0, #20]
 8002db8:	68c0      	ldr	r0, [r0, #12]
 8002dba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002dbe:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002dc0:	b194      	cbz	r4, 8002de8 <UI_GetRevupData+0x34>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	461e      	mov	r6, r3
 8002dc6:	4617      	mov	r7, r2
 8002dc8:	460d      	mov	r5, r1
 8002dca:	f002 fe33 	bl	8005a34 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002dce:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002dd0:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f002 fe34 	bl	8005a40 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002dd8:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002dda:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f002 fe37 	bl	8005a50 <RUC_GetPhaseFinalTorque>
 8002de2:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 8002de4:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002de6:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002de8:	4620      	mov	r0, r4
 8002dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dec <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002df0:	7d04      	ldrb	r4, [r0, #20]
 8002df2:	68c3      	ldr	r3, [r0, #12]
{
 8002df4:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002df8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002dfc:	695c      	ldr	r4, [r3, #20]
{
 8002dfe:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f002 fe05 	bl	8005a10 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002e06:	463a      	mov	r2, r7
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f002 fe06 	bl	8005a1c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002e10:	4620      	mov	r0, r4
 8002e12:	4632      	mov	r2, r6
 8002e14:	4629      	mov	r1, r5
 8002e16:	f002 fe07 	bl	8005a28 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1e:	bf00      	nop

08002e20 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002e20:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e22:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002e24:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e28:	7d01      	ldrb	r1, [r0, #20]
  currComp.d = hIdRef;
 8002e2a:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e2e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002e32:	9901      	ldr	r1, [sp, #4]
}
 8002e34:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002e36:	f7fd bdb1 	b.w	800099c <MCI_SetCurrentReferences>
 8002e3a:	bf00      	nop

08002e3c <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	4770      	bx	lr

08002e40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SystemInit+0x18>)
 8002e42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e52:	6099      	str	r1, [r3, #8]
#endif
}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e5c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <HAL_InitTick+0x3c>)
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_InitTick+0x40>)
 8002e62:	7812      	ldrb	r2, [r2, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
{
 8002e66:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e6c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002e70:	fbb3 f0f0 	udiv	r0, r3, r0
 8002e74:	f000 fae6 	bl	8003444 <HAL_SYSTICK_Config>
 8002e78:	b908      	cbnz	r0, 8002e7e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7a:	2d0f      	cmp	r5, #15
 8002e7c:	d901      	bls.n	8002e82 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002e7e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002e80:	bd38      	pop	{r3, r4, r5, pc}
 8002e82:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e84:	4602      	mov	r2, r0
 8002e86:	4629      	mov	r1, r5
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f000 fa96 	bl	80033bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_InitTick+0x44>)
 8002e92:	4620      	mov	r0, r4
 8002e94:	601d      	str	r5, [r3, #0]
}
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	20000690 	.word	0x20000690
 8002e9c:	2000068c 	.word	0x2000068c
 8002ea0:	20000694 	.word	0x20000694

08002ea4 <HAL_Init>:
{
 8002ea4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_Init+0x30>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	f000 fa69 	bl	8003398 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec6:	2004      	movs	r0, #4
 8002ec8:	f7ff ffc8 	bl	8002e5c <HAL_InitTick>
  HAL_MspInit();
 8002ecc:	f7ff f842 	bl	8001f54 <HAL_MspInit>
}
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	bd08      	pop	{r3, pc}
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <HAL_IncTick+0x10>)
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_IncTick+0x14>)
 8002edc:	6811      	ldr	r1, [r2, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	440b      	add	r3, r1
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200009d0 	.word	0x200009d0
 8002eec:	20000690 	.word	0x20000690

08002ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <HAL_GetTick+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200009d0 	.word	0x200009d0

08002efc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002efc:	2800      	cmp	r0, #0
 8002efe:	f000 8091 	beq.w	8003024 <HAL_ADC_Init+0x128>
{
 8002f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f04:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002f06:	4604      	mov	r4, r0
 8002f08:	2d00      	cmp	r5, #0
 8002f0a:	f000 8081 	beq.w	8003010 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f10:	06db      	lsls	r3, r3, #27
 8002f12:	d504      	bpl.n	8002f1e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f14:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002f18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8002f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f20:	494d      	ldr	r1, [pc, #308]	; (8003058 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f22:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f24:	4d4d      	ldr	r5, [pc, #308]	; (800305c <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002f2a:	f022 0202 	bic.w	r2, r2, #2
 8002f2e:	f042 0202 	orr.w	r2, r2, #2
 8002f32:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f34:	684a      	ldr	r2, [r1, #4]
 8002f36:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002f3a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f3c:	684a      	ldr	r2, [r1, #4]
 8002f3e:	6860      	ldr	r0, [r4, #4]
 8002f40:	4302      	orrs	r2, r0
 8002f42:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f44:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f46:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f48:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f4a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f4c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002f50:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5a:	6858      	ldr	r0, [r3, #4]
 8002f5c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8002f60:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f62:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f66:	4339      	orrs	r1, r7
 8002f68:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f6a:	6899      	ldr	r1, [r3, #8]
 8002f6c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002f70:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f72:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f74:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f76:	ea42 0206 	orr.w	r2, r2, r6
 8002f7a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f7c:	d054      	beq.n	8003028 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f7e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f82:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002f86:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	4310      	orrs	r0, r2
 8002f8c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002f94:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	432a      	orrs	r2, r5
 8002f9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f9c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f9e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fa0:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fa4:	f021 0102 	bic.w	r1, r1, #2
 8002fa8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8002fb0:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb2:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d140      	bne.n	800303a <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fbc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc0:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fc2:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fc6:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fc8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002fd0:	3d01      	subs	r5, #1
 8002fd2:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8002fd6:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fd8:	6898      	ldr	r0, [r3, #8]
 8002fda:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8002fde:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8002fe6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002fee:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ff0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ff4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002ff8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003008:	2300      	movs	r3, #0
 800300a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800300e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003010:	f7fe ffbe 	bl	8001f90 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003014:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003016:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003018:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301c:	06db      	lsls	r3, r3, #27
 800301e:	f53f af79 	bmi.w	8002f14 <HAL_ADC_Init+0x18>
 8003022:	e77c      	b.n	8002f1e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8003024:	2001      	movs	r0, #1
}
 8003026:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800302e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e7b0      	b.n	8002f9c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800303e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003040:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003048:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	3901      	subs	r1, #1
 800304e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	e7b3      	b.n	8002fbe <HAL_ADC_Init+0xc2>
 8003056:	bf00      	nop
 8003058:	40012300 	.word	0x40012300
 800305c:	0f000001 	.word	0x0f000001

08003060 <HAL_ADC_ConfigChannel>:
{
 8003060:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8003062:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003066:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003068:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800306a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800306c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800306e:	f000 8094 	beq.w	800319a <HAL_ADC_ConfigChannel+0x13a>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003072:	680d      	ldr	r5, [r1, #0]
 8003074:	688a      	ldr	r2, [r1, #8]
 8003076:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8003078:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800307a:	2d09      	cmp	r5, #9
 800307c:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800307e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003082:	d829      	bhi.n	80030d8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003084:	691c      	ldr	r4, [r3, #16]
 8003086:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800308a:	f04f 0c07 	mov.w	ip, #7
 800308e:	fa0c fc06 	lsl.w	ip, ip, r6
 8003092:	ea24 040c 	bic.w	r4, r4, ip
 8003096:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003098:	691c      	ldr	r4, [r3, #16]
 800309a:	fa02 f606 	lsl.w	r6, r2, r6
 800309e:	4326      	orrs	r6, r4
 80030a0:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 80030a2:	684e      	ldr	r6, [r1, #4]
 80030a4:	2e06      	cmp	r6, #6
 80030a6:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80030aa:	d82a      	bhi.n	8003102 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ae:	3a05      	subs	r2, #5
 80030b0:	241f      	movs	r4, #31
 80030b2:	4094      	lsls	r4, r2
 80030b4:	ea21 0104 	bic.w	r1, r1, r4
 80030b8:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030bc:	fa07 f202 	lsl.w	r2, r7, r2
 80030c0:	430a      	orrs	r2, r1
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030c4:	4a3d      	ldr	r2, [pc, #244]	; (80031bc <HAL_ADC_ConfigChannel+0x15c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02d      	beq.n	8003126 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 80030ca:	2300      	movs	r3, #0
 80030cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80030d0:	4618      	mov	r0, r3
}
 80030d2:	b002      	add	sp, #8
 80030d4:	bcf0      	pop	{r4, r5, r6, r7}
 80030d6:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80030dc:	68dc      	ldr	r4, [r3, #12]
 80030de:	3e1e      	subs	r6, #30
 80030e0:	f04f 0c07 	mov.w	ip, #7
 80030e4:	fa0c fc06 	lsl.w	ip, ip, r6
 80030e8:	ea24 040c 	bic.w	r4, r4, ip
 80030ec:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ee:	68dc      	ldr	r4, [r3, #12]
 80030f0:	fa02 f606 	lsl.w	r6, r2, r6
 80030f4:	4326      	orrs	r6, r4
 80030f6:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 80030f8:	684e      	ldr	r6, [r1, #4]
 80030fa:	2e06      	cmp	r6, #6
 80030fc:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8003100:	d9d4      	bls.n	80030ac <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8003102:	2e0c      	cmp	r6, #12
 8003104:	d831      	bhi.n	800316a <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003106:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800310a:	211f      	movs	r1, #31
 800310c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310e:	40a1      	lsls	r1, r4
 8003110:	ea22 0201 	bic.w	r2, r2, r1
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003118:	fa07 f204 	lsl.w	r2, r7, r4
 800311c:	430a      	orrs	r2, r1
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <HAL_ADC_ConfigChannel+0x15c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d1d1      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x6a>
 8003126:	2d12      	cmp	r5, #18
 8003128:	d02d      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x126>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_ADC_ConfigChannel+0x160>)
 800312c:	429d      	cmp	r5, r3
 800312e:	d138      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x142>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_ADC_ConfigChannel+0x164>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003132:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003134:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003136:	4c25      	ldr	r4, [pc, #148]	; (80031cc <HAL_ADC_ConfigChannel+0x16c>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003138:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800313c:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800313e:	6851      	ldr	r1, [r2, #4]
 8003140:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003144:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fba4 2303 	umull	r2, r3, r4, r3
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003156:	9b01      	ldr	r3, [sp, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0b6      	beq.n	80030ca <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800315c:	9b01      	ldr	r3, [sp, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003162:	9b01      	ldr	r3, [sp, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_ADC_ConfigChannel+0xfc>
 8003168:	e7af      	b.n	80030ca <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800316a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800316e:	241f      	movs	r4, #31
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	408c      	lsls	r4, r1
 8003174:	ea22 0204 	bic.w	r2, r2, r4
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800317a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800317c:	fa07 f201 	lsl.w	r2, r7, r1
 8003180:	4322      	orrs	r2, r4
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
 8003184:	e79e      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x64>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_ADC_ConfigChannel+0x164>)
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800318e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	e797      	b.n	80030ca <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800319a:	2002      	movs	r0, #2
}
 800319c:	b002      	add	sp, #8
 800319e:	bcf0      	pop	{r4, r5, r6, r7}
 80031a0:	4770      	bx	lr
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031a2:	2d11      	cmp	r5, #17
 80031a4:	d191      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_ADC_ConfigChannel+0x164>)
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80031ae:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	e787      	b.n	80030ca <HAL_ADC_ConfigChannel+0x6a>
 80031ba:	bf00      	nop
 80031bc:	40012000 	.word	0x40012000
 80031c0:	10000012 	.word	0x10000012
 80031c4:	40012300 	.word	0x40012300
 80031c8:	2000068c 	.word	0x2000068c
 80031cc:	431bde83 	.word	0x431bde83

080031d0 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f000 80d5 	beq.w	8003384 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
{
 80031da:	b4f0      	push	{r4, r5, r6, r7}
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80031dc:	680d      	ldr	r5, [r1, #0]
 80031de:	688e      	ldr	r6, [r1, #8]
 80031e0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80031e2:	2201      	movs	r2, #1
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80031e4:	2d09      	cmp	r5, #9
 80031e6:	b2ac      	uxth	r4, r5
  __HAL_LOCK(hadc);
 80031e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80031ec:	d86b      	bhi.n	80032c6 <HAL_ADCEx_InjectedConfigChannel+0xf6>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80031ee:	691f      	ldr	r7, [r3, #16]
 80031f0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80031f4:	f04f 0c07 	mov.w	ip, #7
 80031f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80031fc:	ea27 070c 	bic.w	r7, r7, ip
 8003200:	611f      	str	r7, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003202:	691f      	ldr	r7, [r3, #16]
 8003204:	fa06 f202 	lsl.w	r2, r6, r2
 8003208:	433a      	orrs	r2, r7
 800320a:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800320c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800320e:	f8d1 c010 	ldr.w	ip, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003212:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003214:	f427 1740 	bic.w	r7, r7, #3145728	; 0x300000
 8003218:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800321a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800321c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003220:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003224:	1cf2      	adds	r2, r6, #3
 8003226:	eba2 020c 	sub.w	r2, r2, ip
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800322a:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003230:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003234:	f04f 0c1f 	mov.w	ip, #31
 8003238:	fa0c fc02 	lsl.w	ip, ip, r2
 800323c:	ea27 070c 	bic.w	r7, r7, ip
 8003240:	639f      	str	r7, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003242:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003246:	698f      	ldr	r7, [r1, #24]
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003248:	fa04 f202 	lsl.w	r2, r4, r2
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800324c:	4c4e      	ldr	r4, [pc, #312]	; (8003388 <HAL_ADCEx_InjectedConfigChannel+0x1b8>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800324e:	ea42 020c 	orr.w	r2, r2, ip
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003252:	42a7      	cmp	r7, r4
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003256:	d071      	beq.n	800333c <HAL_ADCEx_InjectedConfigChannel+0x16c>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003258:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800325a:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800325e:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8003262:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	4317      	orrs	r7, r2
 8003268:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800326a:	689c      	ldr	r4, [r3, #8]
 800326c:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8003270:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	ea42 020c 	orr.w	r2, r2, ip
 8003278:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800327a:	7d4a      	ldrb	r2, [r1, #21]
 800327c:	2a00      	cmp	r2, #0
 800327e:	d058      	beq.n	8003332 <HAL_ADCEx_InjectedConfigChannel+0x162>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003286:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003288:	7d0a      	ldrb	r2, [r1, #20]
 800328a:	b36a      	cbz	r2, 80032e8 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003292:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003294:	2e02      	cmp	r6, #2
 8003296:	68ca      	ldr	r2, [r1, #12]
 8003298:	d02d      	beq.n	80032f6 <HAL_ADCEx_InjectedConfigChannel+0x126>
 800329a:	2e03      	cmp	r6, #3
 800329c:	d061      	beq.n	8003362 <HAL_ADCEx_InjectedConfigChannel+0x192>
 800329e:	2e01      	cmp	r6, #1
 80032a0:	d055      	beq.n	800334e <HAL_ADCEx_InjectedConfigChannel+0x17e>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80032a2:	6a19      	ldr	r1, [r3, #32]
 80032a4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80032a8:	f021 010f 	bic.w	r1, r1, #15
 80032ac:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80032ae:	6a19      	ldr	r1, [r3, #32]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d029      	beq.n	800330e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	2300      	movs	r3, #0
 80032bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 80032c0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80032c2:	4618      	mov	r0, r3
}
 80032c4:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80032c6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80032ca:	68df      	ldr	r7, [r3, #12]
 80032cc:	3a1e      	subs	r2, #30
 80032ce:	f04f 0c07 	mov.w	ip, #7
 80032d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80032d6:	ea27 070c 	bic.w	r7, r7, ip
 80032da:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80032dc:	68df      	ldr	r7, [r3, #12]
 80032de:	fa06 f202 	lsl.w	r2, r6, r2
 80032e2:	433a      	orrs	r2, r7
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	e791      	b.n	800320c <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ee:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80032f0:	2e02      	cmp	r6, #2
 80032f2:	68ca      	ldr	r2, [r1, #12]
 80032f4:	d1d1      	bne.n	800329a <HAL_ADCEx_InjectedConfigChannel+0xca>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80032f6:	6999      	ldr	r1, [r3, #24]
 80032f8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80032fc:	f021 010f 	bic.w	r1, r1, #15
 8003300:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003302:	6999      	ldr	r1, [r3, #24]
 8003304:	430a      	orrs	r2, r1
 8003306:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003308:	4a20      	ldr	r2, [pc, #128]	; (800338c <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d1d5      	bne.n	80032ba <HAL_ADCEx_InjectedConfigChannel+0xea>
 800330e:	2d12      	cmp	r5, #18
 8003310:	d031      	beq.n	8003376 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_ADCEx_InjectedConfigChannel+0x1c0>)
 8003314:	429d      	cmp	r5, r3
 8003316:	d001      	beq.n	800331c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003318:	2d11      	cmp	r5, #17
 800331a:	d1ce      	bne.n	80032ba <HAL_ADCEx_InjectedConfigChannel+0xea>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800331c:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 800331e:	6853      	ldr	r3, [r2, #4]
 8003320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003324:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 8003326:	2300      	movs	r3, #0
 8003328:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800332c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800332e:	4618      	mov	r0, r3
}
 8003330:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e7a5      	b.n	8003288 <HAL_ADCEx_InjectedConfigChannel+0xb8>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	e795      	b.n	800327a <HAL_ADCEx_InjectedConfigChannel+0xaa>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800334e:	6959      	ldr	r1, [r3, #20]
 8003350:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003354:	f021 010f 	bic.w	r1, r1, #15
 8003358:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800335a:	6959      	ldr	r1, [r3, #20]
 800335c:	430a      	orrs	r2, r1
 800335e:	615a      	str	r2, [r3, #20]
      break;
 8003360:	e7a8      	b.n	80032b4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003368:	f021 010f 	bic.w	r1, r1, #15
 800336c:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e79e      	b.n	80032b4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003376:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800337a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800337e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8003382:	e79a      	b.n	80032ba <HAL_ADCEx_InjectedConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8003384:	2002      	movs	r0, #2
}
 8003386:	4770      	bx	lr
 8003388:	000f0001 	.word	0x000f0001
 800338c:	40012000 	.word	0x40012000
 8003390:	10000012 	.word	0x10000012
 8003394:	40012300 	.word	0x40012300

08003398 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800339a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80033a0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a2:	0200      	lsls	r0, r0, #8
 80033a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80033b0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80033b2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_NVIC_SetPriority+0x64>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c6:	f1c3 0507 	rsb	r5, r3, #7
 80033ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033cc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d0:	bf28      	it	cs
 80033d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d4:	2c06      	cmp	r4, #6
 80033d6:	d919      	bls.n	800340c <HAL_NVIC_SetPriority+0x50>
 80033d8:	3b03      	subs	r3, #3
 80033da:	f04f 34ff 	mov.w	r4, #4294967295
 80033de:	409c      	lsls	r4, r3
 80033e0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	40aa      	lsls	r2, r5
 80033ea:	ea21 0102 	bic.w	r1, r1, r2
 80033ee:	fa01 f203 	lsl.w	r2, r1, r3
 80033f2:	4322      	orrs	r2, r4
 80033f4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80033f6:	2800      	cmp	r0, #0
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	db0a      	blt.n	8003412 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003400:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003404:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003408:	bc30      	pop	{r4, r5}
 800340a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340c:	2400      	movs	r4, #0
 800340e:	4623      	mov	r3, r4
 8003410:	e7e8      	b.n	80033e4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_NVIC_SetPriority+0x68>)
 8003414:	f000 000f 	and.w	r0, r0, #15
 8003418:	4403      	add	r3, r0
 800341a:	761a      	strb	r2, [r3, #24]
 800341c:	bc30      	pop	{r4, r5}
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00
 8003424:	e000ecfc 	.word	0xe000ecfc

08003428 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003428:	2800      	cmp	r0, #0
 800342a:	db07      	blt.n	800343c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342c:	f000 011f 	and.w	r1, r0, #31
 8003430:	2301      	movs	r3, #1
 8003432:	0940      	lsrs	r0, r0, #5
 8003434:	4a02      	ldr	r2, [pc, #8]	; (8003440 <HAL_NVIC_EnableIRQ+0x18>)
 8003436:	408b      	lsls	r3, r1
 8003438:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003444:	3801      	subs	r0, #1
 8003446:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800344a:	d20e      	bcs.n	800346a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003450:	4c08      	ldr	r4, [pc, #32]	; (8003474 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003452:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	20f0      	movs	r0, #240	; 0xf0
 8003456:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003468:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2001      	movs	r0, #1
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e010 	.word	0xe000e010
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <HAL_SYSTICK_IRQHandler>:
{
 800347c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800347e:	f7ff fffb 	bl	8003478 <HAL_SYSTICK_Callback>
}
 8003482:	bd08      	pop	{r3, pc}

08003484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003488:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800348c:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 800366c <HAL_GPIO_Init+0x1e8>
{
 8003490:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003492:	2400      	movs	r4, #0
 8003494:	e003      	b.n	800349e <HAL_GPIO_Init+0x1a>
 8003496:	3401      	adds	r4, #1
 8003498:	2c10      	cmp	r4, #16
 800349a:	f000 8086 	beq.w	80035aa <HAL_GPIO_Init+0x126>
    ioposition = 0x01U << position;
 800349e:	2301      	movs	r3, #1
 80034a0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a2:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d1f5      	bne.n	8003496 <HAL_GPIO_Init+0x12>
 80034aa:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ae:	f026 0910 	bic.w	r9, r6, #16
 80034b2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80034b6:	2303      	movs	r3, #3
 80034b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80034bc:	fa03 f30c 	lsl.w	r3, r3, ip
 80034c0:	2f01      	cmp	r7, #1
 80034c2:	ea6f 0303 	mvn.w	r3, r3
 80034c6:	fa05 f50c 	lsl.w	r5, r5, ip
 80034ca:	d971      	bls.n	80035b0 <HAL_GPIO_Init+0x12c>
      temp = GPIOx->PUPDR;
 80034cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80034d2:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 80034d4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d6:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034dc:	fa05 f30c 	lsl.w	r3, r5, ip
 80034e0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80034e2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e4:	00f3      	lsls	r3, r6, #3
 80034e6:	d5d6      	bpl.n	8003496 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e8:	4d59      	ldr	r5, [pc, #356]	; (8003650 <HAL_GPIO_Init+0x1cc>)
 80034ea:	2300      	movs	r3, #0
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f4:	646b      	str	r3, [r5, #68]	; 0x44
 80034f6:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 80034f8:	f024 0303 	bic.w	r3, r4, #3
 80034fc:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8003500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003504:	9501      	str	r5, [sp, #4]
 8003506:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800350a:	f004 0503 	and.w	r5, r4, #3
 800350e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	4d50      	ldr	r5, [pc, #320]	; (8003654 <HAL_GPIO_Init+0x1d0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003514:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003516:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800351a:	270f      	movs	r7, #15
 800351c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003520:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003522:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003526:	d019      	beq.n	800355c <HAL_GPIO_Init+0xd8>
 8003528:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800352c:	42a8      	cmp	r0, r5
 800352e:	d070      	beq.n	8003612 <HAL_GPIO_Init+0x18e>
 8003530:	4d49      	ldr	r5, [pc, #292]	; (8003658 <HAL_GPIO_Init+0x1d4>)
 8003532:	42a8      	cmp	r0, r5
 8003534:	d073      	beq.n	800361e <HAL_GPIO_Init+0x19a>
 8003536:	4d49      	ldr	r5, [pc, #292]	; (800365c <HAL_GPIO_Init+0x1d8>)
 8003538:	42a8      	cmp	r0, r5
 800353a:	d076      	beq.n	800362a <HAL_GPIO_Init+0x1a6>
 800353c:	4d48      	ldr	r5, [pc, #288]	; (8003660 <HAL_GPIO_Init+0x1dc>)
 800353e:	42a8      	cmp	r0, r5
 8003540:	d079      	beq.n	8003636 <HAL_GPIO_Init+0x1b2>
 8003542:	4d48      	ldr	r5, [pc, #288]	; (8003664 <HAL_GPIO_Init+0x1e0>)
 8003544:	42a8      	cmp	r0, r5
 8003546:	d07c      	beq.n	8003642 <HAL_GPIO_Init+0x1be>
 8003548:	4d47      	ldr	r5, [pc, #284]	; (8003668 <HAL_GPIO_Init+0x1e4>)
 800354a:	42a8      	cmp	r0, r5
 800354c:	bf0c      	ite	eq
 800354e:	f04f 0c06 	moveq.w	ip, #6
 8003552:	f04f 0c07 	movne.w	ip, #7
 8003556:	fa0c f509 	lsl.w	r5, ip, r9
 800355a:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800355c:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800355e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8003562:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003564:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8003566:	bf54      	ite	pl
 8003568:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800356a:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800356c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003570:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003574:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8003576:	bf54      	ite	pl
 8003578:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800357a:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800357c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003580:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003584:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8003586:	bf54      	ite	pl
 8003588:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800358a:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800358c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003590:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003594:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003596:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800359a:	bf54      	ite	pl
 800359c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800359e:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a0:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80035a2:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a6:	f47f af7a 	bne.w	800349e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 80035aa:	b003      	add	sp, #12
 80035ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80035b0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b2:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b6:	68cf      	ldr	r7, [r1, #12]
 80035b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80035bc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80035c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80035c2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035c6:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ca:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035ce:	40a7      	lsls	r7, r4
 80035d0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80035d4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80035d6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d8:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035da:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035dc:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 80035e0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e2:	f47f af77 	bne.w	80034d4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 80035e6:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80035ea:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ee:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 80035f2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f6:	00bf      	lsls	r7, r7, #2
 80035f8:	f04f 0b0f 	mov.w	fp, #15
 80035fc:	fa0b fb07 	lsl.w	fp, fp, r7
 8003600:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003604:	690d      	ldr	r5, [r1, #16]
 8003606:	40bd      	lsls	r5, r7
 8003608:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800360c:	f8c9 5020 	str.w	r5, [r9, #32]
 8003610:	e760      	b.n	80034d4 <HAL_GPIO_Init+0x50>
 8003612:	f04f 0c01 	mov.w	ip, #1
 8003616:	fa0c f509 	lsl.w	r5, ip, r9
 800361a:	432f      	orrs	r7, r5
 800361c:	e79e      	b.n	800355c <HAL_GPIO_Init+0xd8>
 800361e:	f04f 0c02 	mov.w	ip, #2
 8003622:	fa0c f509 	lsl.w	r5, ip, r9
 8003626:	432f      	orrs	r7, r5
 8003628:	e798      	b.n	800355c <HAL_GPIO_Init+0xd8>
 800362a:	f04f 0c03 	mov.w	ip, #3
 800362e:	fa0c f509 	lsl.w	r5, ip, r9
 8003632:	432f      	orrs	r7, r5
 8003634:	e792      	b.n	800355c <HAL_GPIO_Init+0xd8>
 8003636:	f04f 0c04 	mov.w	ip, #4
 800363a:	fa0c f509 	lsl.w	r5, ip, r9
 800363e:	432f      	orrs	r7, r5
 8003640:	e78c      	b.n	800355c <HAL_GPIO_Init+0xd8>
 8003642:	f04f 0c05 	mov.w	ip, #5
 8003646:	fa0c f509 	lsl.w	r5, ip, r9
 800364a:	432f      	orrs	r7, r5
 800364c:	e786      	b.n	800355c <HAL_GPIO_Init+0xd8>
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020800 	.word	0x40020800
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40021000 	.word	0x40021000
 8003664:	40021400 	.word	0x40021400
 8003668:	40021800 	.word	0x40021800
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003670:	b530      	push	{r4, r5, lr}
 8003672:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003676:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003678:	4c1a      	ldr	r4, [pc, #104]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	2200      	movs	r2, #0
 800367c:	9201      	str	r2, [sp, #4]
 800367e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003680:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800368e:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003692:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8003694:	f7ff fc2c 	bl	8002ef0 <HAL_GetTick>
 8003698:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800369a:	e005      	b.n	80036a8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800369c:	f7ff fc28 	bl	8002ef0 <HAL_GetTick>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036a6:	d816      	bhi.n	80036d6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	03da      	lsls	r2, r3, #15
 80036ac:	d5f6      	bpl.n	800369c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036b0:	4c0c      	ldr	r4, [pc, #48]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80036b6:	f7ff fc1b 	bl	8002ef0 <HAL_GetTick>
 80036ba:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036bc:	e005      	b.n	80036ca <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036be:	f7ff fc17 	bl	8002ef0 <HAL_GetTick>
 80036c2:	1b40      	subs	r0, r0, r5
 80036c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036c8:	d805      	bhi.n	80036d6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	039b      	lsls	r3, r3, #14
 80036ce:	d5f6      	bpl.n	80036be <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80036d0:	2000      	movs	r0, #0
}
 80036d2:	b003      	add	sp, #12
 80036d4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80036d6:	2003      	movs	r0, #3
}
 80036d8:	b003      	add	sp, #12
 80036da:	bd30      	pop	{r4, r5, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	420e0040 	.word	0x420e0040
 80036e4:	40007000 	.word	0x40007000
 80036e8:	420e0044 	.word	0x420e0044

080036ec <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ec:	b160      	cbz	r0, 8003708 <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ee:	4a49      	ldr	r2, [pc, #292]	; (8003814 <HAL_RCC_ClockConfig+0x128>)
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	428b      	cmp	r3, r1
 80036f8:	d208      	bcs.n	800370c <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	b2cb      	uxtb	r3, r1
 80036fc:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	428b      	cmp	r3, r1
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003708:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 800370a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	6803      	ldr	r3, [r0, #0]
{
 800370e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003712:	079d      	lsls	r5, r3, #30
 8003714:	d514      	bpl.n	8003740 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003716:	075c      	lsls	r4, r3, #29
 8003718:	d504      	bpl.n	8003724 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800371a:	4c3f      	ldr	r4, [pc, #252]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 800371c:	68a2      	ldr	r2, [r4, #8]
 800371e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003722:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003724:	071a      	lsls	r2, r3, #28
 8003726:	d504      	bpl.n	8003732 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003728:	4c3b      	ldr	r4, [pc, #236]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 800372a:	68a2      	ldr	r2, [r4, #8]
 800372c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003730:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003732:	4c39      	ldr	r4, [pc, #228]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 8003734:	6885      	ldr	r5, [r0, #8]
 8003736:	68a2      	ldr	r2, [r4, #8]
 8003738:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800373c:	432a      	orrs	r2, r5
 800373e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003740:	07df      	lsls	r7, r3, #31
 8003742:	4604      	mov	r4, r0
 8003744:	460d      	mov	r5, r1
 8003746:	d522      	bpl.n	800378e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003748:	6842      	ldr	r2, [r0, #4]
 800374a:	2a01      	cmp	r2, #1
 800374c:	d057      	beq.n	80037fe <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	1e93      	subs	r3, r2, #2
 8003750:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 8003754:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	d959      	bls.n	800380c <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003758:	0799      	lsls	r1, r3, #30
 800375a:	d525      	bpl.n	80037a8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375c:	4e2e      	ldr	r6, [pc, #184]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 800375e:	68b3      	ldr	r3, [r6, #8]
 8003760:	f023 0303 	bic.w	r3, r3, #3
 8003764:	4313      	orrs	r3, r2
 8003766:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003768:	f7ff fbc2 	bl	8002ef0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003770:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e005      	b.n	8003780 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7ff fbbc 	bl	8002ef0 <HAL_GetTick>
 8003778:	eba0 0008 	sub.w	r0, r0, r8
 800377c:	42b8      	cmp	r0, r7
 800377e:	d843      	bhi.n	8003808 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003780:	68b3      	ldr	r3, [r6, #8]
 8003782:	6862      	ldr	r2, [r4, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800378c:	d1f2      	bne.n	8003774 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_RCC_ClockConfig+0x128>)
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	42ab      	cmp	r3, r5
 8003798:	d909      	bls.n	80037ae <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	b2eb      	uxtb	r3, r5
 800379c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	42ab      	cmp	r3, r5
 80037a6:	d002      	beq.n	80037ae <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80037a8:	2001      	movs	r0, #1
}
 80037aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	075a      	lsls	r2, r3, #29
 80037b2:	d506      	bpl.n	80037c2 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4918      	ldr	r1, [pc, #96]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 80037b6:	68e0      	ldr	r0, [r4, #12]
 80037b8:	688a      	ldr	r2, [r1, #8]
 80037ba:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80037be:	4302      	orrs	r2, r0
 80037c0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	071b      	lsls	r3, r3, #28
 80037c4:	d412      	bmi.n	80037ec <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f855 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 80037cc:	4c13      	ldr	r4, [pc, #76]	; (800381c <HAL_RCC_ClockConfig+0x130>)
 80037ce:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80037d0:	4913      	ldr	r1, [pc, #76]	; (8003820 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_RCC_ClockConfig+0x138>)
 80037d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037d8:	5ce3      	ldrb	r3, [r4, r3]
 80037da:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80037de:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80037e2:	f7ff fb3b 	bl	8002e5c <HAL_InitTick>
  return HAL_OK;
 80037e6:	2000      	movs	r0, #0
}
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 80037ee:	6921      	ldr	r1, [r4, #16]
 80037f0:	6893      	ldr	r3, [r2, #8]
 80037f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80037f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	e7e3      	b.n	80037c6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_ClockConfig+0x12c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	039e      	lsls	r6, r3, #14
 8003804:	d4aa      	bmi.n	800375c <HAL_RCC_ClockConfig+0x70>
 8003806:	e7cf      	b.n	80037a8 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003808:	2003      	movs	r0, #3
 800380a:	e7ed      	b.n	80037e8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	0198      	lsls	r0, r3, #6
 800380e:	d4a5      	bmi.n	800375c <HAL_RCC_ClockConfig+0x70>
 8003810:	e7ca      	b.n	80037a8 <HAL_RCC_ClockConfig+0xbc>
 8003812:	bf00      	nop
 8003814:	40023c00 	.word	0x40023c00
 8003818:	40023800 	.word	0x40023800
 800381c:	080062e4 	.word	0x080062e4
 8003820:	20000694 	.word	0x20000694
 8003824:	2000068c 	.word	0x2000068c

08003828 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000068c 	.word	0x2000068c

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003838:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800383a:	4905      	ldr	r1, [pc, #20]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800383c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003840:	6808      	ldr	r0, [r1, #0]
 8003842:	5cd3      	ldrb	r3, [r2, r3]
}
 8003844:	40d8      	lsrs	r0, r3
 8003846:	4770      	bx	lr
 8003848:	40023800 	.word	0x40023800
 800384c:	080062f4 	.word	0x080062f4
 8003850:	2000068c 	.word	0x2000068c

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003856:	4a05      	ldr	r2, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003858:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800385a:	4905      	ldr	r1, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800385c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003860:	6808      	ldr	r0, [r1, #0]
 8003862:	5cd3      	ldrb	r3, [r2, r3]
}
 8003864:	40d8      	lsrs	r0, r3
 8003866:	4770      	bx	lr
 8003868:	40023800 	.word	0x40023800
 800386c:	080062f4 	.word	0x080062f4
 8003870:	2000068c 	.word	0x2000068c

08003874 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003874:	4928      	ldr	r1, [pc, #160]	; (8003918 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8003876:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003878:	688b      	ldr	r3, [r1, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b08      	cmp	r3, #8
 8003880:	d007      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x1e>
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d01d      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003886:	4a25      	ldr	r2, [pc, #148]	; (800391c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003888:	4825      	ldr	r0, [pc, #148]	; (8003920 <HAL_RCC_GetSysClockFreq+0xac>)
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf18      	it	ne
 800388e:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003890:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003892:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003894:	684b      	ldr	r3, [r1, #4]
 8003896:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389e:	d130      	bne.n	8003902 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a0:	6849      	ldr	r1, [r1, #4]
 80038a2:	481e      	ldr	r0, [pc, #120]	; (800391c <HAL_RCC_GetSysClockFreq+0xa8>)
 80038a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80038a8:	fba1 0100 	umull	r0, r1, r1, r0
 80038ac:	f7fc fcaa 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80038b8:	3301      	adds	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80038bc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80038c0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c4:	684b      	ldr	r3, [r1, #4]
 80038c6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ce:	d10e      	bne.n	80038ee <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d0:	6849      	ldr	r1, [r1, #4]
 80038d2:	4812      	ldr	r0, [pc, #72]	; (800391c <HAL_RCC_GetSysClockFreq+0xa8>)
 80038d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80038d8:	fba1 0100 	umull	r0, r1, r1, r0
 80038dc:	f7fc fc92 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80038e8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80038ec:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ee:	684b      	ldr	r3, [r1, #4]
 80038f0:	480b      	ldr	r0, [pc, #44]	; (8003920 <HAL_RCC_GetSysClockFreq+0xac>)
 80038f2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80038f6:	fba3 0100 	umull	r0, r1, r3, r0
 80038fa:	2300      	movs	r3, #0
 80038fc:	f7fc fc82 	bl	8000204 <__aeabi_uldivmod>
 8003900:	e7ee      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	684b      	ldr	r3, [r1, #4]
 8003904:	4806      	ldr	r0, [pc, #24]	; (8003920 <HAL_RCC_GetSysClockFreq+0xac>)
 8003906:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800390a:	fba3 0100 	umull	r0, r1, r3, r0
 800390e:	2300      	movs	r3, #0
 8003910:	f7fc fc78 	bl	8000204 <__aeabi_uldivmod>
 8003914:	e7cc      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x3c>
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	07da      	lsls	r2, r3, #31
{
 800392c:	b082      	sub	sp, #8
 800392e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003930:	d536      	bpl.n	80039a0 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003932:	49ae      	ldr	r1, [pc, #696]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	f002 020c 	and.w	r2, r2, #12
 800393a:	2a04      	cmp	r2, #4
 800393c:	f000 80d2 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x1c0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003940:	688a      	ldr	r2, [r1, #8]
 8003942:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003946:	2a08      	cmp	r2, #8
 8003948:	f000 80c8 	beq.w	8003adc <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394c:	49a7      	ldr	r1, [pc, #668]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 800394e:	688a      	ldr	r2, [r1, #8]
 8003950:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003954:	2a0c      	cmp	r2, #12
 8003956:	f000 8104 	beq.w	8003b62 <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395a:	6863      	ldr	r3, [r4, #4]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	f000 8104 	beq.w	8003b6c <HAL_RCC_OscConfig+0x248>
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	f000 8160 	beq.w	8003c2c <HAL_RCC_OscConfig+0x308>
 800396c:	4d9f      	ldr	r5, [pc, #636]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 800396e:	682a      	ldr	r2, [r5, #0]
 8003970:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003974:	602a      	str	r2, [r5, #0]
 8003976:	682a      	ldr	r2, [r5, #0]
 8003978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800397c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 80f9 	bne.w	8003b76 <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7ff fab4 	bl	8002ef0 <HAL_GetTick>
 8003988:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e005      	b.n	8003998 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7ff fab0 	bl	8002ef0 <HAL_GetTick>
 8003990:	1b80      	subs	r0, r0, r6
 8003992:	2864      	cmp	r0, #100	; 0x64
 8003994:	f200 810d 	bhi.w	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	0399      	lsls	r1, r3, #14
 800399c:	d4f6      	bmi.n	800398c <HAL_RCC_OscConfig+0x68>
 800399e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a0:	079a      	lsls	r2, r3, #30
 80039a2:	d52f      	bpl.n	8003a04 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039a4:	4a91      	ldr	r2, [pc, #580]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 80039a6:	6891      	ldr	r1, [r2, #8]
 80039a8:	f011 0f0c 	tst.w	r1, #12
 80039ac:	f000 80ab 	beq.w	8003b06 <HAL_RCC_OscConfig+0x1e2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039b0:	6891      	ldr	r1, [r2, #8]
 80039b2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039b6:	2908      	cmp	r1, #8
 80039b8:	f000 80a1 	beq.w	8003afe <HAL_RCC_OscConfig+0x1da>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039bc:	498b      	ldr	r1, [pc, #556]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 80039be:	688a      	ldr	r2, [r1, #8]
 80039c0:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039c4:	2a0c      	cmp	r2, #12
 80039c6:	f000 812c 	beq.w	8003c22 <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8117 	beq.w	8003c00 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d2:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4d85      	ldr	r5, [pc, #532]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039da:	f7ff fa89 	bl	8002ef0 <HAL_GetTick>
 80039de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e005      	b.n	80039ee <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7ff fa85 	bl	8002ef0 <HAL_GetTick>
 80039e6:	1b80      	subs	r0, r0, r6
 80039e8:	2802      	cmp	r0, #2
 80039ea:	f200 80e2 	bhi.w	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	0798      	lsls	r0, r3, #30
 80039f2:	d5f6      	bpl.n	80039e2 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	6922      	ldr	r2, [r4, #16]
 80039f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a00:	602b      	str	r3, [r5, #0]
 8003a02:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a04:	071a      	lsls	r2, r3, #28
 8003a06:	d515      	bpl.n	8003a34 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a08:	6963      	ldr	r3, [r4, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 808d 	beq.w	8003b2a <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_OscConfig+0x2d0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	4d76      	ldr	r5, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a18:	f7ff fa6a 	bl	8002ef0 <HAL_GetTick>
 8003a1c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	e005      	b.n	8003a2c <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a20:	f7ff fa66 	bl	8002ef0 <HAL_GetTick>
 8003a24:	1b80      	subs	r0, r0, r6
 8003a26:	2802      	cmp	r0, #2
 8003a28:	f200 80c3 	bhi.w	8003bb2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a2e:	079b      	lsls	r3, r3, #30
 8003a30:	d5f6      	bpl.n	8003a20 <HAL_RCC_OscConfig+0xfc>
 8003a32:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	0758      	lsls	r0, r3, #29
 8003a36:	d531      	bpl.n	8003a9c <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a38:	4a6c      	ldr	r2, [pc, #432]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003a3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a3c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003a40:	f000 8083 	beq.w	8003b4a <HAL_RCC_OscConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 8003a44:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	4d6c      	ldr	r5, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x2d4>)
 8003a48:	682a      	ldr	r2, [r5, #0]
 8003a4a:	05d1      	lsls	r1, r2, #23
 8003a4c:	f140 80a1 	bpl.w	8003b92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	68a3      	ldr	r3, [r4, #8]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	f000 80b1 	beq.w	8003bba <HAL_RCC_OscConfig+0x296>
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	f000 80f7 	beq.w	8003c4c <HAL_RCC_OscConfig+0x328>
 8003a5e:	4d63      	ldr	r5, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003a60:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	672a      	str	r2, [r5, #112]	; 0x70
 8003a68:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 80a7 	bne.w	8003bc4 <HAL_RCC_OscConfig+0x2a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7ff fa3b 	bl	8002ef0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a7e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a80:	e006      	b.n	8003a90 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7ff fa35 	bl	8002ef0 <HAL_GetTick>
 8003a86:	eba0 0008 	sub.w	r0, r0, r8
 8003a8a:	42b8      	cmp	r0, r7
 8003a8c:	f200 8091 	bhi.w	8003bb2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a92:	0798      	lsls	r0, r3, #30
 8003a94:	d4f5      	bmi.n	8003a82 <HAL_RCC_OscConfig+0x15e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	f040 80d2 	bne.w	8003c40 <HAL_RCC_OscConfig+0x31c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9c:	69a2      	ldr	r2, [r4, #24]
 8003a9e:	b1ca      	cbz	r2, 8003ad4 <HAL_RCC_OscConfig+0x1b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa0:	4d52      	ldr	r5, [pc, #328]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003aa2:	68a9      	ldr	r1, [r5, #8]
 8003aa4:	f001 010c 	and.w	r1, r1, #12
 8003aa8:	2908      	cmp	r1, #8
 8003aaa:	d024      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_RCC_OscConfig+0x2d8>)
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	f000 80d3 	beq.w	8003c60 <HAL_RCC_OscConfig+0x33c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7ff fa19 	bl	8002ef0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003ac0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e004      	b.n	8003ace <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7ff fa14 	bl	8002ef0 <HAL_GetTick>
 8003ac8:	1b40      	subs	r0, r0, r5
 8003aca:	2802      	cmp	r0, #2
 8003acc:	d871      	bhi.n	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	d4f7      	bmi.n	8003ac4 <HAL_RCC_OscConfig+0x1a0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003ad4:	2000      	movs	r0, #0
}
 8003ad6:	b002      	add	sp, #8
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003adc:	684a      	ldr	r2, [r1, #4]
 8003ade:	0257      	lsls	r7, r2, #9
 8003ae0:	f57f af34 	bpl.w	800394c <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	4a41      	ldr	r2, [pc, #260]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	0395      	lsls	r5, r2, #14
 8003aea:	f57f af59 	bpl.w	80039a0 <HAL_RCC_OscConfig+0x7c>
 8003aee:	6862      	ldr	r2, [r4, #4]
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	f47f af55 	bne.w	80039a0 <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 8003af6:	2001      	movs	r0, #1
}
 8003af8:	b002      	add	sp, #8
 8003afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003afe:	6852      	ldr	r2, [r2, #4]
 8003b00:	0257      	lsls	r7, r2, #9
 8003b02:	f53f af5b 	bmi.w	80039bc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4a39      	ldr	r2, [pc, #228]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	0795      	lsls	r5, r2, #30
 8003b0c:	d502      	bpl.n	8003b14 <HAL_RCC_OscConfig+0x1f0>
 8003b0e:	68e2      	ldr	r2, [r4, #12]
 8003b10:	2a01      	cmp	r2, #1
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4935      	ldr	r1, [pc, #212]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003b16:	6920      	ldr	r0, [r4, #16]
 8003b18:	680a      	ldr	r2, [r1, #0]
 8003b1a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003b1e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003b22:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b24:	071a      	lsls	r2, r3, #28
 8003b26:	d585      	bpl.n	8003a34 <HAL_RCC_OscConfig+0x110>
 8003b28:	e76e      	b.n	8003a08 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8003b2a:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	4d2f      	ldr	r5, [pc, #188]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003b2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b30:	f7ff f9de 	bl	8002ef0 <HAL_GetTick>
 8003b34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b36:	e004      	b.n	8003b42 <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b38:	f7ff f9da 	bl	8002ef0 <HAL_GetTick>
 8003b3c:	1b80      	subs	r0, r0, r6
 8003b3e:	2802      	cmp	r0, #2
 8003b40:	d837      	bhi.n	8003bb2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003b44:	079f      	lsls	r7, r3, #30
 8003b46:	d4f7      	bmi.n	8003b38 <HAL_RCC_OscConfig+0x214>
 8003b48:	e773      	b.n	8003a32 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6413      	str	r3, [r2, #64]	; 0x40
 8003b54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b5e:	2601      	movs	r6, #1
 8003b60:	e771      	b.n	8003a46 <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	684a      	ldr	r2, [r1, #4]
 8003b64:	0256      	lsls	r6, r2, #9
 8003b66:	f57f aef8 	bpl.w	800395a <HAL_RCC_OscConfig+0x36>
 8003b6a:	e7bb      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b76:	f7ff f9bb 	bl	8002ef0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4d1c      	ldr	r5, [pc, #112]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003b7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	e004      	b.n	8003b8a <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7ff f9b6 	bl	8002ef0 <HAL_GetTick>
 8003b84:	1b80      	subs	r0, r0, r6
 8003b86:	2864      	cmp	r0, #100	; 0x64
 8003b88:	d813      	bhi.n	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	682b      	ldr	r3, [r5, #0]
 8003b8c:	0398      	lsls	r0, r3, #14
 8003b8e:	d5f7      	bpl.n	8003b80 <HAL_RCC_OscConfig+0x25c>
 8003b90:	e705      	b.n	800399e <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	682a      	ldr	r2, [r5, #0]
 8003b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b98:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8003b9a:	f7ff f9a9 	bl	8002ef0 <HAL_GetTick>
 8003b9e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	05da      	lsls	r2, r3, #23
 8003ba4:	f53f af54 	bmi.w	8003a50 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba8:	f7ff f9a2 	bl	8002ef0 <HAL_GetTick>
 8003bac:	1bc0      	subs	r0, r0, r7
 8003bae:	2802      	cmp	r0, #2
 8003bb0:	d9f6      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
}
 8003bb4:	b002      	add	sp, #8
 8003bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bba:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
 8003bbc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003bc4:	f7ff f994 	bl	8002ef0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	4d08      	ldr	r5, [pc, #32]	; (8003bec <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8003bca:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bcc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e005      	b.n	8003bde <HAL_RCC_OscConfig+0x2ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7ff f98d 	bl	8002ef0 <HAL_GetTick>
 8003bd6:	eba0 0008 	sub.w	r0, r0, r8
 8003bda:	42b8      	cmp	r0, r7
 8003bdc:	d8e9      	bhi.n	8003bb2 <HAL_RCC_OscConfig+0x28e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003be0:	079b      	lsls	r3, r3, #30
 8003be2:	d5f6      	bpl.n	8003bd2 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 8003be4:	2e00      	cmp	r6, #0
 8003be6:	f43f af59 	beq.w	8003a9c <HAL_RCC_OscConfig+0x178>
 8003bea:	e029      	b.n	8003c40 <HAL_RCC_OscConfig+0x31c>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	42470000 	.word	0x42470000
 8003bf4:	42470e80 	.word	0x42470e80
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	42470060 	.word	0x42470060
        __HAL_RCC_HSI_DISABLE();
 8003c00:	4a2f      	ldr	r2, [pc, #188]	; (8003cc0 <HAL_RCC_OscConfig+0x39c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	4d30      	ldr	r5, [pc, #192]	; (8003cc4 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_HSI_DISABLE();
 8003c04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c06:	f7ff f973 	bl	8002ef0 <HAL_GetTick>
 8003c0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0c:	e004      	b.n	8003c18 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0e:	f7ff f96f 	bl	8002ef0 <HAL_GetTick>
 8003c12:	1b80      	subs	r0, r0, r6
 8003c14:	2802      	cmp	r0, #2
 8003c16:	d8cc      	bhi.n	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	0799      	lsls	r1, r3, #30
 8003c1c:	d4f7      	bmi.n	8003c0e <HAL_RCC_OscConfig+0x2ea>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	e6f0      	b.n	8003a04 <HAL_RCC_OscConfig+0xe0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c22:	684a      	ldr	r2, [r1, #4]
 8003c24:	0256      	lsls	r6, r2, #9
 8003c26:	f53f aed0 	bmi.w	80039ca <HAL_RCC_OscConfig+0xa6>
 8003c2a:	e76c      	b.n	8003b06 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x3a0>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e79a      	b.n	8003b76 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_RCC_OscConfig+0x3a0>)
 8003c42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	e727      	b.n	8003a9c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCC_OscConfig+0x3a0>)
 8003c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c50:	f042 0204 	orr.w	r2, r2, #4
 8003c54:	671a      	str	r2, [r3, #112]	; 0x70
 8003c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c5e:	e7b1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 8003c60:	f7ff f946 	bl	8002ef0 <HAL_GetTick>
 8003c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	e004      	b.n	8003c72 <HAL_RCC_OscConfig+0x34e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c68:	f7ff f942 	bl	8002ef0 <HAL_GetTick>
 8003c6c:	1b80      	subs	r0, r0, r6
 8003c6e:	2802      	cmp	r0, #2
 8003c70:	d89f      	bhi.n	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	0199      	lsls	r1, r3, #6
 8003c76:	d4f7      	bmi.n	8003c68 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c78:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003c7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c82:	4313      	orrs	r3, r2
 8003c84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4c0f      	ldr	r4, [pc, #60]	; (8003cc4 <HAL_RCC_OscConfig+0x3a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c88:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003c8c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c90:	0852      	lsrs	r2, r2, #1
 8003c92:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003c96:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003c98:	490b      	ldr	r1, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x3a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003c9e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ca2:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003ca4:	f7ff f924 	bl	8002ef0 <HAL_GetTick>
 8003ca8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	e005      	b.n	8003cb8 <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7ff f920 	bl	8002ef0 <HAL_GetTick>
 8003cb0:	1b40      	subs	r0, r0, r5
 8003cb2:	2802      	cmp	r0, #2
 8003cb4:	f63f af7d 	bhi.w	8003bb2 <HAL_RCC_OscConfig+0x28e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	019a      	lsls	r2, r3, #6
 8003cbc:	d5f6      	bpl.n	8003cac <HAL_RCC_OscConfig+0x388>
 8003cbe:	e709      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1b0>
 8003cc0:	42470000 	.word	0x42470000
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470060 	.word	0x42470060

08003ccc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d05c      	beq.n	8003d8a <HAL_TIM_Base_Init+0xbe>
{
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cdc:	b3bb      	cbz	r3, 8003d4e <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cde:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce0:	4e3a      	ldr	r6, [pc, #232]	; (8003dcc <HAL_TIM_Base_Init+0x100>)
 8003ce2:	69a5      	ldr	r5, [r4, #24]
 8003ce4:	68e0      	ldr	r0, [r4, #12]
 8003ce6:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cee:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8003cf0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf2:	d04c      	beq.n	8003d8e <HAL_TIM_Base_Init+0xc2>
 8003cf4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003cf8:	d058      	beq.n	8003dac <HAL_TIM_Base_Init+0xe0>
 8003cfa:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003cfe:	42b2      	cmp	r2, r6
 8003d00:	d02a      	beq.n	8003d58 <HAL_TIM_Base_Init+0x8c>
 8003d02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d06:	42b2      	cmp	r2, r6
 8003d08:	d026      	beq.n	8003d58 <HAL_TIM_Base_Init+0x8c>
 8003d0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d0e:	42b2      	cmp	r2, r6
 8003d10:	d022      	beq.n	8003d58 <HAL_TIM_Base_Init+0x8c>
 8003d12:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003d16:	42b2      	cmp	r2, r6
 8003d18:	d01e      	beq.n	8003d58 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003d1e:	42b2      	cmp	r2, r6
 8003d20:	d013      	beq.n	8003d4a <HAL_TIM_Base_Init+0x7e>
 8003d22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d26:	42b2      	cmp	r2, r6
 8003d28:	d00f      	beq.n	8003d4a <HAL_TIM_Base_Init+0x7e>
 8003d2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d2e:	42b2      	cmp	r2, r6
 8003d30:	d00b      	beq.n	8003d4a <HAL_TIM_Base_Init+0x7e>
 8003d32:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8003d36:	42b2      	cmp	r2, r6
 8003d38:	d007      	beq.n	8003d4a <HAL_TIM_Base_Init+0x7e>
 8003d3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d3e:	42b2      	cmp	r2, r6
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_Base_Init+0x7e>
 8003d42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003d46:	42b2      	cmp	r2, r6
 8003d48:	d138      	bne.n	8003dbc <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	6926      	ldr	r6, [r4, #16]
 8003d4c:	e033      	b.n	8003db6 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d52:	f7fe f989 	bl	8002068 <HAL_TIM_Base_MspInit>
 8003d56:	e7c2      	b.n	8003cde <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003d58:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5a:	4f1d      	ldr	r7, [pc, #116]	; (8003dd0 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d60:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d62:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d68:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d70:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8003d72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d74:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d76:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7a:	6963      	ldr	r3, [r4, #20]
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003d82:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003d8a:	2001      	movs	r0, #1
}
 8003d8c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003d8e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d90:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d96:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003da4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003da8:	6291      	str	r1, [r2, #40]	; 0x28
 8003daa:	e7e6      	b.n	8003d7a <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8003dac:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003db4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dba:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003dc2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003dc6:	6291      	str	r1, [r2, #40]	; 0x28
 8003dc8:	e7d9      	b.n	8003d7e <HAL_TIM_Base_Init+0xb2>
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <HAL_TIM_PWM_MspInit>:
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop

08003dd8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d05c      	beq.n	8003e96 <HAL_TIM_PWM_Init+0xbe>
{
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003de2:	4604      	mov	r4, r0
 8003de4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003de8:	b3bb      	cbz	r3, 8003e5a <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dea:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dec:	4e3a      	ldr	r6, [pc, #232]	; (8003ed8 <HAL_TIM_PWM_Init+0x100>)
 8003dee:	69a5      	ldr	r5, [r4, #24]
 8003df0:	68e0      	ldr	r0, [r4, #12]
 8003df2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfa:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8003dfc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfe:	d04c      	beq.n	8003e9a <HAL_TIM_PWM_Init+0xc2>
 8003e00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e04:	d058      	beq.n	8003eb8 <HAL_TIM_PWM_Init+0xe0>
 8003e06:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003e0a:	42b2      	cmp	r2, r6
 8003e0c:	d02a      	beq.n	8003e64 <HAL_TIM_PWM_Init+0x8c>
 8003e0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e12:	42b2      	cmp	r2, r6
 8003e14:	d026      	beq.n	8003e64 <HAL_TIM_PWM_Init+0x8c>
 8003e16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e1a:	42b2      	cmp	r2, r6
 8003e1c:	d022      	beq.n	8003e64 <HAL_TIM_PWM_Init+0x8c>
 8003e1e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003e22:	42b2      	cmp	r2, r6
 8003e24:	d01e      	beq.n	8003e64 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e26:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003e2a:	42b2      	cmp	r2, r6
 8003e2c:	d013      	beq.n	8003e56 <HAL_TIM_PWM_Init+0x7e>
 8003e2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e32:	42b2      	cmp	r2, r6
 8003e34:	d00f      	beq.n	8003e56 <HAL_TIM_PWM_Init+0x7e>
 8003e36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e3a:	42b2      	cmp	r2, r6
 8003e3c:	d00b      	beq.n	8003e56 <HAL_TIM_PWM_Init+0x7e>
 8003e3e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8003e42:	42b2      	cmp	r2, r6
 8003e44:	d007      	beq.n	8003e56 <HAL_TIM_PWM_Init+0x7e>
 8003e46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e4a:	42b2      	cmp	r2, r6
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_PWM_Init+0x7e>
 8003e4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e52:	42b2      	cmp	r2, r6
 8003e54:	d138      	bne.n	8003ec8 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e56:	6926      	ldr	r6, [r4, #16]
 8003e58:	e033      	b.n	8003ec2 <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e5e:	f7ff ffb9 	bl	8003dd4 <HAL_TIM_PWM_MspInit>
 8003e62:	e7c2      	b.n	8003dea <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003e64:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e66:	4f1d      	ldr	r7, [pc, #116]	; (8003edc <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e6c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e6e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e74:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8003e7e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e80:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e82:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8003e86:	6963      	ldr	r3, [r4, #20]
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003e8e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003e96:	2001      	movs	r0, #1
}
 8003e98:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003e9a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ea2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eae:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003eb0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	6291      	str	r1, [r2, #40]	; 0x28
 8003eb6:	e7e6      	b.n	8003e86 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eba:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ecc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003ece:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ed2:	6291      	str	r1, [r2, #40]	; 0x28
 8003ed4:	e7d9      	b.n	8003e8a <HAL_TIM_PWM_Init+0xb2>
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40010400 	.word	0x40010400

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003ee0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	f000 80cc 	beq.w	8004082 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 8003eea:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003eee:	2401      	movs	r4, #1
 8003ef0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003ef8:	2a0c      	cmp	r2, #12
 8003efa:	d835      	bhi.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
 8003efc:	e8df f002 	tbb	[pc, r2]
 8003f00:	34343407 	.word	0x34343407
 8003f04:	3434346a 	.word	0x3434346a
 8003f08:	34343496 	.word	0x34343496
 8003f0c:	3d          	.byte	0x3d
 8003f0d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f0e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f10:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f14:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003f16:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f18:	4e74      	ldr	r6, [pc, #464]	; (80040ec <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1a:	f025 0501 	bic.w	r5, r5, #1
 8003f1e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f20:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f22:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f24:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003f26:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f2a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f2e:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8003f30:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8003f34:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f38:	f000 80bb 	beq.w	80040b2 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003f3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f40:	42b3      	cmp	r3, r6
 8003f42:	f000 80b6 	beq.w	80040b2 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f46:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003f48:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f4a:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003f4c:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f50:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f52:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f54:	f044 0408 	orr.w	r4, r4, #8
 8003f58:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f5a:	6999      	ldr	r1, [r3, #24]
 8003f5c:	f021 0104 	bic.w	r1, r1, #4
 8003f60:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	432a      	orrs	r2, r5
 8003f66:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003f68:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003f74:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003f76:	4618      	mov	r0, r3
}
 8003f78:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f7a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f7c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f80:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f82:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	4e59      	ldr	r6, [pc, #356]	; (80040ec <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f86:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003f8a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f8e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f90:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f96:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9a:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f9c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa0:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	d06f      	beq.n	8004086 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8003fa6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003faa:	42b3      	cmp	r3, r6
 8003fac:	d06b      	beq.n	8004086 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fae:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003fb0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fb2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb4:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fb8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fba:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fbc:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003fc0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fc2:	69d9      	ldr	r1, [r3, #28]
 8003fc4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003fc8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003fd0:	61da      	str	r2, [r3, #28]
      break;
 8003fd2:	e7c9      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fda:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fdc:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80040ec <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe0:	f025 0510 	bic.w	r5, r5, #16
 8003fe4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003fe8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fea:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003fec:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ff0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ff4:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ffa:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ffe:	d065      	beq.n	80040cc <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8004000:	4f3b      	ldr	r7, [pc, #236]	; (80040f0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004002:	42bb      	cmp	r3, r7
 8004004:	d062      	beq.n	80040cc <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 8004006:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004008:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800400a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800400c:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800400e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004010:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004012:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004014:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004018:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800401a:	6999      	ldr	r1, [r3, #24]
 800401c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004020:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004028:	619a      	str	r2, [r3, #24]
      break;
 800402a:	e79d      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004030:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004032:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004034:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80040ec <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004038:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800403c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800403e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004040:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004042:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004048:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800404c:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004052:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004056:	d01c      	beq.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8004058:	4f25      	ldr	r7, [pc, #148]	; (80040f0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800405a:	42bb      	cmp	r3, r7
 800405c:	d019      	beq.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 800405e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004060:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004062:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004064:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004066:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004068:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800406a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406c:	f044 0408 	orr.w	r4, r4, #8
 8004070:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004072:	69d9      	ldr	r1, [r3, #28]
 8004074:	f021 0104 	bic.w	r1, r1, #4
 8004078:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	432a      	orrs	r2, r5
 800407e:	61da      	str	r2, [r3, #28]
      break;
 8004080:	e772      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 8004082:	2002      	movs	r0, #2
}
 8004084:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004086:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004088:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800408c:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004090:	e78d      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004092:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004098:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a0:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a4:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ac:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 80040b0:	e7d5      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 80040b2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b4:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80040b8:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ba:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040be:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c4:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c8:	4335      	orrs	r5, r6
 80040ca:	e73c      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040cc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040d2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040da:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040de:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e6:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80040ea:	e78c      	b.n	8004006 <HAL_TIM_PWM_ConfigChannel+0x126>
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010400 	.word	0x40010400

080040f4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80040f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d047      	beq.n	800418c <HAL_TIM_SlaveConfigSynchro+0x98>
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80040fe:	2302      	movs	r3, #2
{
 8004100:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004102:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004106:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 800410a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004110:	432b      	orrs	r3, r5
 8004112:	4604      	mov	r4, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004114:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004118:	4333      	orrs	r3, r6
  __HAL_LOCK(htim);
 800411a:	2001      	movs	r0, #1

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800411c:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 800411e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8004122:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8004124:	d04e      	beq.n	80041c4 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8004126:	d91f      	bls.n	8004168 <HAL_TIM_SlaveConfigSynchro+0x74>
 8004128:	2d60      	cmp	r5, #96	; 0x60
 800412a:	d038      	beq.n	800419e <HAL_TIM_SlaveConfigSynchro+0xaa>
 800412c:	2d70      	cmp	r5, #112	; 0x70
 800412e:	d10a      	bne.n	8004146 <HAL_TIM_SlaveConfigSynchro+0x52>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004130:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004134:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8004136:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004138:	432b      	orrs	r3, r5
 800413a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004142:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004144:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004146:	68d3      	ldr	r3, [r2, #12]
 8004148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800414e:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004150:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8004152:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004158:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800415a:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 800415c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004160:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8004164:	bcf0      	pop	{r4, r5, r6, r7}
 8004166:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004168:	2d40      	cmp	r5, #64	; 0x40
 800416a:	d1ec      	bne.n	8004146 <HAL_TIM_SlaveConfigSynchro+0x52>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800416c:	2e05      	cmp	r6, #5
 800416e:	d00f      	beq.n	8004190 <HAL_TIM_SlaveConfigSynchro+0x9c>
      tmpccer = htim->Instance->CCER;
 8004170:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004172:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004174:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004176:	f020 0001 	bic.w	r0, r0, #1
 800417a:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800417c:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004182:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004186:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8004188:	6215      	str	r5, [r2, #32]
 800418a:	e7dc      	b.n	8004146 <HAL_TIM_SlaveConfigSynchro+0x52>
  __HAL_LOCK(htim);
 800418c:	2002      	movs	r0, #2
}
 800418e:	4770      	bx	lr
    __HAL_UNLOCK(htim);
 8004190:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004192:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004196:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800419a:	bcf0      	pop	{r4, r5, r6, r7}
 800419c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a0:	688d      	ldr	r5, [r1, #8]
 80041a2:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a4:	f020 0010 	bic.w	r0, r0, #16
 80041a8:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80041ac:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ae:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80041be:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80041c0:	6213      	str	r3, [r2, #32]
 80041c2:	e7c0      	b.n	8004146 <HAL_TIM_SlaveConfigSynchro+0x52>
  tmpccer = TIMx->CCER;
 80041c4:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c6:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c8:	6888      	ldr	r0, [r1, #8]
 80041ca:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041cc:	f026 0601 	bic.w	r6, r6, #1
 80041d0:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d2:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80041dc:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041de:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80041e4:	6211      	str	r1, [r2, #32]
 80041e6:	e7ae      	b.n	8004146 <HAL_TIM_SlaveConfigSynchro+0x52>

080041e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d03a      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041f2:	2202      	movs	r2, #2
{
 80041f4:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80041f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80041fa:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fc:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fe:	4d1b      	ldr	r5, [pc, #108]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8004200:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004202:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004206:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 800420a:	f04f 0601 	mov.w	r6, #1
 800420e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8004212:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004214:	d019      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d016      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800421c:	4a14      	ldr	r2, [pc, #80]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004226:	4293      	cmp	r3, r2
 8004228:	d00f      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800422a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800422e:	4293      	cmp	r3, r2
 8004230:	d00b      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004232:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800423a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004242:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004246:	4293      	cmp	r3, r2
 8004248:	d104      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800424a:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004250:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004252:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004254:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004256:	2201      	movs	r2, #1
 8004258:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800425c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004260:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004262:	4618      	mov	r0, r3
}
 8004264:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004266:	2002      	movs	r0, #2
}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40000400 	.word	0x40000400

08004274 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004274:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d021      	beq.n	80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 800427c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800427e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004282:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800428c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004290:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004296:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800429a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800429c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042a6:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042a8:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042aa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80042b2:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80042b4:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 80042b6:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 80042b8:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 80042bc:	4608      	mov	r0, r1
 80042be:	4770      	bx	lr
  __HAL_LOCK(htim);
 80042c0:	2302      	movs	r3, #2
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c8:	2800      	cmp	r0, #0
 80042ca:	f000 8093 	beq.w	80043f4 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80042d2:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80042d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042d8:	4604      	mov	r4, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8085 	beq.w	80043ea <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e0:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e2:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	2224      	movs	r2, #36	; 0x24
 80042e6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80042ea:	68d8      	ldr	r0, [r3, #12]
 80042ec:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042f0:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80042f4:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f6:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042f8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fa:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80042fe:	4329      	orrs	r1, r5
 8004300:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004302:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004304:	6965      	ldr	r5, [r4, #20]
 8004306:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004308:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800430e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004312:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004314:	430a      	orrs	r2, r1
 8004316:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	69a1      	ldr	r1, [r4, #24]
 800431c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004320:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004322:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004326:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004328:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432a:	d034      	beq.n	8004396 <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800432c:	4293      	cmp	r3, r2
 800432e:	d063      	beq.n	80043f8 <HAL_UART_Init+0x130>
 8004330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004334:	4293      	cmp	r3, r2
 8004336:	d05f      	beq.n	80043f8 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7ff fa7c 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	4d32      	ldr	r5, [pc, #200]	; (8004408 <HAL_UART_Init+0x140>)
 8004340:	2219      	movs	r2, #25
 8004342:	fba0 0102 	umull	r0, r1, r0, r2
 8004346:	009a      	lsls	r2, r3, #2
 8004348:	0f9b      	lsrs	r3, r3, #30
 800434a:	f7fb ff5b 	bl	8000204 <__aeabi_uldivmod>
 800434e:	fba5 2100 	umull	r2, r1, r5, r0
 8004352:	0949      	lsrs	r1, r1, #5
 8004354:	2264      	movs	r2, #100	; 0x64
 8004356:	fb02 0211 	mls	r2, r2, r1, r0
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	3232      	adds	r2, #50	; 0x32
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	fba5 0202 	umull	r0, r2, r5, r2
 8004364:	0109      	lsls	r1, r1, #4
 8004366:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 800436a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004372:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800437a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800437c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004380:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004386:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8004388:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800438c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004390:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004394:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <HAL_UART_Init+0x136>
 800439a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02d      	beq.n	80043fe <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a2:	f7ff fa47 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	2600      	movs	r6, #0
 80043aa:	1892      	adds	r2, r2, r2
 80043ac:	f04f 0119 	mov.w	r1, #25
 80043b0:	eb46 0306 	adc.w	r3, r6, r6
 80043b4:	fba0 0101 	umull	r0, r1, r0, r1
 80043b8:	f7fb ff24 	bl	8000204 <__aeabi_uldivmod>
 80043bc:	4e12      	ldr	r6, [pc, #72]	; (8004408 <HAL_UART_Init+0x140>)
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	fba6 2100 	umull	r2, r1, r6, r0
 80043c4:	094d      	lsrs	r5, r1, #5
 80043c6:	2264      	movs	r2, #100	; 0x64
 80043c8:	fb02 0215 	mls	r2, r2, r5, r0
 80043cc:	00d2      	lsls	r2, r2, #3
 80043ce:	3232      	adds	r2, #50	; 0x32
 80043d0:	fba6 1202 	umull	r1, r2, r6, r2
 80043d4:	0952      	lsrs	r2, r2, #5
 80043d6:	f002 0107 	and.w	r1, r2, #7
 80043da:	0052      	lsls	r2, r2, #1
 80043dc:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80043e0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80043e4:	440a      	add	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e7c0      	b.n	800436c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80043ea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80043ee:	f7fd feb5 	bl	800215c <HAL_UART_MspInit>
 80043f2:	e775      	b.n	80042e0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80043f4:	2001      	movs	r0, #1
}
 80043f6:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7ff fa2c 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 80043fc:	e79e      	b.n	800433c <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043fe:	f7ff fa29 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004402:	e7d0      	b.n	80043a6 <HAL_UART_Init+0xde>
 8004404:	40011000 	.word	0x40011000
 8004408:	51eb851f 	.word	0x51eb851f

0800440c <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 800440c:	88c0      	ldrh	r0, [r0, #6]
 800440e:	4770      	bx	lr

08004410 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004410:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004412:	8840      	ldrh	r0, [r0, #2]
 8004414:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004418:	0c00      	lsrs	r0, r0, #16
 800441a:	4770      	bx	lr

0800441c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800441c:	b410      	push	{r4}
 800441e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004420:	8802      	ldrh	r2, [r0, #0]
 8004422:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004424:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004428:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800442c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004430:	42a2      	cmp	r2, r4
{
 8004432:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004434:	d219      	bcs.n	800446a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004436:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 800443a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800443e:	b2e4      	uxtb	r4, r4
 8004440:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004444:	8882      	ldrh	r2, [r0, #4]
 8004446:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800444a:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800444c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004450:	bfbc      	itt	lt
 8004452:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004456:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004458:	2b00      	cmp	r3, #0
 800445a:	bfbc      	itt	lt
 800445c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004460:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004462:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004466:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800446a:	b289      	uxth	r1, r1
 800446c:	2000      	movs	r0, #0
 800446e:	b29b      	uxth	r3, r3
 8004470:	f361 000f 	bfi	r0, r1, #0, #16
 8004474:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004478:	b005      	add	sp, #20
 800447a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800447e:	4770      	bx	lr

08004480 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	8243      	strh	r3, [r0, #18]
 8004484:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004486:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 800448a:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800448e:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004492:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8004496:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 800449a:	4770      	bx	lr

0800449c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 800449c:	b120      	cbz	r0, 80044a8 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800449e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 80044a2:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80044a4:	9b00      	ldr	r3, [sp, #0]
 80044a6:	60c3      	str	r3, [r0, #12]
  }
}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop

080044ac <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 80044ac:	b190      	cbz	r0, 80044d4 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 80044ae:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 80044b0:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 80044b2:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80044b4:	b151      	cbz	r1, 80044cc <FCP_CalcCRC+0x20>
 80044b6:	1e4a      	subs	r2, r1, #1
 80044b8:	1c81      	adds	r1, r0, #2
 80044ba:	fa51 f282 	uxtab	r2, r1, r2
 80044be:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 80044c0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80044c4:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80044c6:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 80044c8:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80044ca:	d1f9      	bne.n	80044c0 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80044cc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 80044d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop

080044d8 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80044d8:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <ICS_GetPhaseCurrents+0x88>)
{
 80044dc:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80044de:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80044e0:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 80044e2:	6a22      	ldr	r2, [r4, #32]
 80044e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044e8:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80044ee:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	1b5b      	subs	r3, r3, r5
  if ( aux < -INT16_MAX )
 80044f4:	4293      	cmp	r3, r2
 80044f6:	da1c      	bge.n	8004532 <ICS_GetPhaseCurrents+0x5a>
  {
    pStator_Currents->a = -INT16_MAX;
 80044f8:	800a      	strh	r2, [r1, #0]
 80044fa:	4615      	mov	r5, r2
 80044fc:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <ICS_GetPhaseCurrents+0x90>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8004502:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8004506:	4c17      	ldr	r4, [pc, #92]	; (8004564 <ICS_GetPhaseCurrents+0x8c>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8004508:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 800450a:	b29b      	uxth	r3, r3
 800450c:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 800450e:	42a3      	cmp	r3, r4
 8004510:	db21      	blt.n	8004556 <ICS_GetPhaseCurrents+0x7e>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8004512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004516:	da19      	bge.n	800454c <ICS_GetPhaseCurrents+0x74>
  {
    pStator_Currents->b = INT16_MAX;
  }
  else
  {
    pStator_Currents->b = ( int16_t )aux;
 8004518:	b21c      	sxth	r4, r3
 800451a:	804c      	strh	r4, [r1, #2]
 800451c:	b29b      	uxth	r3, r3
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800451e:	4413      	add	r3, r2
 8004520:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8004522:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8004526:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800452a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 800452e:	bc70      	pop	{r4, r5, r6}
 8004530:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	db05      	blt.n	8004544 <ICS_GetPhaseCurrents+0x6c>
    pStator_Currents->a = INT16_MAX;
 8004538:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800453c:	461a      	mov	r2, r3
 800453e:	800b      	strh	r3, [r1, #0]
 8004540:	461d      	mov	r5, r3
 8004542:	e7dd      	b.n	8004500 <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->a = ( int16_t )aux;
 8004544:	b21d      	sxth	r5, r3
 8004546:	800d      	strh	r5, [r1, #0]
 8004548:	b29a      	uxth	r2, r3
 800454a:	e7d9      	b.n	8004500 <ICS_GetPhaseCurrents+0x28>
    pStator_Currents->b = INT16_MAX;
 800454c:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8004550:	4623      	mov	r3, r4
 8004552:	804c      	strh	r4, [r1, #2]
 8004554:	e7e3      	b.n	800451e <ICS_GetPhaseCurrents+0x46>
    pStator_Currents->b = -INT16_MAX;
 8004556:	804c      	strh	r4, [r1, #2]
 8004558:	f248 0301 	movw	r3, #32769	; 0x8001
 800455c:	e7df      	b.n	800451e <ICS_GetPhaseCurrents+0x46>
 800455e:	bf00      	nop
 8004560:	40012000 	.word	0x40012000
 8004564:	ffff8001 	.word	0xffff8001
 8004568:	40012100 	.word	0x40012100

0800456c <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800456c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	6a13      	ldr	r3, [r2, #32]
 8004572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004576:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004578:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800457c:	2b0f      	cmp	r3, #15
 800457e:	d814      	bhi.n	80045aa <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <ICS_HFCurrentsCalibration+0x44>)
 8004582:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8004584:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8004586:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8004588:	4c0a      	ldr	r4, [pc, #40]	; (80045b4 <ICS_HFCurrentsCalibration+0x48>)
 800458a:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 800458c:	442b      	add	r3, r5
 800458e:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8004590:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 8004592:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8004596:	3301      	adds	r3, #1
 8004598:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 800459a:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800459c:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80045a0:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 80045a2:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 80045a4:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 80045a6:	600b      	str	r3, [r1, #0]
}
 80045a8:	4770      	bx	lr
  pStator_Currents->a = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	600b      	str	r3, [r1, #0]
 80045ae:	4770      	bx	lr
 80045b0:	40012000 	.word	0x40012000
 80045b4:	40012100 	.word	0x40012100

080045b8 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80045b8:	6f01      	ldr	r1, [r0, #112]	; 0x70
 80045ba:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045bc:	681a      	ldr	r2, [r3, #0]
{
 80045be:	b410      	push	{r4}
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80045c0:	f891 402c 	ldrb.w	r4, [r1, #44]	; 0x2c
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	b134      	cbz	r4, 80045da <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80045cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d0:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045d8:	60da      	str	r2, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80045e2:	790a      	ldrb	r2, [r1, #4]
 80045e4:	2a02      	cmp	r2, #2
 80045e6:	d036      	beq.n	8004656 <ICS_Init+0x9e>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80045e8:	780a      	ldrb	r2, [r1, #0]
 80045ea:	2a01      	cmp	r2, #1
 80045ec:	d03f      	beq.n	800466e <ICS_Init+0xb6>
  SET_BIT(TIMx->CCER, Channels);
 80045ee:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80045f0:	4921      	ldr	r1, [pc, #132]	; (8004678 <ICS_Init+0xc0>)
}
 80045f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045f6:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 80045fa:	f042 0205 	orr.w	r2, r2, #5
 80045fe:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <ICS_Init+0xc4>)
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8004602:	428b      	cmp	r3, r1
 8004604:	68d3      	ldr	r3, [r2, #12]
 8004606:	bf0c      	ite	eq
 8004608:	f043 0301 	orreq.w	r3, r3, #1
 800460c:	f043 0302 	orrne.w	r3, r3, #2
 8004610:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8004612:	bf08      	it	eq
 8004614:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <ICS_Init+0xc8>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 800461a:	bf18      	it	ne
 800461c:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 8004620:	6681      	str	r1, [r0, #104]	; 0x68
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4917      	ldr	r1, [pc, #92]	; (8004684 <ICS_Init+0xcc>)
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	688a      	ldr	r2, [r1, #8]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004636:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800463a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004640:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004642:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 8004644:	2100      	movs	r1, #0
 8004646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 8004650:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8004654:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8004656:	794a      	ldrb	r2, [r1, #5]
 8004658:	2a01      	cmp	r2, #1
 800465a:	d108      	bne.n	800466e <ICS_Init+0xb6>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800465c:	7a09      	ldrb	r1, [r1, #8]
 800465e:	2903      	cmp	r1, #3
 8004660:	d105      	bne.n	800466e <ICS_Init+0xb6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800466c:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800466e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8004672:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
 8004676:	e7ba      	b.n	80045ee <ICS_Init+0x36>
 8004678:	40010000 	.word	0x40010000
 800467c:	e0042000 	.word	0xe0042000
 8004680:	40012000 	.word	0x40012000
 8004684:	40012100 	.word	0x40012100

08004688 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004688:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 800468a:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800468c:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800468e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004692:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004694:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800469e:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	07d2      	lsls	r2, r2, #31
 80046a4:	d5fc      	bpl.n	80046a0 <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80046a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80046a8:	7c08      	ldrb	r0, [r1, #16]
 80046aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ae:	2802      	cmp	r0, #2
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
 80046b2:	d000      	beq.n	80046b6 <ICS_TurnOnLowSides+0x2e>
 80046b4:	4770      	bx	lr
{
 80046b6:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80046b8:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80046ba:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80046bc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80046be:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80046c0:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80046c2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80046c4:	61ae      	str	r6, [r5, #24]
 80046c6:	6184      	str	r4, [r0, #24]
 80046c8:	619a      	str	r2, [r3, #24]
  }
}
 80046ca:	bc70      	pop	{r4, r5, r6}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop

080046d0 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80046d0:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80046d2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80046d6:	68cb      	ldr	r3, [r1, #12]
{
 80046d8:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80046da:	2400      	movs	r4, #0
 80046dc:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80046e0:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80046e2:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80046e6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80046e8:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80046ea:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80046ec:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80046f0:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	07d2      	lsls	r2, r2, #31
 80046f6:	d5fc      	bpl.n	80046f2 <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80046fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004700:	7c08      	ldrb	r0, [r1, #16]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004706:	2802      	cmp	r0, #2
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
 800470a:	d112      	bne.n	8004732 <ICS_SwitchOnPWM+0x62>
 800470c:	e9d1 7405 	ldrd	r7, r4, [r1, #20]
 8004710:	e9d1 6007 	ldrd	r6, r0, [r1, #28]
 8004714:	e9d1 5209 	ldrd	r5, r2, [r1, #36]	; 0x24
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004718:	f8d3 c020 	ldr.w	ip, [r3, #32]
 800471c:	f240 5155 	movw	r1, #1365	; 0x555
 8004720:	ea31 010c 	bics.w	r1, r1, ip
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004724:	bf1e      	ittt	ne
 8004726:	0424      	lslne	r4, r4, #16
 8004728:	0400      	lslne	r0, r0, #16
 800472a:	0412      	lslne	r2, r2, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 800472c:	61bc      	str	r4, [r7, #24]
 800472e:	61b0      	str	r0, [r6, #24]
 8004730:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004732:	f06f 0201 	mvn.w	r2, #1
 8004736:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8004740:	bcf0      	pop	{r4, r5, r6, r7}
 8004742:	4770      	bx	lr

08004744 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004744:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004746:	68d3      	ldr	r3, [r2, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004748:	68d9      	ldr	r1, [r3, #12]
 800474a:	f021 0101 	bic.w	r1, r1, #1
{
 800474e:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004750:	7c14      	ldrb	r4, [r2, #16]
 8004752:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004754:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004756:	2500      	movs	r5, #0
 8004758:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800475c:	2c02      	cmp	r4, #2
  pHandle->_Super.TurnOnLowSidesAction = false;
 800475e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8004762:	6459      	str	r1, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004764:	d10b      	bne.n	800477e <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004766:	6994      	ldr	r4, [r2, #24]
 8004768:	6a10      	ldr	r0, [r2, #32]
 800476a:	6a91      	ldr	r1, [r2, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800476c:	6957      	ldr	r7, [r2, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800476e:	69d6      	ldr	r6, [r2, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004770:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8004772:	0424      	lsls	r4, r4, #16
 8004774:	0400      	lsls	r0, r0, #16
 8004776:	0409      	lsls	r1, r1, #16
 8004778:	61bc      	str	r4, [r7, #24]
 800477a:	61b0      	str	r0, [r6, #24]
 800477c:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800477e:	f06f 0201 	mvn.w	r2, #1
 8004782:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	07d2      	lsls	r2, r2, #31
 8004788:	d5fc      	bpl.n	8004784 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800478a:	f06f 0201 	mvn.w	r2, #1
 800478e:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8004790:	bcf0      	pop	{r4, r5, r6, r7}
 8004792:	4770      	bx	lr

08004794 <ICS_CurrentReadingCalibration>:
{
 8004794:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004796:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8004798:	4924      	ldr	r1, [pc, #144]	; (800482c <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800479a:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 800479c:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 800479e:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 80047a2:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 80047a4:	65c2      	str	r2, [r0, #92]	; 0x5c
 80047a6:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 80047aa:	4605      	mov	r5, r0
 80047ac:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 80047b0:	6602      	str	r2, [r0, #96]	; 0x60
 80047b2:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80047b4:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80047b6:	f7ff ff8b 	bl	80046d0 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80047ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80047bc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80047c0:	7a1a      	ldrb	r2, [r3, #8]
 80047c2:	4620      	mov	r0, r4
 80047c4:	f105 0366 	add.w	r3, r5, #102	; 0x66
 80047c8:	f000 fa06 	bl	8004bd8 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7ff ffb9 	bl	8004744 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80047d2:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 80047d6:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 80047d8:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 80047da:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80047de:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80047e0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 80047e4:	4912      	ldr	r1, [pc, #72]	; (8004830 <ICS_CurrentReadingCalibration+0x9c>)
 80047e6:	f022 0208 	bic.w	r2, r2, #8
 80047ea:	61a2      	str	r2, [r4, #24]
 80047ec:	69a2      	ldr	r2, [r4, #24]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f2:	61a2      	str	r2, [r4, #24]
 80047f4:	69e2      	ldr	r2, [r4, #28]
 80047f6:	f022 0208 	bic.w	r2, r2, #8
 80047fa:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80047fc:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80047fe:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004800:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004802:	69a3      	ldr	r3, [r4, #24]
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	61a3      	str	r3, [r4, #24]
 800480a:	69a3      	ldr	r3, [r4, #24]
 800480c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004810:	61a3      	str	r3, [r4, #24]
 8004812:	69e3      	ldr	r3, [r4, #28]
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800481a:	6a23      	ldr	r3, [r4, #32]
 800481c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8004820:	f043 0305 	orr.w	r3, r3, #5
 8004824:	6223      	str	r3, [r4, #32]
 8004826:	6069      	str	r1, [r5, #4]
}
 8004828:	bd38      	pop	{r3, r4, r5, pc}
 800482a:	bf00      	nop
 800482c:	0800456d 	.word	0x0800456d
 8004830:	080044d9 	.word	0x080044d9

08004834 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004834:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8004836:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004838:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800483a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 800483c:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800483e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004840:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004842:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004844:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004846:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8004848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800484c:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8004856:	6813      	ldr	r3, [r2, #0]
{
 8004858:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 800485a:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800485e:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8004860:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004862:	68e9      	ldr	r1, [r5, #12]
  if ( adcinjflags == CONV_STARTED )
 8004864:	d026      	beq.n	80048b4 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8004866:	b94b      	cbnz	r3, 800487c <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8004868:	886a      	ldrh	r2, [r5, #2]
 800486a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800486c:	4293      	cmp	r3, r2
 800486e:	d3fc      	bcc.n	800486a <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8004878:	2b08      	cmp	r3, #8
 800487a:	d026      	beq.n	80048ca <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 800487c:	4f18      	ldr	r7, [pc, #96]	; (80048e0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 800487e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4e18      	ldr	r6, [pc, #96]	; (80048e4 <ICS_TIMx_UP_IRQHandler+0x90>)
 8004884:	f403 2470 	and.w	r4, r3, #983040	; 0xf0000
 8004888:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800488c:	4322      	orrs	r2, r4
 800488e:	60ba      	str	r2, [r7, #8]
 8004890:	68b3      	ldr	r3, [r6, #8]
 8004892:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004896:	4323      	orrs	r3, r4
 8004898:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 800489a:	79ab      	ldrb	r3, [r5, #6]
 800489c:	03db      	lsls	r3, r3, #15
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 80048a0:	79eb      	ldrb	r3, [r5, #7]
 80048a2:	03db      	lsls	r3, r3, #15
 80048a4:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80048a6:	6a0b      	ldr	r3, [r1, #32]
 80048a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 80048ac:	3046      	adds	r0, #70	; 0x46
 80048ae:	620b      	str	r3, [r1, #32]
 80048b0:	bcf0      	pop	{r4, r5, r6, r7}
 80048b2:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d0de      	beq.n	800487c <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d1f5      	bne.n	80048b4 <ICS_TIMx_UP_IRQHandler+0x60>
 80048c8:	e7d8      	b.n	800487c <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d0d3      	beq.n	800487c <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80048d4:	6813      	ldr	r3, [r2, #0]
 80048d6:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d1f5      	bne.n	80048ca <ICS_TIMx_UP_IRQHandler+0x76>
 80048de:	e7cd      	b.n	800487c <ICS_TIMx_UP_IRQHandler+0x28>
 80048e0:	40012000 	.word	0x40012000
 80048e4:	40012100 	.word	0x40012100

080048e8 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80048e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80048ea:	7c1a      	ldrb	r2, [r3, #16]
 80048ec:	2a02      	cmp	r2, #2
 80048ee:	d004      	beq.n	80048fa <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 80048f6:	3046      	adds	r0, #70	; 0x46
 80048f8:	4770      	bx	lr
{
 80048fa:	b4f0      	push	{r4, r5, r6, r7}
 80048fc:	6a19      	ldr	r1, [r3, #32]
 80048fe:	699c      	ldr	r4, [r3, #24]
 8004900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004902:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004904:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004906:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004908:	0424      	lsls	r4, r4, #16
 800490a:	0409      	lsls	r1, r1, #16
 800490c:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 800490e:	2301      	movs	r3, #1
 8004910:	61bc      	str	r4, [r7, #24]
}
 8004912:	3046      	adds	r0, #70	; 0x46
 8004914:	61b1      	str	r1, [r6, #24]
 8004916:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8004918:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 800491c:	bcf0      	pop	{r4, r5, r6, r7}
 800491e:	4770      	bx	lr

08004920 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8004920:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8004924:	b90b      	cbnz	r3, 800492a <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8004926:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8004928:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800492a:	2300      	movs	r3, #0
 800492c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8004930:	2040      	movs	r0, #64	; 0x40
 8004932:	4770      	bx	lr

08004934 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004934:	b508      	push	{r3, lr}
 8004936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800493a:	2100      	movs	r1, #0
 800493c:	f001 fb96 	bl	800606c <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8004940:	2200      	movs	r2, #0
 8004942:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8004946:	bd08      	pop	{r3, pc}

08004948 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004948:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 800494c:	1c53      	adds	r3, r2, #1
 800494e:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004950:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004952:	bf88      	it	hi
 8004954:	2300      	movhi	r3, #0
{
 8004956:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004958:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 800495c:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004960:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8004964:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8004968:	2200      	movs	r2, #0
 800496a:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800496c:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004970:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004972:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004974:	d1fa      	bne.n	800496c <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004976:	2a00      	cmp	r2, #0
 8004978:	bfb8      	it	lt
 800497a:	327f      	addlt	r2, #127	; 0x7f
 800497c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800497e:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004982:	bc30      	pop	{r4, r5}
 8004984:	4608      	mov	r0, r1
 8004986:	4770      	bx	lr

08004988 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8004988:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop

08004990 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004990:	8a03      	ldrh	r3, [r0, #16]
 8004992:	8b42      	ldrh	r2, [r0, #26]
 8004994:	429a      	cmp	r2, r3
 8004996:	d306      	bcc.n	80049a6 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004998:	8b82      	ldrh	r2, [r0, #28]
 800499a:	429a      	cmp	r2, r3
 800499c:	d801      	bhi.n	80049a2 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 800499e:	8ac0      	ldrh	r0, [r0, #22]
 80049a0:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 80049a2:	2000      	movs	r0, #0
  }
  return hFault;
}
 80049a4:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80049a6:	2008      	movs	r0, #8
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80049ac:	2300      	movs	r3, #0
 80049ae:	8203      	strh	r3, [r0, #16]
}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop

080049b4 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 80049b4:	7803      	ldrb	r3, [r0, #0]
 80049b6:	b123      	cbz	r3, 80049c2 <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 80049b8:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80049ba:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 80049bc:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80049be:	8203      	strh	r3, [r0, #16]
 80049c0:	4770      	bx	lr
{
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80049c6:	3004      	adds	r0, #4
 80049c8:	f7fd f982 	bl	8001cd0 <RCM_RegisterRegConv>
 80049cc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff ffeb 	bl	80049ac <NTC_Clear>
}
 80049d6:	bd10      	pop	{r4, pc}

080049d8 <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80049d8:	7803      	ldrb	r3, [r0, #0]
 80049da:	b11b      	cbz	r3, 80049e4 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80049dc:	2300      	movs	r3, #0
 80049de:	82c3      	strh	r3, [r0, #22]
 80049e0:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 80049e2:	4770      	bx	lr
{
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80049e8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80049ec:	f7fd fa2c 	bl	8001e48 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80049f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f4:	4298      	cmp	r0, r3
 80049f6:	d007      	beq.n	8004a08 <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80049f8:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80049fa:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80049fc:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 80049fe:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004a02:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004a06:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f7ff ffc1 	bl	8004990 <NTC_SetFaultState>
 8004a0e:	82e0      	strh	r0, [r4, #22]
}
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	bf00      	nop

08004a14 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004a14:	7803      	ldrb	r3, [r0, #0]
 8004a16:	b113      	cbz	r3, 8004a1e <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8004a18:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 8004a1a:	b200      	sxth	r0, r0
 8004a1c:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004a1e:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004a20:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8004a22:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004a26:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004a28:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8004a2a:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bfbc      	itt	lt
 8004a32:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8004a36:	33ff      	addlt	r3, #255	; 0xff
 8004a38:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8004a3c:	b200      	sxth	r0, r0
 8004a3e:	4770      	bx	lr

08004a40 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8004a40:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004a42:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004a44:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004a46:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004a48:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004a4a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004a4c:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004a4e:	4770      	bx	lr

08004a50 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004a50:	8081      	strh	r1, [r0, #4]
}
 8004a52:	4770      	bx	lr

08004a54 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004a54:	80c1      	strh	r1, [r0, #6]
}
 8004a56:	4770      	bx	lr

08004a58 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8004a58:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8004a60:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop

08004a68 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004a68:	6081      	str	r1, [r0, #8]

  return;
}
 8004a6a:	4770      	bx	lr

08004a6c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8004a6c:	8b00      	ldrh	r0, [r0, #24]
 8004a6e:	4770      	bx	lr

08004a70 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8004a70:	8b40      	ldrh	r0, [r0, #26]
 8004a72:	4770      	bx	lr

08004a74 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004a74:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004a76:	4770      	bx	lr

08004a78 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8004a78:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004a80:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004a84:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8004a88:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004a8a:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004a8e:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004a92:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8004a96:	b18b      	cbz	r3, 8004abc <PI_Controller+0x3c>
 8004a98:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004a9c:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 8004aa0:	187b      	adds	r3, r7, r1
 8004aa2:	d424      	bmi.n	8004aee <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8004aa4:	2f00      	cmp	r7, #0
 8004aa6:	da04      	bge.n	8004ab2 <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 8004aa8:	4f16      	ldr	r7, [pc, #88]	; (8004b04 <PI_Controller+0x84>)
 8004aaa:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8004aae:	bf28      	it	cs
 8004ab0:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	dc03      	bgt.n	8004abe <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004ab6:	6904      	ldr	r4, [r0, #16]
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	dc00      	bgt.n	8004abe <PI_Controller+0x3e>
 8004abc:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004abe:	8b81      	ldrh	r1, [r0, #28]
 8004ac0:	8bc3      	ldrh	r3, [r0, #30]
 8004ac2:	410a      	asrs	r2, r1
 8004ac4:	fa44 f303 	asr.w	r3, r4, r3
 8004ac8:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004aca:	429d      	cmp	r5, r3
 8004acc:	db08      	blt.n	8004ae0 <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8004ace:	429e      	cmp	r6, r3
 8004ad0:	dd02      	ble.n	8004ad8 <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8004ad2:	1af3      	subs	r3, r6, r3
 8004ad4:	441c      	add	r4, r3
 8004ad6:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004ad8:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 8004ada:	b218      	sxth	r0, r3
}
 8004adc:	bcf0      	pop	{r4, r5, r6, r7}
 8004ade:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8004ae0:	1aeb      	subs	r3, r5, r3
 8004ae2:	441c      	add	r4, r3
 8004ae4:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 8004ae6:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 8004ae8:	b218      	sxth	r0, r3
}
 8004aea:	bcf0      	pop	{r4, r5, r6, r7}
 8004aec:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8004aee:	2f00      	cmp	r7, #0
 8004af0:	dddf      	ble.n	8004ab2 <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 8004af2:	2900      	cmp	r1, #0
 8004af4:	dddd      	ble.n	8004ab2 <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004af6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d1df      	bne.n	8004abe <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8004afe:	4623      	mov	r3, r4
 8004b00:	e7dc      	b.n	8004abc <PI_Controller+0x3c>
 8004b02:	bf00      	nop
 8004b04:	80000001 	.word	0x80000001

08004b08 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004b08:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8004b0c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004b0e:	8b0c      	ldrh	r4, [r1, #24]
 8004b10:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004b12:	898a      	ldrh	r2, [r1, #12]
 8004b14:	8acb      	ldrh	r3, [r1, #22]
{
 8004b16:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004b18:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004b1c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8004b20:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004b24:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004b28:	f7ff fc72 	bl	8004410 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8004b2c:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004b30:	490f      	ldr	r1, [pc, #60]	; (8004b70 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004b32:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8004b36:	bfb8      	it	lt
 8004b38:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b3c:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 8004b40:	bfb8      	it	lt
 8004b42:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b44:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8004b46:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004b48:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8004b4c:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004b50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b54:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8004b56:	fb81 2103 	smull	r2, r1, r1, r3
 8004b5a:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8004b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004b66:	f7ff beef 	b.w	8004948 <MPM_CalcElMotorPower>
 8004b6a:	bf00      	nop
 8004b6c:	1b4e81b5 	.word	0x1b4e81b5
 8004b70:	66666667 	.word	0x66666667

08004b74 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <startTimers+0x60>)
 8004b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8004b78:	07d2      	lsls	r2, r2, #31
 8004b7a:	d514      	bpl.n	8004ba6 <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8004b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b80:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004b88:	f041 0120 	orr.w	r1, r1, #32
 8004b8c:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b8e:	6959      	ldr	r1, [r3, #20]
 8004b90:	f041 0101 	orr.w	r1, r1, #1
 8004b94:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004b9c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 8004ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004bb0:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004bb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004bb6:	f002 0201 	and.w	r2, r2, #1
 8004bba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004bbc:	9a01      	ldr	r2, [sp, #4]
 8004bbe:	694a      	ldr	r2, [r1, #20]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8004bce:	b002      	add	sp, #8
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004bd8:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8004bda:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004bdc:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004be0:	3201      	adds	r2, #1
 8004be2:	2c60      	cmp	r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004be4:	bf18      	it	ne
 8004be6:	0852      	lsrne	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004be8:	f06f 0602 	mvn.w	r6, #2
 8004bec:	0155      	lsls	r5, r2, #5
 8004bee:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004bf0:	2400      	movs	r4, #0
  while (*cnt < NB_CONVERSIONS)
 8004bf2:	e002      	b.n	8004bfa <waitForPolarizationEnd+0x22>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004bf4:	6902      	ldr	r2, [r0, #16]
 8004bf6:	0792      	lsls	r2, r2, #30
 8004bf8:	d404      	bmi.n	8004c04 <waitForPolarizationEnd+0x2c>
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	2a0f      	cmp	r2, #15
 8004bfe:	d9f9      	bls.n	8004bf4 <waitForPolarizationEnd+0x1c>
          break;
        }
      }
    }
  }
}
 8004c00:	bc70      	pop	{r4, r5, r6}
 8004c02:	4770      	bx	lr
      hCalibrationPeriodCounter++;
 8004c04:	3401      	adds	r4, #1
 8004c06:	b2a4      	uxth	r4, r4
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004c08:	42a5      	cmp	r5, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004c0a:	6106      	str	r6, [r0, #16]
 8004c0c:	d8f5      	bhi.n	8004bfa <waitForPolarizationEnd+0x22>
        if (*cnt < NB_CONVERSIONS)
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	2a0f      	cmp	r2, #15
 8004c12:	d8f2      	bhi.n	8004bfa <waitForPolarizationEnd+0x22>
          *SWerror = 1u;
 8004c14:	2301      	movs	r3, #1
 8004c16:	800b      	strh	r3, [r1, #0]
          break;
 8004c18:	e7f2      	b.n	8004c00 <waitForPolarizationEnd+0x28>
 8004c1a:	bf00      	nop

08004c1c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004c1c:	6843      	ldr	r3, [r0, #4]
 8004c1e:	4718      	bx	r3

08004c20 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004c20:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004c22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004c26:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004c28:	140c      	asrs	r4, r1, #16
{
 8004c2a:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004c2c:	fb02 f404 	mul.w	r4, r2, r4
{
 8004c30:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004c32:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004c36:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004c38:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004c3a:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004c3e:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004c40:	4421      	add	r1, r4
 8004c42:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004c46:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8004c4a:	106d      	asrs	r5, r5, #1
 8004c4c:	ea4f 0292 	mov.w	r2, r2, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004c50:	ea4f 0666 	mov.w	r6, r6, asr #1
  if ( wY < 0 )
 8004c54:	d46e      	bmi.n	8004d34 <PWMC_SetPhaseVoltage+0x114>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	db4c      	blt.n	8004cf4 <PWMC_SetPhaseVoltage+0xd4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c5a:	1bad      	subs	r5, r5, r6
 8004c5c:	bf44      	itt	mi
 8004c5e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004c62:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfbc      	itt	lt
 8004c6a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8004c6e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004c72:	2900      	cmp	r1, #0
 8004c74:	bfb8      	it	lt
 8004c76:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004c7a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004c7e:	bfb8      	it	lt
 8004c80:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8004c84:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8004c86:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004c8a:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 8004c8e:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8004c92:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8004c96:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004c98:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8004c9a:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8004c9e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004ca2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ca6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004caa:	b292      	uxth	r2, r2
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	b289      	uxth	r1, r1
 8004cb0:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004cb2:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004cb4:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004cb6:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8004cb8:	d118      	bne.n	8004cec <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8004cba:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
 8004cbe:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8004cc2:	2d00      	cmp	r5, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004cc4:	bfcc      	ite	gt
 8004cc6:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004cc8:	1b12      	suble	r2, r2, r4
 8004cca:	b292      	uxth	r2, r2
    }

    if ( pHandle->Ib > 0 )
 8004ccc:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
 8004cd0:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8004cd2:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8004cd6:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004cd8:	bfcc      	ite	gt
 8004cda:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004cdc:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8004cde:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004ce0:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004ce2:	bfcc      	ite	gt
 8004ce4:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004ce6:	1b09      	suble	r1, r1, r4
 8004ce8:	8683      	strh	r3, [r0, #52]	; 0x34
 8004cea:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004cec:	6983      	ldr	r3, [r0, #24]
}
 8004cee:	b003      	add	sp, #12
 8004cf0:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004cf2:	4718      	bx	r3
      if ( wX <= 0 )
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	dd3c      	ble.n	8004d72 <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb8      	it	lt
 8004cfc:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8004d00:	f04f 0100 	mov.w	r1, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8004d04:	bfb8      	it	lt
 8004d06:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d0a:	1ba5      	subs	r5, r4, r6
        pHandle->Sector = SECTOR_1;
 8004d0c:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8004d10:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004d12:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004d16:	bfb8      	it	lt
 8004d18:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8004d1c:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004d20:	bfb8      	it	lt
 8004d22:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8004d26:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhC;
 8004d2a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8004d2e:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004d30:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004d32:	e7b2      	b.n	8004c9a <PWMC_SetPhaseVoltage+0x7a>
    if ( wZ < 0 )
 8004d34:	2e00      	cmp	r6, #0
 8004d36:	db5d      	blt.n	8004df4 <PWMC_SetPhaseVoltage+0x1d4>
      if ( wX <= 0 )
 8004d38:	2c00      	cmp	r4, #0
 8004d3a:	dd38      	ble.n	8004dae <PWMC_SetPhaseVoltage+0x18e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d3c:	1b2d      	subs	r5, r5, r4
 8004d3e:	bf44      	itt	mi
 8004d40:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004d44:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	bfb8      	it	lt
 8004d4c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d50:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8004d54:	bfb8      	it	lt
 8004d56:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_3;
 8004d5a:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 8004d5c:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_3;
 8004d60:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8004d64:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8004d68:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004d6a:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004d6c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8004d70:	e793      	b.n	8004c9a <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 8004d72:	2900      	cmp	r1, #0
 8004d74:	bfb8      	it	lt
 8004d76:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8004d7a:	f04f 0305 	mov.w	r3, #5
        wTimePhC = wTimePhA - wY / 131072;
 8004d7e:	bfb8      	it	lt
 8004d80:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d84:	1b2d      	subs	r5, r5, r4
        pHandle->Sector = SECTOR_6;
 8004d86:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8004d8a:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004d8c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004d90:	bfb8      	it	lt
 8004d92:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8004d96:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004d9a:	bfb8      	it	lt
 8004d9c:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8004da0:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhB;
 8004da4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8004da8:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004daa:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8004dac:	e775      	b.n	8004c9a <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004dae:	1ba5      	subs	r5, r4, r6
 8004db0:	bf44      	itt	mi
 8004db2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004db6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bfb8      	it	lt
 8004dbe:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8004dc2:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8004dc6:	bfb8      	it	lt
 8004dc8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8004dcc:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8004dd0:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004dd2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004dd6:	bfb8      	it	lt
 8004dd8:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8004ddc:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004de0:	bfb8      	it	lt
 8004de2:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8004de6:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhC;
 8004dea:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004dec:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004dee:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8004df2:	e752      	b.n	8004c9a <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004df4:	1bad      	subs	r5, r5, r6
 8004df6:	bf44      	itt	mi
 8004df8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004dfc:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfbc      	itt	lt
 8004e04:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8004e08:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	bfb8      	it	lt
 8004e10:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e14:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004e18:	bfb8      	it	lt
 8004e1a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8004e1e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8004e20:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004e24:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_5;
 8004e28:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8004e2c:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004e2e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8004e30:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8004e34:	e731      	b.n	8004c9a <PWMC_SetPhaseVoltage+0x7a>
 8004e36:	bf00      	nop

08004e38 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8004e38:	6883      	ldr	r3, [r0, #8]
 8004e3a:	4718      	bx	r3

08004e3c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	4604      	mov	r4, r0
 8004e40:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8004e42:	b1a1      	cbz	r1, 8004e6e <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8004e44:	2901      	cmp	r1, #1
 8004e46:	d002      	beq.n	8004e4e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8004e48:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8004e4e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004e52:	b1d3      	cbz	r3, 8004e8a <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	9101      	str	r1, [sp, #4]
 8004e5a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f2      	bne.n	8004e48 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8004e62:	6903      	ldr	r3, [r0, #16]
 8004e64:	4798      	blx	r3
        retVal = true;
 8004e66:	9901      	ldr	r1, [sp, #4]
 8004e68:	4608      	mov	r0, r1
}
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 8004e6e:	f7ff ffe3 	bl	8004e38 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8004e72:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004e76:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e4      	bne.n	8004e48 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8004e7e:	4620      	mov	r0, r4
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	4798      	blx	r3
      retVal = true;
 8004e84:	2001      	movs	r0, #1
}
 8004e86:	b002      	add	sp, #8
 8004e88:	bd10      	pop	{r4, pc}
      retVal = true;
 8004e8a:	4608      	mov	r0, r1
}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8004e90:	69c3      	ldr	r3, [r0, #28]
 8004e92:	4718      	bx	r3

08004e94 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8004e94:	8b42      	ldrh	r2, [r0, #26]
 8004e96:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8004e98:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8004e9a:	440a      	add	r2, r1
 8004e9c:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8004e9e:	b18b      	cbz	r3, 8004ec4 <RVBS_Clear+0x30>
{
 8004ea0:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 8004ea2:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8004ea4:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 8004ea6:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8004eaa:	3301      	adds	r3, #1
 8004eac:	8b01      	ldrh	r1, [r0, #24]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4299      	cmp	r1, r3
 8004eb2:	d8f8      	bhi.n	8004ea6 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8004eb4:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8004eb6:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8004eb8:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8004eba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8004ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec2:	4770      	bx	lr
  pHandle->index = 0;
 8004ec4:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8004ec6:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8004ec8:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8004eca:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8004ece:	4770      	bx	lr

08004ed0 <RVBS_Init>:
{
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8004ed4:	300c      	adds	r0, #12
 8004ed6:	f7fc fefb 	bl	8001cd0 <RCM_RegisterRegConv>
 8004eda:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7ff ffd8 	bl	8004e94 <RVBS_Clear>
}
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	bf00      	nop

08004ee8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8004ee8:	88c3      	ldrh	r3, [r0, #6]
 8004eea:	8b42      	ldrh	r2, [r0, #26]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d305      	bcc.n	8004efc <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8004ef0:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	bf8c      	ite	hi
 8004ef6:	2004      	movhi	r0, #4
 8004ef8:	2000      	movls	r0, #0
 8004efa:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8004efc:	2002      	movs	r0, #2
  }
  return fault;
}
 8004efe:	4770      	bx	lr

08004f00 <RVBS_CalcAvVbus>:
{
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004f04:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004f08:	f7fc ff9e 	bl	8001e48 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8004f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f10:	4298      	cmp	r0, r3
 8004f12:	d01b      	beq.n	8004f4c <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8004f14:	6a26      	ldr	r6, [r4, #32]
 8004f16:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004f1a:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8004f1e:	8b25      	ldrh	r5, [r4, #24]
 8004f20:	b1cd      	cbz	r5, 8004f56 <RVBS_CalcAvVbus+0x56>
 8004f22:	2300      	movs	r3, #0
    wtemp = 0;
 8004f24:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8004f26:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 8004f30:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8004f32:	d3f8      	bcc.n	8004f26 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8004f34:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8004f38:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8004f3c:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8004f3e:	3d01      	subs	r5, #1
 8004f40:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 8004f42:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8004f44:	da09      	bge.n	8004f5a <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8004f46:	3301      	adds	r3, #1
 8004f48:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7ff ffcb 	bl	8004ee8 <RVBS_CheckFaultState>
 8004f52:	8120      	strh	r0, [r4, #8]
}
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8004f56:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8004f58:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7ff ffc1 	bl	8004ee8 <RVBS_CheckFaultState>
 8004f66:	8120      	strh	r0, [r4, #8]
}
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	bf00      	nop

08004f6c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8004f6c:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8004f6e:	2201      	movs	r2, #1
 8004f70:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 8004f72:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8004f76:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8004f7a:	4770      	bx	lr

08004f7c <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8004f7c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8004f80:	2a01      	cmp	r2, #1
 8004f82:	6941      	ldr	r1, [r0, #20]
 8004f84:	d90a      	bls.n	8004f9c <REMNG_Calc+0x20>
{
 8004f86:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8004f88:	6904      	ldr	r4, [r0, #16]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8004f8a:	3a01      	subs	r2, #1
    current_ref += pHandle->IncDecAmount;
 8004f8c:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8004f8e:	60c2      	str	r2, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8004f90:	6083      	str	r3, [r0, #8]
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8004f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f96:	fb93 f0f1 	sdiv	r0, r3, r1
 8004f9a:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8004f9c:	d104      	bne.n	8004fa8 <REMNG_Calc+0x2c>
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8004f9e:	6843      	ldr	r3, [r0, #4]
    pHandle->RampRemainingStep = 0u;
 8004fa0:	2200      	movs	r2, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8004fa2:	fb03 f301 	mul.w	r3, r3, r1
    pHandle->RampRemainingStep = 0u;
 8004fa6:	60c2      	str	r2, [r0, #12]
  pHandle->Ext = current_ref;
 8004fa8:	6083      	str	r3, [r0, #8]
}
 8004faa:	fb93 f0f1 	sdiv	r0, r3, r1
 8004fae:	4770      	bx	lr

08004fb0 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8004fb0:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8004fb2:	fab0 f080 	clz	r0, r0
 8004fb6:	0940      	lsrs	r0, r0, #5
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop

08004fbc <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 8004fbc:	2301      	movs	r3, #1
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	bfb8      	it	lt
 8004fc2:	4240      	neglt	r0, r0
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	e002      	b.n	8004fce <getScalingFactor+0x12>
 8004fc8:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d009      	beq.n	8004fe2 <getScalingFactor+0x26>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8004fce:	f1c3 021f 	rsb	r2, r3, #31
 8004fd2:	fa01 f202 	lsl.w	r2, r1, r2
    if ( TargetAbs >= limit )
 8004fd6:	4290      	cmp	r0, r2
 8004fd8:	d3f6      	bcc.n	8004fc8 <getScalingFactor+0xc>
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	fa01 f003 	lsl.w	r0, r1, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8004fe0:	4770      	bx	lr
 8004fe2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004fe6:	4770      	bx	lr

08004fe8 <REMNG_ExecRamp>:
{
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	4604      	mov	r4, r0
 8004fee:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	b372      	cbz	r2, 8005052 <REMNG_ExecRamp+0x6a>
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8004ff4:	6943      	ldr	r3, [r0, #20]
 8004ff6:	6886      	ldr	r6, [r0, #8]
 8004ff8:	fb96 f6f3 	sdiv	r6, r6, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8004ffc:	1b8f      	subs	r7, r1, r6
 8004ffe:	4638      	mov	r0, r7
 8005000:	f7ff ffdc 	bl	8004fbc <getScalingFactor>
 8005004:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff ffd8 	bl	8004fbc <getScalingFactor>
 800500c:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800500e:	4628      	mov	r0, r5
 8005010:	f7ff ffd4 	bl	8004fbc <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8005014:	45ca      	cmp	sl, r9
 8005016:	d318      	bcc.n	800504a <REMNG_ExecRamp+0x62>
 8005018:	4548      	cmp	r0, r9
 800501a:	bf28      	it	cs
 800501c:	4648      	movcs	r0, r9
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800501e:	6823      	ldr	r3, [r4, #0]
    aux /= 1000u;
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <REMNG_ExecRamp+0x84>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8005022:	6160      	str	r0, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005024:	fb03 f308 	mul.w	r3, r3, r8
    aux /= 1000u;
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800502e:	fb06 f600 	mul.w	r6, r6, r0
    pHandle->RampRemainingStep++;
 8005032:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8005034:	fb00 f007 	mul.w	r0, r0, r7
    pHandle->TargetFinal = TargetFinal;
 8005038:	6065      	str	r5, [r4, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800503a:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800503e:	60a6      	str	r6, [r4, #8]
    pHandle->IncDecAmount = aux1;
 8005040:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8005044:	2001      	movs	r0, #1
 8005046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504a:	4550      	cmp	r0, sl
 800504c:	bf28      	it	cs
 800504e:	4650      	movcs	r0, sl
 8005050:	e7e5      	b.n	800501e <REMNG_ExecRamp+0x36>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005052:	4608      	mov	r0, r1
 8005054:	f7ff ffb2 	bl	8004fbc <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005058:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800505c:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800505e:	60a5      	str	r5, [r4, #8]
    pHandle->IncDecAmount = 0;
 8005060:	e9c4 8803 	strd	r8, r8, [r4, #12]
}
 8005064:	2001      	movs	r0, #1
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506a:	bf00      	nop
 800506c:	10624dd3 	.word	0x10624dd3

08005070 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8005070:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop

08005078 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005078:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop

08005080 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8005080:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop

08005088 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005088:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 800508c:	b430      	push	{r4, r5}
 800508e:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 8005090:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 8005092:	bfb8      	it	lt
 8005094:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005096:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005098:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800509a:	7803      	ldrb	r3, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800509c:	8a81      	ldrh	r1, [r0, #20]
    hAux = -( *pMecSpeedUnit );
 800509e:	bfb8      	it	lt
 80050a0:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80050a2:	4295      	cmp	r5, r2
 80050a4:	d819      	bhi.n	80050da <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80050a6:	4291      	cmp	r1, r2
 80050a8:	bf2c      	ite	cs
 80050aa:	2200      	movcs	r2, #0
 80050ac:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80050ae:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 80050b2:	b2a9      	uxth	r1, r5
 80050b4:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 80050b6:	bfb8      	it	lt
 80050b8:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80050ba:	8b05      	ldrh	r5, [r0, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 80050bc:	bfb8      	it	lt
 80050be:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80050c0:	428d      	cmp	r5, r1
 80050c2:	d300      	bcc.n	80050c6 <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80050c4:	b15a      	cbz	r2, 80050de <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d901      	bls.n	80050ce <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 80050ca:	3301      	adds	r3, #1
 80050cc:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80050ce:	7003      	strb	r3, [r0, #0]

  return ( SpeedSensorReliability );
}
 80050d0:	1b18      	subs	r0, r3, r4
 80050d2:	bf18      	it	ne
 80050d4:	2001      	movne	r0, #1
 80050d6:	bc30      	pop	{r4, r5}
 80050d8:	4770      	bx	lr
    SpeedError = true;
 80050da:	2201      	movs	r2, #1
 80050dc:	e7e7      	b.n	80050ae <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 80050de:	429c      	cmp	r4, r3
 80050e0:	bf88      	it	hi
 80050e2:	2300      	movhi	r3, #0
 80050e4:	e7f3      	b.n	80050ce <SPD_IsMecSpeedReliable+0x46>
 80050e6:	bf00      	nop

080050e8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80050e8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80050ec:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80050f0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80050f4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80050f8:	b200      	sxth	r0, r0
 80050fa:	4770      	bx	lr

080050fc <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80050fc:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80050fe:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005102:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 8005106:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 8005108:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800510a:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800510c:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 800510e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 8005112:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005114:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8005118:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 800511a:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800511c:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800511e:	6183      	str	r3, [r0, #24]
}
 8005120:	bc30      	pop	{r4, r5}
 8005122:	4770      	bx	lr

08005124 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8005124:	6141      	str	r1, [r0, #20]
}
 8005126:	4770      	bx	lr

08005128 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8005128:	6940      	ldr	r0, [r0, #20]
 800512a:	4770      	bx	lr

0800512c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800512c:	7803      	ldrb	r3, [r0, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d000      	beq.n	8005134 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005132:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005134:	6900      	ldr	r0, [r0, #16]
 8005136:	2100      	movs	r1, #0
 8005138:	f7ff bc96 	b.w	8004a68 <PID_SetIntegralTerm>

0800513c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800513c:	6840      	ldr	r0, [r0, #4]
 800513e:	2800      	cmp	r0, #0
 8005140:	bfbc      	itt	lt
 8005142:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005146:	30ff      	addlt	r0, #255	; 0xff
}
 8005148:	1400      	asrs	r0, r0, #16
 800514a:	4770      	bx	lr

0800514c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800514c:	6880      	ldr	r0, [r0, #8]
 800514e:	2800      	cmp	r0, #0
 8005150:	bfbc      	itt	lt
 8005152:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005156:	30ff      	addlt	r0, #255	; 0xff
}
 8005158:	1400      	asrs	r0, r0, #16
 800515a:	4770      	bx	lr

0800515c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800515c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800515e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005160:	60c3      	str	r3, [r0, #12]
}
 8005162:	4770      	bx	lr

08005164 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005164:	7803      	ldrb	r3, [r0, #0]
{
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	4604      	mov	r4, r0
 800516a:	460d      	mov	r5, r1
 800516c:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800516e:	b313      	cbz	r3, 80051b6 <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005170:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005172:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005174:	2800      	cmp	r0, #0
 8005176:	bfbc      	itt	lt
 8005178:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800517c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800517e:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005180:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005184:	db1c      	blt.n	80051c0 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005186:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800518a:	428b      	cmp	r3, r1
 800518c:	dc18      	bgt.n	80051c0 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800518e:	8c23      	ldrh	r3, [r4, #32]
 8005190:	428b      	cmp	r3, r1
 8005192:	dd03      	ble.n	800519c <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005194:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005198:	428b      	cmp	r3, r1
 800519a:	db11      	blt.n	80051c0 <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800519c:	b9c6      	cbnz	r6, 80051d0 <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800519e:	7823      	ldrb	r3, [r4, #0]
 80051a0:	042d      	lsls	r5, r5, #16
 80051a2:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 80051a4:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80051a8:	bf0c      	ite	eq
 80051aa:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80051ac:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80051ae:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80051b0:	61a3      	str	r3, [r4, #24]
 80051b2:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80051b6:	f7ff ffc9 	bl	800514c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80051ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80051bc:	42ab      	cmp	r3, r5
 80051be:	da01      	bge.n	80051c4 <STC_ExecRamp+0x60>
      AllowedRange = false;
 80051c0:	2000      	movs	r0, #0
}
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80051c4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dcf9      	bgt.n	80051c0 <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 80051cc:	2e00      	cmp	r6, #0
 80051ce:	d0e6      	beq.n	800519e <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80051d0:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 80051d2:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 80051d4:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80051d6:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80051e0:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80051e2:	1a2d      	subs	r5, r5, r0
 80051e4:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80051e6:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80051e8:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80051ec:	2001      	movs	r0, #1
 80051ee:	61a5      	str	r5, [r4, #24]
}
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
 80051f2:	bf00      	nop
 80051f4:	10624dd3 	.word	0x10624dd3

080051f8 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80051fc:	6183      	str	r3, [r0, #24]
}
 80051fe:	4770      	bx	lr

08005200 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005200:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8005202:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005206:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005208:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800520a:	2a00      	cmp	r2, #0
 800520c:	bf18      	it	ne
 800520e:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 8005210:	2b01      	cmp	r3, #1
 8005212:	d910      	bls.n	8005236 <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8005214:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005216:	3b01      	subs	r3, #1
 8005218:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 800521a:	440d      	add	r5, r1
 800521c:	2d00      	cmp	r5, #0
 800521e:	4629      	mov	r1, r5
 8005220:	bfbc      	itt	lt
 8005222:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 8005226:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8005228:	2a01      	cmp	r2, #1
 800522a:	ea4f 4621 	mov.w	r6, r1, asr #16
 800522e:	d009      	beq.n	8005244 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8005230:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005232:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 8005234:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8005236:	d1f1      	bne.n	800521c <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005238:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800523c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800523e:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 8005240:	60c3      	str	r3, [r0, #12]
 8005242:	e7eb      	b.n	800521c <STC_CalcTorqueReference+0x1c>
 8005244:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005246:	6940      	ldr	r0, [r0, #20]
 8005248:	f7ff ff16 	bl	8005078 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800524c:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800524e:	b201      	sxth	r1, r0
 8005250:	6920      	ldr	r0, [r4, #16]
 8005252:	f7ff fc15 	bl	8004a80 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005256:	0403      	lsls	r3, r0, #16
 8005258:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	bf00      	nop

08005260 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8005260:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8005268:	8bc0      	ldrh	r0, [r0, #30]
 800526a:	4770      	bx	lr

0800526c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800526c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8005274:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005278:	2000      	movs	r0, #0
 800527a:	b29a      	uxth	r2, r3
 800527c:	f362 000f 	bfi	r0, r2, #0, #16
 8005280:	0c1b      	lsrs	r3, r3, #16
{
 8005282:	b082      	sub	sp, #8
  return IqdRefDefault;
 8005284:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005288:	b002      	add	sp, #8
 800528a:	4770      	bx	lr

0800528c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800528c:	b510      	push	{r4, lr}
 800528e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005290:	6940      	ldr	r0, [r0, #20]
 8005292:	f7ff fef1 	bl	8005078 <SPD_GetAvrgMecSpeedUnit>
 8005296:	0400      	lsls	r0, r0, #16
 8005298:	6060      	str	r0, [r4, #4]
}
 800529a:	bd10      	pop	{r4, pc}

0800529c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800529c:	2300      	movs	r3, #0
 800529e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80052a0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop

080052a8 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80052a8:	8843      	ldrh	r3, [r0, #2]
{
 80052aa:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 80052ac:	8885      	ldrh	r5, [r0, #4]
{
 80052ae:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 80052b0:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80052b2:	430b      	orrs	r3, r1
 80052b4:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80052b8:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80052ba:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 80052bc:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80052be:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 80052c0:	d006      	beq.n	80052d0 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80052c2:	b90a      	cbnz	r2, 80052c8 <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80052c4:	bc30      	pop	{r4, r5}
 80052c6:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80052c8:	200a      	movs	r0, #10
 80052ca:	7020      	strb	r0, [r4, #0]
}
 80052cc:	bc30      	pop	{r4, r5}
 80052ce:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	d1f7      	bne.n	80052c4 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 80052d4:	200b      	movs	r0, #11
 80052d6:	7020      	strb	r0, [r4, #0]
}
 80052d8:	bc30      	pop	{r4, r5}
 80052da:	4770      	bx	lr

080052dc <STM_NextState>:
{
 80052dc:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80052de:	7803      	ldrb	r3, [r0, #0]
 80052e0:	2b14      	cmp	r3, #20
 80052e2:	d819      	bhi.n	8005318 <STM_NextState+0x3c>
 80052e4:	e8df f003 	tbb	[pc, r3]
 80052e8:	240d1257 	.word	0x240d1257
 80052ec:	3c0d352e 	.word	0x3c0d352e
 80052f0:	1818423f 	.word	0x1818423f
 80052f4:	4a650b47 	.word	0x4a650b47
 80052f8:	53505e4d 	.word	0x53505e4d
 80052fc:	39          	.byte	0x39
 80052fd:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80052fe:	290e      	cmp	r1, #14
 8005300:	d001      	beq.n	8005306 <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 8005302:	2907      	cmp	r1, #7
 8005304:	d108      	bne.n	8005318 <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 8005306:	7001      	strb	r1, [r0, #0]
 8005308:	2001      	movs	r0, #1
}
 800530a:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800530c:	2907      	cmp	r1, #7
 800530e:	d0fa      	beq.n	8005306 <STM_NextState+0x2a>
 8005310:	f1a1 030d 	sub.w	r3, r1, #13
 8005314:	2b01      	cmp	r3, #1
 8005316:	d9f6      	bls.n	8005306 <STM_NextState+0x2a>
 8005318:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800531c:	2b01      	cmp	r3, #1
 800531e:	d00f      	beq.n	8005340 <STM_NextState+0x64>
 8005320:	2907      	cmp	r1, #7
 8005322:	d00d      	beq.n	8005340 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8005324:	2200      	movs	r2, #0
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	f7ff ffbe 	bl	80052a8 <STM_FaultProcessing>
 800532c:	2000      	movs	r0, #0
}
 800532e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005330:	2911      	cmp	r1, #17
 8005332:	d8f7      	bhi.n	8005324 <STM_NextState+0x48>
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <STM_NextState+0xe0>)
 8005336:	40cb      	lsrs	r3, r1
 8005338:	07da      	lsls	r2, r3, #31
 800533a:	d4e4      	bmi.n	8005306 <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800533c:	2903      	cmp	r1, #3
 800533e:	d1f1      	bne.n	8005324 <STM_NextState+0x48>
 8005340:	2000      	movs	r0, #0
}
 8005342:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005344:	2913      	cmp	r1, #19
 8005346:	d0de      	beq.n	8005306 <STM_NextState+0x2a>
 8005348:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800534c:	2b05      	cmp	r3, #5
 800534e:	d1e5      	bne.n	800531c <STM_NextState+0x40>
 8005350:	e7d9      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005352:	1f8b      	subs	r3, r1, #6
 8005354:	2b01      	cmp	r3, #1
 8005356:	d8df      	bhi.n	8005318 <STM_NextState+0x3c>
 8005358:	e7d5      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800535a:	2912      	cmp	r1, #18
 800535c:	d1d1      	bne.n	8005302 <STM_NextState+0x26>
 800535e:	e7d2      	b.n	8005306 <STM_NextState+0x2a>
      if ( bState == STOP )
 8005360:	2908      	cmp	r1, #8
 8005362:	d1d9      	bne.n	8005318 <STM_NextState+0x3c>
 8005364:	e7cf      	b.n	8005306 <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 8005366:	2909      	cmp	r1, #9
 8005368:	d1d6      	bne.n	8005318 <STM_NextState+0x3c>
 800536a:	e7cc      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800536c:	2900      	cmp	r1, #0
 800536e:	d0ca      	beq.n	8005306 <STM_NextState+0x2a>
 8005370:	290c      	cmp	r1, #12
 8005372:	d1d1      	bne.n	8005318 <STM_NextState+0x3c>
 8005374:	e7c7      	b.n	8005306 <STM_NextState+0x2a>
      if ( bState == IDLE )
 8005376:	2900      	cmp	r1, #0
 8005378:	d1ce      	bne.n	8005318 <STM_NextState+0x3c>
 800537a:	e7c4      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800537c:	2902      	cmp	r1, #2
 800537e:	d1c0      	bne.n	8005302 <STM_NextState+0x26>
 8005380:	e7c1      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005382:	2911      	cmp	r1, #17
 8005384:	d1bd      	bne.n	8005302 <STM_NextState+0x26>
 8005386:	e7be      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005388:	2904      	cmp	r1, #4
 800538a:	d1ba      	bne.n	8005302 <STM_NextState+0x26>
 800538c:	e7bb      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800538e:	1f0b      	subs	r3, r1, #4
 8005390:	2b01      	cmp	r3, #1
 8005392:	d8b6      	bhi.n	8005302 <STM_NextState+0x26>
 8005394:	e7b7      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005396:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800539a:	2b01      	cmp	r3, #1
 800539c:	d0b3      	beq.n	8005306 <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 800539e:	290c      	cmp	r1, #12
 80053a0:	d1be      	bne.n	8005320 <STM_NextState+0x44>
 80053a2:	e7b0      	b.n	8005306 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80053a4:	2914      	cmp	r1, #20
 80053a6:	d8b7      	bhi.n	8005318 <STM_NextState+0x3c>
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <STM_NextState+0xe4>)
 80053aa:	40cb      	lsrs	r3, r1
 80053ac:	07db      	lsls	r3, r3, #31
 80053ae:	d4aa      	bmi.n	8005306 <STM_NextState+0x2a>
 80053b0:	e7b2      	b.n	8005318 <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80053b2:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80053b6:	2b07      	cmp	r3, #7
 80053b8:	d1ae      	bne.n	8005318 <STM_NextState+0x3c>
 80053ba:	e7a4      	b.n	8005306 <STM_NextState+0x2a>
 80053bc:	00030092 	.word	0x00030092
 80053c0:	00140080 	.word	0x00140080

080053c4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80053c4:	7800      	ldrb	r0, [r0, #0]
 80053c6:	4770      	bx	lr

080053c8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80053c8:	7803      	ldrb	r3, [r0, #0]
 80053ca:	2b0b      	cmp	r3, #11
 80053cc:	d001      	beq.n	80053d2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80053ce:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80053d0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80053d2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80053d4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80053d6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80053d8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80053da:	2001      	movs	r0, #1
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop

080053e0 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80053e0:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80053e2:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80053e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80053ec:	f7ff b848 	b.w	8004480 <FCP_Init>

080053f0 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80053f0:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 80053f4:	b192      	cbz	r2, 800541c <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80053f6:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 80053fa:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80053fe:	4603      	mov	r3, r0
 8005400:	b199      	cbz	r1, 800542a <UFCP_TX_IRQ_Handler+0x3a>
 8005402:	2901      	cmp	r1, #1
 8005404:	d00b      	beq.n	800541e <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005406:	7d40      	ldrb	r0, [r0, #21]
 8005408:	3001      	adds	r0, #1
 800540a:	4281      	cmp	r1, r0
 800540c:	dc0f      	bgt.n	800542e <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800540e:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8005410:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005412:	7d00      	ldrb	r0, [r0, #20]
 8005414:	6050      	str	r0, [r2, #4]
 8005416:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800541a:	4770      	bx	lr
 800541c:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800541e:	7d40      	ldrb	r0, [r0, #21]
 8005420:	6050      	str	r0, [r2, #4]
      pBaseHandle->TxFrameLevel++;
 8005422:	3101      	adds	r1, #1
 8005424:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 8005428:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800542a:	7d00      	ldrb	r0, [r0, #20]
        break;
 800542c:	e7f8      	b.n	8005420 <UFCP_TX_IRQ_Handler+0x30>
{
 800542e:	b430      	push	{r4, r5}
 8005430:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 8005434:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005436:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005438:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800543c:	2500      	movs	r5, #0
 800543e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005442:	60d1      	str	r1, [r2, #12]
 8005444:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005448:	4623      	mov	r3, r4
}
 800544a:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800544c:	4718      	bx	r3
 800544e:	bf00      	nop

08005450 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005450:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8005454:	b10b      	cbz	r3, 800545a <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005456:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005458:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800545a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 800545e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005462:	68d3      	ldr	r3, [r2, #12]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005464:	2101      	movs	r1, #1
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800546e:	2002      	movs	r0, #2
 8005470:	60d3      	str	r3, [r2, #12]
 8005472:	4770      	bx	lr

08005474 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005478:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800547a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800547e:	b110      	cbz	r0, 8005486 <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005480:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 8005486:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8005488:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800548a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800548c:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800548e:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8005492:	2b00      	cmp	r3, #0
 8005494:	d05d      	beq.n	8005552 <UFCP_Send+0xde>
 8005496:	1d10      	adds	r0, r2, #4
 8005498:	f104 051a 	add.w	r5, r4, #26
 800549c:	4295      	cmp	r5, r2
 800549e:	bf88      	it	hi
 80054a0:	42b8      	cmphi	r0, r7
 80054a2:	d86b      	bhi.n	800557c <UFCP_Send+0x108>
 80054a4:	2b0b      	cmp	r3, #11
 80054a6:	d969      	bls.n	800557c <UFCP_Send+0x108>
 80054a8:	4250      	negs	r0, r2
 80054aa:	f000 0003 	and.w	r0, r0, #3
 80054ae:	1cc5      	adds	r5, r0, #3
 80054b0:	42a9      	cmp	r1, r5
 80054b2:	d339      	bcc.n	8005528 <UFCP_Send+0xb4>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d06c      	beq.n	8005592 <UFCP_Send+0x11e>
 80054b8:	7811      	ldrb	r1, [r2, #0]
 80054ba:	75a1      	strb	r1, [r4, #22]
 80054bc:	2801      	cmp	r0, #1
 80054be:	f1a3 0102 	sub.w	r1, r3, #2
 80054c2:	b2c9      	uxtb	r1, r1
 80054c4:	f102 0c01 	add.w	ip, r2, #1
 80054c8:	f104 0717 	add.w	r7, r4, #23
 80054cc:	d012      	beq.n	80054f4 <UFCP_Send+0x80>
 80054ce:	7851      	ldrb	r1, [r2, #1]
 80054d0:	75e1      	strb	r1, [r4, #23]
 80054d2:	2803      	cmp	r0, #3
 80054d4:	f1a3 0103 	sub.w	r1, r3, #3
 80054d8:	b2c9      	uxtb	r1, r1
 80054da:	f102 0c02 	add.w	ip, r2, #2
 80054de:	f104 0718 	add.w	r7, r4, #24
 80054e2:	d107      	bne.n	80054f4 <UFCP_Send+0x80>
 80054e4:	7891      	ldrb	r1, [r2, #2]
 80054e6:	7621      	strb	r1, [r4, #24]
 80054e8:	1f19      	subs	r1, r3, #4
 80054ea:	b2c9      	uxtb	r1, r1
 80054ec:	f102 0c03 	add.w	ip, r2, #3
 80054f0:	f104 0719 	add.w	r7, r4, #25
 80054f4:	1a1b      	subs	r3, r3, r0
 80054f6:	b2dd      	uxtb	r5, r3
 80054f8:	f100 0316 	add.w	r3, r0, #22
 80054fc:	4402      	add	r2, r0
 80054fe:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8005502:	18e0      	adds	r0, r4, r3
 8005504:	2300      	movs	r3, #0
 8005506:	3301      	adds	r3, #1
 8005508:	b2de      	uxtb	r6, r3
 800550a:	f852 eb04 	ldr.w	lr, [r2], #4
 800550e:	f840 eb04 	str.w	lr, [r0], #4
 8005512:	45b0      	cmp	r8, r6
 8005514:	d8f7      	bhi.n	8005506 <UFCP_Send+0x92>
 8005516:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 800551a:	1ac9      	subs	r1, r1, r3
 800551c:	429d      	cmp	r5, r3
 800551e:	b2c9      	uxtb	r1, r1
 8005520:	eb0c 0203 	add.w	r2, ip, r3
 8005524:	441f      	add	r7, r3
 8005526:	d014      	beq.n	8005552 <UFCP_Send+0xde>
 8005528:	7813      	ldrb	r3, [r2, #0]
 800552a:	703b      	strb	r3, [r7, #0]
 800552c:	b189      	cbz	r1, 8005552 <UFCP_Send+0xde>
 800552e:	7853      	ldrb	r3, [r2, #1]
 8005530:	707b      	strb	r3, [r7, #1]
 8005532:	2901      	cmp	r1, #1
 8005534:	d00d      	beq.n	8005552 <UFCP_Send+0xde>
 8005536:	7893      	ldrb	r3, [r2, #2]
 8005538:	70bb      	strb	r3, [r7, #2]
 800553a:	2902      	cmp	r1, #2
 800553c:	d009      	beq.n	8005552 <UFCP_Send+0xde>
 800553e:	78d3      	ldrb	r3, [r2, #3]
 8005540:	70fb      	strb	r3, [r7, #3]
 8005542:	2903      	cmp	r1, #3
 8005544:	d005      	beq.n	8005552 <UFCP_Send+0xde>
 8005546:	7913      	ldrb	r3, [r2, #4]
 8005548:	713b      	strb	r3, [r7, #4]
 800554a:	2904      	cmp	r1, #4
 800554c:	d001      	beq.n	8005552 <UFCP_Send+0xde>
 800554e:	7953      	ldrb	r3, [r2, #5]
 8005550:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005552:	f104 0014 	add.w	r0, r4, #20
 8005556:	f7fe ffa9 	bl	80044ac <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800555a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800555e:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005568:	68d3      	ldr	r3, [r2, #12]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800556a:	2101      	movs	r1, #1
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8005574:	2002      	movs	r0, #2
 8005576:	60d3      	str	r3, [r2, #12]
}
 8005578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800557c:	3101      	adds	r1, #1
 800557e:	4411      	add	r1, r2
 8005580:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8005584:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005588:	f803 0f01 	strb.w	r0, [r3, #1]!
 800558c:	428a      	cmp	r2, r1
 800558e:	d1f9      	bne.n	8005584 <UFCP_Send+0x110>
 8005590:	e7df      	b.n	8005552 <UFCP_Send+0xde>
 8005592:	4694      	mov	ip, r2
 8005594:	e7ae      	b.n	80054f4 <UFCP_Send+0x80>
 8005596:	bf00      	nop

08005598 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005598:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800559c:	b1b3      	cbz	r3, 80055cc <UFCP_RX_IRQ_Handler+0x34>
{
 800559e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 80055a0:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 80055a4:	4604      	mov	r4, r0
{
 80055a6:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 80055a8:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 80055aa:	b1e3      	cbz	r3, 80055e6 <UFCP_RX_IRQ_Handler+0x4e>
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d00f      	beq.n	80055d0 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 80055b0:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 80055b4:	3101      	adds	r1, #1
 80055b6:	428b      	cmp	r3, r1
 80055b8:	dc1f      	bgt.n	80055fa <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80055ba:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 80055bc:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80055be:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80055c2:	4823      	ldr	r0, [pc, #140]	; (8005650 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 80055c4:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80055c8:	b003      	add	sp, #12
 80055ca:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80055cc:	4820      	ldr	r0, [pc, #128]	; (8005650 <UFCP_RX_IRQ_Handler+0xb8>)
}
 80055ce:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80055d0:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 80055d2:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80055d6:	481e      	ldr	r0, [pc, #120]	; (8005650 <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 80055d8:	bf54      	ite	pl
 80055da:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80055dc:	2300      	movmi	r3, #0
 80055de:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80055e2:	b003      	add	sp, #12
 80055e4:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80055e6:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80055e8:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80055ec:	4819      	ldr	r0, [pc, #100]	; (8005654 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80055ee:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80055f6:	b003      	add	sp, #12
 80055f8:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80055fa:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80055fe:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005602:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 8005604:	2200      	movs	r2, #0
 8005606:	f023 0320 	bic.w	r3, r3, #32
 800560a:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800560c:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8005610:	60cb      	str	r3, [r1, #12]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005612:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005616:	f7fe ff49 	bl	80044ac <FCP_CalcCRC>
 800561a:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800561e:	4283      	cmp	r3, r0
 8005620:	d10a      	bne.n	8005638 <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	68a5      	ldr	r5, [r4, #8]
 8005626:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800562a:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800562e:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8005632:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005634:	4808      	ldr	r0, [pc, #32]	; (8005658 <UFCP_RX_IRQ_Handler+0xc0>)
 8005636:	e7c7      	b.n	80055c8 <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 8005638:	aa02      	add	r2, sp, #8
 800563a:	230a      	movs	r3, #10
 800563c:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005640:	4620      	mov	r0, r4
 8005642:	2301      	movs	r3, #1
 8005644:	21ff      	movs	r1, #255	; 0xff
 8005646:	f7ff ff15 	bl	8005474 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800564a:	4803      	ldr	r0, [pc, #12]	; (8005658 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800564c:	e7bc      	b.n	80055c8 <UFCP_RX_IRQ_Handler+0x30>
 800564e:	bf00      	nop
 8005650:	080062fc 	.word	0x080062fc
 8005654:	080062fe 	.word	0x080062fe
 8005658:	08006300 	.word	0x08006300

0800565c <UFCP_OVR_IRQ_Handler>:
{
 800565c:	b500      	push	{lr}
 800565e:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8005660:	aa02      	add	r2, sp, #8
 8005662:	2308      	movs	r3, #8
 8005664:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005668:	21ff      	movs	r1, #255	; 0xff
 800566a:	2301      	movs	r3, #1
 800566c:	f7ff ff02 	bl	8005474 <UFCP_Send>
}
 8005670:	b003      	add	sp, #12
 8005672:	f85d fb04 	ldr.w	pc, [sp], #4
 8005676:	bf00      	nop

08005678 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005678:	2300      	movs	r3, #0
 800567a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800567e:	4770      	bx	lr

08005680 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8005680:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005682:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8005684:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8005686:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8005688:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800568a:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800568c:	8243      	strh	r3, [r0, #18]
  pHandle->wElSpeedDpp32 = 0;
 800568e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->hRemainingStep = 0u;
 8005692:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 8005694:	8603      	strh	r3, [r0, #48]	; 0x30
  pHandle->bTransitionStarted = false;
 8005696:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800569a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->bTransitionLocked = false;
 800569e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

  pHandle->bCopyObserver = false;
 80056a2:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 80056a6:	4770      	bx	lr

080056a8 <VSS_Init>:
{
 80056a8:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 80056aa:	f7ff ffe9 	bl	8005680 <VSS_Clear>
}
 80056ae:	bd08      	pop	{r3, pc}

080056b0 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 80056b0:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 80056b4:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 80056b6:	bb7a      	cbnz	r2, 8005718 <VSS_CalcElAngle+0x68>
{
 80056b8:	b4f0      	push	{r4, r5, r6, r7}
  {
    hRetAngle = *( int16_t * )pInputVars_str;
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80056ba:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80056bc:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80056c0:	88c7      	ldrh	r7, [r0, #6]
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
#endif

    if ( pHandle->bTransitionStarted == true )
 80056c2:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 80056c6:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80056c8:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80056cc:	442a      	add	r2, r5
 80056ce:	b292      	uxth	r2, r2
 80056d0:	b210      	sxth	r0, r2
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80056d2:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80056d4:	8618      	strh	r0, [r3, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80056d6:	80dc      	strh	r4, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 80056d8:	b1de      	cbz	r6, 8005712 <VSS_CalcElAngle+0x62>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 80056da:	f9b3 402e 	ldrsh.w	r4, [r3, #46]	; 0x2e
 80056de:	b1fc      	cbz	r4, 8005720 <VSS_CalcElAngle+0x70>
        pHandle->bTransitionEnded = true;
        pHandle->_Super.bSpeedErrorNumber = 0u;
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 80056e0:	3c01      	subs	r4, #1
 80056e2:	b224      	sxth	r4, r4
 80056e4:	85dc      	strh	r4, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80056e6:	2d00      	cmp	r5, #0
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80056e8:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80056ea:	db29      	blt.n	8005740 <VSS_CalcElAngle+0x90>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80056ec:	1a8a      	subs	r2, r1, r2
 80056ee:	b212      	sxth	r2, r2
 80056f0:	2601      	movs	r6, #1
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
          hSignCorr = -1;
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80056f2:	fb02 f404 	mul.w	r4, r2, r4
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80056f6:	f9b3 5036 	ldrsh.w	r5, [r3, #54]	; 0x36
 80056fa:	fb94 f4f5 	sdiv	r4, r4, r5
#endif

        hAngleCorr *= hSignCorr;

        if ( hAngleDiff >= 0 )
 80056fe:	2a00      	cmp	r2, #0
        hAngleCorr *= hSignCorr;
 8005700:	fb14 f406 	smulbb	r4, r4, r6
 8005704:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 8005706:	db14      	blt.n	8005732 <VSS_CalcElAngle+0x82>
        {
          pHandle->bTransitionLocked = true;
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8005708:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 800570a:	2201      	movs	r2, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800570c:	b220      	sxth	r0, r4
          pHandle->bTransitionLocked = true;
 800570e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8005712:	8098      	strh	r0, [r3, #4]
  return hRetAngle;
}
 8005714:	bcf0      	pop	{r4, r5, r6, r7}
 8005716:	4770      	bx	lr
    hRetAngle = *( int16_t * )pInputVars_str;
 8005718:	f9b1 0000 	ldrsh.w	r0, [r1]
  pHandle->_Super.hElAngle = hRetAngle;
 800571c:	8098      	strh	r0, [r3, #4]
}
 800571e:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 8005720:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8005724:	701c      	strb	r4, [r3, #0]
        pHandle->bTransitionEnded = true;
 8005726:	2201      	movs	r2, #1
 8005728:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 800572c:	8098      	strh	r0, [r3, #4]
}
 800572e:	bcf0      	pop	{r4, r5, r6, r7}
 8005730:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 8005732:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8005736:	2a00      	cmp	r2, #0
 8005738:	d0eb      	beq.n	8005712 <VSS_CalcElAngle+0x62>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800573a:	440c      	add	r4, r1
 800573c:	b220      	sxth	r0, r4
 800573e:	e7e8      	b.n	8005712 <VSS_CalcElAngle+0x62>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8005740:	1a52      	subs	r2, r2, r1
 8005742:	b212      	sxth	r2, r2
 8005744:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005748:	e7d3      	b.n	80056f2 <VSS_CalcElAngle+0x42>
 800574a:	bf00      	nop

0800574c <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 800574c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800574e:	2b01      	cmp	r3, #1
{
 8005750:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8005752:	d927      	bls.n	80057a4 <VSS_CalcAvrgMecSpeedUnit+0x58>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8005754:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8005758:	4413      	add	r3, r2
 800575a:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800575c:	2b00      	cmp	r3, #0
 800575e:	bfbc      	itt	lt
 8005760:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005764:	33ff      	addlt	r3, #255	; 0xff

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8005766:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005768:	7846      	ldrb	r6, [r0, #1]
 800576a:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800576c:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800576e:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8005772:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005776:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005778:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800577c:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8005780:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8005782:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8005784:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8005786:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005788:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 800578a:	1e53      	subs	r3, r2, #1
 800578c:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800578e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005792:	b923      	cbnz	r3, 800579e <VSS_CalcAvrgMecSpeedUnit+0x52>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005794:	78c2      	ldrb	r2, [r0, #3]
 8005796:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8005798:	bc70      	pop	{r4, r5, r6}
 800579a:	4618      	mov	r0, r3
 800579c:	4770      	bx	lr
 800579e:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 80057a0:	f7ff bc72 	b.w	8005088 <SPD_IsMecSpeedReliable>
  else if ( pHandle->hRemainingStep == 1u )
 80057a4:	d003      	beq.n	80057ae <VSS_CalcAvrgMecSpeedUnit+0x62>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80057a6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80057aa:	800b      	strh	r3, [r1, #0]
 80057ac:	e7ef      	b.n	800578e <VSS_CalcAvrgMecSpeedUnit+0x42>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80057ae:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 80057b2:	800a      	strh	r2, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80057b4:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80057b6:	8182      	strh	r2, [r0, #12]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 80057b8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80057bc:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80057be:	7844      	ldrb	r4, [r0, #1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80057c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 80057c4:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80057c8:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 80057ca:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 80057ce:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80057d0:	fb14 f303 	smulbb	r3, r4, r3
 80057d4:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 80057d6:	8502      	strh	r2, [r0, #40]	; 0x28
 80057d8:	e7d9      	b.n	800578e <VSS_CalcAvrgMecSpeedUnit+0x42>
 80057da:	bf00      	nop

080057dc <VSS_SetMecAngle>:
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 80057dc:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 80057de:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80057e0:	7843      	ldrb	r3, [r0, #1]
 80057e2:	fb91 f1f3 	sdiv	r1, r1, r3
 80057e6:	80c1      	strh	r1, [r0, #6]
}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 80057ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80057f0:	bb73      	cbnz	r3, 8005850 <VSS_SetMecAcceleration+0x64>
{
 80057f2:	b470      	push	{r4, r5, r6}
 80057f4:	8b45      	ldrh	r5, [r0, #26]
 80057f6:	69c3      	ldr	r3, [r0, #28]
 80057f8:	7844      	ldrb	r4, [r0, #1]
 80057fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80057fe:	006d      	lsls	r5, r5, #1
 8005800:	fb03 f301 	mul.w	r3, r3, r1
 8005804:	fb93 f3f5 	sdiv	r3, r3, r5
  {
    if ( hDurationms == 0u )
 8005808:	b1d2      	cbz	r2, 8005840 <VSS_SetMecAcceleration+0x54>
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800580a:	8e86      	ldrh	r6, [r0, #52]	; 0x34
 800580c:	4d11      	ldr	r5, [pc, #68]	; (8005854 <VSS_SetMecAcceleration+0x68>)
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800580e:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8005810:	fb02 f206 	mul.w	r2, r2, r6
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8005814:	fba5 1202 	umull	r1, r2, r5, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8005818:	f3c2 128f 	ubfx	r2, r2, #6, #16
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800581c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8005820:	fb91 f5f4 	sdiv	r5, r1, r4
      hNbrStep++;
 8005824:	3201      	adds	r2, #1
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8005826:	1b5b      	subs	r3, r3, r5
      hNbrStep++;
 8005828:	b292      	uxth	r2, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800582a:	041b      	lsls	r3, r3, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800582c:	0409      	lsls	r1, r1, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800582e:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8005832:	fb04 f303 	mul.w	r3, r4, r3
      pHandle->hRemainingStep = hNbrStep;
 8005836:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8005838:	e9c0 3108 	strd	r3, r1, [r0, #32]
    }
  }
}
 800583c:	bc70      	pop	{r4, r5, r6}
 800583e:	4770      	bx	lr
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8005840:	fb13 f304 	smulbb	r3, r3, r4
 8005844:	81c3      	strh	r3, [r0, #14]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8005846:	8181      	strh	r1, [r0, #12]
      pHandle->hRemainingStep = 0u;
 8005848:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800584a:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 800584c:	bc70      	pop	{r4, r5, r6}
 800584e:	4770      	bx	lr
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	10624dd3 	.word	0x10624dd3

08005858 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8005858:	b151      	cbz	r1, 8005870 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 800585a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 800585e:	2201      	movs	r2, #1
 8005860:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8005864:	b923      	cbnz	r3, 8005870 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8005866:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800586a:	7003      	strb	r3, [r0, #0]
      bAux = false;
 800586c:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 800586e:	4770      	bx	lr
  bool bAux = true;
 8005870:	2001      	movs	r0, #1
 8005872:	4770      	bx	lr

08005874 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8005874:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop

0800587c <RUC_Init>:
 800587c:	b430      	push	{r4, r5}
 800587e:	6681      	str	r1, [r0, #104]	; 0x68
 8005880:	2100      	movs	r1, #0
 8005882:	9c02      	ldr	r4, [sp, #8]
 8005884:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8005888:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800588c:	f110 010c 	adds.w	r1, r0, #12
 8005890:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8005894:	6744      	str	r4, [r0, #116]	; 0x74
 8005896:	d023      	beq.n	80058e0 <RUC_Init+0x64>
 8005898:	6943      	ldr	r3, [r0, #20]
 800589a:	b323      	cbz	r3, 80058e6 <RUC_Init+0x6a>
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	b323      	cbz	r3, 80058ea <RUC_Init+0x6e>
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	b323      	cbz	r3, 80058ee <RUC_Init+0x72>
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	b1c3      	cbz	r3, 80058da <RUC_Init+0x5e>
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2105      	movs	r1, #5
 80058ac:	b1b3      	cbz	r3, 80058dc <RUC_Init+0x60>
 80058ae:	2204      	movs	r2, #4
 80058b0:	2105      	movs	r1, #5
 80058b2:	8805      	ldrh	r5, [r0, #0]
 80058b4:	4c0f      	ldr	r4, [pc, #60]	; (80058f4 <RUC_Init+0x78>)
 80058b6:	2364      	movs	r3, #100	; 0x64
 80058b8:	fb03 f305 	mul.w	r3, r3, r5
 80058bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80058c0:	fba4 4303 	umull	r4, r3, r4, r3
 80058c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80058c8:	2400      	movs	r4, #0
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	6154      	str	r4, [r2, #20]
 80058ce:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 80058d2:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 80058d6:	bc30      	pop	{r4, r5}
 80058d8:	4770      	bx	lr
 80058da:	2104      	movs	r1, #4
 80058dc:	1e4a      	subs	r2, r1, #1
 80058de:	e7e8      	b.n	80058b2 <RUC_Init+0x36>
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	e7e5      	b.n	80058b2 <RUC_Init+0x36>
 80058e6:	2101      	movs	r1, #1
 80058e8:	e7f8      	b.n	80058dc <RUC_Init+0x60>
 80058ea:	2102      	movs	r1, #2
 80058ec:	e7f6      	b.n	80058dc <RUC_Init+0x60>
 80058ee:	2103      	movs	r1, #3
 80058f0:	e7f4      	b.n	80058dc <RUC_Init+0x60>
 80058f2:	bf00      	nop
 80058f4:	10624dd3 	.word	0x10624dd3

080058f8 <RUC_Clear>:
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	4604      	mov	r4, r0
 80058fe:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8005900:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8005904:	80e1      	strh	r1, [r4, #6]
 8005906:	2500      	movs	r5, #0
 8005908:	4638      	mov	r0, r7
 800590a:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800590e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005912:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8005916:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800591a:	460e      	mov	r6, r1
 800591c:	f7ff feb0 	bl	8005680 <VSS_Clear>
 8005920:	4629      	mov	r1, r5
 8005922:	4640      	mov	r0, r8
 8005924:	f7ff fc1a 	bl	800515c <STC_SetControlMode>
 8005928:	8861      	ldrh	r1, [r4, #2]
 800592a:	b2b6      	uxth	r6, r6
 800592c:	fb11 f106 	smulbb	r1, r1, r6
 8005930:	b209      	sxth	r1, r1
 8005932:	4638      	mov	r0, r7
 8005934:	f7ff ff52 	bl	80057dc <VSS_SetMecAngle>
 8005938:	462a      	mov	r2, r5
 800593a:	4629      	mov	r1, r5
 800593c:	4640      	mov	r0, r8
 800593e:	f7ff fc11 	bl	8005164 <STC_ExecRamp>
 8005942:	8a21      	ldrh	r1, [r4, #16]
 8005944:	89a2      	ldrh	r2, [r4, #12]
 8005946:	fb11 f106 	smulbb	r1, r1, r6
 800594a:	b209      	sxth	r1, r1
 800594c:	4640      	mov	r0, r8
 800594e:	f7ff fc09 	bl	8005164 <STC_ExecRamp>
 8005952:	89e1      	ldrh	r1, [r4, #14]
 8005954:	89a2      	ldrh	r2, [r4, #12]
 8005956:	fb11 f106 	smulbb	r1, r1, r6
 800595a:	4638      	mov	r0, r7
 800595c:	b209      	sxth	r1, r1
 800595e:	f7ff ff45 	bl	80057ec <VSS_SetMecAcceleration>
 8005962:	89a0      	ldrh	r0, [r4, #12]
 8005964:	8823      	ldrh	r3, [r4, #0]
 8005966:	4907      	ldr	r1, [pc, #28]	; (8005984 <RUC_Clear+0x8c>)
 8005968:	6962      	ldr	r2, [r4, #20]
 800596a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800596e:	fb03 f300 	mul.w	r3, r3, r0
 8005972:	fba1 1303 	umull	r1, r3, r1, r3
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	3301      	adds	r3, #1
 800597a:	80a3      	strh	r3, [r4, #4]
 800597c:	60a2      	str	r2, [r4, #8]
 800597e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005982:	bf00      	nop
 8005984:	10624dd3 	.word	0x10624dd3

08005988 <RUC_Exec>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	8883      	ldrh	r3, [r0, #4]
 800598c:	bb53      	cbnz	r3, 80059e4 <RUC_Exec+0x5c>
 800598e:	6883      	ldr	r3, [r0, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02e      	beq.n	80059f2 <RUC_Exec+0x6a>
 8005994:	88c5      	ldrh	r5, [r0, #6]
 8005996:	8899      	ldrh	r1, [r3, #4]
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	4604      	mov	r4, r0
 800599c:	fb11 f105 	smulbb	r1, r1, r5
 80059a0:	b209      	sxth	r1, r1
 80059a2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80059a4:	f7ff fbde 	bl	8005164 <STC_ExecRamp>
 80059a8:	68a3      	ldr	r3, [r4, #8]
 80059aa:	88e5      	ldrh	r5, [r4, #6]
 80059ac:	8859      	ldrh	r1, [r3, #2]
 80059ae:	881a      	ldrh	r2, [r3, #0]
 80059b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80059b2:	fb11 f105 	smulbb	r1, r1, r5
 80059b6:	b209      	sxth	r1, r1
 80059b8:	f7ff ff18 	bl	80057ec <VSS_SetMecAcceleration>
 80059bc:	68a2      	ldr	r2, [r4, #8]
 80059be:	8823      	ldrh	r3, [r4, #0]
 80059c0:	8810      	ldrh	r0, [r2, #0]
 80059c2:	490d      	ldr	r1, [pc, #52]	; (80059f8 <RUC_Exec+0x70>)
 80059c4:	6892      	ldr	r2, [r2, #8]
 80059c6:	60a2      	str	r2, [r4, #8]
 80059c8:	fb03 f300 	mul.w	r3, r3, r0
 80059cc:	fba1 2303 	umull	r2, r3, r1, r3
 80059d0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	3301      	adds	r3, #1
 80059d8:	3201      	adds	r2, #1
 80059da:	80a3      	strh	r3, [r4, #4]
 80059dc:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80059e0:	2001      	movs	r0, #1
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8083      	strh	r3, [r0, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0cf      	beq.n	800598e <RUC_Exec+0x6>
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7f7      	b.n	80059e2 <RUC_Exec+0x5a>
 80059f2:	4618      	mov	r0, r3
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	bf00      	nop
 80059f8:	10624dd3 	.word	0x10624dd3

080059fc <RUC_FirstAccelerationStageReached>:
 80059fc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005a00:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8005a04:	4282      	cmp	r2, r0
 8005a06:	bf34      	ite	cc
 8005a08:	2000      	movcc	r0, #0
 8005a0a:	2001      	movcs	r0, #1
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <RUC_SetPhaseDurationms>:
 8005a10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a18:	818a      	strh	r2, [r1, #12]
 8005a1a:	4770      	bx	lr

08005a1c <RUC_SetPhaseFinalMecSpeedUnit>:
 8005a1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a24:	81ca      	strh	r2, [r1, #14]
 8005a26:	4770      	bx	lr

08005a28 <RUC_SetPhaseFinalTorque>:
 8005a28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a30:	820a      	strh	r2, [r1, #16]
 8005a32:	4770      	bx	lr

08005a34 <RUC_GetPhaseDurationms>:
 8005a34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a3c:	8988      	ldrh	r0, [r1, #12]
 8005a3e:	4770      	bx	lr

08005a40 <RUC_GetPhaseFinalMecSpeedUnit>:
 8005a40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a48:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop

08005a50 <RUC_GetPhaseFinalTorque>:
 8005a50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a58:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop

08005a60 <RUC_GetNumberOfPhases>:
 8005a60:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <STO_PLL_CalcElAngle>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8005a70:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8005a74:	4604      	mov	r4, r0
 8005a76:	03d8      	lsls	r0, r3, #15
 8005a78:	1ac2      	subs	r2, r0, r3
 8005a7a:	4596      	cmp	lr, r2
 8005a7c:	b089      	sub	sp, #36	; 0x24
 8005a7e:	f340 80c1 	ble.w	8005c04 <STO_PLL_CalcElAngle+0x19c>
 8005a82:	66a2      	str	r2, [r4, #104]	; 0x68
 8005a84:	4696      	mov	lr, r2
 8005a86:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8005a8a:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8005a8e:	fa4e f605 	asr.w	r6, lr, r5
 8005a92:	9603      	str	r6, [sp, #12]
 8005a94:	4562      	cmp	r2, ip
 8005a96:	b236      	sxth	r6, r6
 8005a98:	9601      	str	r6, [sp, #4]
 8005a9a:	f280 80c8 	bge.w	8005c2e <STO_PLL_CalcElAngle+0x1c6>
 8005a9e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8005aa0:	4694      	mov	ip, r2
 8005aa2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8005aa6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005aa8:	03de      	lsls	r6, r3, #15
 8005aaa:	fa4c f205 	asr.w	r2, ip, r5
 8005aae:	1af5      	subs	r5, r6, r3
 8005ab0:	9204      	str	r2, [sp, #16]
 8005ab2:	42a8      	cmp	r0, r5
 8005ab4:	b212      	sxth	r2, r2
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	f340 80b3 	ble.w	8005c22 <STO_PLL_CalcElAngle+0x1ba>
 8005abc:	6625      	str	r5, [r4, #96]	; 0x60
 8005abe:	4628      	mov	r0, r5
 8005ac0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ac2:	4295      	cmp	r5, r2
 8005ac4:	f280 80a7 	bge.w	8005c16 <STO_PLL_CalcElAngle+0x1ae>
 8005ac8:	6665      	str	r5, [r4, #100]	; 0x64
 8005aca:	462a      	mov	r2, r5
 8005acc:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8005ad0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8005ad4:	890d      	ldrh	r5, [r1, #8]
 8005ad6:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8005ada:	888e      	ldrh	r6, [r1, #4]
 8005adc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8005ae0:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8005ae4:	9901      	ldr	r1, [sp, #4]
 8005ae6:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8005aea:	fa40 f103 	asr.w	r1, r0, r3
 8005aee:	fa42 f303 	asr.w	r3, r2, r3
 8005af2:	1b8e      	subs	r6, r1, r6
 8005af4:	fb11 f109 	smulbb	r1, r1, r9
 8005af8:	fb13 f909 	smulbb	r9, r3, r9
 8005afc:	eba3 030a 	sub.w	r3, r3, sl
 8005b00:	9305      	str	r3, [sp, #20]
 8005b02:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8005b06:	9b02      	ldr	r3, [sp, #8]
 8005b08:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8005b0c:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8005b10:	b236      	sxth	r6, r6
 8005b12:	1a41      	subs	r1, r0, r1
 8005b14:	fb05 f707 	mul.w	r7, r5, r7
 8005b18:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8005b1c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8005b1e:	eba2 0209 	sub.w	r2, r2, r9
 8005b22:	fb0b 1106 	mla	r1, fp, r6, r1
 8005b26:	143f      	asrs	r7, r7, #16
 8005b28:	fb0b 2b03 	mla	fp, fp, r3, r2
 8005b2c:	fb0a 1107 	mla	r1, sl, r7, r1
 8005b30:	fb05 f508 	mul.w	r5, r5, r8
 8005b34:	9a01      	ldr	r2, [sp, #4]
 8005b36:	9f02      	ldr	r7, [sp, #8]
 8005b38:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8005b3c:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8005b40:	142d      	asrs	r5, r5, #16
 8005b42:	fb0a b505 	mla	r5, sl, r5, fp
 8005b46:	4107      	asrs	r7, r0
 8005b48:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8005b4c:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8005b50:	fa42 f000 	asr.w	r0, r2, r0
 8005b54:	fb06 e609 	mla	r6, r6, r9, lr
 8005b58:	fb09 c303 	mla	r3, r9, r3, ip
 8005b5c:	fb07 f708 	mul.w	r7, r7, r8
 8005b60:	fb00 f008 	mul.w	r0, r0, r8
 8005b64:	fb07 670a 	mla	r7, r7, sl, r6
 8005b68:	fb00 361a 	mls	r6, r0, sl, r3
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8005b72:	fb0b 1813 	mls	r8, fp, r3, r1
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	fb0b 5513 	mls	r5, fp, r3, r5
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	d147      	bne.n	8005c10 <STO_PLL_CalcElAngle+0x1a8>
 8005b80:	f1ba 0f00 	cmp.w	sl, #0
 8005b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b88:	bfb4      	ite	lt
 8005b8a:	4691      	movlt	r9, r2
 8005b8c:	f04f 0901 	movge.w	r9, #1
 8005b90:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8005b94:	f7fb f80c 	bl	8000bb0 <MCM_Trig_Functions>
 8005b98:	9b04      	ldr	r3, [sp, #16]
 8005b9a:	9a03      	ldr	r2, [sp, #12]
 8005b9c:	fb13 f309 	smulbb	r3, r3, r9
 8005ba0:	fb12 f109 	smulbb	r1, r2, r9
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	fb10 f303 	smulbb	r3, r0, r3
 8005baa:	fb10 f021 	smultb	r0, r0, r1
 8005bae:	f343 33cf 	sbfx	r3, r3, #15, #16
 8005bb2:	f340 31cf 	sbfx	r1, r0, #15, #16
 8005bb6:	1a59      	subs	r1, r3, r1
 8005bb8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8005bbc:	f7fe ff60 	bl	8004a80 <PI_Controller>
 8005bc0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8005bc4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8005bc8:	8220      	strh	r0, [r4, #16]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	bf0a      	itet	eq
 8005bd2:	2200      	moveq	r2, #0
 8005bd4:	461a      	movne	r2, r3
 8005bd6:	4613      	moveq	r3, r2
 8005bd8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005bdc:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8005be0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8005be4:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8005be8:	88a2      	ldrh	r2, [r4, #4]
 8005bea:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8005bee:	4410      	add	r0, r2
 8005bf0:	b200      	sxth	r0, r0
 8005bf2:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8005bf6:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8005bfa:	66e6      	str	r6, [r4, #108]	; 0x6c
 8005bfc:	80a0      	strh	r0, [r4, #4]
 8005bfe:	b009      	add	sp, #36	; 0x24
 8005c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c04:	1a1d      	subs	r5, r3, r0
 8005c06:	45ae      	cmp	lr, r5
 8005c08:	bfdc      	itt	le
 8005c0a:	66a5      	strle	r5, [r4, #104]	; 0x68
 8005c0c:	46ae      	movle	lr, r5
 8005c0e:	e73a      	b.n	8005a86 <STO_PLL_CalcElAngle+0x1e>
 8005c10:	fa1f f982 	uxth.w	r9, r2
 8005c14:	e7bc      	b.n	8005b90 <STO_PLL_CalcElAngle+0x128>
 8005c16:	1b9b      	subs	r3, r3, r6
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bfdc      	itt	le
 8005c1c:	6663      	strle	r3, [r4, #100]	; 0x64
 8005c1e:	461a      	movle	r2, r3
 8005c20:	e754      	b.n	8005acc <STO_PLL_CalcElAngle+0x64>
 8005c22:	1b9a      	subs	r2, r3, r6
 8005c24:	4290      	cmp	r0, r2
 8005c26:	bfdc      	itt	le
 8005c28:	6622      	strle	r2, [r4, #96]	; 0x60
 8005c2a:	4610      	movle	r0, r2
 8005c2c:	e748      	b.n	8005ac0 <STO_PLL_CalcElAngle+0x58>
 8005c2e:	1a1b      	subs	r3, r3, r0
 8005c30:	459c      	cmp	ip, r3
 8005c32:	bfdc      	itt	le
 8005c34:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8005c36:	469c      	movle	ip, r3
 8005c38:	e733      	b.n	8005aa2 <STO_PLL_CalcElAngle+0x3a>
 8005c3a:	bf00      	nop

08005c3c <STO_PLL_CalcAvrgMecSpeedUnit>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8005c42:	f1bc 0f00 	cmp.w	ip, #0
 8005c46:	f000 8095 	beq.w	8005d74 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8005c4a:	f10c 37ff 	add.w	r7, ip, #4294967295
 8005c4e:	b2fb      	uxtb	r3, r7
 8005c50:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8005c54:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8005c58:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8005c64:	4297      	cmp	r7, r2
 8005c66:	442b      	add	r3, r5
 8005c68:	d1fa      	bne.n	8005c60 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 8005c6a:	fb93 f5fc 	sdiv	r5, r3, ip
 8005c6e:	2400      	movs	r4, #0
 8005c70:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8005c74:	1b5b      	subs	r3, r3, r5
 8005c76:	42b2      	cmp	r2, r6
 8005c78:	fb03 4403 	mla	r4, r3, r3, r4
 8005c7c:	d1f8      	bne.n	8005c70 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 8005c7e:	fb94 f4fc 	sdiv	r4, r4, ip
 8005c82:	fb05 fc05 	mul.w	ip, r5, r5
 8005c86:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8005c8a:	8b43      	ldrh	r3, [r0, #26]
 8005c8c:	7887      	ldrb	r7, [r0, #2]
 8005c8e:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8005c92:	fb0c fc02 	mul.w	ip, ip, r2
 8005c96:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8005c9a:	fb05 f303 	mul.w	r3, r5, r3
 8005c9e:	45a4      	cmp	ip, r4
 8005ca0:	69c2      	ldr	r2, [r0, #28]
 8005ca2:	bfd4      	ite	le
 8005ca4:	2500      	movle	r5, #0
 8005ca6:	2501      	movgt	r5, #1
 8005ca8:	fb03 f307 	mul.w	r3, r3, r7
 8005cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb0:	7842      	ldrb	r2, [r0, #1]
 8005cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb6:	b21a      	sxth	r2, r3
 8005cb8:	800a      	strh	r2, [r1, #0]
 8005cba:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8005cbe:	8182      	strh	r2, [r0, #12]
 8005cc0:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8005cc4:	b99e      	cbnz	r6, 8005cee <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8005cc6:	b355      	cbz	r5, 8005d1e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8005cc8:	45a4      	cmp	ip, r4
 8005cca:	dc25      	bgt.n	8005d18 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8005ccc:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8005cd0:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8005cde:	d81e      	bhi.n	8005d1e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	78c2      	ldrb	r2, [r0, #3]
 8005ce4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8005ce8:	7002      	strb	r2, [r0, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8005cf4:	bfb8      	it	lt
 8005cf6:	425b      	neglt	r3, r3
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dc14      	bgt.n	8005d26 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4613      	mov	r3, r2
 8005d00:	4616      	mov	r6, r2
 8005d02:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8005d06:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8005d0a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8005d0e:	b135      	cbz	r5, 8005d1e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8005d10:	45a4      	cmp	ip, r4
 8005d12:	dddb      	ble.n	8005ccc <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d0d9      	beq.n	8005ccc <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8005d1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005d22:	f7ff b9b1 	b.w	8005088 <SPD_IsMecSpeedReliable>
 8005d26:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8005d2a:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8005d2e:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8005d32:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8005d36:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8005d3a:	fb93 f3fe 	sdiv	r3, r3, lr
 8005d3e:	fb03 f202 	mul.w	r2, r3, r2
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	bfb8      	it	lt
 8005d46:	323f      	addlt	r2, #63	; 0x3f
 8005d48:	1192      	asrs	r2, r2, #6
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	fb07 f707 	mul.w	r7, r7, r7
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	fb06 7606 	mla	r6, r6, r6, r7
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8005d5e:	bfb8      	it	lt
 8005d60:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8005d64:	1192      	asrs	r2, r2, #6
 8005d66:	fb07 3212 	mls	r2, r7, r2, r3
 8005d6a:	4296      	cmp	r6, r2
 8005d6c:	bfd4      	ite	le
 8005d6e:	2200      	movle	r2, #0
 8005d70:	2201      	movgt	r2, #1
 8005d72:	e7c6      	b.n	8005d02 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8005d74:	4664      	mov	r4, ip
 8005d76:	4665      	mov	r5, ip
 8005d78:	e785      	b.n	8005c86 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8005d7a:	bf00      	nop

08005d7c <STO_PLL_CalcAvrgElSpeedDpp>:
 8005d7c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8005d80:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8005d84:	b470      	push	{r4, r5, r6}
 8005d86:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8005d8a:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8005d8e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8005d92:	b2a6      	uxth	r6, r4
 8005d94:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8005d98:	1af3      	subs	r3, r6, r3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	442a      	add	r2, r5
 8005d9e:	b19b      	cbz	r3, 8005dc8 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8005da0:	440b      	add	r3, r1
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	b219      	sxth	r1, r3
 8005da6:	428c      	cmp	r4, r1
 8005da8:	bfdc      	itt	le
 8005daa:	1b9b      	suble	r3, r3, r6
 8005dac:	b219      	sxthle	r1, r3
 8005dae:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8005db2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8005dbc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005dc0:	4113      	asrs	r3, r2
 8005dc2:	81c3      	strh	r3, [r0, #14]
 8005dc4:	bc70      	pop	{r4, r5, r6}
 8005dc6:	4770      	bx	lr
 8005dc8:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	e7f3      	b.n	8005db8 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08005dd0 <STO_PLL_Clear>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4604      	mov	r4, r0
 8005dda:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8005dde:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8005de2:	8081      	strh	r1, [r0, #4]
 8005de4:	81c1      	strh	r1, [r0, #14]
 8005de6:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8005dea:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8005dee:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8005df2:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8005df6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8005dfa:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8005dfe:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 8005e02:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8005e06:	b132      	cbz	r2, 8005e16 <STO_PLL_Clear+0x46>
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	3201      	adds	r2, #1
 8005e0e:	0052      	lsls	r2, r2, #1
 8005e10:	3074      	adds	r0, #116	; 0x74
 8005e12:	f000 f92b 	bl	800606c <memset>
 8005e16:	2100      	movs	r1, #0
 8005e18:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8005e1c:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8005e20:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8005e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e28:	f7fe be1e 	b.w	8004a68 <PID_SetIntegralTerm>

08005e2c <STO_PLL_Init>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4604      	mov	r4, r0
 8005e30:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8005e34:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <STO_PLL_Init+0x6c>)
 8005e36:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8005e3a:	fb93 f3f5 	sdiv	r3, r3, r5
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2101      	movs	r1, #1
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8005e48:	8662      	strh	r2, [r4, #50]	; 0x32
 8005e4a:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8005e4e:	b303      	cbz	r3, 8005e92 <STO_PLL_Init+0x66>
 8005e50:	4608      	mov	r0, r1
 8005e52:	e000      	b.n	8005e56 <STO_PLL_Init+0x2a>
 8005e54:	4611      	mov	r1, r2
 8005e56:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005e5a:	1c4a      	adds	r2, r1, #1
 8005e5c:	105b      	asrs	r3, r3, #1
 8005e5e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8005e62:	b292      	uxth	r2, r2
 8005e64:	d1f6      	bne.n	8005e54 <STO_PLL_Init+0x28>
 8005e66:	b200      	sxth	r0, r0
 8005e68:	fb05 f200 	mul.w	r2, r5, r0
 8005e6c:	8661      	strh	r1, [r4, #50]	; 0x32
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <STO_PLL_Init+0x70>)
 8005e70:	8620      	strh	r0, [r4, #48]	; 0x30
 8005e72:	fb83 1302 	smull	r1, r3, r3, r2
 8005e76:	17d2      	asrs	r2, r2, #31
 8005e78:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8005e7c:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7ff ffa6 	bl	8005dd0 <STO_PLL_Clear>
 8005e84:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8005e88:	f7fe fdda 	bl	8004a40 <PID_HandleInit>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	8263      	strh	r3, [r4, #18]
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
 8005e92:	462a      	mov	r2, r5
 8005e94:	4608      	mov	r0, r1
 8005e96:	e7ea      	b.n	8005e6e <STO_PLL_Init+0x42>
 8005e98:	000fea5e 	.word	0x000fea5e
 8005e9c:	06488dc5 	.word	0x06488dc5

08005ea0 <STO_PLL_IsObserverConverged>:
 8005ea0:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	b10a      	cbz	r2, 8005eac <STO_PLL_IsObserverConverged+0xc>
 8005ea8:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8005eac:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d143      	bne.n	8005f3c <STO_PLL_IsObserverConverged+0x9c>
 8005eb4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005eb8:	b430      	push	{r4, r5}
 8005eba:	fb02 f501 	mul.w	r5, r2, r1
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	dd34      	ble.n	8005f2e <STO_PLL_IsObserverConverged+0x8e>
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	bfbc      	itt	lt
 8005ec8:	4252      	neglt	r2, r2
 8005eca:	b212      	sxthlt	r2, r2
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	bfbc      	itt	lt
 8005ed0:	4249      	neglt	r1, r1
 8005ed2:	b20c      	sxthlt	r4, r1
 8005ed4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 8005ed8:	b359      	cbz	r1, 8005f32 <STO_PLL_IsObserverConverged+0x92>
 8005eda:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8005ede:	b291      	uxth	r1, r2
 8005ee0:	428d      	cmp	r5, r1
 8005ee2:	d226      	bcs.n	8005f32 <STO_PLL_IsObserverConverged+0x92>
 8005ee4:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 8005ee8:	fb04 f101 	mul.w	r1, r4, r1
 8005eec:	2900      	cmp	r1, #0
 8005eee:	bfb8      	it	lt
 8005ef0:	310f      	addlt	r1, #15
 8005ef2:	f341 110f 	sbfx	r1, r1, #4, #16
 8005ef6:	428a      	cmp	r2, r1
 8005ef8:	db1b      	blt.n	8005f32 <STO_PLL_IsObserverConverged+0x92>
 8005efa:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 8005efe:	fb04 f101 	mul.w	r1, r4, r1
 8005f02:	2900      	cmp	r1, #0
 8005f04:	bfb8      	it	lt
 8005f06:	310f      	addlt	r1, #15
 8005f08:	f341 110f 	sbfx	r1, r1, #4, #16
 8005f0c:	428a      	cmp	r2, r1
 8005f0e:	dc10      	bgt.n	8005f32 <STO_PLL_IsObserverConverged+0x92>
 8005f10:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8005f14:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 8005f18:	3201      	adds	r2, #1
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	4291      	cmp	r1, r2
 8005f1e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8005f22:	d804      	bhi.n	8005f2e <STO_PLL_IsObserverConverged+0x8e>
 8005f24:	2001      	movs	r0, #1
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	bc30      	pop	{r4, r5}
 8005f30:	4770      	bx	lr
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8005f38:	bc30      	pop	{r4, r5}
 8005f3a:	4770      	bx	lr
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	4770      	bx	lr

08005f48 <STO_PLL_GetEstimatedBemf>:
 8005f48:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f362 000f 	bfi	r0, r2, #0, #16
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	b082      	sub	sp, #8
 8005f56:	f363 401f 	bfi	r0, r3, #16, #16
 8005f5a:	b002      	add	sp, #8
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <STO_PLL_GetEstimatedCurrent>:
 8005f60:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8005f64:	b410      	push	{r4}
 8005f66:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8005f6a:	4122      	asrs	r2, r4
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	4123      	asrs	r3, r4
 8005f70:	2100      	movs	r1, #0
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f362 010f 	bfi	r1, r2, #0, #16
 8005f78:	f363 411f 	bfi	r1, r3, #16, #16
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	4608      	mov	r0, r1
 8005f80:	b003      	add	sp, #12
 8005f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <STO_PLL_GetObserverGains>:
 8005f88:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8005f8c:	800b      	strh	r3, [r1, #0]
 8005f8e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8005f92:	8013      	strh	r3, [r2, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <STO_PLL_SetObserverGains>:
 8005f98:	8441      	strh	r1, [r0, #34]	; 0x22
 8005f9a:	84c2      	strh	r2, [r0, #38]	; 0x26
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop

08005fa0 <STO_GetPLLGains>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	460e      	mov	r6, r1
 8005faa:	4615      	mov	r5, r2
 8005fac:	f7fe fd54 	bl	8004a58 <PID_GetKP>
 8005fb0:	8030      	strh	r0, [r6, #0]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7fe fd54 	bl	8004a60 <PID_GetKI>
 8005fb8:	8028      	strh	r0, [r5, #0]
 8005fba:	bd70      	pop	{r4, r5, r6, pc}

08005fbc <STO_SetPLLGains>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8005fc2:	4615      	mov	r5, r2
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f7fe fd43 	bl	8004a50 <PID_SetKP>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4620      	mov	r0, r4
 8005fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd2:	f7fe bd3f 	b.w	8004a54 <PID_SetKI>
 8005fd6:	bf00      	nop

08005fd8 <STO_OTF_ResetPLL>:
 8005fd8:	6800      	ldr	r0, [r0, #0]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	3034      	adds	r0, #52	; 0x34
 8005fde:	f7fe bd43 	b.w	8004a68 <PID_SetIntegralTerm>
 8005fe2:	bf00      	nop

08005fe4 <STO_ResetPLL>:
 8005fe4:	3034      	adds	r0, #52	; 0x34
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	f7fe bd3e 	b.w	8004a68 <PID_SetIntegralTerm>

08005fec <STO_PLL_GetEstimatedBemfLevel>:
 8005fec:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop

08005ff4 <STO_PLL_GetObservedBemfLevel>:
 8005ff4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop

08005ffc <STO_PLL_IsVarianceTight>:
 8005ffc:	6803      	ldr	r3, [r0, #0]
 8005ffe:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 8006002:	4770      	bx	lr

08006004 <STO_PLL_ForceConvergency1>:
 8006004:	6803      	ldr	r3, [r0, #0]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop

08006010 <STO_PLL_ForceConvergency2>:
 8006010:	6803      	ldr	r3, [r0, #0]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop

0800601c <STO_SetDirection>:
 800601c:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop

08006024 <__libc_init_array>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4e0d      	ldr	r6, [pc, #52]	; (800605c <__libc_init_array+0x38>)
 8006028:	4c0d      	ldr	r4, [pc, #52]	; (8006060 <__libc_init_array+0x3c>)
 800602a:	1ba4      	subs	r4, r4, r6
 800602c:	10a4      	asrs	r4, r4, #2
 800602e:	2500      	movs	r5, #0
 8006030:	42a5      	cmp	r5, r4
 8006032:	d109      	bne.n	8006048 <__libc_init_array+0x24>
 8006034:	4e0b      	ldr	r6, [pc, #44]	; (8006064 <__libc_init_array+0x40>)
 8006036:	4c0c      	ldr	r4, [pc, #48]	; (8006068 <__libc_init_array+0x44>)
 8006038:	f000 f820 	bl	800607c <_init>
 800603c:	1ba4      	subs	r4, r4, r6
 800603e:	10a4      	asrs	r4, r4, #2
 8006040:	2500      	movs	r5, #0
 8006042:	42a5      	cmp	r5, r4
 8006044:	d105      	bne.n	8006052 <__libc_init_array+0x2e>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800604c:	4798      	blx	r3
 800604e:	3501      	adds	r5, #1
 8006050:	e7ee      	b.n	8006030 <__libc_init_array+0xc>
 8006052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006056:	4798      	blx	r3
 8006058:	3501      	adds	r5, #1
 800605a:	e7f2      	b.n	8006042 <__libc_init_array+0x1e>
 800605c:	0800630c 	.word	0x0800630c
 8006060:	0800630c 	.word	0x0800630c
 8006064:	0800630c 	.word	0x0800630c
 8006068:	08006310 	.word	0x08006310

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <_init>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr

08006088 <_fini>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	bf00      	nop
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr
